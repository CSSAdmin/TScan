//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F2550TaxRollCorrectionData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F2550TaxRollCorrectionData : global::System.Data.DataSet {
        
        private ListAttachmentDetailsTableDataTable tableListAttachmentDetailsTable;
        
        private ListCorrectionCodeDataTable tableListCorrectionCode;
        
        private ListParcelDetailsTableDataTable tableListParcelDetailsTable;
        
        private EditStatementDataTableDataTable tableEditStatementDataTable;
        
        private ConfiguredStateDataTable tableConfiguredState;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F2550TaxRollCorrectionData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F2550TaxRollCorrectionData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListAttachmentDetailsTable"] != null)) {
                    base.Tables.Add(new ListAttachmentDetailsTableDataTable(ds.Tables["ListAttachmentDetailsTable"]));
                }
                if ((ds.Tables["ListCorrectionCode"] != null)) {
                    base.Tables.Add(new ListCorrectionCodeDataTable(ds.Tables["ListCorrectionCode"]));
                }
                if ((ds.Tables["ListParcelDetailsTable"] != null)) {
                    base.Tables.Add(new ListParcelDetailsTableDataTable(ds.Tables["ListParcelDetailsTable"]));
                }
                if ((ds.Tables["EditStatementDataTable"] != null)) {
                    base.Tables.Add(new EditStatementDataTableDataTable(ds.Tables["EditStatementDataTable"]));
                }
                if ((ds.Tables["ConfiguredState"] != null)) {
                    base.Tables.Add(new ConfiguredStateDataTable(ds.Tables["ConfiguredState"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAttachmentDetailsTableDataTable ListAttachmentDetailsTable {
            get {
                return this.tableListAttachmentDetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListCorrectionCodeDataTable ListCorrectionCode {
            get {
                return this.tableListCorrectionCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListParcelDetailsTableDataTable ListParcelDetailsTable {
            get {
                return this.tableListParcelDetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EditStatementDataTableDataTable EditStatementDataTable {
            get {
                return this.tableEditStatementDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConfiguredStateDataTable ConfiguredState {
            get {
                return this.tableConfiguredState;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F2550TaxRollCorrectionData cln = ((F2550TaxRollCorrectionData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListAttachmentDetailsTable"] != null)) {
                    base.Tables.Add(new ListAttachmentDetailsTableDataTable(ds.Tables["ListAttachmentDetailsTable"]));
                }
                if ((ds.Tables["ListCorrectionCode"] != null)) {
                    base.Tables.Add(new ListCorrectionCodeDataTable(ds.Tables["ListCorrectionCode"]));
                }
                if ((ds.Tables["ListParcelDetailsTable"] != null)) {
                    base.Tables.Add(new ListParcelDetailsTableDataTable(ds.Tables["ListParcelDetailsTable"]));
                }
                if ((ds.Tables["EditStatementDataTable"] != null)) {
                    base.Tables.Add(new EditStatementDataTableDataTable(ds.Tables["EditStatementDataTable"]));
                }
                if ((ds.Tables["ConfiguredState"] != null)) {
                    base.Tables.Add(new ConfiguredStateDataTable(ds.Tables["ConfiguredState"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListAttachmentDetailsTable = ((ListAttachmentDetailsTableDataTable)(base.Tables["ListAttachmentDetailsTable"]));
            if ((initTable == true)) {
                if ((this.tableListAttachmentDetailsTable != null)) {
                    this.tableListAttachmentDetailsTable.InitVars();
                }
            }
            this.tableListCorrectionCode = ((ListCorrectionCodeDataTable)(base.Tables["ListCorrectionCode"]));
            if ((initTable == true)) {
                if ((this.tableListCorrectionCode != null)) {
                    this.tableListCorrectionCode.InitVars();
                }
            }
            this.tableListParcelDetailsTable = ((ListParcelDetailsTableDataTable)(base.Tables["ListParcelDetailsTable"]));
            if ((initTable == true)) {
                if ((this.tableListParcelDetailsTable != null)) {
                    this.tableListParcelDetailsTable.InitVars();
                }
            }
            this.tableEditStatementDataTable = ((EditStatementDataTableDataTable)(base.Tables["EditStatementDataTable"]));
            if ((initTable == true)) {
                if ((this.tableEditStatementDataTable != null)) {
                    this.tableEditStatementDataTable.InitVars();
                }
            }
            this.tableConfiguredState = ((ConfiguredStateDataTable)(base.Tables["ConfiguredState"]));
            if ((initTable == true)) {
                if ((this.tableConfiguredState != null)) {
                    this.tableConfiguredState.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F2550TaxRollCorrectionData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F2550TaxRollCorrectionData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListAttachmentDetailsTable = new ListAttachmentDetailsTableDataTable();
            base.Tables.Add(this.tableListAttachmentDetailsTable);
            this.tableListCorrectionCode = new ListCorrectionCodeDataTable();
            base.Tables.Add(this.tableListCorrectionCode);
            this.tableListParcelDetailsTable = new ListParcelDetailsTableDataTable();
            base.Tables.Add(this.tableListParcelDetailsTable);
            this.tableEditStatementDataTable = new EditStatementDataTableDataTable();
            base.Tables.Add(this.tableEditStatementDataTable);
            this.tableConfiguredState = new ConfiguredStateDataTable();
            base.Tables.Add(this.tableConfiguredState);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAttachmentDetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListCorrectionCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListParcelDetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEditStatementDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConfiguredState() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F2550TaxRollCorrectionData ds = new F2550TaxRollCorrectionData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListAttachmentDetailsTableRowChangeEventHandler(object sender, ListAttachmentDetailsTableRowChangeEvent e);
        
        public delegate void ListCorrectionCodeRowChangeEventHandler(object sender, ListCorrectionCodeRowChangeEvent e);
        
        public delegate void ListParcelDetailsTableRowChangeEventHandler(object sender, ListParcelDetailsTableRowChangeEvent e);
        
        public delegate void EditStatementDataTableRowChangeEventHandler(object sender, EditStatementDataTableRowChangeEvent e);
        
        public delegate void ConfiguredStateRowChangeEventHandler(object sender, ConfiguredStateRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAttachmentDetailsTableDataTable : global::System.Data.TypedTableBase<ListAttachmentDetailsTableRow> {
            
            private global::System.Data.DataColumn columnExtension;
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnNewKeyID;
            
            private global::System.Data.DataColumn columnFileTypeID;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnIsPrimary;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnIsPublic;
            
            private global::System.Data.DataColumn columnIsRoll;
            
            private global::System.Data.DataColumn columnUserID1;
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnUserID2;
            
            private global::System.Data.DataColumn columnKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentDetailsTableDataTable() {
                this.TableName = "ListAttachmentDetailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAttachmentDetailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAttachmentDetailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewKeyIDColumn {
                get {
                    return this.columnNewKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileTypeIDColumn {
                get {
                    return this.columnFileTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrimaryColumn {
                get {
                    return this.columnIsPrimary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPublicColumn {
                get {
                    return this.columnIsPublic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRollColumn {
                get {
                    return this.columnIsRoll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserID1Column {
                get {
                    return this.columnUserID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserID2Column {
                get {
                    return this.columnUserID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentDetailsTableRow this[int index] {
                get {
                    return ((ListAttachmentDetailsTableRow)(this.Rows[index]));
                }
            }
            
            public event ListAttachmentDetailsTableRowChangeEventHandler ListAttachmentDetailsTableRowChanging;
            
            public event ListAttachmentDetailsTableRowChangeEventHandler ListAttachmentDetailsTableRowChanged;
            
            public event ListAttachmentDetailsTableRowChangeEventHandler ListAttachmentDetailsTableRowDeleting;
            
            public event ListAttachmentDetailsTableRowChangeEventHandler ListAttachmentDetailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAttachmentDetailsTableRow(ListAttachmentDetailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentDetailsTableRow AddListAttachmentDetailsTableRow(string Extension, int Form, int NewKeyID, short FileTypeID, string Source, bool IsPrimary, string Description, System.DateTime EventDate, int UserID, bool IsPublic, bool IsRoll, int UserID1, int ModuleID, int UserID2, int KeyID) {
                ListAttachmentDetailsTableRow rowListAttachmentDetailsTableRow = ((ListAttachmentDetailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Extension,
                        Form,
                        NewKeyID,
                        FileTypeID,
                        Source,
                        IsPrimary,
                        Description,
                        EventDate,
                        UserID,
                        IsPublic,
                        IsRoll,
                        UserID1,
                        ModuleID,
                        UserID2,
                        KeyID};
                rowListAttachmentDetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAttachmentDetailsTableRow);
                return rowListAttachmentDetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAttachmentDetailsTableDataTable cln = ((ListAttachmentDetailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAttachmentDetailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExtension = base.Columns["Extension"];
                this.columnForm = base.Columns["Form"];
                this.columnNewKeyID = base.Columns["NewKeyID"];
                this.columnFileTypeID = base.Columns["FileTypeID"];
                this.columnSource = base.Columns["Source"];
                this.columnIsPrimary = base.Columns["IsPrimary"];
                this.columnDescription = base.Columns["Description"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnUserID = base.Columns["UserID"];
                this.columnIsPublic = base.Columns["IsPublic"];
                this.columnIsRoll = base.Columns["IsRoll"];
                this.columnUserID1 = base.Columns["UserID1"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnUserID2 = base.Columns["UserID2"];
                this.columnKeyID = base.Columns["KeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExtension = new global::System.Data.DataColumn("Extension", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtension);
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnNewKeyID = new global::System.Data.DataColumn("NewKeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewKeyID);
                this.columnFileTypeID = new global::System.Data.DataColumn("FileTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileTypeID);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnIsPrimary = new global::System.Data.DataColumn("IsPrimary", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrimary);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnIsPublic = new global::System.Data.DataColumn("IsPublic", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPublic);
                this.columnIsRoll = new global::System.Data.DataColumn("IsRoll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRoll);
                this.columnUserID1 = new global::System.Data.DataColumn("UserID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID1);
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnUserID2 = new global::System.Data.DataColumn("UserID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID2);
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnExtension.MaxLength = 6;
                this.columnForm.AllowDBNull = false;
                this.columnNewKeyID.ReadOnly = true;
                this.columnSource.MaxLength = 500;
                this.columnIsPrimary.AllowDBNull = false;
                this.columnDescription.MaxLength = 500;
                this.columnUserID.AllowDBNull = false;
                this.columnIsPublic.AllowDBNull = false;
                this.columnIsRoll.AllowDBNull = false;
                this.columnUserID1.ReadOnly = true;
                this.columnModuleID.ReadOnly = true;
                this.columnUserID2.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentDetailsTableRow NewListAttachmentDetailsTableRow() {
                return ((ListAttachmentDetailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAttachmentDetailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAttachmentDetailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAttachmentDetailsTableRowChanged != null)) {
                    this.ListAttachmentDetailsTableRowChanged(this, new ListAttachmentDetailsTableRowChangeEvent(((ListAttachmentDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAttachmentDetailsTableRowChanging != null)) {
                    this.ListAttachmentDetailsTableRowChanging(this, new ListAttachmentDetailsTableRowChangeEvent(((ListAttachmentDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAttachmentDetailsTableRowDeleted != null)) {
                    this.ListAttachmentDetailsTableRowDeleted(this, new ListAttachmentDetailsTableRowChangeEvent(((ListAttachmentDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAttachmentDetailsTableRowDeleting != null)) {
                    this.ListAttachmentDetailsTableRowDeleting(this, new ListAttachmentDetailsTableRowChangeEvent(((ListAttachmentDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAttachmentDetailsTableRow(ListAttachmentDetailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2550TaxRollCorrectionData ds = new F2550TaxRollCorrectionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAttachmentDetailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListCorrectionCodeDataTable : global::System.Data.TypedTableBase<ListCorrectionCodeRow> {
            
            private global::System.Data.DataColumn columnCorrectionCodeID;
            
            private global::System.Data.DataColumn columnCorrectionCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCorrectionCodeDataTable() {
                this.TableName = "ListCorrectionCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCorrectionCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListCorrectionCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CorrectionCodeIDColumn {
                get {
                    return this.columnCorrectionCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CorrectionCodeColumn {
                get {
                    return this.columnCorrectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCorrectionCodeRow this[int index] {
                get {
                    return ((ListCorrectionCodeRow)(this.Rows[index]));
                }
            }
            
            public event ListCorrectionCodeRowChangeEventHandler ListCorrectionCodeRowChanging;
            
            public event ListCorrectionCodeRowChangeEventHandler ListCorrectionCodeRowChanged;
            
            public event ListCorrectionCodeRowChangeEventHandler ListCorrectionCodeRowDeleting;
            
            public event ListCorrectionCodeRowChangeEventHandler ListCorrectionCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListCorrectionCodeRow(ListCorrectionCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCorrectionCodeRow AddListCorrectionCodeRow(byte CorrectionCodeID, string CorrectionCode) {
                ListCorrectionCodeRow rowListCorrectionCodeRow = ((ListCorrectionCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CorrectionCodeID,
                        CorrectionCode};
                rowListCorrectionCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListCorrectionCodeRow);
                return rowListCorrectionCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListCorrectionCodeDataTable cln = ((ListCorrectionCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListCorrectionCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCorrectionCodeID = base.Columns["CorrectionCodeID"];
                this.columnCorrectionCode = base.Columns["CorrectionCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCorrectionCodeID = new global::System.Data.DataColumn("CorrectionCodeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCorrectionCodeID);
                this.columnCorrectionCode = new global::System.Data.DataColumn("CorrectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCorrectionCode);
                this.columnCorrectionCodeID.AllowDBNull = false;
                this.columnCorrectionCodeID.ReadOnly = true;
                this.columnCorrectionCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCorrectionCodeRow NewListCorrectionCodeRow() {
                return ((ListCorrectionCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListCorrectionCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListCorrectionCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListCorrectionCodeRowChanged != null)) {
                    this.ListCorrectionCodeRowChanged(this, new ListCorrectionCodeRowChangeEvent(((ListCorrectionCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListCorrectionCodeRowChanging != null)) {
                    this.ListCorrectionCodeRowChanging(this, new ListCorrectionCodeRowChangeEvent(((ListCorrectionCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListCorrectionCodeRowDeleted != null)) {
                    this.ListCorrectionCodeRowDeleted(this, new ListCorrectionCodeRowChangeEvent(((ListCorrectionCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListCorrectionCodeRowDeleting != null)) {
                    this.ListCorrectionCodeRowDeleting(this, new ListCorrectionCodeRowChangeEvent(((ListCorrectionCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListCorrectionCodeRow(ListCorrectionCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2550TaxRollCorrectionData ds = new F2550TaxRollCorrectionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListCorrectionCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListParcelDetailsTableDataTable : global::System.Data.TypedTableBase<ListParcelDetailsTableRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnParcelType;
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnOrigValue;
            
            private global::System.Data.DataColumn columnNewValue;
            
            private global::System.Data.DataColumn columnIsRetired;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnDOR;
            
            private global::System.Data.DataColumn columnID1;
            
            private global::System.Data.DataColumn columnID2;
            
            private global::System.Data.DataColumn columnMID1;
            
            private global::System.Data.DataColumn columnMID2;
            
            private global::System.Data.DataColumn columnAppraisedValue;
            
            private global::System.Data.DataColumn columnAssessedValue;
            
            private global::System.Data.DataColumn columnTaxableValue;
            
            private global::System.Data.DataColumn columnIsDuplicate;
            
            private global::System.Data.DataColumn columnFilingDate;
            
            private global::System.Data.DataColumn columnNAICS;
            
            private global::System.Data.DataColumn columnBuisnessName;
            
            private global::System.Data.DataColumn columnIsParcelSelected;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnIsEdit;
            
            private global::System.Data.DataColumn columnHyperlinkKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailsTableDataTable() {
                this.TableName = "ListParcelDetailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelDetailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListParcelDetailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeColumn {
                get {
                    return this.columnParcelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrigValueColumn {
                get {
                    return this.columnOrigValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewValueColumn {
                get {
                    return this.columnNewValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRetiredColumn {
                get {
                    return this.columnIsRetired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DORColumn {
                get {
                    return this.columnDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID1Column {
                get {
                    return this.columnID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID2Column {
                get {
                    return this.columnID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID1Column {
                get {
                    return this.columnMID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID2Column {
                get {
                    return this.columnMID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraisedValueColumn {
                get {
                    return this.columnAppraisedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessedValueColumn {
                get {
                    return this.columnAssessedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableValueColumn {
                get {
                    return this.columnTaxableValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDuplicateColumn {
                get {
                    return this.columnIsDuplicate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilingDateColumn {
                get {
                    return this.columnFilingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAICSColumn {
                get {
                    return this.columnNAICS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuisnessNameColumn {
                get {
                    return this.columnBuisnessName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsParcelSelectedColumn {
                get {
                    return this.columnIsParcelSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEditColumn {
                get {
                    return this.columnIsEdit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HyperlinkKeyIDColumn {
                get {
                    return this.columnHyperlinkKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailsTableRow this[int index] {
                get {
                    return ((ListParcelDetailsTableRow)(this.Rows[index]));
                }
            }
            
            public event ListParcelDetailsTableRowChangeEventHandler ListParcelDetailsTableRowChanging;
            
            public event ListParcelDetailsTableRowChangeEventHandler ListParcelDetailsTableRowChanged;
            
            public event ListParcelDetailsTableRowChangeEventHandler ListParcelDetailsTableRowDeleting;
            
            public event ListParcelDetailsTableRowChangeEventHandler ListParcelDetailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListParcelDetailsTableRow(ListParcelDetailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailsTableRow AddListParcelDetailsTableRow(
                        int ParcelID, 
                        string ParcelType, 
                        short TypeID, 
                        string ParcelNumber, 
                        short RollYear, 
                        int DistrictID, 
                        string District, 
                        decimal OrigValue, 
                        decimal NewValue, 
                        string IsRetired, 
                        string IsExempt, 
                        string OwnerName, 
                        int OwnerID, 
                        string Situs, 
                        string Legal, 
                        string DOR, 
                        string ID1, 
                        string ID2, 
                        string MID1, 
                        string MID2, 
                        decimal AppraisedValue, 
                        decimal AssessedValue, 
                        decimal TaxableValue, 
                        int IsDuplicate, 
                        string FilingDate, 
                        string NAICS, 
                        string BuisnessName, 
                        bool IsParcelSelected, 
                        int StatementID, 
                        bool IsEdit, 
                        int HyperlinkKeyID) {
                ListParcelDetailsTableRow rowListParcelDetailsTableRow = ((ListParcelDetailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        ParcelType,
                        TypeID,
                        ParcelNumber,
                        RollYear,
                        DistrictID,
                        District,
                        OrigValue,
                        NewValue,
                        IsRetired,
                        IsExempt,
                        OwnerName,
                        OwnerID,
                        Situs,
                        Legal,
                        DOR,
                        ID1,
                        ID2,
                        MID1,
                        MID2,
                        AppraisedValue,
                        AssessedValue,
                        TaxableValue,
                        IsDuplicate,
                        FilingDate,
                        NAICS,
                        BuisnessName,
                        IsParcelSelected,
                        StatementID,
                        IsEdit,
                        HyperlinkKeyID};
                rowListParcelDetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListParcelDetailsTableRow);
                return rowListParcelDetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListParcelDetailsTableDataTable cln = ((ListParcelDetailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListParcelDetailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnParcelType = base.Columns["ParcelType"];
                this.columnTypeID = base.Columns["TypeID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictID = base.Columns["DistrictID"];
                this.columnDistrict = base.Columns["District"];
                this.columnOrigValue = base.Columns["OrigValue"];
                this.columnNewValue = base.Columns["NewValue"];
                this.columnIsRetired = base.Columns["IsRetired"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnSitus = base.Columns["Situs"];
                this.columnLegal = base.Columns["Legal"];
                this.columnDOR = base.Columns["DOR"];
                this.columnID1 = base.Columns["ID1"];
                this.columnID2 = base.Columns["ID2"];
                this.columnMID1 = base.Columns["MID1"];
                this.columnMID2 = base.Columns["MID2"];
                this.columnAppraisedValue = base.Columns["AppraisedValue"];
                this.columnAssessedValue = base.Columns["AssessedValue"];
                this.columnTaxableValue = base.Columns["TaxableValue"];
                this.columnIsDuplicate = base.Columns["IsDuplicate"];
                this.columnFilingDate = base.Columns["FilingDate"];
                this.columnNAICS = base.Columns["NAICS"];
                this.columnBuisnessName = base.Columns["BuisnessName"];
                this.columnIsParcelSelected = base.Columns["IsParcelSelected"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnIsEdit = base.Columns["IsEdit"];
                this.columnHyperlinkKeyID = base.Columns["HyperlinkKeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelType = new global::System.Data.DataColumn("ParcelType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelType);
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnOrigValue = new global::System.Data.DataColumn("OrigValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrigValue);
                this.columnNewValue = new global::System.Data.DataColumn("NewValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewValue);
                this.columnIsRetired = new global::System.Data.DataColumn("IsRetired", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRetired);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnDOR = new global::System.Data.DataColumn("DOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOR);
                this.columnID1 = new global::System.Data.DataColumn("ID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID1);
                this.columnID2 = new global::System.Data.DataColumn("ID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID2);
                this.columnMID1 = new global::System.Data.DataColumn("MID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID1);
                this.columnMID2 = new global::System.Data.DataColumn("MID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID2);
                this.columnAppraisedValue = new global::System.Data.DataColumn("AppraisedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraisedValue);
                this.columnAssessedValue = new global::System.Data.DataColumn("AssessedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessedValue);
                this.columnTaxableValue = new global::System.Data.DataColumn("TaxableValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxableValue);
                this.columnIsDuplicate = new global::System.Data.DataColumn("IsDuplicate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDuplicate);
                this.columnFilingDate = new global::System.Data.DataColumn("FilingDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilingDate);
                this.columnNAICS = new global::System.Data.DataColumn("NAICS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAICS);
                this.columnBuisnessName = new global::System.Data.DataColumn("BuisnessName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuisnessName);
                this.columnIsParcelSelected = new global::System.Data.DataColumn("IsParcelSelected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsParcelSelected);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnIsEdit = new global::System.Data.DataColumn("IsEdit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEdit);
                this.columnHyperlinkKeyID = new global::System.Data.DataColumn("HyperlinkKeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHyperlinkKeyID);
                this.columnParcelID.AllowDBNull = false;
                this.columnParcelType.MaxLength = 50;
                this.columnParcelNumber.MaxLength = 50;
                this.columnDistrict.MaxLength = 103;
                this.columnIsRetired.MaxLength = 9;
                this.columnIsExempt.MaxLength = 6;
                this.columnOwnerName.MaxLength = 102;
                this.columnSitus.MaxLength = 400;
                this.columnLegal.MaxLength = 5000;
                this.columnDOR.MaxLength = 50;
                this.columnID1.MaxLength = 1000;
                this.columnID2.MaxLength = 1000;
                this.columnMID1.MaxLength = 50;
                this.columnMID2.MaxLength = 50;
                this.columnFilingDate.MaxLength = 50;
                this.columnNAICS.MaxLength = 50;
                this.columnBuisnessName.MaxLength = 250;
                this.columnIsParcelSelected.DefaultValue = ((bool)(true));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailsTableRow NewListParcelDetailsTableRow() {
                return ((ListParcelDetailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListParcelDetailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListParcelDetailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListParcelDetailsTableRowChanged != null)) {
                    this.ListParcelDetailsTableRowChanged(this, new ListParcelDetailsTableRowChangeEvent(((ListParcelDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListParcelDetailsTableRowChanging != null)) {
                    this.ListParcelDetailsTableRowChanging(this, new ListParcelDetailsTableRowChangeEvent(((ListParcelDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListParcelDetailsTableRowDeleted != null)) {
                    this.ListParcelDetailsTableRowDeleted(this, new ListParcelDetailsTableRowChangeEvent(((ListParcelDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListParcelDetailsTableRowDeleting != null)) {
                    this.ListParcelDetailsTableRowDeleting(this, new ListParcelDetailsTableRowChangeEvent(((ListParcelDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListParcelDetailsTableRow(ListParcelDetailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2550TaxRollCorrectionData ds = new F2550TaxRollCorrectionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListParcelDetailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EditStatementDataTableDataTable : global::System.Data.TypedTableBase<EditStatementDataTableRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnIsEdit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditStatementDataTableDataTable() {
                this.TableName = "EditStatementDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EditStatementDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EditStatementDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEditColumn {
                get {
                    return this.columnIsEdit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditStatementDataTableRow this[int index] {
                get {
                    return ((EditStatementDataTableRow)(this.Rows[index]));
                }
            }
            
            public event EditStatementDataTableRowChangeEventHandler EditStatementDataTableRowChanging;
            
            public event EditStatementDataTableRowChangeEventHandler EditStatementDataTableRowChanged;
            
            public event EditStatementDataTableRowChangeEventHandler EditStatementDataTableRowDeleting;
            
            public event EditStatementDataTableRowChangeEventHandler EditStatementDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEditStatementDataTableRow(EditStatementDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditStatementDataTableRow AddEditStatementDataTableRow(int ParcelID, int StatementID, int TypeID, int OwnerID, bool IsEdit) {
                EditStatementDataTableRow rowEditStatementDataTableRow = ((EditStatementDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        StatementID,
                        TypeID,
                        OwnerID,
                        IsEdit};
                rowEditStatementDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEditStatementDataTableRow);
                return rowEditStatementDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EditStatementDataTableDataTable cln = ((EditStatementDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EditStatementDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnTypeID = base.Columns["TypeID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnIsEdit = base.Columns["IsEdit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnIsEdit = new global::System.Data.DataColumn("IsEdit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEdit);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditStatementDataTableRow NewEditStatementDataTableRow() {
                return ((EditStatementDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EditStatementDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EditStatementDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EditStatementDataTableRowChanged != null)) {
                    this.EditStatementDataTableRowChanged(this, new EditStatementDataTableRowChangeEvent(((EditStatementDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EditStatementDataTableRowChanging != null)) {
                    this.EditStatementDataTableRowChanging(this, new EditStatementDataTableRowChangeEvent(((EditStatementDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EditStatementDataTableRowDeleted != null)) {
                    this.EditStatementDataTableRowDeleted(this, new EditStatementDataTableRowChangeEvent(((EditStatementDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EditStatementDataTableRowDeleting != null)) {
                    this.EditStatementDataTableRowDeleting(this, new EditStatementDataTableRowChangeEvent(((EditStatementDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEditStatementDataTableRow(EditStatementDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2550TaxRollCorrectionData ds = new F2550TaxRollCorrectionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EditStatementDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConfiguredStateDataTable : global::System.Data.TypedTableBase<ConfiguredStateRow> {
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnAutoCompleteValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateDataTable() {
                this.TableName = "ConfiguredState";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfiguredStateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConfiguredStateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AutoCompleteValueColumn {
                get {
                    return this.columnAutoCompleteValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRow this[int index] {
                get {
                    return ((ConfiguredStateRow)(this.Rows[index]));
                }
            }
            
            public event ConfiguredStateRowChangeEventHandler ConfiguredStateRowChanging;
            
            public event ConfiguredStateRowChangeEventHandler ConfiguredStateRowChanged;
            
            public event ConfiguredStateRowChangeEventHandler ConfiguredStateRowDeleting;
            
            public event ConfiguredStateRowChangeEventHandler ConfiguredStateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConfiguredStateRow(ConfiguredStateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRow AddConfiguredStateRow(string State, short AutoCompleteValue) {
                ConfiguredStateRow rowConfiguredStateRow = ((ConfiguredStateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        State,
                        AutoCompleteValue};
                rowConfiguredStateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConfiguredStateRow);
                return rowConfiguredStateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConfiguredStateDataTable cln = ((ConfiguredStateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConfiguredStateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnState = base.Columns["State"];
                this.columnAutoCompleteValue = base.Columns["AutoCompleteValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnAutoCompleteValue = new global::System.Data.DataColumn("AutoCompleteValue", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAutoCompleteValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRow NewConfiguredStateRow() {
                return ((ConfiguredStateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConfiguredStateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConfiguredStateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConfiguredStateRowChanged != null)) {
                    this.ConfiguredStateRowChanged(this, new ConfiguredStateRowChangeEvent(((ConfiguredStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConfiguredStateRowChanging != null)) {
                    this.ConfiguredStateRowChanging(this, new ConfiguredStateRowChangeEvent(((ConfiguredStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConfiguredStateRowDeleted != null)) {
                    this.ConfiguredStateRowDeleted(this, new ConfiguredStateRowChangeEvent(((ConfiguredStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConfiguredStateRowDeleting != null)) {
                    this.ConfiguredStateRowDeleting(this, new ConfiguredStateRowChangeEvent(((ConfiguredStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConfiguredStateRow(ConfiguredStateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2550TaxRollCorrectionData ds = new F2550TaxRollCorrectionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConfiguredStateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAttachmentDetailsTableRow : global::System.Data.DataRow {
            
            private ListAttachmentDetailsTableDataTable tableListAttachmentDetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAttachmentDetailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAttachmentDetailsTable = ((ListAttachmentDetailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableListAttachmentDetailsTable.ExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Extension\' in table \'ListAttachmentDetailsTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.ExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    return ((int)(this[this.tableListAttachmentDetailsTable.FormColumn]));
                }
                set {
                    this[this.tableListAttachmentDetailsTable.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewKeyID {
                get {
                    try {
                        return ((int)(this[this.tableListAttachmentDetailsTable.NewKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewKeyID\' in table \'ListAttachmentDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.NewKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short FileTypeID {
                get {
                    try {
                        return ((short)(this[this.tableListAttachmentDetailsTable.FileTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileTypeID\' in table \'ListAttachmentDetailsTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.FileTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableListAttachmentDetailsTable.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'ListAttachmentDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimary {
                get {
                    return ((bool)(this[this.tableListAttachmentDetailsTable.IsPrimaryColumn]));
                }
                set {
                    this[this.tableListAttachmentDetailsTable.IsPrimaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListAttachmentDetailsTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListAttachmentDetailsTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListAttachmentDetailsTable.EventDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDate\' in table \'ListAttachmentDetailsTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableListAttachmentDetailsTable.UserIDColumn]));
                }
                set {
                    this[this.tableListAttachmentDetailsTable.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPublic {
                get {
                    return ((bool)(this[this.tableListAttachmentDetailsTable.IsPublicColumn]));
                }
                set {
                    this[this.tableListAttachmentDetailsTable.IsPublicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoll {
                get {
                    return ((bool)(this[this.tableListAttachmentDetailsTable.IsRollColumn]));
                }
                set {
                    this[this.tableListAttachmentDetailsTable.IsRollColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID1 {
                get {
                    try {
                        return ((int)(this[this.tableListAttachmentDetailsTable.UserID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID1\' in table \'ListAttachmentDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.UserID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModuleID {
                get {
                    try {
                        return ((int)(this[this.tableListAttachmentDetailsTable.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'ListAttachmentDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID2 {
                get {
                    try {
                        return ((int)(this[this.tableListAttachmentDetailsTable.UserID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID2\' in table \'ListAttachmentDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.UserID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tableListAttachmentDetailsTable.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'ListAttachmentDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAttachmentDetailsTable.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtensionNull() {
                return this.IsNull(this.tableListAttachmentDetailsTable.ExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtensionNull() {
                this[this.tableListAttachmentDetailsTable.ExtensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewKeyIDNull() {
                return this.IsNull(this.tableListAttachmentDetailsTable.NewKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewKeyIDNull() {
                this[this.tableListAttachmentDetailsTable.NewKeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileTypeIDNull() {
                return this.IsNull(this.tableListAttachmentDetailsTable.FileTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileTypeIDNull() {
                this[this.tableListAttachmentDetailsTable.FileTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableListAttachmentDetailsTable.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableListAttachmentDetailsTable.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListAttachmentDetailsTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListAttachmentDetailsTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDateNull() {
                return this.IsNull(this.tableListAttachmentDetailsTable.EventDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDateNull() {
                this[this.tableListAttachmentDetailsTable.EventDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserID1Null() {
                return this.IsNull(this.tableListAttachmentDetailsTable.UserID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserID1Null() {
                this[this.tableListAttachmentDetailsTable.UserID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tableListAttachmentDetailsTable.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tableListAttachmentDetailsTable.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserID2Null() {
                return this.IsNull(this.tableListAttachmentDetailsTable.UserID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserID2Null() {
                this[this.tableListAttachmentDetailsTable.UserID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableListAttachmentDetailsTable.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableListAttachmentDetailsTable.KeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListCorrectionCodeRow : global::System.Data.DataRow {
            
            private ListCorrectionCodeDataTable tableListCorrectionCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCorrectionCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListCorrectionCode = ((ListCorrectionCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte CorrectionCodeID {
                get {
                    return ((byte)(this[this.tableListCorrectionCode.CorrectionCodeIDColumn]));
                }
                set {
                    this[this.tableListCorrectionCode.CorrectionCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CorrectionCode {
                get {
                    try {
                        return ((string)(this[this.tableListCorrectionCode.CorrectionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CorrectionCode\' in table \'ListCorrectionCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCorrectionCode.CorrectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCorrectionCodeNull() {
                return this.IsNull(this.tableListCorrectionCode.CorrectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCorrectionCodeNull() {
                this[this.tableListCorrectionCode.CorrectionCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListParcelDetailsTableRow : global::System.Data.DataRow {
            
            private ListParcelDetailsTableDataTable tableListParcelDetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelDetailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListParcelDetailsTable = ((ListParcelDetailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    return ((int)(this[this.tableListParcelDetailsTable.ParcelIDColumn]));
                }
                set {
                    this[this.tableListParcelDetailsTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelType {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.ParcelTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelType\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.ParcelTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TypeID {
                get {
                    try {
                        return ((short)(this[this.tableListParcelDetailsTable.TypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeID\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListParcelDetailsTable.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelDetailsTable.DistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictID\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OrigValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListParcelDetailsTable.OrigValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrigValue\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.OrigValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NewValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListParcelDetailsTable.NewValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewValue\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.NewValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsRetired {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.IsRetiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRetired\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.IsRetiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsExempt {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelDetailsTable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOR {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.DORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOR\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.DORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID1 {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.ID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID1\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.ID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID2 {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.ID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID2\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.ID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID1 {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.MID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID1\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.MID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID2 {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.MID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID2\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.MID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AppraisedValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListParcelDetailsTable.AppraisedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraisedValue\' in table \'ListParcelDetailsTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.AppraisedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssessedValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListParcelDetailsTable.AssessedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessedValue\' in table \'ListParcelDetailsTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.AssessedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxableValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListParcelDetailsTable.TaxableValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxableValue\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.TaxableValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsDuplicate {
                get {
                    try {
                        return ((int)(this[this.tableListParcelDetailsTable.IsDuplicateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDuplicate\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.IsDuplicateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilingDate {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.FilingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilingDate\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.FilingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAICS {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.NAICSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAICS\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.NAICSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuisnessName {
                get {
                    try {
                        return ((string)(this[this.tableListParcelDetailsTable.BuisnessNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuisnessName\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.BuisnessNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelSelected {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelDetailsTable.IsParcelSelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsParcelSelected\' in table \'ListParcelDetailsTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.IsParcelSelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelDetailsTable.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEdit {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelDetailsTable.IsEditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEdit\' in table \'ListParcelDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.IsEditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HyperlinkKeyID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelDetailsTable.HyperlinkKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HyperlinkKeyID\' in table \'ListParcelDetailsTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelDetailsTable.HyperlinkKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelTypeNull() {
                return this.IsNull(this.tableListParcelDetailsTable.ParcelTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelTypeNull() {
                this[this.tableListParcelDetailsTable.ParcelTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeIDNull() {
                return this.IsNull(this.tableListParcelDetailsTable.TypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeIDNull() {
                this[this.tableListParcelDetailsTable.TypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableListParcelDetailsTable.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableListParcelDetailsTable.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListParcelDetailsTable.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListParcelDetailsTable.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictIDNull() {
                return this.IsNull(this.tableListParcelDetailsTable.DistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictIDNull() {
                this[this.tableListParcelDetailsTable.DistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableListParcelDetailsTable.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableListParcelDetailsTable.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrigValueNull() {
                return this.IsNull(this.tableListParcelDetailsTable.OrigValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrigValueNull() {
                this[this.tableListParcelDetailsTable.OrigValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewValueNull() {
                return this.IsNull(this.tableListParcelDetailsTable.NewValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewValueNull() {
                this[this.tableListParcelDetailsTable.NewValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRetiredNull() {
                return this.IsNull(this.tableListParcelDetailsTable.IsRetiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRetiredNull() {
                this[this.tableListParcelDetailsTable.IsRetiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tableListParcelDetailsTable.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tableListParcelDetailsTable.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableListParcelDetailsTable.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableListParcelDetailsTable.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableListParcelDetailsTable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableListParcelDetailsTable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableListParcelDetailsTable.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableListParcelDetailsTable.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableListParcelDetailsTable.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableListParcelDetailsTable.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDORNull() {
                return this.IsNull(this.tableListParcelDetailsTable.DORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDORNull() {
                this[this.tableListParcelDetailsTable.DORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID1Null() {
                return this.IsNull(this.tableListParcelDetailsTable.ID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID1Null() {
                this[this.tableListParcelDetailsTable.ID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID2Null() {
                return this.IsNull(this.tableListParcelDetailsTable.ID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID2Null() {
                this[this.tableListParcelDetailsTable.ID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID1Null() {
                return this.IsNull(this.tableListParcelDetailsTable.MID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID1Null() {
                this[this.tableListParcelDetailsTable.MID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID2Null() {
                return this.IsNull(this.tableListParcelDetailsTable.MID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID2Null() {
                this[this.tableListParcelDetailsTable.MID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraisedValueNull() {
                return this.IsNull(this.tableListParcelDetailsTable.AppraisedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraisedValueNull() {
                this[this.tableListParcelDetailsTable.AppraisedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessedValueNull() {
                return this.IsNull(this.tableListParcelDetailsTable.AssessedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessedValueNull() {
                this[this.tableListParcelDetailsTable.AssessedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxableValueNull() {
                return this.IsNull(this.tableListParcelDetailsTable.TaxableValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxableValueNull() {
                this[this.tableListParcelDetailsTable.TaxableValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDuplicateNull() {
                return this.IsNull(this.tableListParcelDetailsTable.IsDuplicateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDuplicateNull() {
                this[this.tableListParcelDetailsTable.IsDuplicateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilingDateNull() {
                return this.IsNull(this.tableListParcelDetailsTable.FilingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilingDateNull() {
                this[this.tableListParcelDetailsTable.FilingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAICSNull() {
                return this.IsNull(this.tableListParcelDetailsTable.NAICSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAICSNull() {
                this[this.tableListParcelDetailsTable.NAICSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuisnessNameNull() {
                return this.IsNull(this.tableListParcelDetailsTable.BuisnessNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuisnessNameNull() {
                this[this.tableListParcelDetailsTable.BuisnessNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsParcelSelectedNull() {
                return this.IsNull(this.tableListParcelDetailsTable.IsParcelSelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsParcelSelectedNull() {
                this[this.tableListParcelDetailsTable.IsParcelSelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableListParcelDetailsTable.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableListParcelDetailsTable.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEditNull() {
                return this.IsNull(this.tableListParcelDetailsTable.IsEditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEditNull() {
                this[this.tableListParcelDetailsTable.IsEditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHyperlinkKeyIDNull() {
                return this.IsNull(this.tableListParcelDetailsTable.HyperlinkKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHyperlinkKeyIDNull() {
                this[this.tableListParcelDetailsTable.HyperlinkKeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EditStatementDataTableRow : global::System.Data.DataRow {
            
            private EditStatementDataTableDataTable tableEditStatementDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EditStatementDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEditStatementDataTable = ((EditStatementDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableEditStatementDataTable.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'EditStatementDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditStatementDataTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableEditStatementDataTable.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'EditStatementDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditStatementDataTable.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeID {
                get {
                    try {
                        return ((int)(this[this.tableEditStatementDataTable.TypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeID\' in table \'EditStatementDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditStatementDataTable.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableEditStatementDataTable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'EditStatementDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditStatementDataTable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEdit {
                get {
                    try {
                        return ((bool)(this[this.tableEditStatementDataTable.IsEditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEdit\' in table \'EditStatementDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditStatementDataTable.IsEditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableEditStatementDataTable.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableEditStatementDataTable.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableEditStatementDataTable.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableEditStatementDataTable.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeIDNull() {
                return this.IsNull(this.tableEditStatementDataTable.TypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeIDNull() {
                this[this.tableEditStatementDataTable.TypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableEditStatementDataTable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableEditStatementDataTable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEditNull() {
                return this.IsNull(this.tableEditStatementDataTable.IsEditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEditNull() {
                this[this.tableEditStatementDataTable.IsEditColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConfiguredStateRow : global::System.Data.DataRow {
            
            private ConfiguredStateDataTable tableConfiguredState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfiguredStateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConfiguredState = ((ConfiguredStateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableConfiguredState.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ConfiguredState\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfiguredState.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AutoCompleteValue {
                get {
                    try {
                        return ((short)(this[this.tableConfiguredState.AutoCompleteValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AutoCompleteValue\' in table \'ConfiguredState\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfiguredState.AutoCompleteValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableConfiguredState.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableConfiguredState.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoCompleteValueNull() {
                return this.IsNull(this.tableConfiguredState.AutoCompleteValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoCompleteValueNull() {
                this[this.tableConfiguredState.AutoCompleteValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAttachmentDetailsTableRowChangeEvent : global::System.EventArgs {
            
            private ListAttachmentDetailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentDetailsTableRowChangeEvent(ListAttachmentDetailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAttachmentDetailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListCorrectionCodeRowChangeEvent : global::System.EventArgs {
            
            private ListCorrectionCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCorrectionCodeRowChangeEvent(ListCorrectionCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCorrectionCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListParcelDetailsTableRowChangeEvent : global::System.EventArgs {
            
            private ListParcelDetailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailsTableRowChangeEvent(ListParcelDetailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelDetailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EditStatementDataTableRowChangeEvent : global::System.EventArgs {
            
            private EditStatementDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditStatementDataTableRowChangeEvent(EditStatementDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditStatementDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConfiguredStateRowChangeEvent : global::System.EventArgs {
            
            private ConfiguredStateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRowChangeEvent(ConfiguredStateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591