//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("F35001ValueSliceHeaderData")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F35001ValueSliceHeaderData : System.Data.DataSet {
        
        private ListAdjustmentTypeDataTable tableListAdjustmentType;
        
        private GetValueSliceHeaderDataTable tableGetValueSliceHeader;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F35001ValueSliceHeaderData() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F35001ValueSliceHeaderData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListAdjustmentType"] != null)) {
                    base.Tables.Add(new ListAdjustmentTypeDataTable(ds.Tables["ListAdjustmentType"]));
                }
                if ((ds.Tables["GetValueSliceHeader"] != null)) {
                    base.Tables.Add(new GetValueSliceHeaderDataTable(ds.Tables["GetValueSliceHeader"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAdjustmentTypeDataTable ListAdjustmentType {
            get {
                return this.tableListAdjustmentType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetValueSliceHeaderDataTable GetValueSliceHeader {
            get {
                return this.tableGetValueSliceHeader;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            F35001ValueSliceHeaderData cln = ((F35001ValueSliceHeaderData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListAdjustmentType"] != null)) {
                    base.Tables.Add(new ListAdjustmentTypeDataTable(ds.Tables["ListAdjustmentType"]));
                }
                if ((ds.Tables["GetValueSliceHeader"] != null)) {
                    base.Tables.Add(new GetValueSliceHeaderDataTable(ds.Tables["GetValueSliceHeader"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListAdjustmentType = ((ListAdjustmentTypeDataTable)(base.Tables["ListAdjustmentType"]));
            if ((initTable == true)) {
                if ((this.tableListAdjustmentType != null)) {
                    this.tableListAdjustmentType.InitVars();
                }
            }
            this.tableGetValueSliceHeader = ((GetValueSliceHeaderDataTable)(base.Tables["GetValueSliceHeader"]));
            if ((initTable == true)) {
                if ((this.tableGetValueSliceHeader != null)) {
                    this.tableGetValueSliceHeader.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F35001ValueSliceHeaderData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F35001ValueSliceHeaderData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListAdjustmentType = new ListAdjustmentTypeDataTable();
            base.Tables.Add(this.tableListAdjustmentType);
            this.tableGetValueSliceHeader = new GetValueSliceHeaderDataTable();
            base.Tables.Add(this.tableGetValueSliceHeader);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAdjustmentType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetValueSliceHeader() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            F35001ValueSliceHeaderData ds = new F35001ValueSliceHeaderData();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ListAdjustmentTypeRowChangeEventHandler(object sender, ListAdjustmentTypeRowChangeEvent e);
        
        public delegate void GetValueSliceHeaderRowChangeEventHandler(object sender, GetValueSliceHeaderRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAdjustmentTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAdjustmentTypeID;
            
            private System.Data.DataColumn columnAdjustmentType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeDataTable() {
                this.TableName = "ListAdjustmentType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAdjustmentTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAdjustmentTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AdjustmentTypeIDColumn {
                get {
                    return this.columnAdjustmentTypeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AdjustmentTypeColumn {
                get {
                    return this.columnAdjustmentType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRow this[int index] {
                get {
                    return ((ListAdjustmentTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListAdjustmentTypeRowChangeEventHandler ListAdjustmentTypeRowChanging;
            
            public event ListAdjustmentTypeRowChangeEventHandler ListAdjustmentTypeRowChanged;
            
            public event ListAdjustmentTypeRowChangeEventHandler ListAdjustmentTypeRowDeleting;
            
            public event ListAdjustmentTypeRowChangeEventHandler ListAdjustmentTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAdjustmentTypeRow(ListAdjustmentTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRow AddListAdjustmentTypeRow(int AdjustmentTypeID, string AdjustmentType) {
                ListAdjustmentTypeRow rowListAdjustmentTypeRow = ((ListAdjustmentTypeRow)(this.NewRow()));
                rowListAdjustmentTypeRow.ItemArray = new object[] {
                        AdjustmentTypeID,
                        AdjustmentType};
                this.Rows.Add(rowListAdjustmentTypeRow);
                return rowListAdjustmentTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ListAdjustmentTypeDataTable cln = ((ListAdjustmentTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ListAdjustmentTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdjustmentTypeID = base.Columns["AdjustmentTypeID"];
                this.columnAdjustmentType = base.Columns["AdjustmentType"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdjustmentTypeID = new System.Data.DataColumn("AdjustmentTypeID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentTypeID);
                this.columnAdjustmentType = new System.Data.DataColumn("AdjustmentType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentType);
                this.columnAdjustmentType.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRow NewListAdjustmentTypeRow() {
                return ((ListAdjustmentTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ListAdjustmentTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ListAdjustmentTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAdjustmentTypeRowChanged != null)) {
                    this.ListAdjustmentTypeRowChanged(this, new ListAdjustmentTypeRowChangeEvent(((ListAdjustmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAdjustmentTypeRowChanging != null)) {
                    this.ListAdjustmentTypeRowChanging(this, new ListAdjustmentTypeRowChangeEvent(((ListAdjustmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAdjustmentTypeRowDeleted != null)) {
                    this.ListAdjustmentTypeRowDeleted(this, new ListAdjustmentTypeRowChangeEvent(((ListAdjustmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAdjustmentTypeRowDeleting != null)) {
                    this.ListAdjustmentTypeRowDeleting(this, new ListAdjustmentTypeRowChangeEvent(((ListAdjustmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAdjustmentTypeRow(ListAdjustmentTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                F35001ValueSliceHeaderData ds = new F35001ValueSliceHeaderData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAdjustmentTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetValueSliceHeaderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValueSliceID;
            
            private System.Data.DataColumn columnObjectID;
            
            private System.Data.DataColumn columnObjectTypeID;
            
            private System.Data.DataColumn columnObjectType;
            
            private System.Data.DataColumn columnParcelID;
            
            private System.Data.DataColumn columnSliceTypeID;
            
            private System.Data.DataColumn columnSliceType;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAmount;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnIsNewConstruction;
            
            private System.Data.DataColumn columnIsValue;
            
            private System.Data.DataColumn columnIsRoll;
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnHighestMaxValue;
            
            private System.Data.DataColumn columnLowestMinValue;
            
            private System.Data.DataColumn columnNewConstruction;
            
            private System.Data.DataColumn columnUpdateNewConst;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceHeaderDataTable() {
                this.TableName = "GetValueSliceHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetValueSliceHeaderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetValueSliceHeaderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ObjectTypeIDColumn {
                get {
                    return this.columnObjectTypeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ObjectTypeColumn {
                get {
                    return this.columnObjectType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SliceTypeIDColumn {
                get {
                    return this.columnSliceTypeID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SliceTypeColumn {
                get {
                    return this.columnSliceType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNewConstructionColumn {
                get {
                    return this.columnIsNewConstruction;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsValueColumn {
                get {
                    return this.columnIsValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsRollColumn {
                get {
                    return this.columnIsRoll;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighestMaxValueColumn {
                get {
                    return this.columnHighestMaxValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowestMinValueColumn {
                get {
                    return this.columnLowestMinValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NewConstructionColumn {
                get {
                    return this.columnNewConstruction;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UpdateNewConstColumn {
                get {
                    return this.columnUpdateNewConst;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceHeaderRow this[int index] {
                get {
                    return ((GetValueSliceHeaderRow)(this.Rows[index]));
                }
            }
            
            public event GetValueSliceHeaderRowChangeEventHandler GetValueSliceHeaderRowChanging;
            
            public event GetValueSliceHeaderRowChangeEventHandler GetValueSliceHeaderRowChanged;
            
            public event GetValueSliceHeaderRowChangeEventHandler GetValueSliceHeaderRowDeleting;
            
            public event GetValueSliceHeaderRowChangeEventHandler GetValueSliceHeaderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetValueSliceHeaderRow(GetValueSliceHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceHeaderRow AddGetValueSliceHeaderRow(
                        int ValueSliceID, 
                        int ObjectID, 
                        short ObjectTypeID, 
                        string ObjectType, 
                        int ParcelID, 
                        short SliceTypeID, 
                        string SliceType, 
                        decimal Value, 
                        decimal Amount, 
                        string Description, 
                        bool IsNewConstruction, 
                        bool IsValue, 
                        bool IsRoll, 
                        byte Type, 
                        decimal HighestMaxValue, 
                        decimal LowestMinValue, 
                        decimal NewConstruction, 
                        short UpdateNewConst) {
                GetValueSliceHeaderRow rowGetValueSliceHeaderRow = ((GetValueSliceHeaderRow)(this.NewRow()));
                rowGetValueSliceHeaderRow.ItemArray = new object[] {
                        ValueSliceID,
                        ObjectID,
                        ObjectTypeID,
                        ObjectType,
                        ParcelID,
                        SliceTypeID,
                        SliceType,
                        Value,
                        Amount,
                        Description,
                        IsNewConstruction,
                        IsValue,
                        IsRoll,
                        Type,
                        HighestMaxValue,
                        LowestMinValue,
                        NewConstruction,
                        UpdateNewConst};
                this.Rows.Add(rowGetValueSliceHeaderRow);
                return rowGetValueSliceHeaderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetValueSliceHeaderDataTable cln = ((GetValueSliceHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetValueSliceHeaderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnObjectTypeID = base.Columns["ObjectTypeID"];
                this.columnObjectType = base.Columns["ObjectType"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnSliceTypeID = base.Columns["SliceTypeID"];
                this.columnSliceType = base.Columns["SliceType"];
                this.columnValue = base.Columns["Value"];
                this.columnAmount = base.Columns["Amount"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsNewConstruction = base.Columns["IsNewConstruction"];
                this.columnIsValue = base.Columns["IsValue"];
                this.columnIsRoll = base.Columns["IsRoll"];
                this.columnType = base.Columns["Type"];
                this.columnHighestMaxValue = base.Columns["HighestMaxValue"];
                this.columnLowestMinValue = base.Columns["LowestMinValue"];
                this.columnNewConstruction = base.Columns["NewConstruction"];
                this.columnUpdateNewConst = base.Columns["UpdateNewConst"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValueSliceID = new System.Data.DataColumn("ValueSliceID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnObjectID = new System.Data.DataColumn("ObjectID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnObjectTypeID = new System.Data.DataColumn("ObjectTypeID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectTypeID);
                this.columnObjectType = new System.Data.DataColumn("ObjectType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectType);
                this.columnParcelID = new System.Data.DataColumn("ParcelID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnSliceTypeID = new System.Data.DataColumn("SliceTypeID", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceTypeID);
                this.columnSliceType = new System.Data.DataColumn("SliceType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceType);
                this.columnValue = new System.Data.DataColumn("Value", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnAmount = new System.Data.DataColumn("Amount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsNewConstruction = new System.Data.DataColumn("IsNewConstruction", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNewConstruction);
                this.columnIsValue = new System.Data.DataColumn("IsValue", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValue);
                this.columnIsRoll = new System.Data.DataColumn("IsRoll", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRoll);
                this.columnType = new System.Data.DataColumn("Type", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnHighestMaxValue = new System.Data.DataColumn("HighestMaxValue", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighestMaxValue);
                this.columnLowestMinValue = new System.Data.DataColumn("LowestMinValue", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowestMinValue);
                this.columnNewConstruction = new System.Data.DataColumn("NewConstruction", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewConstruction);
                this.columnUpdateNewConst = new System.Data.DataColumn("UpdateNewConst", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateNewConst);
                this.columnValueSliceID.ReadOnly = true;
                this.columnObjectID.ReadOnly = true;
                this.columnObjectType.MaxLength = 50;
                this.columnParcelID.ReadOnly = true;
                this.columnSliceType.MaxLength = 50;
                this.columnAmount.ReadOnly = true;
                this.columnDescription.MaxLength = 50;
                this.columnHighestMaxValue.ReadOnly = true;
                this.columnLowestMinValue.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceHeaderRow NewGetValueSliceHeaderRow() {
                return ((GetValueSliceHeaderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetValueSliceHeaderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetValueSliceHeaderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetValueSliceHeaderRowChanged != null)) {
                    this.GetValueSliceHeaderRowChanged(this, new GetValueSliceHeaderRowChangeEvent(((GetValueSliceHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetValueSliceHeaderRowChanging != null)) {
                    this.GetValueSliceHeaderRowChanging(this, new GetValueSliceHeaderRowChangeEvent(((GetValueSliceHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetValueSliceHeaderRowDeleted != null)) {
                    this.GetValueSliceHeaderRowDeleted(this, new GetValueSliceHeaderRowChangeEvent(((GetValueSliceHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetValueSliceHeaderRowDeleting != null)) {
                    this.GetValueSliceHeaderRowDeleting(this, new GetValueSliceHeaderRowChangeEvent(((GetValueSliceHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetValueSliceHeaderRow(GetValueSliceHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                F35001ValueSliceHeaderData ds = new F35001ValueSliceHeaderData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetValueSliceHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAdjustmentTypeRow : System.Data.DataRow {
            
            private ListAdjustmentTypeDataTable tableListAdjustmentType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAdjustmentTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAdjustmentType = ((ListAdjustmentTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdjustmentTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListAdjustmentType.AdjustmentTypeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AdjustmentTypeID\' in table \'ListAdjustmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAdjustmentType.AdjustmentTypeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentType {
                get {
                    try {
                        return ((string)(this[this.tableListAdjustmentType.AdjustmentTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AdjustmentType\' in table \'ListAdjustmentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAdjustmentType.AdjustmentTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeIDNull() {
                return this.IsNull(this.tableListAdjustmentType.AdjustmentTypeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeIDNull() {
                this[this.tableListAdjustmentType.AdjustmentTypeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeNull() {
                return this.IsNull(this.tableListAdjustmentType.AdjustmentTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeNull() {
                this[this.tableListAdjustmentType.AdjustmentTypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetValueSliceHeaderRow : System.Data.DataRow {
            
            private GetValueSliceHeaderDataTable tableGetValueSliceHeader;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetValueSliceHeaderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetValueSliceHeader = ((GetValueSliceHeaderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableGetValueSliceHeader.ValueSliceIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.ValueSliceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableGetValueSliceHeader.ObjectIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.ObjectIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ObjectTypeID {
                get {
                    try {
                        return ((short)(this[this.tableGetValueSliceHeader.ObjectTypeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ObjectTypeID\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.ObjectTypeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectType {
                get {
                    try {
                        return ((string)(this[this.tableGetValueSliceHeader.ObjectTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ObjectType\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.ObjectTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableGetValueSliceHeader.ParcelIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.ParcelIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SliceTypeID {
                get {
                    try {
                        return ((short)(this[this.tableGetValueSliceHeader.SliceTypeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SliceTypeID\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.SliceTypeIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SliceType {
                get {
                    try {
                        return ((string)(this[this.tableGetValueSliceHeader.SliceTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SliceType\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.SliceTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value {
                get {
                    try {
                        return ((decimal)(this[this.tableGetValueSliceHeader.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableGetValueSliceHeader.AmountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Amount\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.AmountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetValueSliceHeader.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewConstruction {
                get {
                    try {
                        return ((bool)(this[this.tableGetValueSliceHeader.IsNewConstructionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsNewConstruction\' in table \'GetValueSliceHeader\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.IsNewConstructionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue {
                get {
                    try {
                        return ((bool)(this[this.tableGetValueSliceHeader.IsValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsValue\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.IsValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoll {
                get {
                    try {
                        return ((bool)(this[this.tableGetValueSliceHeader.IsRollColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsRoll\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.IsRollColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Type {
                get {
                    try {
                        return ((byte)(this[this.tableGetValueSliceHeader.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HighestMaxValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetValueSliceHeader.HighestMaxValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HighestMaxValue\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.HighestMaxValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LowestMinValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetValueSliceHeader.LowestMinValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LowestMinValue\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.LowestMinValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NewConstruction {
                get {
                    try {
                        return ((decimal)(this[this.tableGetValueSliceHeader.NewConstructionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NewConstruction\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.NewConstructionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short UpdateNewConst {
                get {
                    try {
                        return ((short)(this[this.tableGetValueSliceHeader.UpdateNewConstColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UpdateNewConst\' in table \'GetValueSliceHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceHeader.UpdateNewConstColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableGetValueSliceHeader.ValueSliceIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableGetValueSliceHeader.ValueSliceIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableGetValueSliceHeader.ObjectIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableGetValueSliceHeader.ObjectIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectTypeIDNull() {
                return this.IsNull(this.tableGetValueSliceHeader.ObjectTypeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectTypeIDNull() {
                this[this.tableGetValueSliceHeader.ObjectTypeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectTypeNull() {
                return this.IsNull(this.tableGetValueSliceHeader.ObjectTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectTypeNull() {
                this[this.tableGetValueSliceHeader.ObjectTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableGetValueSliceHeader.ParcelIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableGetValueSliceHeader.ParcelIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeIDNull() {
                return this.IsNull(this.tableGetValueSliceHeader.SliceTypeIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeIDNull() {
                this[this.tableGetValueSliceHeader.SliceTypeIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeNull() {
                return this.IsNull(this.tableGetValueSliceHeader.SliceTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeNull() {
                this[this.tableGetValueSliceHeader.SliceTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableGetValueSliceHeader.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableGetValueSliceHeader.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableGetValueSliceHeader.AmountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableGetValueSliceHeader.AmountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetValueSliceHeader.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetValueSliceHeader.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNewConstructionNull() {
                return this.IsNull(this.tableGetValueSliceHeader.IsNewConstructionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNewConstructionNull() {
                this[this.tableGetValueSliceHeader.IsNewConstructionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValueNull() {
                return this.IsNull(this.tableGetValueSliceHeader.IsValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValueNull() {
                this[this.tableGetValueSliceHeader.IsValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRollNull() {
                return this.IsNull(this.tableGetValueSliceHeader.IsRollColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRollNull() {
                this[this.tableGetValueSliceHeader.IsRollColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableGetValueSliceHeader.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableGetValueSliceHeader.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighestMaxValueNull() {
                return this.IsNull(this.tableGetValueSliceHeader.HighestMaxValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighestMaxValueNull() {
                this[this.tableGetValueSliceHeader.HighestMaxValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLowestMinValueNull() {
                return this.IsNull(this.tableGetValueSliceHeader.LowestMinValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLowestMinValueNull() {
                this[this.tableGetValueSliceHeader.LowestMinValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewConstructionNull() {
                return this.IsNull(this.tableGetValueSliceHeader.NewConstructionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewConstructionNull() {
                this[this.tableGetValueSliceHeader.NewConstructionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateNewConstNull() {
                return this.IsNull(this.tableGetValueSliceHeader.UpdateNewConstColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateNewConstNull() {
                this[this.tableGetValueSliceHeader.UpdateNewConstColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAdjustmentTypeRowChangeEvent : System.EventArgs {
            
            private ListAdjustmentTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRowChangeEvent(ListAdjustmentTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetValueSliceHeaderRowChangeEvent : System.EventArgs {
            
            private GetValueSliceHeaderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceHeaderRowChangeEvent(GetValueSliceHeaderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591