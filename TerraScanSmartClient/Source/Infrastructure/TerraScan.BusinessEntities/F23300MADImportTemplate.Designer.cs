//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8689
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F23300MADImportTemplate")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F23300MADImportTemplate : global::System.Data.DataSet {
        
        private ListMADImportFileTypeDataTable tableListMADImportFileType;
        
        private GetMADImportTemplateDataTable tableGetMADImportTemplate;
        
        private SaveMADImportTemplateDataTable tableSaveMADImportTemplate;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F23300MADImportTemplate() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F23300MADImportTemplate(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListMADImportFileType"] != null)) {
                    base.Tables.Add(new ListMADImportFileTypeDataTable(ds.Tables["ListMADImportFileType"]));
                }
                if ((ds.Tables["GetMADImportTemplate"] != null)) {
                    base.Tables.Add(new GetMADImportTemplateDataTable(ds.Tables["GetMADImportTemplate"]));
                }
                if ((ds.Tables["SaveMADImportTemplate"] != null)) {
                    base.Tables.Add(new SaveMADImportTemplateDataTable(ds.Tables["SaveMADImportTemplate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMADImportFileTypeDataTable ListMADImportFileType {
            get {
                return this.tableListMADImportFileType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMADImportTemplateDataTable GetMADImportTemplate {
            get {
                return this.tableGetMADImportTemplate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveMADImportTemplateDataTable SaveMADImportTemplate {
            get {
                return this.tableSaveMADImportTemplate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F23300MADImportTemplate cln = ((F23300MADImportTemplate)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListMADImportFileType"] != null)) {
                    base.Tables.Add(new ListMADImportFileTypeDataTable(ds.Tables["ListMADImportFileType"]));
                }
                if ((ds.Tables["GetMADImportTemplate"] != null)) {
                    base.Tables.Add(new GetMADImportTemplateDataTable(ds.Tables["GetMADImportTemplate"]));
                }
                if ((ds.Tables["SaveMADImportTemplate"] != null)) {
                    base.Tables.Add(new SaveMADImportTemplateDataTable(ds.Tables["SaveMADImportTemplate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListMADImportFileType = ((ListMADImportFileTypeDataTable)(base.Tables["ListMADImportFileType"]));
            if ((initTable == true)) {
                if ((this.tableListMADImportFileType != null)) {
                    this.tableListMADImportFileType.InitVars();
                }
            }
            this.tableGetMADImportTemplate = ((GetMADImportTemplateDataTable)(base.Tables["GetMADImportTemplate"]));
            if ((initTable == true)) {
                if ((this.tableGetMADImportTemplate != null)) {
                    this.tableGetMADImportTemplate.InitVars();
                }
            }
            this.tableSaveMADImportTemplate = ((SaveMADImportTemplateDataTable)(base.Tables["SaveMADImportTemplate"]));
            if ((initTable == true)) {
                if ((this.tableSaveMADImportTemplate != null)) {
                    this.tableSaveMADImportTemplate.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F23300MADImportTemplate";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F23300MADImportTemplate.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListMADImportFileType = new ListMADImportFileTypeDataTable();
            base.Tables.Add(this.tableListMADImportFileType);
            this.tableGetMADImportTemplate = new GetMADImportTemplateDataTable();
            base.Tables.Add(this.tableGetMADImportTemplate);
            this.tableSaveMADImportTemplate = new SaveMADImportTemplateDataTable();
            base.Tables.Add(this.tableSaveMADImportTemplate);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMADImportFileType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMADImportTemplate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveMADImportTemplate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F23300MADImportTemplate ds = new F23300MADImportTemplate();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListMADImportFileTypeRowChangeEventHandler(object sender, ListMADImportFileTypeRowChangeEvent e);
        
        public delegate void GetMADImportTemplateRowChangeEventHandler(object sender, GetMADImportTemplateRowChangeEvent e);
        
        public delegate void SaveMADImportTemplateRowChangeEventHandler(object sender, SaveMADImportTemplateRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMADImportFileTypeDataTable : global::System.Data.TypedTableBase<ListMADImportFileTypeRow> {
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADImportFileTypeDataTable() {
                this.TableName = "ListMADImportFileType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMADImportFileTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMADImportFileTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADImportFileTypeRow this[int index] {
                get {
                    return ((ListMADImportFileTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListMADImportFileTypeRowChangeEventHandler ListMADImportFileTypeRowChanging;
            
            public event ListMADImportFileTypeRowChangeEventHandler ListMADImportFileTypeRowChanged;
            
            public event ListMADImportFileTypeRowChangeEventHandler ListMADImportFileTypeRowDeleting;
            
            public event ListMADImportFileTypeRowChangeEventHandler ListMADImportFileTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMADImportFileTypeRow(ListMADImportFileTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADImportFileTypeRow AddListMADImportFileTypeRow(byte TypeID, string TypeName) {
                ListMADImportFileTypeRow rowListMADImportFileTypeRow = ((ListMADImportFileTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TypeID,
                        TypeName};
                rowListMADImportFileTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMADImportFileTypeRow);
                return rowListMADImportFileTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADImportFileTypeRow FindByTypeID(byte TypeID) {
                return ((ListMADImportFileTypeRow)(this.Rows.Find(new object[] {
                            TypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMADImportFileTypeDataTable cln = ((ListMADImportFileTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMADImportFileTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTypeID = base.Columns["TypeID"];
                this.columnTypeName = base.Columns["TypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTypeID}, true));
                this.columnTypeID.AllowDBNull = false;
                this.columnTypeID.Unique = true;
                this.columnTypeName.AllowDBNull = false;
                this.columnTypeName.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADImportFileTypeRow NewListMADImportFileTypeRow() {
                return ((ListMADImportFileTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMADImportFileTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMADImportFileTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMADImportFileTypeRowChanged != null)) {
                    this.ListMADImportFileTypeRowChanged(this, new ListMADImportFileTypeRowChangeEvent(((ListMADImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMADImportFileTypeRowChanging != null)) {
                    this.ListMADImportFileTypeRowChanging(this, new ListMADImportFileTypeRowChangeEvent(((ListMADImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMADImportFileTypeRowDeleted != null)) {
                    this.ListMADImportFileTypeRowDeleted(this, new ListMADImportFileTypeRowChangeEvent(((ListMADImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMADImportFileTypeRowDeleting != null)) {
                    this.ListMADImportFileTypeRowDeleting(this, new ListMADImportFileTypeRowChangeEvent(((ListMADImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMADImportFileTypeRow(ListMADImportFileTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23300MADImportTemplate ds = new F23300MADImportTemplate();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMADImportFileTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMADImportTemplateDataTable : global::System.Data.TypedTableBase<GetMADImportTemplateRow> {
            
            private global::System.Data.DataColumn columnTemplateID;
            
            private global::System.Data.DataColumn columnTemplateName;
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnTypeName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnParcelNumber_Pos;
            
            private global::System.Data.DataColumn columnParcelNumber_Wid;
            
            private global::System.Data.DataColumn columnRollYear_Pos;
            
            private global::System.Data.DataColumn columnRollYear_Wid;
            
            private global::System.Data.DataColumn columnDistrictNumber_Pos;
            
            private global::System.Data.DataColumn columnDistrictNumber_Wid;
            
            private global::System.Data.DataColumn columnOverrideAmount_Pos;
            
            private global::System.Data.DataColumn columnOverrideAmount_Wid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportTemplateDataTable() {
                this.TableName = "GetMADImportTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMADImportTemplateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMADImportTemplateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateNameColumn {
                get {
                    return this.columnTemplateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumber_PosColumn {
                get {
                    return this.columnParcelNumber_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumber_WidColumn {
                get {
                    return this.columnParcelNumber_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYear_PosColumn {
                get {
                    return this.columnRollYear_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYear_WidColumn {
                get {
                    return this.columnRollYear_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumber_PosColumn {
                get {
                    return this.columnDistrictNumber_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumber_WidColumn {
                get {
                    return this.columnDistrictNumber_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmount_PosColumn {
                get {
                    return this.columnOverrideAmount_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmount_WidColumn {
                get {
                    return this.columnOverrideAmount_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportTemplateRow this[int index] {
                get {
                    return ((GetMADImportTemplateRow)(this.Rows[index]));
                }
            }
            
            public event GetMADImportTemplateRowChangeEventHandler GetMADImportTemplateRowChanging;
            
            public event GetMADImportTemplateRowChangeEventHandler GetMADImportTemplateRowChanged;
            
            public event GetMADImportTemplateRowChangeEventHandler GetMADImportTemplateRowDeleting;
            
            public event GetMADImportTemplateRowChangeEventHandler GetMADImportTemplateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMADImportTemplateRow(GetMADImportTemplateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportTemplateRow AddGetMADImportTemplateRow(string TemplateName, byte TypeID, string TypeName, string Description, string FilePath, short ParcelNumber_Pos, short ParcelNumber_Wid, short RollYear_Pos, short RollYear_Wid, int DistrictNumber_Pos, short DistrictNumber_Wid, short OverrideAmount_Pos, short OverrideAmount_Wid) {
                GetMADImportTemplateRow rowGetMADImportTemplateRow = ((GetMADImportTemplateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TemplateName,
                        TypeID,
                        TypeName,
                        Description,
                        FilePath,
                        ParcelNumber_Pos,
                        ParcelNumber_Wid,
                        RollYear_Pos,
                        RollYear_Wid,
                        DistrictNumber_Pos,
                        DistrictNumber_Wid,
                        OverrideAmount_Pos,
                        OverrideAmount_Wid};
                rowGetMADImportTemplateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMADImportTemplateRow);
                return rowGetMADImportTemplateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMADImportTemplateDataTable cln = ((GetMADImportTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMADImportTemplateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnTemplateName = base.Columns["TemplateName"];
                this.columnTypeID = base.Columns["TypeID"];
                this.columnTypeName = base.Columns["TypeName"];
                this.columnDescription = base.Columns["Description"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnParcelNumber_Pos = base.Columns["ParcelNumber_Pos"];
                this.columnParcelNumber_Wid = base.Columns["ParcelNumber_Wid"];
                this.columnRollYear_Pos = base.Columns["RollYear_Pos"];
                this.columnRollYear_Wid = base.Columns["RollYear_Wid"];
                this.columnDistrictNumber_Pos = base.Columns["DistrictNumber_Pos"];
                this.columnDistrictNumber_Wid = base.Columns["DistrictNumber_Wid"];
                this.columnOverrideAmount_Pos = base.Columns["OverrideAmount_Pos"];
                this.columnOverrideAmount_Wid = base.Columns["OverrideAmount_Wid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateID = new global::System.Data.DataColumn("TemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnTemplateName = new global::System.Data.DataColumn("TemplateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateName);
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnParcelNumber_Pos = new global::System.Data.DataColumn("ParcelNumber_Pos", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber_Pos);
                this.columnParcelNumber_Wid = new global::System.Data.DataColumn("ParcelNumber_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber_Wid);
                this.columnRollYear_Pos = new global::System.Data.DataColumn("RollYear_Pos", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear_Pos);
                this.columnRollYear_Wid = new global::System.Data.DataColumn("RollYear_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear_Wid);
                this.columnDistrictNumber_Pos = new global::System.Data.DataColumn("DistrictNumber_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber_Pos);
                this.columnDistrictNumber_Wid = new global::System.Data.DataColumn("DistrictNumber_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber_Wid);
                this.columnOverrideAmount_Pos = new global::System.Data.DataColumn("OverrideAmount_Pos", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount_Pos);
                this.columnOverrideAmount_Wid = new global::System.Data.DataColumn("OverrideAmount_Wid", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount_Wid);
                this.columnTemplateID.AutoIncrement = true;
                this.columnTemplateID.AllowDBNull = false;
                this.columnTemplateID.ReadOnly = true;
                this.columnTemplateName.AllowDBNull = false;
                this.columnTemplateName.MaxLength = 50;
                this.columnTypeID.AllowDBNull = false;
                this.columnTypeName.AllowDBNull = false;
                this.columnTypeName.MaxLength = 50;
                this.columnDescription.MaxLength = 250;
                this.columnFilePath.AllowDBNull = false;
                this.columnFilePath.MaxLength = 250;
                this.columnParcelNumber_Pos.Caption = "StatementID_Pos";
                this.columnParcelNumber_Wid.Caption = "StatementID_Wid";
                this.columnRollYear_Pos.Caption = "StatementNum_Pos";
                this.columnRollYear_Wid.Caption = "Amount_Pos";
                this.columnDistrictNumber_Pos.Caption = "Amount_wid";
                this.columnDistrictNumber_Wid.Caption = "Comment_Pos";
                this.columnOverrideAmount_Pos.Caption = "Comment_Wid";
                this.columnOverrideAmount_Wid.Caption = "BankCode_pos";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportTemplateRow NewGetMADImportTemplateRow() {
                return ((GetMADImportTemplateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMADImportTemplateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMADImportTemplateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMADImportTemplateRowChanged != null)) {
                    this.GetMADImportTemplateRowChanged(this, new GetMADImportTemplateRowChangeEvent(((GetMADImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMADImportTemplateRowChanging != null)) {
                    this.GetMADImportTemplateRowChanging(this, new GetMADImportTemplateRowChangeEvent(((GetMADImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMADImportTemplateRowDeleted != null)) {
                    this.GetMADImportTemplateRowDeleted(this, new GetMADImportTemplateRowChangeEvent(((GetMADImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMADImportTemplateRowDeleting != null)) {
                    this.GetMADImportTemplateRowDeleting(this, new GetMADImportTemplateRowChangeEvent(((GetMADImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMADImportTemplateRow(GetMADImportTemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23300MADImportTemplate ds = new F23300MADImportTemplate();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMADImportTemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveMADImportTemplateDataTable : global::System.Data.TypedTableBase<SaveMADImportTemplateRow> {
            
            private global::System.Data.DataColumn columnTemplateName;
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnParcelNumber_Pos;
            
            private global::System.Data.DataColumn columnParcelNumber_Wid;
            
            private global::System.Data.DataColumn columnRollYear_Pos;
            
            private global::System.Data.DataColumn columnRollYear_Wid;
            
            private global::System.Data.DataColumn columnDistrictNumber_Pos;
            
            private global::System.Data.DataColumn columnDistrictNumber_Wid;
            
            private global::System.Data.DataColumn columnOverrideAmount_Pos;
            
            private global::System.Data.DataColumn columnOverrideAmount_Wid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportTemplateDataTable() {
                this.TableName = "SaveMADImportTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMADImportTemplateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveMADImportTemplateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateNameColumn {
                get {
                    return this.columnTemplateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumber_PosColumn {
                get {
                    return this.columnParcelNumber_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumber_WidColumn {
                get {
                    return this.columnParcelNumber_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYear_PosColumn {
                get {
                    return this.columnRollYear_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYear_WidColumn {
                get {
                    return this.columnRollYear_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumber_PosColumn {
                get {
                    return this.columnDistrictNumber_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumber_WidColumn {
                get {
                    return this.columnDistrictNumber_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmount_PosColumn {
                get {
                    return this.columnOverrideAmount_Pos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmount_WidColumn {
                get {
                    return this.columnOverrideAmount_Wid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportTemplateRow this[int index] {
                get {
                    return ((SaveMADImportTemplateRow)(this.Rows[index]));
                }
            }
            
            public event SaveMADImportTemplateRowChangeEventHandler SaveMADImportTemplateRowChanging;
            
            public event SaveMADImportTemplateRowChangeEventHandler SaveMADImportTemplateRowChanged;
            
            public event SaveMADImportTemplateRowChangeEventHandler SaveMADImportTemplateRowDeleting;
            
            public event SaveMADImportTemplateRowChangeEventHandler SaveMADImportTemplateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveMADImportTemplateRow(SaveMADImportTemplateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportTemplateRow AddSaveMADImportTemplateRow(string TemplateName, int TypeID, string Description, string FilePath, int ParcelNumber_Pos, int ParcelNumber_Wid, int RollYear_Pos, int RollYear_Wid, int DistrictNumber_Pos, int DistrictNumber_Wid, int OverrideAmount_Pos, int OverrideAmount_Wid) {
                SaveMADImportTemplateRow rowSaveMADImportTemplateRow = ((SaveMADImportTemplateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TemplateName,
                        TypeID,
                        Description,
                        FilePath,
                        ParcelNumber_Pos,
                        ParcelNumber_Wid,
                        RollYear_Pos,
                        RollYear_Wid,
                        DistrictNumber_Pos,
                        DistrictNumber_Wid,
                        OverrideAmount_Pos,
                        OverrideAmount_Wid};
                rowSaveMADImportTemplateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveMADImportTemplateRow);
                return rowSaveMADImportTemplateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveMADImportTemplateDataTable cln = ((SaveMADImportTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveMADImportTemplateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateName = base.Columns["TemplateName"];
                this.columnTypeID = base.Columns["TypeID"];
                this.columnDescription = base.Columns["Description"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnParcelNumber_Pos = base.Columns["ParcelNumber_Pos"];
                this.columnParcelNumber_Wid = base.Columns["ParcelNumber_Wid"];
                this.columnRollYear_Pos = base.Columns["RollYear_Pos"];
                this.columnRollYear_Wid = base.Columns["RollYear_Wid"];
                this.columnDistrictNumber_Pos = base.Columns["DistrictNumber_Pos"];
                this.columnDistrictNumber_Wid = base.Columns["DistrictNumber_Wid"];
                this.columnOverrideAmount_Pos = base.Columns["OverrideAmount_Pos"];
                this.columnOverrideAmount_Wid = base.Columns["OverrideAmount_Wid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateName = new global::System.Data.DataColumn("TemplateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateName);
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnParcelNumber_Pos = new global::System.Data.DataColumn("ParcelNumber_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber_Pos);
                this.columnParcelNumber_Wid = new global::System.Data.DataColumn("ParcelNumber_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber_Wid);
                this.columnRollYear_Pos = new global::System.Data.DataColumn("RollYear_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear_Pos);
                this.columnRollYear_Wid = new global::System.Data.DataColumn("RollYear_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear_Wid);
                this.columnDistrictNumber_Pos = new global::System.Data.DataColumn("DistrictNumber_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber_Pos);
                this.columnDistrictNumber_Wid = new global::System.Data.DataColumn("DistrictNumber_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber_Wid);
                this.columnOverrideAmount_Pos = new global::System.Data.DataColumn("OverrideAmount_Pos", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount_Pos);
                this.columnOverrideAmount_Wid = new global::System.Data.DataColumn("OverrideAmount_Wid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount_Wid);
                this.columnTemplateName.AllowDBNull = false;
                this.columnTemplateName.MaxLength = 50;
                this.columnTypeID.AllowDBNull = false;
                this.columnDescription.MaxLength = 250;
                this.columnFilePath.AllowDBNull = false;
                this.columnFilePath.MaxLength = 250;
                this.columnDistrictNumber_Pos.Caption = "PermitNumber_Pos";
                this.columnDistrictNumber_Wid.Caption = "PermitNumber_Wid";
                this.columnOverrideAmount_Pos.Caption = "DateOpened_Pos";
                this.columnOverrideAmount_Wid.Caption = "BankCode_pos";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportTemplateRow NewSaveMADImportTemplateRow() {
                return ((SaveMADImportTemplateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveMADImportTemplateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveMADImportTemplateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveMADImportTemplateRowChanged != null)) {
                    this.SaveMADImportTemplateRowChanged(this, new SaveMADImportTemplateRowChangeEvent(((SaveMADImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveMADImportTemplateRowChanging != null)) {
                    this.SaveMADImportTemplateRowChanging(this, new SaveMADImportTemplateRowChangeEvent(((SaveMADImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveMADImportTemplateRowDeleted != null)) {
                    this.SaveMADImportTemplateRowDeleted(this, new SaveMADImportTemplateRowChangeEvent(((SaveMADImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveMADImportTemplateRowDeleting != null)) {
                    this.SaveMADImportTemplateRowDeleting(this, new SaveMADImportTemplateRowChangeEvent(((SaveMADImportTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveMADImportTemplateRow(SaveMADImportTemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F23300MADImportTemplate ds = new F23300MADImportTemplate();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveMADImportTemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMADImportFileTypeRow : global::System.Data.DataRow {
            
            private ListMADImportFileTypeDataTable tableListMADImportFileType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMADImportFileTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMADImportFileType = ((ListMADImportFileTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TypeID {
                get {
                    return ((byte)(this[this.tableListMADImportFileType.TypeIDColumn]));
                }
                set {
                    this[this.tableListMADImportFileType.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    return ((string)(this[this.tableListMADImportFileType.TypeNameColumn]));
                }
                set {
                    this[this.tableListMADImportFileType.TypeNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMADImportTemplateRow : global::System.Data.DataRow {
            
            private GetMADImportTemplateDataTable tableGetMADImportTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMADImportTemplateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMADImportTemplate = ((GetMADImportTemplateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateID {
                get {
                    return ((int)(this[this.tableGetMADImportTemplate.TemplateIDColumn]));
                }
                set {
                    this[this.tableGetMADImportTemplate.TemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateName {
                get {
                    return ((string)(this[this.tableGetMADImportTemplate.TemplateNameColumn]));
                }
                set {
                    this[this.tableGetMADImportTemplate.TemplateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TypeID {
                get {
                    return ((byte)(this[this.tableGetMADImportTemplate.TypeIDColumn]));
                }
                set {
                    this[this.tableGetMADImportTemplate.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    return ((string)(this[this.tableGetMADImportTemplate.TypeNameColumn]));
                }
                set {
                    this[this.tableGetMADImportTemplate.TypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetMADImportTemplate.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GetMADImportTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportTemplate.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    return ((string)(this[this.tableGetMADImportTemplate.FilePathColumn]));
                }
                set {
                    this[this.tableGetMADImportTemplate.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ParcelNumber_Pos {
                get {
                    try {
                        return ((short)(this[this.tableGetMADImportTemplate.ParcelNumber_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber_Pos\' in table \'GetMADImportTemplate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetMADImportTemplate.ParcelNumber_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ParcelNumber_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetMADImportTemplate.ParcelNumber_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber_Wid\' in table \'GetMADImportTemplate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetMADImportTemplate.ParcelNumber_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear_Pos {
                get {
                    try {
                        return ((short)(this[this.tableGetMADImportTemplate.RollYear_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear_Pos\' in table \'GetMADImportTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportTemplate.RollYear_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetMADImportTemplate.RollYear_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear_Wid\' in table \'GetMADImportTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportTemplate.RollYear_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictNumber_Pos {
                get {
                    try {
                        return ((int)(this[this.tableGetMADImportTemplate.DistrictNumber_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber_Pos\' in table \'GetMADImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportTemplate.DistrictNumber_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DistrictNumber_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetMADImportTemplate.DistrictNumber_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber_Wid\' in table \'GetMADImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportTemplate.DistrictNumber_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short OverrideAmount_Pos {
                get {
                    try {
                        return ((short)(this[this.tableGetMADImportTemplate.OverrideAmount_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount_Pos\' in table \'GetMADImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportTemplate.OverrideAmount_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short OverrideAmount_Wid {
                get {
                    try {
                        return ((short)(this[this.tableGetMADImportTemplate.OverrideAmount_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount_Wid\' in table \'GetMADImportTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetMADImportTemplate.OverrideAmount_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetMADImportTemplate.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetMADImportTemplate.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumber_PosNull() {
                return this.IsNull(this.tableGetMADImportTemplate.ParcelNumber_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumber_PosNull() {
                this[this.tableGetMADImportTemplate.ParcelNumber_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumber_WidNull() {
                return this.IsNull(this.tableGetMADImportTemplate.ParcelNumber_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumber_WidNull() {
                this[this.tableGetMADImportTemplate.ParcelNumber_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYear_PosNull() {
                return this.IsNull(this.tableGetMADImportTemplate.RollYear_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYear_PosNull() {
                this[this.tableGetMADImportTemplate.RollYear_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYear_WidNull() {
                return this.IsNull(this.tableGetMADImportTemplate.RollYear_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYear_WidNull() {
                this[this.tableGetMADImportTemplate.RollYear_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumber_PosNull() {
                return this.IsNull(this.tableGetMADImportTemplate.DistrictNumber_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumber_PosNull() {
                this[this.tableGetMADImportTemplate.DistrictNumber_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumber_WidNull() {
                return this.IsNull(this.tableGetMADImportTemplate.DistrictNumber_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumber_WidNull() {
                this[this.tableGetMADImportTemplate.DistrictNumber_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmount_PosNull() {
                return this.IsNull(this.tableGetMADImportTemplate.OverrideAmount_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmount_PosNull() {
                this[this.tableGetMADImportTemplate.OverrideAmount_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmount_WidNull() {
                return this.IsNull(this.tableGetMADImportTemplate.OverrideAmount_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmount_WidNull() {
                this[this.tableGetMADImportTemplate.OverrideAmount_WidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveMADImportTemplateRow : global::System.Data.DataRow {
            
            private SaveMADImportTemplateDataTable tableSaveMADImportTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMADImportTemplateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveMADImportTemplate = ((SaveMADImportTemplateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateName {
                get {
                    return ((string)(this[this.tableSaveMADImportTemplate.TemplateNameColumn]));
                }
                set {
                    this[this.tableSaveMADImportTemplate.TemplateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeID {
                get {
                    return ((int)(this[this.tableSaveMADImportTemplate.TypeIDColumn]));
                }
                set {
                    this[this.tableSaveMADImportTemplate.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSaveMADImportTemplate.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'SaveMADImportTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportTemplate.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    return ((string)(this[this.tableSaveMADImportTemplate.FilePathColumn]));
                }
                set {
                    this[this.tableSaveMADImportTemplate.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelNumber_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSaveMADImportTemplate.ParcelNumber_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber_Pos\' in table \'SaveMADImportTemplate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportTemplate.ParcelNumber_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelNumber_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSaveMADImportTemplate.ParcelNumber_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber_Wid\' in table \'SaveMADImportTemplate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportTemplate.ParcelNumber_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSaveMADImportTemplate.RollYear_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear_Pos\' in table \'SaveMADImportTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportTemplate.RollYear_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSaveMADImportTemplate.RollYear_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear_Wid\' in table \'SaveMADImportTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportTemplate.RollYear_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictNumber_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSaveMADImportTemplate.DistrictNumber_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber_Pos\' in table \'SaveMADImportTemplate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportTemplate.DistrictNumber_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictNumber_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSaveMADImportTemplate.DistrictNumber_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber_Wid\' in table \'SaveMADImportTemplate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportTemplate.DistrictNumber_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OverrideAmount_Pos {
                get {
                    try {
                        return ((int)(this[this.tableSaveMADImportTemplate.OverrideAmount_PosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount_Pos\' in table \'SaveMADImportTemplate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportTemplate.OverrideAmount_PosColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OverrideAmount_Wid {
                get {
                    try {
                        return ((int)(this[this.tableSaveMADImportTemplate.OverrideAmount_WidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount_Wid\' in table \'SaveMADImportTemplate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSaveMADImportTemplate.OverrideAmount_WidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSaveMADImportTemplate.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSaveMADImportTemplate.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumber_PosNull() {
                return this.IsNull(this.tableSaveMADImportTemplate.ParcelNumber_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumber_PosNull() {
                this[this.tableSaveMADImportTemplate.ParcelNumber_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumber_WidNull() {
                return this.IsNull(this.tableSaveMADImportTemplate.ParcelNumber_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumber_WidNull() {
                this[this.tableSaveMADImportTemplate.ParcelNumber_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYear_PosNull() {
                return this.IsNull(this.tableSaveMADImportTemplate.RollYear_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYear_PosNull() {
                this[this.tableSaveMADImportTemplate.RollYear_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYear_WidNull() {
                return this.IsNull(this.tableSaveMADImportTemplate.RollYear_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYear_WidNull() {
                this[this.tableSaveMADImportTemplate.RollYear_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumber_PosNull() {
                return this.IsNull(this.tableSaveMADImportTemplate.DistrictNumber_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumber_PosNull() {
                this[this.tableSaveMADImportTemplate.DistrictNumber_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumber_WidNull() {
                return this.IsNull(this.tableSaveMADImportTemplate.DistrictNumber_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumber_WidNull() {
                this[this.tableSaveMADImportTemplate.DistrictNumber_WidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmount_PosNull() {
                return this.IsNull(this.tableSaveMADImportTemplate.OverrideAmount_PosColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmount_PosNull() {
                this[this.tableSaveMADImportTemplate.OverrideAmount_PosColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmount_WidNull() {
                return this.IsNull(this.tableSaveMADImportTemplate.OverrideAmount_WidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmount_WidNull() {
                this[this.tableSaveMADImportTemplate.OverrideAmount_WidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMADImportFileTypeRowChangeEvent : global::System.EventArgs {
            
            private ListMADImportFileTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADImportFileTypeRowChangeEvent(ListMADImportFileTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADImportFileTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMADImportTemplateRowChangeEvent : global::System.EventArgs {
            
            private GetMADImportTemplateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportTemplateRowChangeEvent(GetMADImportTemplateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADImportTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveMADImportTemplateRowChangeEvent : global::System.EventArgs {
            
            private SaveMADImportTemplateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportTemplateRowChangeEvent(SaveMADImportTemplateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMADImportTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TerraScan.BusinessEntities.F23300MADImportTemplateTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ListMADImportFileTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListMADImportFileTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ListMADImportFileType";
            tableMapping.ColumnMappings.Add("TypeID", "TypeID");
            tableMapping.ColumnMappings.Add("TypeName", "TypeName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pclst_MortgageImportFileType";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(F23300MADImportTemplate.ListMADImportFileTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual F23300MADImportTemplate.ListMADImportFileTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            F23300MADImportTemplate.ListMADImportFileTypeDataTable dataTable = new F23300MADImportTemplate.ListMADImportFileTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(F23300MADImportTemplate dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(F23300MADImportTemplate dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(F23300MADImportTemplate dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(F23300MADImportTemplate dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591