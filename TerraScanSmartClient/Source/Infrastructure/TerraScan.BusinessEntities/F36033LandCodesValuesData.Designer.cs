//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F36033LandCodesValuesData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F36033LandCodesValuesData : global::System.Data.DataSet {
        
        private ListLandCodeValueDetailsDataTable tableListLandCodeValueDetails;
        
        private GetAppRollYearDataTable tableGetAppRollYear;
        
        private ListNeighborhoodTypeDataTable tableListNeighborhoodType;
        
        private ListUnitTypeDataTable tableListUnitType;
        
        private ListLandCodeDataTable tableListLandCode;
        
        private SaveLandCodeValueDetailsDataTable tableSaveLandCodeValueDetails;
        
        private CheckBreakValuesDataTable tableCheckBreakValues;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F36033LandCodesValuesData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F36033LandCodesValuesData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListLandCodeValueDetails"] != null)) {
                    base.Tables.Add(new ListLandCodeValueDetailsDataTable(ds.Tables["ListLandCodeValueDetails"]));
                }
                if ((ds.Tables["GetAppRollYear"] != null)) {
                    base.Tables.Add(new GetAppRollYearDataTable(ds.Tables["GetAppRollYear"]));
                }
                if ((ds.Tables["ListNeighborhoodType"] != null)) {
                    base.Tables.Add(new ListNeighborhoodTypeDataTable(ds.Tables["ListNeighborhoodType"]));
                }
                if ((ds.Tables["ListUnitType"] != null)) {
                    base.Tables.Add(new ListUnitTypeDataTable(ds.Tables["ListUnitType"]));
                }
                if ((ds.Tables["ListLandCode"] != null)) {
                    base.Tables.Add(new ListLandCodeDataTable(ds.Tables["ListLandCode"]));
                }
                if ((ds.Tables["SaveLandCodeValueDetails"] != null)) {
                    base.Tables.Add(new SaveLandCodeValueDetailsDataTable(ds.Tables["SaveLandCodeValueDetails"]));
                }
                if ((ds.Tables["CheckBreakValues"] != null)) {
                    base.Tables.Add(new CheckBreakValuesDataTable(ds.Tables["CheckBreakValues"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandCodeValueDetailsDataTable ListLandCodeValueDetails {
            get {
                return this.tableListLandCodeValueDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAppRollYearDataTable GetAppRollYear {
            get {
                return this.tableGetAppRollYear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListNeighborhoodTypeDataTable ListNeighborhoodType {
            get {
                return this.tableListNeighborhoodType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListUnitTypeDataTable ListUnitType {
            get {
                return this.tableListUnitType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandCodeDataTable ListLandCode {
            get {
                return this.tableListLandCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveLandCodeValueDetailsDataTable SaveLandCodeValueDetails {
            get {
                return this.tableSaveLandCodeValueDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CheckBreakValuesDataTable CheckBreakValues {
            get {
                return this.tableCheckBreakValues;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F36033LandCodesValuesData cln = ((F36033LandCodesValuesData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListLandCodeValueDetails"] != null)) {
                    base.Tables.Add(new ListLandCodeValueDetailsDataTable(ds.Tables["ListLandCodeValueDetails"]));
                }
                if ((ds.Tables["GetAppRollYear"] != null)) {
                    base.Tables.Add(new GetAppRollYearDataTable(ds.Tables["GetAppRollYear"]));
                }
                if ((ds.Tables["ListNeighborhoodType"] != null)) {
                    base.Tables.Add(new ListNeighborhoodTypeDataTable(ds.Tables["ListNeighborhoodType"]));
                }
                if ((ds.Tables["ListUnitType"] != null)) {
                    base.Tables.Add(new ListUnitTypeDataTable(ds.Tables["ListUnitType"]));
                }
                if ((ds.Tables["ListLandCode"] != null)) {
                    base.Tables.Add(new ListLandCodeDataTable(ds.Tables["ListLandCode"]));
                }
                if ((ds.Tables["SaveLandCodeValueDetails"] != null)) {
                    base.Tables.Add(new SaveLandCodeValueDetailsDataTable(ds.Tables["SaveLandCodeValueDetails"]));
                }
                if ((ds.Tables["CheckBreakValues"] != null)) {
                    base.Tables.Add(new CheckBreakValuesDataTable(ds.Tables["CheckBreakValues"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListLandCodeValueDetails = ((ListLandCodeValueDetailsDataTable)(base.Tables["ListLandCodeValueDetails"]));
            if ((initTable == true)) {
                if ((this.tableListLandCodeValueDetails != null)) {
                    this.tableListLandCodeValueDetails.InitVars();
                }
            }
            this.tableGetAppRollYear = ((GetAppRollYearDataTable)(base.Tables["GetAppRollYear"]));
            if ((initTable == true)) {
                if ((this.tableGetAppRollYear != null)) {
                    this.tableGetAppRollYear.InitVars();
                }
            }
            this.tableListNeighborhoodType = ((ListNeighborhoodTypeDataTable)(base.Tables["ListNeighborhoodType"]));
            if ((initTable == true)) {
                if ((this.tableListNeighborhoodType != null)) {
                    this.tableListNeighborhoodType.InitVars();
                }
            }
            this.tableListUnitType = ((ListUnitTypeDataTable)(base.Tables["ListUnitType"]));
            if ((initTable == true)) {
                if ((this.tableListUnitType != null)) {
                    this.tableListUnitType.InitVars();
                }
            }
            this.tableListLandCode = ((ListLandCodeDataTable)(base.Tables["ListLandCode"]));
            if ((initTable == true)) {
                if ((this.tableListLandCode != null)) {
                    this.tableListLandCode.InitVars();
                }
            }
            this.tableSaveLandCodeValueDetails = ((SaveLandCodeValueDetailsDataTable)(base.Tables["SaveLandCodeValueDetails"]));
            if ((initTable == true)) {
                if ((this.tableSaveLandCodeValueDetails != null)) {
                    this.tableSaveLandCodeValueDetails.InitVars();
                }
            }
            this.tableCheckBreakValues = ((CheckBreakValuesDataTable)(base.Tables["CheckBreakValues"]));
            if ((initTable == true)) {
                if ((this.tableCheckBreakValues != null)) {
                    this.tableCheckBreakValues.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F36033LandCodesValuesData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F36033LandCodesValuesData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListLandCodeValueDetails = new ListLandCodeValueDetailsDataTable();
            base.Tables.Add(this.tableListLandCodeValueDetails);
            this.tableGetAppRollYear = new GetAppRollYearDataTable();
            base.Tables.Add(this.tableGetAppRollYear);
            this.tableListNeighborhoodType = new ListNeighborhoodTypeDataTable();
            base.Tables.Add(this.tableListNeighborhoodType);
            this.tableListUnitType = new ListUnitTypeDataTable();
            base.Tables.Add(this.tableListUnitType);
            this.tableListLandCode = new ListLandCodeDataTable();
            base.Tables.Add(this.tableListLandCode);
            this.tableSaveLandCodeValueDetails = new SaveLandCodeValueDetailsDataTable();
            base.Tables.Add(this.tableSaveLandCodeValueDetails);
            this.tableCheckBreakValues = new CheckBreakValuesDataTable();
            base.Tables.Add(this.tableCheckBreakValues);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandCodeValueDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAppRollYear() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListNeighborhoodType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListUnitType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveLandCodeValueDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCheckBreakValues() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F36033LandCodesValuesData ds = new F36033LandCodesValuesData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListLandCodeValueDetailsRowChangeEventHandler(object sender, ListLandCodeValueDetailsRowChangeEvent e);
        
        public delegate void GetAppRollYearRowChangeEventHandler(object sender, GetAppRollYearRowChangeEvent e);
        
        public delegate void ListNeighborhoodTypeRowChangeEventHandler(object sender, ListNeighborhoodTypeRowChangeEvent e);
        
        public delegate void ListUnitTypeRowChangeEventHandler(object sender, ListUnitTypeRowChangeEvent e);
        
        public delegate void ListLandCodeRowChangeEventHandler(object sender, ListLandCodeRowChangeEvent e);
        
        public delegate void SaveLandCodeValueDetailsRowChangeEventHandler(object sender, SaveLandCodeValueDetailsRowChangeEvent e);
        
        public delegate void CheckBreakValuesRowChangeEventHandler(object sender, CheckBreakValuesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandCodeValueDetailsDataTable : global::System.Data.TypedTableBase<ListLandCodeValueDetailsRow> {
            
            private global::System.Data.DataColumn columnLuVID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnNBHDList;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnUnitType;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            private global::System.Data.DataColumn columnValue5;
            
            private global::System.Data.DataColumn columnUseBaseValue;
            
            private global::System.Data.DataColumn columnVFormula;
            
            private global::System.Data.DataColumn columnMrktMultiplier;
            
            private global::System.Data.DataColumn columnUseMultiplier;
            
            private global::System.Data.DataColumn columnMethod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeValueDetailsDataTable() {
                this.TableName = "ListLandCodeValueDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeValueDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandCodeValueDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LuVIDColumn {
                get {
                    return this.columnLuVID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDListColumn {
                get {
                    return this.columnNBHDList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value5Column {
                get {
                    return this.columnValue5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseValueColumn {
                get {
                    return this.columnUseBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VFormulaColumn {
                get {
                    return this.columnVFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MrktMultiplierColumn {
                get {
                    return this.columnMrktMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseMultiplierColumn {
                get {
                    return this.columnUseMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MethodColumn {
                get {
                    return this.columnMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeValueDetailsRow this[int index] {
                get {
                    return ((ListLandCodeValueDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ListLandCodeValueDetailsRowChangeEventHandler ListLandCodeValueDetailsRowChanging;
            
            public event ListLandCodeValueDetailsRowChangeEventHandler ListLandCodeValueDetailsRowChanged;
            
            public event ListLandCodeValueDetailsRowChangeEventHandler ListLandCodeValueDetailsRowDeleting;
            
            public event ListLandCodeValueDetailsRowChangeEventHandler ListLandCodeValueDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandCodeValueDetailsRow(ListLandCodeValueDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeValueDetailsRow AddListLandCodeValueDetailsRow(
                        int LuVID, 
                        int RollYear, 
                        int NBHDID, 
                        string NBHDList, 
                        string LandCode, 
                        string UnitType, 
                        decimal BaseValue, 
                        decimal Break1, 
                        decimal Value1, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Break3, 
                        decimal Value3, 
                        decimal Break4, 
                        decimal Value4, 
                        decimal Break5, 
                        decimal Value5, 
                        decimal UseBaseValue, 
                        string VFormula, 
                        decimal MrktMultiplier, 
                        decimal UseMultiplier, 
                        string Method) {
                ListLandCodeValueDetailsRow rowListLandCodeValueDetailsRow = ((ListLandCodeValueDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LuVID,
                        RollYear,
                        NBHDID,
                        NBHDList,
                        LandCode,
                        UnitType,
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        Break5,
                        Value5,
                        UseBaseValue,
                        VFormula,
                        MrktMultiplier,
                        UseMultiplier,
                        Method};
                rowListLandCodeValueDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandCodeValueDetailsRow);
                return rowListLandCodeValueDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandCodeValueDetailsDataTable cln = ((ListLandCodeValueDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandCodeValueDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLuVID = base.Columns["LuVID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnNBHDList = base.Columns["NBHDList"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnUnitType = base.Columns["UnitType"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnBreak5 = base.Columns["Break5"];
                this.columnValue5 = base.Columns["Value5"];
                this.columnUseBaseValue = base.Columns["UseBaseValue"];
                this.columnVFormula = base.Columns["VFormula"];
                this.columnMrktMultiplier = base.Columns["MrktMultiplier"];
                this.columnUseMultiplier = base.Columns["UseMultiplier"];
                this.columnMethod = base.Columns["Method"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLuVID = new global::System.Data.DataColumn("LuVID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLuVID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnNBHDList = new global::System.Data.DataColumn("NBHDList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDList);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
                this.columnValue5 = new global::System.Data.DataColumn("Value5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue5);
                this.columnUseBaseValue = new global::System.Data.DataColumn("UseBaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseValue);
                this.columnVFormula = new global::System.Data.DataColumn("VFormula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVFormula);
                this.columnMrktMultiplier = new global::System.Data.DataColumn("MrktMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMrktMultiplier);
                this.columnUseMultiplier = new global::System.Data.DataColumn("UseMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseMultiplier);
                this.columnMethod = new global::System.Data.DataColumn("Method", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMethod);
                this.columnLuVID.ReadOnly = true;
                this.columnNBHDList.ReadOnly = true;
                this.columnNBHDList.MaxLength = 70;
                this.columnLandCode.MaxLength = 20;
                this.columnUnitType.MaxLength = 20;
                this.columnVFormula.MaxLength = 1000;
                this.columnMethod.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeValueDetailsRow NewListLandCodeValueDetailsRow() {
                return ((ListLandCodeValueDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandCodeValueDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandCodeValueDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandCodeValueDetailsRowChanged != null)) {
                    this.ListLandCodeValueDetailsRowChanged(this, new ListLandCodeValueDetailsRowChangeEvent(((ListLandCodeValueDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandCodeValueDetailsRowChanging != null)) {
                    this.ListLandCodeValueDetailsRowChanging(this, new ListLandCodeValueDetailsRowChangeEvent(((ListLandCodeValueDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandCodeValueDetailsRowDeleted != null)) {
                    this.ListLandCodeValueDetailsRowDeleted(this, new ListLandCodeValueDetailsRowChangeEvent(((ListLandCodeValueDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandCodeValueDetailsRowDeleting != null)) {
                    this.ListLandCodeValueDetailsRowDeleting(this, new ListLandCodeValueDetailsRowChangeEvent(((ListLandCodeValueDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandCodeValueDetailsRow(ListLandCodeValueDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36033LandCodesValuesData ds = new F36033LandCodesValuesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandCodeValueDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAppRollYearDataTable : global::System.Data.TypedTableBase<GetAppRollYearRow> {
            
            private global::System.Data.DataColumn columnAssessmentRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearDataTable() {
                this.TableName = "GetAppRollYear";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAppRollYearDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAppRollYearDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentRollYearColumn {
                get {
                    return this.columnAssessmentRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRow this[int index] {
                get {
                    return ((GetAppRollYearRow)(this.Rows[index]));
                }
            }
            
            public event GetAppRollYearRowChangeEventHandler GetAppRollYearRowChanging;
            
            public event GetAppRollYearRowChangeEventHandler GetAppRollYearRowChanged;
            
            public event GetAppRollYearRowChangeEventHandler GetAppRollYearRowDeleting;
            
            public event GetAppRollYearRowChangeEventHandler GetAppRollYearRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAppRollYearRow(GetAppRollYearRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRow AddGetAppRollYearRow(string AssessmentRollYear) {
                GetAppRollYearRow rowGetAppRollYearRow = ((GetAppRollYearRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssessmentRollYear};
                rowGetAppRollYearRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAppRollYearRow);
                return rowGetAppRollYearRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAppRollYearDataTable cln = ((GetAppRollYearDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAppRollYearDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssessmentRollYear = base.Columns["AssessmentRollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssessmentRollYear = new global::System.Data.DataColumn("AssessmentRollYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentRollYear);
                this.columnAssessmentRollYear.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRow NewGetAppRollYearRow() {
                return ((GetAppRollYearRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAppRollYearRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAppRollYearRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAppRollYearRowChanged != null)) {
                    this.GetAppRollYearRowChanged(this, new GetAppRollYearRowChangeEvent(((GetAppRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAppRollYearRowChanging != null)) {
                    this.GetAppRollYearRowChanging(this, new GetAppRollYearRowChangeEvent(((GetAppRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAppRollYearRowDeleted != null)) {
                    this.GetAppRollYearRowDeleted(this, new GetAppRollYearRowChangeEvent(((GetAppRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAppRollYearRowDeleting != null)) {
                    this.GetAppRollYearRowDeleting(this, new GetAppRollYearRowChangeEvent(((GetAppRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAppRollYearRow(GetAppRollYearRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36033LandCodesValuesData ds = new F36033LandCodesValuesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAppRollYearDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListNeighborhoodTypeDataTable : global::System.Data.TypedTableBase<ListNeighborhoodTypeRow> {
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnNBHDList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeDataTable() {
                this.TableName = "ListNeighborhoodType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListNeighborhoodTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListNeighborhoodTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDListColumn {
                get {
                    return this.columnNBHDList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRow this[int index] {
                get {
                    return ((ListNeighborhoodTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListNeighborhoodTypeRowChangeEventHandler ListNeighborhoodTypeRowChanging;
            
            public event ListNeighborhoodTypeRowChangeEventHandler ListNeighborhoodTypeRowChanged;
            
            public event ListNeighborhoodTypeRowChangeEventHandler ListNeighborhoodTypeRowDeleting;
            
            public event ListNeighborhoodTypeRowChangeEventHandler ListNeighborhoodTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListNeighborhoodTypeRow(ListNeighborhoodTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRow AddListNeighborhoodTypeRow(int NBHDID, string NBHDList) {
                ListNeighborhoodTypeRow rowListNeighborhoodTypeRow = ((ListNeighborhoodTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NBHDID,
                        NBHDList};
                rowListNeighborhoodTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListNeighborhoodTypeRow);
                return rowListNeighborhoodTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListNeighborhoodTypeDataTable cln = ((ListNeighborhoodTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListNeighborhoodTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnNBHDList = base.Columns["NBHDList"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnNBHDList = new global::System.Data.DataColumn("NBHDList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDList);
                this.columnNBHDList.MaxLength = 70;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRow NewListNeighborhoodTypeRow() {
                return ((ListNeighborhoodTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListNeighborhoodTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListNeighborhoodTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListNeighborhoodTypeRowChanged != null)) {
                    this.ListNeighborhoodTypeRowChanged(this, new ListNeighborhoodTypeRowChangeEvent(((ListNeighborhoodTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListNeighborhoodTypeRowChanging != null)) {
                    this.ListNeighborhoodTypeRowChanging(this, new ListNeighborhoodTypeRowChangeEvent(((ListNeighborhoodTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListNeighborhoodTypeRowDeleted != null)) {
                    this.ListNeighborhoodTypeRowDeleted(this, new ListNeighborhoodTypeRowChangeEvent(((ListNeighborhoodTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListNeighborhoodTypeRowDeleting != null)) {
                    this.ListNeighborhoodTypeRowDeleting(this, new ListNeighborhoodTypeRowChangeEvent(((ListNeighborhoodTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListNeighborhoodTypeRow(ListNeighborhoodTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36033LandCodesValuesData ds = new F36033LandCodesValuesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListNeighborhoodTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListUnitTypeDataTable : global::System.Data.TypedTableBase<ListUnitTypeRow> {
            
            private global::System.Data.DataColumn columnUnitType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnitTypeDataTable() {
                this.TableName = "ListUnitType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListUnitTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListUnitTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnitTypeRow this[int index] {
                get {
                    return ((ListUnitTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListUnitTypeRowChangeEventHandler ListUnitTypeRowChanging;
            
            public event ListUnitTypeRowChangeEventHandler ListUnitTypeRowChanged;
            
            public event ListUnitTypeRowChangeEventHandler ListUnitTypeRowDeleting;
            
            public event ListUnitTypeRowChangeEventHandler ListUnitTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListUnitTypeRow(ListUnitTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnitTypeRow AddListUnitTypeRow(string UnitType) {
                ListUnitTypeRow rowListUnitTypeRow = ((ListUnitTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitType};
                rowListUnitTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListUnitTypeRow);
                return rowListUnitTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListUnitTypeDataTable cln = ((ListUnitTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListUnitTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitType = base.Columns["UnitType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnUnitType.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnitTypeRow NewListUnitTypeRow() {
                return ((ListUnitTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListUnitTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListUnitTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListUnitTypeRowChanged != null)) {
                    this.ListUnitTypeRowChanged(this, new ListUnitTypeRowChangeEvent(((ListUnitTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListUnitTypeRowChanging != null)) {
                    this.ListUnitTypeRowChanging(this, new ListUnitTypeRowChangeEvent(((ListUnitTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListUnitTypeRowDeleted != null)) {
                    this.ListUnitTypeRowDeleted(this, new ListUnitTypeRowChangeEvent(((ListUnitTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListUnitTypeRowDeleting != null)) {
                    this.ListUnitTypeRowDeleting(this, new ListUnitTypeRowChangeEvent(((ListUnitTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListUnitTypeRow(ListUnitTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36033LandCodesValuesData ds = new F36033LandCodesValuesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListUnitTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandCodeDataTable : global::System.Data.TypedTableBase<ListLandCodeRow> {
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDataTable() {
                this.TableName = "ListLandCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow this[int index] {
                get {
                    return ((ListLandCodeRow)(this.Rows[index]));
                }
            }
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowChanging;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowChanged;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowDeleting;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandCodeRow(ListLandCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow AddListLandCodeRow(string LandCode, int RollYear) {
                ListLandCodeRow rowListLandCodeRow = ((ListLandCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandCode,
                        RollYear};
                rowListLandCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandCodeRow);
                return rowListLandCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandCodeDataTable cln = ((ListLandCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandCode = base.Columns["LandCode"];
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandCode.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow NewListLandCodeRow() {
                return ((ListLandCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandCodeRowChanged != null)) {
                    this.ListLandCodeRowChanged(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandCodeRowChanging != null)) {
                    this.ListLandCodeRowChanging(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandCodeRowDeleted != null)) {
                    this.ListLandCodeRowDeleted(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandCodeRowDeleting != null)) {
                    this.ListLandCodeRowDeleting(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandCodeRow(ListLandCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36033LandCodesValuesData ds = new F36033LandCodesValuesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveLandCodeValueDetailsDataTable : global::System.Data.TypedTableBase<SaveLandCodeValueDetailsRow> {
            
            private global::System.Data.DataColumn columnLuVID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnNBHDList;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnUnitType;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            private global::System.Data.DataColumn columnValue5;
            
            private global::System.Data.DataColumn columnUseBaseValue;
            
            private global::System.Data.DataColumn columnVFormula;
            
            private global::System.Data.DataColumn columnMrktMultiplier;
            
            private global::System.Data.DataColumn columnUseMultiplier;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeValueDetailsDataTable() {
                this.TableName = "SaveLandCodeValueDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveLandCodeValueDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveLandCodeValueDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LuVIDColumn {
                get {
                    return this.columnLuVID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDListColumn {
                get {
                    return this.columnNBHDList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value5Column {
                get {
                    return this.columnValue5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseValueColumn {
                get {
                    return this.columnUseBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VFormulaColumn {
                get {
                    return this.columnVFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MrktMultiplierColumn {
                get {
                    return this.columnMrktMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseMultiplierColumn {
                get {
                    return this.columnUseMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeValueDetailsRow this[int index] {
                get {
                    return ((SaveLandCodeValueDetailsRow)(this.Rows[index]));
                }
            }
            
            public event SaveLandCodeValueDetailsRowChangeEventHandler SaveLandCodeValueDetailsRowChanging;
            
            public event SaveLandCodeValueDetailsRowChangeEventHandler SaveLandCodeValueDetailsRowChanged;
            
            public event SaveLandCodeValueDetailsRowChangeEventHandler SaveLandCodeValueDetailsRowDeleting;
            
            public event SaveLandCodeValueDetailsRowChangeEventHandler SaveLandCodeValueDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveLandCodeValueDetailsRow(SaveLandCodeValueDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeValueDetailsRow AddSaveLandCodeValueDetailsRow(
                        int LuVID, 
                        int RollYear, 
                        int NBHDID, 
                        string NBHDList, 
                        string LandCode, 
                        string UnitType, 
                        decimal BaseValue, 
                        decimal Break1, 
                        decimal Value1, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Break3, 
                        decimal Value3, 
                        decimal Break4, 
                        decimal Value4, 
                        decimal Break5, 
                        decimal Value5, 
                        decimal UseBaseValue, 
                        string VFormula, 
                        decimal MrktMultiplier, 
                        decimal UseMultiplier) {
                SaveLandCodeValueDetailsRow rowSaveLandCodeValueDetailsRow = ((SaveLandCodeValueDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LuVID,
                        RollYear,
                        NBHDID,
                        NBHDList,
                        LandCode,
                        UnitType,
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        Break5,
                        Value5,
                        UseBaseValue,
                        VFormula,
                        MrktMultiplier,
                        UseMultiplier};
                rowSaveLandCodeValueDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveLandCodeValueDetailsRow);
                return rowSaveLandCodeValueDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveLandCodeValueDetailsDataTable cln = ((SaveLandCodeValueDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveLandCodeValueDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLuVID = base.Columns["LuVID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnNBHDList = base.Columns["NBHDList"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnUnitType = base.Columns["UnitType"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnBreak5 = base.Columns["Break5"];
                this.columnValue5 = base.Columns["Value5"];
                this.columnUseBaseValue = base.Columns["UseBaseValue"];
                this.columnVFormula = base.Columns["VFormula"];
                this.columnMrktMultiplier = base.Columns["MrktMultiplier"];
                this.columnUseMultiplier = base.Columns["UseMultiplier"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLuVID = new global::System.Data.DataColumn("LuVID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLuVID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnNBHDList = new global::System.Data.DataColumn("NBHDList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDList);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
                this.columnValue5 = new global::System.Data.DataColumn("Value5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue5);
                this.columnUseBaseValue = new global::System.Data.DataColumn("UseBaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseValue);
                this.columnVFormula = new global::System.Data.DataColumn("VFormula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVFormula);
                this.columnMrktMultiplier = new global::System.Data.DataColumn("MrktMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMrktMultiplier);
                this.columnUseMultiplier = new global::System.Data.DataColumn("UseMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseMultiplier);
                this.columnLuVID.ReadOnly = true;
                this.columnNBHDList.ReadOnly = true;
                this.columnNBHDList.MaxLength = 70;
                this.columnLandCode.MaxLength = 20;
                this.columnUnitType.MaxLength = 20;
                this.columnVFormula.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeValueDetailsRow NewSaveLandCodeValueDetailsRow() {
                return ((SaveLandCodeValueDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveLandCodeValueDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveLandCodeValueDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveLandCodeValueDetailsRowChanged != null)) {
                    this.SaveLandCodeValueDetailsRowChanged(this, new SaveLandCodeValueDetailsRowChangeEvent(((SaveLandCodeValueDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveLandCodeValueDetailsRowChanging != null)) {
                    this.SaveLandCodeValueDetailsRowChanging(this, new SaveLandCodeValueDetailsRowChangeEvent(((SaveLandCodeValueDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveLandCodeValueDetailsRowDeleted != null)) {
                    this.SaveLandCodeValueDetailsRowDeleted(this, new SaveLandCodeValueDetailsRowChangeEvent(((SaveLandCodeValueDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveLandCodeValueDetailsRowDeleting != null)) {
                    this.SaveLandCodeValueDetailsRowDeleting(this, new SaveLandCodeValueDetailsRowChangeEvent(((SaveLandCodeValueDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveLandCodeValueDetailsRow(SaveLandCodeValueDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36033LandCodesValuesData ds = new F36033LandCodesValuesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveLandCodeValueDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CheckBreakValuesDataTable : global::System.Data.TypedTableBase<CheckBreakValuesRow> {
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesDataTable() {
                this.TableName = "CheckBreakValues";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckBreakValuesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CheckBreakValuesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow this[int index] {
                get {
                    return ((CheckBreakValuesRow)(this.Rows[index]));
                }
            }
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowChanging;
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowChanged;
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowDeleting;
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCheckBreakValuesRow(CheckBreakValuesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow AddCheckBreakValuesRow(decimal Break1, decimal Break2, decimal Break3, decimal Break4, decimal Break5) {
                CheckBreakValuesRow rowCheckBreakValuesRow = ((CheckBreakValuesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Break1,
                        Break2,
                        Break3,
                        Break4,
                        Break5};
                rowCheckBreakValuesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCheckBreakValuesRow);
                return rowCheckBreakValuesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CheckBreakValuesDataTable cln = ((CheckBreakValuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CheckBreakValuesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBreak1 = base.Columns["Break1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnBreak5 = base.Columns["Break5"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow NewCheckBreakValuesRow() {
                return ((CheckBreakValuesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CheckBreakValuesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CheckBreakValuesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CheckBreakValuesRowChanged != null)) {
                    this.CheckBreakValuesRowChanged(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CheckBreakValuesRowChanging != null)) {
                    this.CheckBreakValuesRowChanging(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CheckBreakValuesRowDeleted != null)) {
                    this.CheckBreakValuesRowDeleted(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CheckBreakValuesRowDeleting != null)) {
                    this.CheckBreakValuesRowDeleting(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCheckBreakValuesRow(CheckBreakValuesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36033LandCodesValuesData ds = new F36033LandCodesValuesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CheckBreakValuesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandCodeValueDetailsRow : global::System.Data.DataRow {
            
            private ListLandCodeValueDetailsDataTable tableListLandCodeValueDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeValueDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandCodeValueDetails = ((ListLandCodeValueDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LuVID {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeValueDetails.LuVIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LuVID\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.LuVIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeValueDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NBHDID {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeValueDetails.NBHDIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDID\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NBHDList {
                get {
                    if (this.IsNBHDListNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandCodeValueDetails.NBHDListColumn]));
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.NBHDListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    if (this.IsLandCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandCodeValueDetails.LandCodeColumn]));
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    if (this.IsUnitTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandCodeValueDetails.UnitTypeColumn]));
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value5 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.Value5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value5\' in table \'ListLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.Value5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.UseBaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseValue\' in table \'ListLandCodeValueDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.UseBaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VFormula {
                get {
                    if (this.IsVFormulaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandCodeValueDetails.VFormulaColumn]));
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.VFormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MrktMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.MrktMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MrktMultiplier\' in table \'ListLandCodeValueDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.MrktMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandCodeValueDetails.UseMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseMultiplier\' in table \'ListLandCodeValueDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.UseMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Method {
                get {
                    if (this.IsMethodNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandCodeValueDetails.MethodColumn]));
                    }
                }
                set {
                    this[this.tableListLandCodeValueDetails.MethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLuVIDNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.LuVIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLuVIDNull() {
                this[this.tableListLandCodeValueDetails.LuVIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandCodeValueDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tableListLandCodeValueDetails.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDListNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.NBHDListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDListNull() {
                this[this.tableListLandCodeValueDetails.NBHDListColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableListLandCodeValueDetails.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tableListLandCodeValueDetails.UnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableListLandCodeValueDetails.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableListLandCodeValueDetails.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableListLandCodeValueDetails.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableListLandCodeValueDetails.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableListLandCodeValueDetails.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableListLandCodeValueDetails.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableListLandCodeValueDetails.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableListLandCodeValueDetails.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableListLandCodeValueDetails.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableListLandCodeValueDetails.Break5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue5Null() {
                return this.IsNull(this.tableListLandCodeValueDetails.Value5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue5Null() {
                this[this.tableListLandCodeValueDetails.Value5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseValueNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.UseBaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseValueNull() {
                this[this.tableListLandCodeValueDetails.UseBaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVFormulaNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.VFormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVFormulaNull() {
                this[this.tableListLandCodeValueDetails.VFormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMrktMultiplierNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.MrktMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMrktMultiplierNull() {
                this[this.tableListLandCodeValueDetails.MrktMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseMultiplierNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.UseMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseMultiplierNull() {
                this[this.tableListLandCodeValueDetails.UseMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMethodNull() {
                return this.IsNull(this.tableListLandCodeValueDetails.MethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMethodNull() {
                this[this.tableListLandCodeValueDetails.MethodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAppRollYearRow : global::System.Data.DataRow {
            
            private GetAppRollYearDataTable tableGetAppRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAppRollYearRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAppRollYear = ((GetAppRollYearDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessmentRollYear {
                get {
                    if (this.IsAssessmentRollYearNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetAppRollYear.AssessmentRollYearColumn]));
                    }
                }
                set {
                    this[this.tableGetAppRollYear.AssessmentRollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentRollYearNull() {
                return this.IsNull(this.tableGetAppRollYear.AssessmentRollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentRollYearNull() {
                this[this.tableGetAppRollYear.AssessmentRollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListNeighborhoodTypeRow : global::System.Data.DataRow {
            
            private ListNeighborhoodTypeDataTable tableListNeighborhoodType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListNeighborhoodTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListNeighborhoodType = ((ListNeighborhoodTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NBHDID {
                get {
                    try {
                        return ((int)(this[this.tableListNeighborhoodType.NBHDIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDID\' in table \'ListNeighborhoodType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListNeighborhoodType.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NBHDList {
                get {
                    if (this.IsNBHDListNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListNeighborhoodType.NBHDListColumn]));
                    }
                }
                set {
                    this[this.tableListNeighborhoodType.NBHDListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tableListNeighborhoodType.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tableListNeighborhoodType.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDListNull() {
                return this.IsNull(this.tableListNeighborhoodType.NBHDListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDListNull() {
                this[this.tableListNeighborhoodType.NBHDListColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListUnitTypeRow : global::System.Data.DataRow {
            
            private ListUnitTypeDataTable tableListUnitType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListUnitTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListUnitType = ((ListUnitTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    if (this.IsUnitTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListUnitType.UnitTypeColumn]));
                    }
                }
                set {
                    this[this.tableListUnitType.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tableListUnitType.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tableListUnitType.UnitTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandCodeRow : global::System.Data.DataRow {
            
            private ListLandCodeDataTable tableListLandCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandCode = ((ListLandCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    if (this.IsLandCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandCode.LandCodeColumn]));
                    }
                }
                set {
                    this[this.tableListLandCode.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListLandCode.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCode.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableListLandCode.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableListLandCode.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandCode.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandCode.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveLandCodeValueDetailsRow : global::System.Data.DataRow {
            
            private SaveLandCodeValueDetailsDataTable tableSaveLandCodeValueDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveLandCodeValueDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveLandCodeValueDetails = ((SaveLandCodeValueDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LuVID {
                get {
                    try {
                        return ((int)(this[this.tableSaveLandCodeValueDetails.LuVIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LuVID\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.LuVIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableSaveLandCodeValueDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NBHDID {
                get {
                    try {
                        return ((int)(this[this.tableSaveLandCodeValueDetails.NBHDIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDID\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NBHDList {
                get {
                    if (this.IsNBHDListNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSaveLandCodeValueDetails.NBHDListColumn]));
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.NBHDListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    if (this.IsLandCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSaveLandCodeValueDetails.LandCodeColumn]));
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    if (this.IsUnitTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSaveLandCodeValueDetails.UnitTypeColumn]));
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value5 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.Value5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value5\' in table \'SaveLandCodeValueDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.Value5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.UseBaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseValue\' in table \'SaveLandCodeValueDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.UseBaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VFormula {
                get {
                    if (this.IsVFormulaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSaveLandCodeValueDetails.VFormulaColumn]));
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.VFormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MrktMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.MrktMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MrktMultiplier\' in table \'SaveLandCodeValueDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.MrktMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveLandCodeValueDetails.UseMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseMultiplier\' in table \'SaveLandCodeValueDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeValueDetails.UseMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLuVIDNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.LuVIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLuVIDNull() {
                this[this.tableSaveLandCodeValueDetails.LuVIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableSaveLandCodeValueDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tableSaveLandCodeValueDetails.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDListNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.NBHDListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDListNull() {
                this[this.tableSaveLandCodeValueDetails.NBHDListColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableSaveLandCodeValueDetails.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tableSaveLandCodeValueDetails.UnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableSaveLandCodeValueDetails.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableSaveLandCodeValueDetails.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableSaveLandCodeValueDetails.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableSaveLandCodeValueDetails.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableSaveLandCodeValueDetails.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableSaveLandCodeValueDetails.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableSaveLandCodeValueDetails.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableSaveLandCodeValueDetails.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableSaveLandCodeValueDetails.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableSaveLandCodeValueDetails.Break5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue5Null() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.Value5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue5Null() {
                this[this.tableSaveLandCodeValueDetails.Value5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseValueNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.UseBaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseValueNull() {
                this[this.tableSaveLandCodeValueDetails.UseBaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVFormulaNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.VFormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVFormulaNull() {
                this[this.tableSaveLandCodeValueDetails.VFormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMrktMultiplierNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.MrktMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMrktMultiplierNull() {
                this[this.tableSaveLandCodeValueDetails.MrktMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseMultiplierNull() {
                return this.IsNull(this.tableSaveLandCodeValueDetails.UseMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseMultiplierNull() {
                this[this.tableSaveLandCodeValueDetails.UseMultiplierColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CheckBreakValuesRow : global::System.Data.DataRow {
            
            private CheckBreakValuesDataTable tableCheckBreakValues;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckBreakValuesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCheckBreakValues = ((CheckBreakValuesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableCheckBreakValues.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableCheckBreakValues.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableCheckBreakValues.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableCheckBreakValues.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableCheckBreakValues.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableCheckBreakValues.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableCheckBreakValues.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableCheckBreakValues.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableCheckBreakValues.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableCheckBreakValues.Break5Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandCodeValueDetailsRowChangeEvent : global::System.EventArgs {
            
            private ListLandCodeValueDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeValueDetailsRowChangeEvent(ListLandCodeValueDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeValueDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAppRollYearRowChangeEvent : global::System.EventArgs {
            
            private GetAppRollYearRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRowChangeEvent(GetAppRollYearRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListNeighborhoodTypeRowChangeEvent : global::System.EventArgs {
            
            private ListNeighborhoodTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRowChangeEvent(ListNeighborhoodTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListUnitTypeRowChangeEvent : global::System.EventArgs {
            
            private ListUnitTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnitTypeRowChangeEvent(ListUnitTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListUnitTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandCodeRowChangeEvent : global::System.EventArgs {
            
            private ListLandCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRowChangeEvent(ListLandCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveLandCodeValueDetailsRowChangeEvent : global::System.EventArgs {
            
            private SaveLandCodeValueDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeValueDetailsRowChangeEvent(SaveLandCodeValueDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeValueDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CheckBreakValuesRowChangeEvent : global::System.EventArgs {
            
            private CheckBreakValuesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRowChangeEvent(CheckBreakValuesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591