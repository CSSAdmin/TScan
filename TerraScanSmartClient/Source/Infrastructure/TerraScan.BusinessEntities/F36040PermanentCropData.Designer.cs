//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F36040PermanentCropData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F36040PermanentCropData : global::System.Data.DataSet {
        
        private ListCropCatalogDetialsDataTable tableListCropCatalogDetials;
        
        private GetAppRollYearDataTable tableGetAppRollYear;
        
        private ListNeighborhoodTypeDataTable tableListNeighborhoodType;
        
        private CheckBreakValuesDataTable tableCheckBreakValues;
        
        private SaveCropCatalogDetialsDataTable tableSaveCropCatalogDetials;
        
        private GetCropNBHDDataTable tableGetCropNBHD;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F36040PermanentCropData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F36040PermanentCropData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListCropCatalogDetials"] != null)) {
                    base.Tables.Add(new ListCropCatalogDetialsDataTable(ds.Tables["ListCropCatalogDetials"]));
                }
                if ((ds.Tables["GetAppRollYear"] != null)) {
                    base.Tables.Add(new GetAppRollYearDataTable(ds.Tables["GetAppRollYear"]));
                }
                if ((ds.Tables["ListNeighborhoodType"] != null)) {
                    base.Tables.Add(new ListNeighborhoodTypeDataTable(ds.Tables["ListNeighborhoodType"]));
                }
                if ((ds.Tables["CheckBreakValues"] != null)) {
                    base.Tables.Add(new CheckBreakValuesDataTable(ds.Tables["CheckBreakValues"]));
                }
                if ((ds.Tables["SaveCropCatalogDetials"] != null)) {
                    base.Tables.Add(new SaveCropCatalogDetialsDataTable(ds.Tables["SaveCropCatalogDetials"]));
                }
                if ((ds.Tables["GetCropNBHD"] != null)) {
                    base.Tables.Add(new GetCropNBHDDataTable(ds.Tables["GetCropNBHD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListCropCatalogDetialsDataTable ListCropCatalogDetials {
            get {
                return this.tableListCropCatalogDetials;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetAppRollYearDataTable GetAppRollYear {
            get {
                return this.tableGetAppRollYear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListNeighborhoodTypeDataTable ListNeighborhoodType {
            get {
                return this.tableListNeighborhoodType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CheckBreakValuesDataTable CheckBreakValues {
            get {
                return this.tableCheckBreakValues;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveCropCatalogDetialsDataTable SaveCropCatalogDetials {
            get {
                return this.tableSaveCropCatalogDetials;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetCropNBHDDataTable GetCropNBHD {
            get {
                return this.tableGetCropNBHD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F36040PermanentCropData cln = ((F36040PermanentCropData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListCropCatalogDetials"] != null)) {
                    base.Tables.Add(new ListCropCatalogDetialsDataTable(ds.Tables["ListCropCatalogDetials"]));
                }
                if ((ds.Tables["GetAppRollYear"] != null)) {
                    base.Tables.Add(new GetAppRollYearDataTable(ds.Tables["GetAppRollYear"]));
                }
                if ((ds.Tables["ListNeighborhoodType"] != null)) {
                    base.Tables.Add(new ListNeighborhoodTypeDataTable(ds.Tables["ListNeighborhoodType"]));
                }
                if ((ds.Tables["CheckBreakValues"] != null)) {
                    base.Tables.Add(new CheckBreakValuesDataTable(ds.Tables["CheckBreakValues"]));
                }
                if ((ds.Tables["SaveCropCatalogDetials"] != null)) {
                    base.Tables.Add(new SaveCropCatalogDetialsDataTable(ds.Tables["SaveCropCatalogDetials"]));
                }
                if ((ds.Tables["GetCropNBHD"] != null)) {
                    base.Tables.Add(new GetCropNBHDDataTable(ds.Tables["GetCropNBHD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListCropCatalogDetials = ((ListCropCatalogDetialsDataTable)(base.Tables["ListCropCatalogDetials"]));
            if ((initTable == true)) {
                if ((this.tableListCropCatalogDetials != null)) {
                    this.tableListCropCatalogDetials.InitVars();
                }
            }
            this.tableGetAppRollYear = ((GetAppRollYearDataTable)(base.Tables["GetAppRollYear"]));
            if ((initTable == true)) {
                if ((this.tableGetAppRollYear != null)) {
                    this.tableGetAppRollYear.InitVars();
                }
            }
            this.tableListNeighborhoodType = ((ListNeighborhoodTypeDataTable)(base.Tables["ListNeighborhoodType"]));
            if ((initTable == true)) {
                if ((this.tableListNeighborhoodType != null)) {
                    this.tableListNeighborhoodType.InitVars();
                }
            }
            this.tableCheckBreakValues = ((CheckBreakValuesDataTable)(base.Tables["CheckBreakValues"]));
            if ((initTable == true)) {
                if ((this.tableCheckBreakValues != null)) {
                    this.tableCheckBreakValues.InitVars();
                }
            }
            this.tableSaveCropCatalogDetials = ((SaveCropCatalogDetialsDataTable)(base.Tables["SaveCropCatalogDetials"]));
            if ((initTable == true)) {
                if ((this.tableSaveCropCatalogDetials != null)) {
                    this.tableSaveCropCatalogDetials.InitVars();
                }
            }
            this.tableGetCropNBHD = ((GetCropNBHDDataTable)(base.Tables["GetCropNBHD"]));
            if ((initTable == true)) {
                if ((this.tableGetCropNBHD != null)) {
                    this.tableGetCropNBHD.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F36040PermanentCropData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F36040PermanentCropData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListCropCatalogDetials = new ListCropCatalogDetialsDataTable();
            base.Tables.Add(this.tableListCropCatalogDetials);
            this.tableGetAppRollYear = new GetAppRollYearDataTable();
            base.Tables.Add(this.tableGetAppRollYear);
            this.tableListNeighborhoodType = new ListNeighborhoodTypeDataTable();
            base.Tables.Add(this.tableListNeighborhoodType);
            this.tableCheckBreakValues = new CheckBreakValuesDataTable();
            base.Tables.Add(this.tableCheckBreakValues);
            this.tableSaveCropCatalogDetials = new SaveCropCatalogDetialsDataTable();
            base.Tables.Add(this.tableSaveCropCatalogDetials);
            this.tableGetCropNBHD = new GetCropNBHDDataTable();
            base.Tables.Add(this.tableGetCropNBHD);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListCropCatalogDetials() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetAppRollYear() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListNeighborhoodType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCheckBreakValues() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveCropCatalogDetials() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetCropNBHD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F36040PermanentCropData ds = new F36040PermanentCropData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListCropCatalogDetialsRowChangeEventHandler(object sender, ListCropCatalogDetialsRowChangeEvent e);
        
        public delegate void GetAppRollYearRowChangeEventHandler(object sender, GetAppRollYearRowChangeEvent e);
        
        public delegate void ListNeighborhoodTypeRowChangeEventHandler(object sender, ListNeighborhoodTypeRowChangeEvent e);
        
        public delegate void CheckBreakValuesRowChangeEventHandler(object sender, CheckBreakValuesRowChangeEvent e);
        
        public delegate void SaveCropCatalogDetialsRowChangeEventHandler(object sender, SaveCropCatalogDetialsRowChangeEvent e);
        
        public delegate void GetCropNBHDRowChangeEventHandler(object sender, GetCropNBHDRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListCropCatalogDetialsDataTable : global::System.Data.TypedTableBase<ListCropCatalogDetialsRow> {
            
            private global::System.Data.DataColumn columnCropVID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnNBHDList;
            
            private global::System.Data.DataColumn columnCropCode;
            
            private global::System.Data.DataColumn columnIsFruitTree;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            private global::System.Data.DataColumn columnValue5;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropCatalogDetialsDataTable() {
                this.TableName = "ListCropCatalogDetials";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCropCatalogDetialsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListCropCatalogDetialsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropVIDColumn {
                get {
                    return this.columnCropVID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDListColumn {
                get {
                    return this.columnNBHDList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropCodeColumn {
                get {
                    return this.columnCropCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFruitTreeColumn {
                get {
                    return this.columnIsFruitTree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value5Column {
                get {
                    return this.columnValue5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropCatalogDetialsRow this[int index] {
                get {
                    return ((ListCropCatalogDetialsRow)(this.Rows[index]));
                }
            }
            
            public event ListCropCatalogDetialsRowChangeEventHandler ListCropCatalogDetialsRowChanging;
            
            public event ListCropCatalogDetialsRowChangeEventHandler ListCropCatalogDetialsRowChanged;
            
            public event ListCropCatalogDetialsRowChangeEventHandler ListCropCatalogDetialsRowDeleting;
            
            public event ListCropCatalogDetialsRowChangeEventHandler ListCropCatalogDetialsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListCropCatalogDetialsRow(ListCropCatalogDetialsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropCatalogDetialsRow AddListCropCatalogDetialsRow(
                        int CropVID, 
                        short RollYear, 
                        int NBHDID, 
                        string NBHDList, 
                        string CropCode, 
                        string IsFruitTree, 
                        string Description, 
                        decimal BaseValue, 
                        decimal Break1, 
                        decimal Value1, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Break3, 
                        decimal Value3, 
                        decimal Break4, 
                        decimal Value4, 
                        decimal Break5, 
                        decimal Value5) {
                ListCropCatalogDetialsRow rowListCropCatalogDetialsRow = ((ListCropCatalogDetialsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CropVID,
                        RollYear,
                        NBHDID,
                        NBHDList,
                        CropCode,
                        IsFruitTree,
                        Description,
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        Break5,
                        Value5};
                rowListCropCatalogDetialsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListCropCatalogDetialsRow);
                return rowListCropCatalogDetialsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListCropCatalogDetialsDataTable cln = ((ListCropCatalogDetialsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListCropCatalogDetialsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCropVID = base.Columns["CropVID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnNBHDList = base.Columns["NBHDList"];
                this.columnCropCode = base.Columns["CropCode"];
                this.columnIsFruitTree = base.Columns["IsFruitTree"];
                this.columnDescription = base.Columns["Description"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnBreak5 = base.Columns["Break5"];
                this.columnValue5 = base.Columns["Value5"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCropVID = new global::System.Data.DataColumn("CropVID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropVID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnNBHDList = new global::System.Data.DataColumn("NBHDList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDList);
                this.columnCropCode = new global::System.Data.DataColumn("CropCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropCode);
                this.columnIsFruitTree = new global::System.Data.DataColumn("IsFruitTree", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFruitTree);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
                this.columnValue5 = new global::System.Data.DataColumn("Value5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue5);
                this.columnCropVID.ReadOnly = true;
                this.columnNBHDList.ReadOnly = true;
                this.columnNBHDList.MaxLength = 70;
                this.columnCropCode.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropCatalogDetialsRow NewListCropCatalogDetialsRow() {
                return ((ListCropCatalogDetialsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListCropCatalogDetialsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListCropCatalogDetialsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListCropCatalogDetialsRowChanged != null)) {
                    this.ListCropCatalogDetialsRowChanged(this, new ListCropCatalogDetialsRowChangeEvent(((ListCropCatalogDetialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListCropCatalogDetialsRowChanging != null)) {
                    this.ListCropCatalogDetialsRowChanging(this, new ListCropCatalogDetialsRowChangeEvent(((ListCropCatalogDetialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListCropCatalogDetialsRowDeleted != null)) {
                    this.ListCropCatalogDetialsRowDeleted(this, new ListCropCatalogDetialsRowChangeEvent(((ListCropCatalogDetialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListCropCatalogDetialsRowDeleting != null)) {
                    this.ListCropCatalogDetialsRowDeleting(this, new ListCropCatalogDetialsRowChangeEvent(((ListCropCatalogDetialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListCropCatalogDetialsRow(ListCropCatalogDetialsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36040PermanentCropData ds = new F36040PermanentCropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListCropCatalogDetialsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetAppRollYearDataTable : global::System.Data.TypedTableBase<GetAppRollYearRow> {
            
            private global::System.Data.DataColumn columnAssessmentRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearDataTable() {
                this.TableName = "GetAppRollYear";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAppRollYearDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetAppRollYearDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentRollYearColumn {
                get {
                    return this.columnAssessmentRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRow this[int index] {
                get {
                    return ((GetAppRollYearRow)(this.Rows[index]));
                }
            }
            
            public event GetAppRollYearRowChangeEventHandler GetAppRollYearRowChanging;
            
            public event GetAppRollYearRowChangeEventHandler GetAppRollYearRowChanged;
            
            public event GetAppRollYearRowChangeEventHandler GetAppRollYearRowDeleting;
            
            public event GetAppRollYearRowChangeEventHandler GetAppRollYearRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetAppRollYearRow(GetAppRollYearRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRow AddGetAppRollYearRow(string AssessmentRollYear) {
                GetAppRollYearRow rowGetAppRollYearRow = ((GetAppRollYearRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssessmentRollYear};
                rowGetAppRollYearRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetAppRollYearRow);
                return rowGetAppRollYearRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetAppRollYearDataTable cln = ((GetAppRollYearDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetAppRollYearDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssessmentRollYear = base.Columns["AssessmentRollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssessmentRollYear = new global::System.Data.DataColumn("AssessmentRollYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentRollYear);
                this.columnAssessmentRollYear.ReadOnly = true;
                this.columnAssessmentRollYear.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRow NewGetAppRollYearRow() {
                return ((GetAppRollYearRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetAppRollYearRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetAppRollYearRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetAppRollYearRowChanged != null)) {
                    this.GetAppRollYearRowChanged(this, new GetAppRollYearRowChangeEvent(((GetAppRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetAppRollYearRowChanging != null)) {
                    this.GetAppRollYearRowChanging(this, new GetAppRollYearRowChangeEvent(((GetAppRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetAppRollYearRowDeleted != null)) {
                    this.GetAppRollYearRowDeleted(this, new GetAppRollYearRowChangeEvent(((GetAppRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetAppRollYearRowDeleting != null)) {
                    this.GetAppRollYearRowDeleting(this, new GetAppRollYearRowChangeEvent(((GetAppRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetAppRollYearRow(GetAppRollYearRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36040PermanentCropData ds = new F36040PermanentCropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetAppRollYearDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListNeighborhoodTypeDataTable : global::System.Data.TypedTableBase<ListNeighborhoodTypeRow> {
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnNBHDList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeDataTable() {
                this.TableName = "ListNeighborhoodType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListNeighborhoodTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListNeighborhoodTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDListColumn {
                get {
                    return this.columnNBHDList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRow this[int index] {
                get {
                    return ((ListNeighborhoodTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListNeighborhoodTypeRowChangeEventHandler ListNeighborhoodTypeRowChanging;
            
            public event ListNeighborhoodTypeRowChangeEventHandler ListNeighborhoodTypeRowChanged;
            
            public event ListNeighborhoodTypeRowChangeEventHandler ListNeighborhoodTypeRowDeleting;
            
            public event ListNeighborhoodTypeRowChangeEventHandler ListNeighborhoodTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListNeighborhoodTypeRow(ListNeighborhoodTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRow AddListNeighborhoodTypeRow(int NBHDID, string NBHDList) {
                ListNeighborhoodTypeRow rowListNeighborhoodTypeRow = ((ListNeighborhoodTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NBHDID,
                        NBHDList};
                rowListNeighborhoodTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListNeighborhoodTypeRow);
                return rowListNeighborhoodTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListNeighborhoodTypeDataTable cln = ((ListNeighborhoodTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListNeighborhoodTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnNBHDList = base.Columns["NBHDList"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnNBHDList = new global::System.Data.DataColumn("NBHDList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDList);
                this.columnNBHDID.ReadOnly = true;
                this.columnNBHDList.ReadOnly = true;
                this.columnNBHDList.MaxLength = 70;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRow NewListNeighborhoodTypeRow() {
                return ((ListNeighborhoodTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListNeighborhoodTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListNeighborhoodTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListNeighborhoodTypeRowChanged != null)) {
                    this.ListNeighborhoodTypeRowChanged(this, new ListNeighborhoodTypeRowChangeEvent(((ListNeighborhoodTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListNeighborhoodTypeRowChanging != null)) {
                    this.ListNeighborhoodTypeRowChanging(this, new ListNeighborhoodTypeRowChangeEvent(((ListNeighborhoodTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListNeighborhoodTypeRowDeleted != null)) {
                    this.ListNeighborhoodTypeRowDeleted(this, new ListNeighborhoodTypeRowChangeEvent(((ListNeighborhoodTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListNeighborhoodTypeRowDeleting != null)) {
                    this.ListNeighborhoodTypeRowDeleting(this, new ListNeighborhoodTypeRowChangeEvent(((ListNeighborhoodTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListNeighborhoodTypeRow(ListNeighborhoodTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36040PermanentCropData ds = new F36040PermanentCropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListNeighborhoodTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CheckBreakValuesDataTable : global::System.Data.TypedTableBase<CheckBreakValuesRow> {
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesDataTable() {
                this.TableName = "CheckBreakValues";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckBreakValuesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CheckBreakValuesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow this[int index] {
                get {
                    return ((CheckBreakValuesRow)(this.Rows[index]));
                }
            }
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowChanging;
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowChanged;
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowDeleting;
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCheckBreakValuesRow(CheckBreakValuesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow AddCheckBreakValuesRow(decimal Break1, decimal Break2, decimal Break3, decimal Break4, decimal Break5) {
                CheckBreakValuesRow rowCheckBreakValuesRow = ((CheckBreakValuesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Break1,
                        Break2,
                        Break3,
                        Break4,
                        Break5};
                rowCheckBreakValuesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCheckBreakValuesRow);
                return rowCheckBreakValuesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CheckBreakValuesDataTable cln = ((CheckBreakValuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CheckBreakValuesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBreak1 = base.Columns["Break1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnBreak5 = base.Columns["Break5"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow NewCheckBreakValuesRow() {
                return ((CheckBreakValuesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CheckBreakValuesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CheckBreakValuesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CheckBreakValuesRowChanged != null)) {
                    this.CheckBreakValuesRowChanged(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CheckBreakValuesRowChanging != null)) {
                    this.CheckBreakValuesRowChanging(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CheckBreakValuesRowDeleted != null)) {
                    this.CheckBreakValuesRowDeleted(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CheckBreakValuesRowDeleting != null)) {
                    this.CheckBreakValuesRowDeleting(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCheckBreakValuesRow(CheckBreakValuesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36040PermanentCropData ds = new F36040PermanentCropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CheckBreakValuesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveCropCatalogDetialsDataTable : global::System.Data.TypedTableBase<SaveCropCatalogDetialsRow> {
            
            private global::System.Data.DataColumn columnCropVID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnNBHDList;
            
            private global::System.Data.DataColumn columnCropCode;
            
            private global::System.Data.DataColumn columnIsFruitTree;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            private global::System.Data.DataColumn columnValue5;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveCropCatalogDetialsDataTable() {
                this.TableName = "SaveCropCatalogDetials";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveCropCatalogDetialsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveCropCatalogDetialsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropVIDColumn {
                get {
                    return this.columnCropVID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDListColumn {
                get {
                    return this.columnNBHDList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropCodeColumn {
                get {
                    return this.columnCropCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFruitTreeColumn {
                get {
                    return this.columnIsFruitTree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value5Column {
                get {
                    return this.columnValue5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveCropCatalogDetialsRow this[int index] {
                get {
                    return ((SaveCropCatalogDetialsRow)(this.Rows[index]));
                }
            }
            
            public event SaveCropCatalogDetialsRowChangeEventHandler SaveCropCatalogDetialsRowChanging;
            
            public event SaveCropCatalogDetialsRowChangeEventHandler SaveCropCatalogDetialsRowChanged;
            
            public event SaveCropCatalogDetialsRowChangeEventHandler SaveCropCatalogDetialsRowDeleting;
            
            public event SaveCropCatalogDetialsRowChangeEventHandler SaveCropCatalogDetialsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveCropCatalogDetialsRow(SaveCropCatalogDetialsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveCropCatalogDetialsRow AddSaveCropCatalogDetialsRow(
                        int CropVID, 
                        short RollYear, 
                        int NBHDID, 
                        string NBHDList, 
                        string CropCode, 
                        bool IsFruitTree, 
                        string Description, 
                        decimal BaseValue, 
                        decimal Break1, 
                        decimal Value1, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Break3, 
                        decimal Value3, 
                        decimal Break4, 
                        decimal Value4, 
                        decimal Break5, 
                        decimal Value5) {
                SaveCropCatalogDetialsRow rowSaveCropCatalogDetialsRow = ((SaveCropCatalogDetialsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CropVID,
                        RollYear,
                        NBHDID,
                        NBHDList,
                        CropCode,
                        IsFruitTree,
                        Description,
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        Break5,
                        Value5};
                rowSaveCropCatalogDetialsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveCropCatalogDetialsRow);
                return rowSaveCropCatalogDetialsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveCropCatalogDetialsDataTable cln = ((SaveCropCatalogDetialsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveCropCatalogDetialsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCropVID = base.Columns["CropVID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnNBHDList = base.Columns["NBHDList"];
                this.columnCropCode = base.Columns["CropCode"];
                this.columnIsFruitTree = base.Columns["IsFruitTree"];
                this.columnDescription = base.Columns["Description"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnBreak5 = base.Columns["Break5"];
                this.columnValue5 = base.Columns["Value5"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCropVID = new global::System.Data.DataColumn("CropVID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropVID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnNBHDList = new global::System.Data.DataColumn("NBHDList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDList);
                this.columnCropCode = new global::System.Data.DataColumn("CropCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropCode);
                this.columnIsFruitTree = new global::System.Data.DataColumn("IsFruitTree", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFruitTree);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
                this.columnValue5 = new global::System.Data.DataColumn("Value5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue5);
                this.columnCropVID.ReadOnly = true;
                this.columnNBHDList.ReadOnly = true;
                this.columnNBHDList.MaxLength = 55;
                this.columnCropCode.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveCropCatalogDetialsRow NewSaveCropCatalogDetialsRow() {
                return ((SaveCropCatalogDetialsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveCropCatalogDetialsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveCropCatalogDetialsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveCropCatalogDetialsRowChanged != null)) {
                    this.SaveCropCatalogDetialsRowChanged(this, new SaveCropCatalogDetialsRowChangeEvent(((SaveCropCatalogDetialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveCropCatalogDetialsRowChanging != null)) {
                    this.SaveCropCatalogDetialsRowChanging(this, new SaveCropCatalogDetialsRowChangeEvent(((SaveCropCatalogDetialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveCropCatalogDetialsRowDeleted != null)) {
                    this.SaveCropCatalogDetialsRowDeleted(this, new SaveCropCatalogDetialsRowChangeEvent(((SaveCropCatalogDetialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveCropCatalogDetialsRowDeleting != null)) {
                    this.SaveCropCatalogDetialsRowDeleting(this, new SaveCropCatalogDetialsRowChangeEvent(((SaveCropCatalogDetialsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveCropCatalogDetialsRow(SaveCropCatalogDetialsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36040PermanentCropData ds = new F36040PermanentCropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveCropCatalogDetialsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetCropNBHDDataTable : global::System.Data.TypedTableBase<GetCropNBHDRow> {
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnNBHDList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropNBHDDataTable() {
                this.TableName = "GetCropNBHD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCropNBHDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetCropNBHDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDListColumn {
                get {
                    return this.columnNBHDList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropNBHDRow this[int index] {
                get {
                    return ((GetCropNBHDRow)(this.Rows[index]));
                }
            }
            
            public event GetCropNBHDRowChangeEventHandler GetCropNBHDRowChanging;
            
            public event GetCropNBHDRowChangeEventHandler GetCropNBHDRowChanged;
            
            public event GetCropNBHDRowChangeEventHandler GetCropNBHDRowDeleting;
            
            public event GetCropNBHDRowChangeEventHandler GetCropNBHDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetCropNBHDRow(GetCropNBHDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropNBHDRow AddGetCropNBHDRow(int NBHDID, string NBHDList) {
                GetCropNBHDRow rowGetCropNBHDRow = ((GetCropNBHDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NBHDID,
                        NBHDList};
                rowGetCropNBHDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetCropNBHDRow);
                return rowGetCropNBHDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropNBHDRow FindByNBHDID(int NBHDID) {
                return ((GetCropNBHDRow)(this.Rows.Find(new object[] {
                            NBHDID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetCropNBHDDataTable cln = ((GetCropNBHDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetCropNBHDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnNBHDList = base.Columns["NBHDList"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnNBHDList = new global::System.Data.DataColumn("NBHDList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDList);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNBHDID}, true));
                this.columnNBHDID.AllowDBNull = false;
                this.columnNBHDID.Unique = true;
                this.columnNBHDList.MaxLength = 80;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropNBHDRow NewGetCropNBHDRow() {
                return ((GetCropNBHDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetCropNBHDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetCropNBHDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetCropNBHDRowChanged != null)) {
                    this.GetCropNBHDRowChanged(this, new GetCropNBHDRowChangeEvent(((GetCropNBHDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetCropNBHDRowChanging != null)) {
                    this.GetCropNBHDRowChanging(this, new GetCropNBHDRowChangeEvent(((GetCropNBHDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetCropNBHDRowDeleted != null)) {
                    this.GetCropNBHDRowDeleted(this, new GetCropNBHDRowChangeEvent(((GetCropNBHDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetCropNBHDRowDeleting != null)) {
                    this.GetCropNBHDRowDeleting(this, new GetCropNBHDRowChangeEvent(((GetCropNBHDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetCropNBHDRow(GetCropNBHDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36040PermanentCropData ds = new F36040PermanentCropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetCropNBHDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListCropCatalogDetialsRow : global::System.Data.DataRow {
            
            private ListCropCatalogDetialsDataTable tableListCropCatalogDetials;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCropCatalogDetialsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListCropCatalogDetials = ((ListCropCatalogDetialsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CropVID {
                get {
                    try {
                        return ((int)(this[this.tableListCropCatalogDetials.CropVIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CropVID\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.CropVIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListCropCatalogDetials.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NBHDID {
                get {
                    try {
                        return ((int)(this[this.tableListCropCatalogDetials.NBHDIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDID\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NBHDList {
                get {
                    try {
                        return ((string)(this[this.tableListCropCatalogDetials.NBHDListColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDList\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.NBHDListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CropCode {
                get {
                    try {
                        return ((string)(this[this.tableListCropCatalogDetials.CropCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CropCode\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.CropCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsFruitTree {
                get {
                    try {
                        return ((string)(this[this.tableListCropCatalogDetials.IsFruitTreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFruitTree\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.IsFruitTreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListCropCatalogDetials.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value5 {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropCatalogDetials.Value5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value5\' in table \'ListCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropCatalogDetials.Value5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropVIDNull() {
                return this.IsNull(this.tableListCropCatalogDetials.CropVIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropVIDNull() {
                this[this.tableListCropCatalogDetials.CropVIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListCropCatalogDetials.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListCropCatalogDetials.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tableListCropCatalogDetials.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tableListCropCatalogDetials.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDListNull() {
                return this.IsNull(this.tableListCropCatalogDetials.NBHDListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDListNull() {
                this[this.tableListCropCatalogDetials.NBHDListColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropCodeNull() {
                return this.IsNull(this.tableListCropCatalogDetials.CropCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropCodeNull() {
                this[this.tableListCropCatalogDetials.CropCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFruitTreeNull() {
                return this.IsNull(this.tableListCropCatalogDetials.IsFruitTreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFruitTreeNull() {
                this[this.tableListCropCatalogDetials.IsFruitTreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListCropCatalogDetials.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListCropCatalogDetials.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableListCropCatalogDetials.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableListCropCatalogDetials.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableListCropCatalogDetials.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableListCropCatalogDetials.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableListCropCatalogDetials.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableListCropCatalogDetials.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableListCropCatalogDetials.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableListCropCatalogDetials.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableListCropCatalogDetials.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableListCropCatalogDetials.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableListCropCatalogDetials.Break5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue5Null() {
                return this.IsNull(this.tableListCropCatalogDetials.Value5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue5Null() {
                this[this.tableListCropCatalogDetials.Value5Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetAppRollYearRow : global::System.Data.DataRow {
            
            private GetAppRollYearDataTable tableGetAppRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetAppRollYearRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetAppRollYear = ((GetAppRollYearDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessmentRollYear {
                get {
                    try {
                        return ((string)(this[this.tableGetAppRollYear.AssessmentRollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentRollYear\' in table \'GetAppRollYear\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetAppRollYear.AssessmentRollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentRollYearNull() {
                return this.IsNull(this.tableGetAppRollYear.AssessmentRollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentRollYearNull() {
                this[this.tableGetAppRollYear.AssessmentRollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListNeighborhoodTypeRow : global::System.Data.DataRow {
            
            private ListNeighborhoodTypeDataTable tableListNeighborhoodType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListNeighborhoodTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListNeighborhoodType = ((ListNeighborhoodTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NBHDID {
                get {
                    try {
                        return ((int)(this[this.tableListNeighborhoodType.NBHDIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDID\' in table \'ListNeighborhoodType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListNeighborhoodType.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NBHDList {
                get {
                    try {
                        return ((string)(this[this.tableListNeighborhoodType.NBHDListColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDList\' in table \'ListNeighborhoodType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListNeighborhoodType.NBHDListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tableListNeighborhoodType.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tableListNeighborhoodType.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDListNull() {
                return this.IsNull(this.tableListNeighborhoodType.NBHDListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDListNull() {
                this[this.tableListNeighborhoodType.NBHDListColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CheckBreakValuesRow : global::System.Data.DataRow {
            
            private CheckBreakValuesDataTable tableCheckBreakValues;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckBreakValuesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCheckBreakValues = ((CheckBreakValuesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableCheckBreakValues.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableCheckBreakValues.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableCheckBreakValues.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableCheckBreakValues.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableCheckBreakValues.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableCheckBreakValues.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableCheckBreakValues.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableCheckBreakValues.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableCheckBreakValues.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableCheckBreakValues.Break5Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveCropCatalogDetialsRow : global::System.Data.DataRow {
            
            private SaveCropCatalogDetialsDataTable tableSaveCropCatalogDetials;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveCropCatalogDetialsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveCropCatalogDetials = ((SaveCropCatalogDetialsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CropVID {
                get {
                    try {
                        return ((int)(this[this.tableSaveCropCatalogDetials.CropVIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CropVID\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.CropVIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableSaveCropCatalogDetials.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NBHDID {
                get {
                    try {
                        return ((int)(this[this.tableSaveCropCatalogDetials.NBHDIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDID\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NBHDList {
                get {
                    try {
                        return ((string)(this[this.tableSaveCropCatalogDetials.NBHDListColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDList\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.NBHDListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CropCode {
                get {
                    try {
                        return ((string)(this[this.tableSaveCropCatalogDetials.CropCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CropCode\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.CropCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFruitTree {
                get {
                    try {
                        return ((bool)(this[this.tableSaveCropCatalogDetials.IsFruitTreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFruitTree\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.IsFruitTreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSaveCropCatalogDetials.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value5 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveCropCatalogDetials.Value5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value5\' in table \'SaveCropCatalogDetials\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveCropCatalogDetials.Value5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropVIDNull() {
                return this.IsNull(this.tableSaveCropCatalogDetials.CropVIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropVIDNull() {
                this[this.tableSaveCropCatalogDetials.CropVIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableSaveCropCatalogDetials.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableSaveCropCatalogDetials.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tableSaveCropCatalogDetials.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tableSaveCropCatalogDetials.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDListNull() {
                return this.IsNull(this.tableSaveCropCatalogDetials.NBHDListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDListNull() {
                this[this.tableSaveCropCatalogDetials.NBHDListColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropCodeNull() {
                return this.IsNull(this.tableSaveCropCatalogDetials.CropCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropCodeNull() {
                this[this.tableSaveCropCatalogDetials.CropCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFruitTreeNull() {
                return this.IsNull(this.tableSaveCropCatalogDetials.IsFruitTreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFruitTreeNull() {
                this[this.tableSaveCropCatalogDetials.IsFruitTreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSaveCropCatalogDetials.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSaveCropCatalogDetials.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableSaveCropCatalogDetials.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableSaveCropCatalogDetials.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableSaveCropCatalogDetials.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableSaveCropCatalogDetials.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableSaveCropCatalogDetials.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableSaveCropCatalogDetials.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableSaveCropCatalogDetials.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableSaveCropCatalogDetials.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableSaveCropCatalogDetials.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableSaveCropCatalogDetials.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableSaveCropCatalogDetials.Break5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue5Null() {
                return this.IsNull(this.tableSaveCropCatalogDetials.Value5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue5Null() {
                this[this.tableSaveCropCatalogDetials.Value5Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetCropNBHDRow : global::System.Data.DataRow {
            
            private GetCropNBHDDataTable tableGetCropNBHD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCropNBHDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetCropNBHD = ((GetCropNBHDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NBHDID {
                get {
                    return ((int)(this[this.tableGetCropNBHD.NBHDIDColumn]));
                }
                set {
                    this[this.tableGetCropNBHD.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NBHDList {
                get {
                    try {
                        return ((string)(this[this.tableGetCropNBHD.NBHDListColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDList\' in table \'GetCropNBHD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropNBHD.NBHDListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDListNull() {
                return this.IsNull(this.tableGetCropNBHD.NBHDListColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDListNull() {
                this[this.tableGetCropNBHD.NBHDListColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListCropCatalogDetialsRowChangeEvent : global::System.EventArgs {
            
            private ListCropCatalogDetialsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropCatalogDetialsRowChangeEvent(ListCropCatalogDetialsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropCatalogDetialsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetAppRollYearRowChangeEvent : global::System.EventArgs {
            
            private GetAppRollYearRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRowChangeEvent(GetAppRollYearRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetAppRollYearRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListNeighborhoodTypeRowChangeEvent : global::System.EventArgs {
            
            private ListNeighborhoodTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRowChangeEvent(ListNeighborhoodTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListNeighborhoodTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CheckBreakValuesRowChangeEvent : global::System.EventArgs {
            
            private CheckBreakValuesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRowChangeEvent(CheckBreakValuesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveCropCatalogDetialsRowChangeEvent : global::System.EventArgs {
            
            private SaveCropCatalogDetialsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveCropCatalogDetialsRowChangeEvent(SaveCropCatalogDetialsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveCropCatalogDetialsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetCropNBHDRowChangeEvent : global::System.EventArgs {
            
            private GetCropNBHDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropNBHDRowChangeEvent(GetCropNBHDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropNBHDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591