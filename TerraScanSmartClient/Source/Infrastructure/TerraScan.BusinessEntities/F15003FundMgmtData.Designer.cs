//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F15003FundMgmtData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F15003FundMgmtData : global::System.Data.DataSet {
        
        private ListFundTypeDataTable tableListFundType;
        
        private ListFundAndSubFundItemsDataTable tableListFundAndSubFundItems;
        
        private ListAvailableSubFundItemsDataTable tableListAvailableSubFundItems;
        
        private FundHeaderDataTable tableFundHeader;
        
        private GetSubFundItemDataTable tableGetSubFundItem;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F15003FundMgmtData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F15003FundMgmtData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListFundType"] != null)) {
                    base.Tables.Add(new ListFundTypeDataTable(ds.Tables["ListFundType"]));
                }
                if ((ds.Tables["ListFundAndSubFundItems"] != null)) {
                    base.Tables.Add(new ListFundAndSubFundItemsDataTable(ds.Tables["ListFundAndSubFundItems"]));
                }
                if ((ds.Tables["ListAvailableSubFundItems"] != null)) {
                    base.Tables.Add(new ListAvailableSubFundItemsDataTable(ds.Tables["ListAvailableSubFundItems"]));
                }
                if ((ds.Tables["FundHeader"] != null)) {
                    base.Tables.Add(new FundHeaderDataTable(ds.Tables["FundHeader"]));
                }
                if ((ds.Tables["GetSubFundItem"] != null)) {
                    base.Tables.Add(new GetSubFundItemDataTable(ds.Tables["GetSubFundItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListFundTypeDataTable ListFundType {
            get {
                return this.tableListFundType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListFundAndSubFundItemsDataTable ListFundAndSubFundItems {
            get {
                return this.tableListFundAndSubFundItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAvailableSubFundItemsDataTable ListAvailableSubFundItems {
            get {
                return this.tableListAvailableSubFundItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FundHeaderDataTable FundHeader {
            get {
                return this.tableFundHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSubFundItemDataTable GetSubFundItem {
            get {
                return this.tableGetSubFundItem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F15003FundMgmtData cln = ((F15003FundMgmtData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListFundType"] != null)) {
                    base.Tables.Add(new ListFundTypeDataTable(ds.Tables["ListFundType"]));
                }
                if ((ds.Tables["ListFundAndSubFundItems"] != null)) {
                    base.Tables.Add(new ListFundAndSubFundItemsDataTable(ds.Tables["ListFundAndSubFundItems"]));
                }
                if ((ds.Tables["ListAvailableSubFundItems"] != null)) {
                    base.Tables.Add(new ListAvailableSubFundItemsDataTable(ds.Tables["ListAvailableSubFundItems"]));
                }
                if ((ds.Tables["FundHeader"] != null)) {
                    base.Tables.Add(new FundHeaderDataTable(ds.Tables["FundHeader"]));
                }
                if ((ds.Tables["GetSubFundItem"] != null)) {
                    base.Tables.Add(new GetSubFundItemDataTable(ds.Tables["GetSubFundItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListFundType = ((ListFundTypeDataTable)(base.Tables["ListFundType"]));
            if ((initTable == true)) {
                if ((this.tableListFundType != null)) {
                    this.tableListFundType.InitVars();
                }
            }
            this.tableListFundAndSubFundItems = ((ListFundAndSubFundItemsDataTable)(base.Tables["ListFundAndSubFundItems"]));
            if ((initTable == true)) {
                if ((this.tableListFundAndSubFundItems != null)) {
                    this.tableListFundAndSubFundItems.InitVars();
                }
            }
            this.tableListAvailableSubFundItems = ((ListAvailableSubFundItemsDataTable)(base.Tables["ListAvailableSubFundItems"]));
            if ((initTable == true)) {
                if ((this.tableListAvailableSubFundItems != null)) {
                    this.tableListAvailableSubFundItems.InitVars();
                }
            }
            this.tableFundHeader = ((FundHeaderDataTable)(base.Tables["FundHeader"]));
            if ((initTable == true)) {
                if ((this.tableFundHeader != null)) {
                    this.tableFundHeader.InitVars();
                }
            }
            this.tableGetSubFundItem = ((GetSubFundItemDataTable)(base.Tables["GetSubFundItem"]));
            if ((initTable == true)) {
                if ((this.tableGetSubFundItem != null)) {
                    this.tableGetSubFundItem.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F15003FundMgmtData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F15003FundMgmtData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListFundType = new ListFundTypeDataTable();
            base.Tables.Add(this.tableListFundType);
            this.tableListFundAndSubFundItems = new ListFundAndSubFundItemsDataTable();
            base.Tables.Add(this.tableListFundAndSubFundItems);
            this.tableListAvailableSubFundItems = new ListAvailableSubFundItemsDataTable();
            base.Tables.Add(this.tableListAvailableSubFundItems);
            this.tableFundHeader = new FundHeaderDataTable();
            base.Tables.Add(this.tableFundHeader);
            this.tableGetSubFundItem = new GetSubFundItemDataTable();
            base.Tables.Add(this.tableGetSubFundItem);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListFundType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListFundAndSubFundItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAvailableSubFundItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFundHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSubFundItem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F15003FundMgmtData ds = new F15003FundMgmtData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListFundTypeRowChangeEventHandler(object sender, ListFundTypeRowChangeEvent e);
        
        public delegate void ListFundAndSubFundItemsRowChangeEventHandler(object sender, ListFundAndSubFundItemsRowChangeEvent e);
        
        public delegate void ListAvailableSubFundItemsRowChangeEventHandler(object sender, ListAvailableSubFundItemsRowChangeEvent e);
        
        public delegate void FundHeaderRowChangeEventHandler(object sender, FundHeaderRowChangeEvent e);
        
        public delegate void GetSubFundItemRowChangeEventHandler(object sender, GetSubFundItemRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListFundTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFundGroupID;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundTypeDataTable() {
                this.TableName = "ListFundType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListFundTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListFundTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundGroupIDColumn {
                get {
                    return this.columnFundGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundTypeRow this[int index] {
                get {
                    return ((ListFundTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListFundTypeRowChangeEventHandler ListFundTypeRowChanging;
            
            public event ListFundTypeRowChangeEventHandler ListFundTypeRowChanged;
            
            public event ListFundTypeRowChangeEventHandler ListFundTypeRowDeleting;
            
            public event ListFundTypeRowChangeEventHandler ListFundTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListFundTypeRow(ListFundTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundTypeRow AddListFundTypeRow(byte FundGroupID, string Description) {
                ListFundTypeRow rowListFundTypeRow = ((ListFundTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FundGroupID,
                        Description};
                rowListFundTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListFundTypeRow);
                return rowListFundTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListFundTypeDataTable cln = ((ListFundTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListFundTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFundGroupID = base.Columns["FundGroupID"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFundGroupID = new global::System.Data.DataColumn("FundGroupID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundGroupID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundTypeRow NewListFundTypeRow() {
                return ((ListFundTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListFundTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListFundTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListFundTypeRowChanged != null)) {
                    this.ListFundTypeRowChanged(this, new ListFundTypeRowChangeEvent(((ListFundTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListFundTypeRowChanging != null)) {
                    this.ListFundTypeRowChanging(this, new ListFundTypeRowChangeEvent(((ListFundTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListFundTypeRowDeleted != null)) {
                    this.ListFundTypeRowDeleted(this, new ListFundTypeRowChangeEvent(((ListFundTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListFundTypeRowDeleting != null)) {
                    this.ListFundTypeRowDeleting(this, new ListFundTypeRowChangeEvent(((ListFundTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListFundTypeRow(ListFundTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15003FundMgmtData ds = new F15003FundMgmtData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListFundTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListFundAndSubFundItemsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnFundID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnSubFund;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnIsVoterApproved;
            
            private global::System.Data.DataColumn columnCommissionRate;
            
            private global::System.Data.DataColumn columnIsCash;
            
            private global::System.Data.DataColumn columnFactor;
            
            private global::System.Data.DataColumn columnSubFundTypeID;
            
            private global::System.Data.DataColumn columnAgencyID;
            
            private global::System.Data.DataColumn columnPrimaryKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundAndSubFundItemsDataTable() {
                this.TableName = "ListFundAndSubFundItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListFundAndSubFundItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListFundAndSubFundItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundIDColumn {
                get {
                    return this.columnFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVoterApprovedColumn {
                get {
                    return this.columnIsVoterApproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionRateColumn {
                get {
                    return this.columnCommissionRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCashColumn {
                get {
                    return this.columnIsCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactorColumn {
                get {
                    return this.columnFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeIDColumn {
                get {
                    return this.columnSubFundTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyIDColumn {
                get {
                    return this.columnAgencyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryKeyIDColumn {
                get {
                    return this.columnPrimaryKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundAndSubFundItemsRow this[int index] {
                get {
                    return ((ListFundAndSubFundItemsRow)(this.Rows[index]));
                }
            }
            
            public event ListFundAndSubFundItemsRowChangeEventHandler ListFundAndSubFundItemsRowChanging;
            
            public event ListFundAndSubFundItemsRowChangeEventHandler ListFundAndSubFundItemsRowChanged;
            
            public event ListFundAndSubFundItemsRowChangeEventHandler ListFundAndSubFundItemsRowDeleting;
            
            public event ListFundAndSubFundItemsRowChangeEventHandler ListFundAndSubFundItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListFundAndSubFundItemsRow(ListFundAndSubFundItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundAndSubFundItemsRow AddListFundAndSubFundItemsRow(int SubFundID, int FundID, short RollYear, string SubFund, string Description, decimal Rate, bool IsVoterApproved, decimal CommissionRate, bool IsCash, decimal Factor, byte SubFundTypeID, int AgencyID) {
                ListFundAndSubFundItemsRow rowListFundAndSubFundItemsRow = ((ListFundAndSubFundItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubFundID,
                        FundID,
                        RollYear,
                        SubFund,
                        Description,
                        Rate,
                        IsVoterApproved,
                        CommissionRate,
                        IsCash,
                        Factor,
                        SubFundTypeID,
                        AgencyID,
                        null};
                rowListFundAndSubFundItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListFundAndSubFundItemsRow);
                return rowListFundAndSubFundItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListFundAndSubFundItemsDataTable cln = ((ListFundAndSubFundItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListFundAndSubFundItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnFundID = base.Columns["FundID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnSubFund = base.Columns["SubFund"];
                this.columnDescription = base.Columns["Description"];
                this.columnRate = base.Columns["Rate"];
                this.columnIsVoterApproved = base.Columns["IsVoterApproved"];
                this.columnCommissionRate = base.Columns["CommissionRate"];
                this.columnIsCash = base.Columns["IsCash"];
                this.columnFactor = base.Columns["Factor"];
                this.columnSubFundTypeID = base.Columns["SubFundTypeID"];
                this.columnAgencyID = base.Columns["AgencyID"];
                this.columnPrimaryKeyID = base.Columns["PrimaryKeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnFundID = new global::System.Data.DataColumn("FundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnIsVoterApproved = new global::System.Data.DataColumn("IsVoterApproved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVoterApproved);
                this.columnCommissionRate = new global::System.Data.DataColumn("CommissionRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionRate);
                this.columnIsCash = new global::System.Data.DataColumn("IsCash", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCash);
                this.columnFactor = new global::System.Data.DataColumn("Factor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactor);
                this.columnSubFundTypeID = new global::System.Data.DataColumn("SubFundTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundTypeID);
                this.columnAgencyID = new global::System.Data.DataColumn("AgencyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyID);
                this.columnPrimaryKeyID = new global::System.Data.DataColumn("PrimaryKeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryKeyID);
                this.columnSubFund.MaxLength = 50;
                this.columnDescription.MaxLength = 70;
                this.columnPrimaryKeyID.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundAndSubFundItemsRow NewListFundAndSubFundItemsRow() {
                return ((ListFundAndSubFundItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListFundAndSubFundItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListFundAndSubFundItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListFundAndSubFundItemsRowChanged != null)) {
                    this.ListFundAndSubFundItemsRowChanged(this, new ListFundAndSubFundItemsRowChangeEvent(((ListFundAndSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListFundAndSubFundItemsRowChanging != null)) {
                    this.ListFundAndSubFundItemsRowChanging(this, new ListFundAndSubFundItemsRowChangeEvent(((ListFundAndSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListFundAndSubFundItemsRowDeleted != null)) {
                    this.ListFundAndSubFundItemsRowDeleted(this, new ListFundAndSubFundItemsRowChangeEvent(((ListFundAndSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListFundAndSubFundItemsRowDeleting != null)) {
                    this.ListFundAndSubFundItemsRowDeleting(this, new ListFundAndSubFundItemsRowChangeEvent(((ListFundAndSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListFundAndSubFundItemsRow(ListFundAndSubFundItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15003FundMgmtData ds = new F15003FundMgmtData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListFundAndSubFundItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAvailableSubFundItemsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnFundID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnSubFund;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnIsVoterApproved;
            
            private global::System.Data.DataColumn columnCommissionRate;
            
            private global::System.Data.DataColumn columnIsCash;
            
            private global::System.Data.DataColumn columnFactor;
            
            private global::System.Data.DataColumn columnSubFundTypeID;
            
            private global::System.Data.DataColumn columnAgencyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAvailableSubFundItemsDataTable() {
                this.TableName = "ListAvailableSubFundItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAvailableSubFundItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAvailableSubFundItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundIDColumn {
                get {
                    return this.columnFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVoterApprovedColumn {
                get {
                    return this.columnIsVoterApproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionRateColumn {
                get {
                    return this.columnCommissionRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCashColumn {
                get {
                    return this.columnIsCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactorColumn {
                get {
                    return this.columnFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeIDColumn {
                get {
                    return this.columnSubFundTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyIDColumn {
                get {
                    return this.columnAgencyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAvailableSubFundItemsRow this[int index] {
                get {
                    return ((ListAvailableSubFundItemsRow)(this.Rows[index]));
                }
            }
            
            public event ListAvailableSubFundItemsRowChangeEventHandler ListAvailableSubFundItemsRowChanging;
            
            public event ListAvailableSubFundItemsRowChangeEventHandler ListAvailableSubFundItemsRowChanged;
            
            public event ListAvailableSubFundItemsRowChangeEventHandler ListAvailableSubFundItemsRowDeleting;
            
            public event ListAvailableSubFundItemsRowChangeEventHandler ListAvailableSubFundItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAvailableSubFundItemsRow(ListAvailableSubFundItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAvailableSubFundItemsRow AddListAvailableSubFundItemsRow(int SubFundID, int FundID, short RollYear, string SubFund, string Description, decimal Rate, bool IsVoterApproved, decimal CommissionRate, bool IsCash, decimal Factor, byte SubFundTypeID, int AgencyID) {
                ListAvailableSubFundItemsRow rowListAvailableSubFundItemsRow = ((ListAvailableSubFundItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubFundID,
                        FundID,
                        RollYear,
                        SubFund,
                        Description,
                        Rate,
                        IsVoterApproved,
                        CommissionRate,
                        IsCash,
                        Factor,
                        SubFundTypeID,
                        AgencyID};
                rowListAvailableSubFundItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAvailableSubFundItemsRow);
                return rowListAvailableSubFundItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAvailableSubFundItemsDataTable cln = ((ListAvailableSubFundItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAvailableSubFundItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnFundID = base.Columns["FundID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnSubFund = base.Columns["SubFund"];
                this.columnDescription = base.Columns["Description"];
                this.columnRate = base.Columns["Rate"];
                this.columnIsVoterApproved = base.Columns["IsVoterApproved"];
                this.columnCommissionRate = base.Columns["CommissionRate"];
                this.columnIsCash = base.Columns["IsCash"];
                this.columnFactor = base.Columns["Factor"];
                this.columnSubFundTypeID = base.Columns["SubFundTypeID"];
                this.columnAgencyID = base.Columns["AgencyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnFundID = new global::System.Data.DataColumn("FundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnIsVoterApproved = new global::System.Data.DataColumn("IsVoterApproved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVoterApproved);
                this.columnCommissionRate = new global::System.Data.DataColumn("CommissionRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionRate);
                this.columnIsCash = new global::System.Data.DataColumn("IsCash", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCash);
                this.columnFactor = new global::System.Data.DataColumn("Factor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactor);
                this.columnSubFundTypeID = new global::System.Data.DataColumn("SubFundTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundTypeID);
                this.columnAgencyID = new global::System.Data.DataColumn("AgencyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyID);
                this.columnSubFund.MaxLength = 50;
                this.columnDescription.MaxLength = 70;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAvailableSubFundItemsRow NewListAvailableSubFundItemsRow() {
                return ((ListAvailableSubFundItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAvailableSubFundItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAvailableSubFundItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAvailableSubFundItemsRowChanged != null)) {
                    this.ListAvailableSubFundItemsRowChanged(this, new ListAvailableSubFundItemsRowChangeEvent(((ListAvailableSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAvailableSubFundItemsRowChanging != null)) {
                    this.ListAvailableSubFundItemsRowChanging(this, new ListAvailableSubFundItemsRowChangeEvent(((ListAvailableSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAvailableSubFundItemsRowDeleted != null)) {
                    this.ListAvailableSubFundItemsRowDeleted(this, new ListAvailableSubFundItemsRowChangeEvent(((ListAvailableSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAvailableSubFundItemsRowDeleting != null)) {
                    this.ListAvailableSubFundItemsRowDeleting(this, new ListAvailableSubFundItemsRowChangeEvent(((ListAvailableSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAvailableSubFundItemsRow(ListAvailableSubFundItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15003FundMgmtData ds = new F15003FundMgmtData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAvailableSubFundItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FundHeaderDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFundID;
            
            private global::System.Data.DataColumn columnFund;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnFundGroupID;
            
            private global::System.Data.DataColumn columnFundGroupName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FundHeaderDataTable() {
                this.TableName = "FundHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FundHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FundHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundIDColumn {
                get {
                    return this.columnFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundColumn {
                get {
                    return this.columnFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundGroupIDColumn {
                get {
                    return this.columnFundGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundGroupNameColumn {
                get {
                    return this.columnFundGroupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FundHeaderRow this[int index] {
                get {
                    return ((FundHeaderRow)(this.Rows[index]));
                }
            }
            
            public event FundHeaderRowChangeEventHandler FundHeaderRowChanging;
            
            public event FundHeaderRowChangeEventHandler FundHeaderRowChanged;
            
            public event FundHeaderRowChangeEventHandler FundHeaderRowDeleting;
            
            public event FundHeaderRowChangeEventHandler FundHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFundHeaderRow(FundHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FundHeaderRow AddFundHeaderRow(int FundID, string Fund, string Description, short RollYear, byte FundGroupID, string FundGroupName) {
                FundHeaderRow rowFundHeaderRow = ((FundHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FundID,
                        Fund,
                        Description,
                        RollYear,
                        FundGroupID,
                        FundGroupName};
                rowFundHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFundHeaderRow);
                return rowFundHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FundHeaderDataTable cln = ((FundHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FundHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFundID = base.Columns["FundID"];
                this.columnFund = base.Columns["Fund"];
                this.columnDescription = base.Columns["Description"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnFundGroupID = base.Columns["FundGroupID"];
                this.columnFundGroupName = base.Columns["FundGroupName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFundID = new global::System.Data.DataColumn("FundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundID);
                this.columnFund = new global::System.Data.DataColumn("Fund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFund);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnFundGroupID = new global::System.Data.DataColumn("FundGroupID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundGroupID);
                this.columnFundGroupName = new global::System.Data.DataColumn("FundGroupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundGroupName);
                this.columnFundID.ReadOnly = true;
                this.columnDescription.MaxLength = 50;
                this.columnFundGroupName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FundHeaderRow NewFundHeaderRow() {
                return ((FundHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FundHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FundHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FundHeaderRowChanged != null)) {
                    this.FundHeaderRowChanged(this, new FundHeaderRowChangeEvent(((FundHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FundHeaderRowChanging != null)) {
                    this.FundHeaderRowChanging(this, new FundHeaderRowChangeEvent(((FundHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FundHeaderRowDeleted != null)) {
                    this.FundHeaderRowDeleted(this, new FundHeaderRowChangeEvent(((FundHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FundHeaderRowDeleting != null)) {
                    this.FundHeaderRowDeleting(this, new FundHeaderRowChangeEvent(((FundHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFundHeaderRow(FundHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15003FundMgmtData ds = new F15003FundMgmtData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FundHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSubFundItemDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnFundID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnSubFund;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnIsVoterApproved;
            
            private global::System.Data.DataColumn columnCommissionRate;
            
            private global::System.Data.DataColumn columnIsCash;
            
            private global::System.Data.DataColumn columnFactor;
            
            private global::System.Data.DataColumn columnSubFundTypeID;
            
            private global::System.Data.DataColumn columnAgencyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSubFundItemDataTable() {
                this.TableName = "GetSubFundItem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSubFundItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSubFundItemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundIDColumn {
                get {
                    return this.columnFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVoterApprovedColumn {
                get {
                    return this.columnIsVoterApproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionRateColumn {
                get {
                    return this.columnCommissionRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCashColumn {
                get {
                    return this.columnIsCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactorColumn {
                get {
                    return this.columnFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeIDColumn {
                get {
                    return this.columnSubFundTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyIDColumn {
                get {
                    return this.columnAgencyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSubFundItemRow this[int index] {
                get {
                    return ((GetSubFundItemRow)(this.Rows[index]));
                }
            }
            
            public event GetSubFundItemRowChangeEventHandler GetSubFundItemRowChanging;
            
            public event GetSubFundItemRowChangeEventHandler GetSubFundItemRowChanged;
            
            public event GetSubFundItemRowChangeEventHandler GetSubFundItemRowDeleting;
            
            public event GetSubFundItemRowChangeEventHandler GetSubFundItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSubFundItemRow(GetSubFundItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSubFundItemRow AddGetSubFundItemRow(int SubFundID, int FundID, short RollYear, string SubFund, string Description, decimal Rate, bool IsVoterApproved, decimal CommissionRate, bool IsCash, decimal Factor, byte SubFundTypeID, int AgencyID) {
                GetSubFundItemRow rowGetSubFundItemRow = ((GetSubFundItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubFundID,
                        FundID,
                        RollYear,
                        SubFund,
                        Description,
                        Rate,
                        IsVoterApproved,
                        CommissionRate,
                        IsCash,
                        Factor,
                        SubFundTypeID,
                        AgencyID};
                rowGetSubFundItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSubFundItemRow);
                return rowGetSubFundItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSubFundItemDataTable cln = ((GetSubFundItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSubFundItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnFundID = base.Columns["FundID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnSubFund = base.Columns["SubFund"];
                this.columnDescription = base.Columns["Description"];
                this.columnRate = base.Columns["Rate"];
                this.columnIsVoterApproved = base.Columns["IsVoterApproved"];
                this.columnCommissionRate = base.Columns["CommissionRate"];
                this.columnIsCash = base.Columns["IsCash"];
                this.columnFactor = base.Columns["Factor"];
                this.columnSubFundTypeID = base.Columns["SubFundTypeID"];
                this.columnAgencyID = base.Columns["AgencyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnFundID = new global::System.Data.DataColumn("FundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnIsVoterApproved = new global::System.Data.DataColumn("IsVoterApproved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVoterApproved);
                this.columnCommissionRate = new global::System.Data.DataColumn("CommissionRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionRate);
                this.columnIsCash = new global::System.Data.DataColumn("IsCash", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCash);
                this.columnFactor = new global::System.Data.DataColumn("Factor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactor);
                this.columnSubFundTypeID = new global::System.Data.DataColumn("SubFundTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundTypeID);
                this.columnAgencyID = new global::System.Data.DataColumn("AgencyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyID);
                this.columnSubFund.MaxLength = 50;
                this.columnDescription.MaxLength = 70;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSubFundItemRow NewGetSubFundItemRow() {
                return ((GetSubFundItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSubFundItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSubFundItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSubFundItemRowChanged != null)) {
                    this.GetSubFundItemRowChanged(this, new GetSubFundItemRowChangeEvent(((GetSubFundItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSubFundItemRowChanging != null)) {
                    this.GetSubFundItemRowChanging(this, new GetSubFundItemRowChangeEvent(((GetSubFundItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSubFundItemRowDeleted != null)) {
                    this.GetSubFundItemRowDeleted(this, new GetSubFundItemRowChangeEvent(((GetSubFundItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSubFundItemRowDeleting != null)) {
                    this.GetSubFundItemRowDeleting(this, new GetSubFundItemRowChangeEvent(((GetSubFundItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSubFundItemRow(GetSubFundItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F15003FundMgmtData ds = new F15003FundMgmtData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSubFundItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListFundTypeRow : global::System.Data.DataRow {
            
            private ListFundTypeDataTable tableListFundType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListFundTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListFundType = ((ListFundTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte FundGroupID {
                get {
                    try {
                        return ((byte)(this[this.tableListFundType.FundGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundGroupID\' in table \'ListFundType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundType.FundGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListFundType.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListFundType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundType.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundGroupIDNull() {
                return this.IsNull(this.tableListFundType.FundGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundGroupIDNull() {
                this[this.tableListFundType.FundGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListFundType.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListFundType.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListFundAndSubFundItemsRow : global::System.Data.DataRow {
            
            private ListFundAndSubFundItemsDataTable tableListFundAndSubFundItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListFundAndSubFundItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListFundAndSubFundItems = ((ListFundAndSubFundItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    try {
                        return ((int)(this[this.tableListFundAndSubFundItems.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'ListFundAndSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FundID {
                get {
                    try {
                        return ((int)(this[this.tableListFundAndSubFundItems.FundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundID\' in table \'ListFundAndSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.FundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListFundAndSubFundItems.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListFundAndSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableListFundAndSubFundItems.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'ListFundAndSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListFundAndSubFundItems.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListFundAndSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableListFundAndSubFundItems.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'ListFundAndSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoterApproved {
                get {
                    try {
                        return ((bool)(this[this.tableListFundAndSubFundItems.IsVoterApprovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVoterApproved\' in table \'ListFundAndSubFundItems\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.IsVoterApprovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommissionRate {
                get {
                    try {
                        return ((decimal)(this[this.tableListFundAndSubFundItems.CommissionRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommissionRate\' in table \'ListFundAndSubFundItems\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.CommissionRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCash {
                get {
                    try {
                        return ((bool)(this[this.tableListFundAndSubFundItems.IsCashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCash\' in table \'ListFundAndSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.IsCashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Factor {
                get {
                    try {
                        return ((decimal)(this[this.tableListFundAndSubFundItems.FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factor\' in table \'ListFundAndSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SubFundTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableListFundAndSubFundItems.SubFundTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundTypeID\' in table \'ListFundAndSubFundItems\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.SubFundTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgencyID {
                get {
                    try {
                        return ((int)(this[this.tableListFundAndSubFundItems.AgencyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyID\' in table \'ListFundAndSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.AgencyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrimaryKeyID {
                get {
                    try {
                        return ((int)(this[this.tableListFundAndSubFundItems.PrimaryKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryKeyID\' in table \'ListFundAndSubFundItems\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListFundAndSubFundItems.PrimaryKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tableListFundAndSubFundItems.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundIDNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.FundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundIDNull() {
                this[this.tableListFundAndSubFundItems.FundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListFundAndSubFundItems.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableListFundAndSubFundItems.SubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListFundAndSubFundItems.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableListFundAndSubFundItems.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVoterApprovedNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.IsVoterApprovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVoterApprovedNull() {
                this[this.tableListFundAndSubFundItems.IsVoterApprovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionRateNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.CommissionRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionRateNull() {
                this[this.tableListFundAndSubFundItems.CommissionRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCashNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.IsCashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCashNull() {
                this[this.tableListFundAndSubFundItems.IsCashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactorNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactorNull() {
                this[this.tableListFundAndSubFundItems.FactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundTypeIDNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.SubFundTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundTypeIDNull() {
                this[this.tableListFundAndSubFundItems.SubFundTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyIDNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.AgencyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyIDNull() {
                this[this.tableListFundAndSubFundItems.AgencyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryKeyIDNull() {
                return this.IsNull(this.tableListFundAndSubFundItems.PrimaryKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryKeyIDNull() {
                this[this.tableListFundAndSubFundItems.PrimaryKeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAvailableSubFundItemsRow : global::System.Data.DataRow {
            
            private ListAvailableSubFundItemsDataTable tableListAvailableSubFundItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAvailableSubFundItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAvailableSubFundItems = ((ListAvailableSubFundItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    try {
                        return ((int)(this[this.tableListAvailableSubFundItems.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'ListAvailableSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FundID {
                get {
                    try {
                        return ((int)(this[this.tableListAvailableSubFundItems.FundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundID\' in table \'ListAvailableSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.FundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListAvailableSubFundItems.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListAvailableSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableListAvailableSubFundItems.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'ListAvailableSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListAvailableSubFundItems.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListAvailableSubFundItems\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableListAvailableSubFundItems.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'ListAvailableSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoterApproved {
                get {
                    try {
                        return ((bool)(this[this.tableListAvailableSubFundItems.IsVoterApprovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVoterApproved\' in table \'ListAvailableSubFundItems\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.IsVoterApprovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommissionRate {
                get {
                    try {
                        return ((decimal)(this[this.tableListAvailableSubFundItems.CommissionRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommissionRate\' in table \'ListAvailableSubFundItems\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.CommissionRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCash {
                get {
                    try {
                        return ((bool)(this[this.tableListAvailableSubFundItems.IsCashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCash\' in table \'ListAvailableSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.IsCashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Factor {
                get {
                    try {
                        return ((decimal)(this[this.tableListAvailableSubFundItems.FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factor\' in table \'ListAvailableSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SubFundTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableListAvailableSubFundItems.SubFundTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundTypeID\' in table \'ListAvailableSubFundItems\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.SubFundTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgencyID {
                get {
                    try {
                        return ((int)(this[this.tableListAvailableSubFundItems.AgencyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyID\' in table \'ListAvailableSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAvailableSubFundItems.AgencyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tableListAvailableSubFundItems.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundIDNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.FundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundIDNull() {
                this[this.tableListAvailableSubFundItems.FundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListAvailableSubFundItems.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableListAvailableSubFundItems.SubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListAvailableSubFundItems.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableListAvailableSubFundItems.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVoterApprovedNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.IsVoterApprovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVoterApprovedNull() {
                this[this.tableListAvailableSubFundItems.IsVoterApprovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionRateNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.CommissionRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionRateNull() {
                this[this.tableListAvailableSubFundItems.CommissionRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCashNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.IsCashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCashNull() {
                this[this.tableListAvailableSubFundItems.IsCashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactorNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactorNull() {
                this[this.tableListAvailableSubFundItems.FactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundTypeIDNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.SubFundTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundTypeIDNull() {
                this[this.tableListAvailableSubFundItems.SubFundTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyIDNull() {
                return this.IsNull(this.tableListAvailableSubFundItems.AgencyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyIDNull() {
                this[this.tableListAvailableSubFundItems.AgencyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FundHeaderRow : global::System.Data.DataRow {
            
            private FundHeaderDataTable tableFundHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FundHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFundHeader = ((FundHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FundID {
                get {
                    try {
                        return ((int)(this[this.tableFundHeader.FundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundID\' in table \'FundHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFundHeader.FundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fund {
                get {
                    try {
                        return ((string)(this[this.tableFundHeader.FundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fund\' in table \'FundHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFundHeader.FundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableFundHeader.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'FundHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFundHeader.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableFundHeader.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'FundHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFundHeader.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte FundGroupID {
                get {
                    try {
                        return ((byte)(this[this.tableFundHeader.FundGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundGroupID\' in table \'FundHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFundHeader.FundGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FundGroupName {
                get {
                    try {
                        return ((string)(this[this.tableFundHeader.FundGroupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundGroupName\' in table \'FundHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFundHeader.FundGroupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundIDNull() {
                return this.IsNull(this.tableFundHeader.FundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundIDNull() {
                this[this.tableFundHeader.FundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundNull() {
                return this.IsNull(this.tableFundHeader.FundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundNull() {
                this[this.tableFundHeader.FundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableFundHeader.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableFundHeader.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableFundHeader.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableFundHeader.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundGroupIDNull() {
                return this.IsNull(this.tableFundHeader.FundGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundGroupIDNull() {
                this[this.tableFundHeader.FundGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundGroupNameNull() {
                return this.IsNull(this.tableFundHeader.FundGroupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundGroupNameNull() {
                this[this.tableFundHeader.FundGroupNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSubFundItemRow : global::System.Data.DataRow {
            
            private GetSubFundItemDataTable tableGetSubFundItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSubFundItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSubFundItem = ((GetSubFundItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    try {
                        return ((int)(this[this.tableGetSubFundItem.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FundID {
                get {
                    try {
                        return ((int)(this[this.tableGetSubFundItem.FundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundID\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.FundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableGetSubFundItem.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableGetSubFundItem.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetSubFundItem.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSubFundItem.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoterApproved {
                get {
                    try {
                        return ((bool)(this[this.tableGetSubFundItem.IsVoterApprovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVoterApproved\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.IsVoterApprovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommissionRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSubFundItem.CommissionRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommissionRate\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.CommissionRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCash {
                get {
                    try {
                        return ((bool)(this[this.tableGetSubFundItem.IsCashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCash\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.IsCashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Factor {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSubFundItem.FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factor\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SubFundTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableGetSubFundItem.SubFundTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundTypeID\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.SubFundTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgencyID {
                get {
                    try {
                        return ((int)(this[this.tableGetSubFundItem.AgencyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyID\' in table \'GetSubFundItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSubFundItem.AgencyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tableGetSubFundItem.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tableGetSubFundItem.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundIDNull() {
                return this.IsNull(this.tableGetSubFundItem.FundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundIDNull() {
                this[this.tableGetSubFundItem.FundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetSubFundItem.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetSubFundItem.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableGetSubFundItem.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableGetSubFundItem.SubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetSubFundItem.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetSubFundItem.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableGetSubFundItem.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableGetSubFundItem.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVoterApprovedNull() {
                return this.IsNull(this.tableGetSubFundItem.IsVoterApprovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVoterApprovedNull() {
                this[this.tableGetSubFundItem.IsVoterApprovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionRateNull() {
                return this.IsNull(this.tableGetSubFundItem.CommissionRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionRateNull() {
                this[this.tableGetSubFundItem.CommissionRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCashNull() {
                return this.IsNull(this.tableGetSubFundItem.IsCashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCashNull() {
                this[this.tableGetSubFundItem.IsCashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactorNull() {
                return this.IsNull(this.tableGetSubFundItem.FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactorNull() {
                this[this.tableGetSubFundItem.FactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundTypeIDNull() {
                return this.IsNull(this.tableGetSubFundItem.SubFundTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundTypeIDNull() {
                this[this.tableGetSubFundItem.SubFundTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyIDNull() {
                return this.IsNull(this.tableGetSubFundItem.AgencyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyIDNull() {
                this[this.tableGetSubFundItem.AgencyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListFundTypeRowChangeEvent : global::System.EventArgs {
            
            private ListFundTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundTypeRowChangeEvent(ListFundTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListFundAndSubFundItemsRowChangeEvent : global::System.EventArgs {
            
            private ListFundAndSubFundItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundAndSubFundItemsRowChangeEvent(ListFundAndSubFundItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListFundAndSubFundItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAvailableSubFundItemsRowChangeEvent : global::System.EventArgs {
            
            private ListAvailableSubFundItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAvailableSubFundItemsRowChangeEvent(ListAvailableSubFundItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAvailableSubFundItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FundHeaderRowChangeEvent : global::System.EventArgs {
            
            private FundHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FundHeaderRowChangeEvent(FundHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FundHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSubFundItemRowChangeEvent : global::System.EventArgs {
            
            private GetSubFundItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSubFundItemRowChangeEvent(GetSubFundItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSubFundItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591