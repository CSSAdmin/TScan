//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F84726WaterPipeLocationData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F84726WaterPipeLocationData : global::System.Data.DataSet {
        
        private GetWaterPipeLocationDataTableDataTable tableGetWaterPipeLocationDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F84726WaterPipeLocationData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F84726WaterPipeLocationData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetWaterPipeLocationDataTable"] != null)) {
                    base.Tables.Add(new GetWaterPipeLocationDataTableDataTable(ds.Tables["GetWaterPipeLocationDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetWaterPipeLocationDataTableDataTable GetWaterPipeLocationDataTable {
            get {
                return this.tableGetWaterPipeLocationDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F84726WaterPipeLocationData cln = ((F84726WaterPipeLocationData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetWaterPipeLocationDataTable"] != null)) {
                    base.Tables.Add(new GetWaterPipeLocationDataTableDataTable(ds.Tables["GetWaterPipeLocationDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetWaterPipeLocationDataTable = ((GetWaterPipeLocationDataTableDataTable)(base.Tables["GetWaterPipeLocationDataTable"]));
            if ((initTable == true)) {
                if ((this.tableGetWaterPipeLocationDataTable != null)) {
                    this.tableGetWaterPipeLocationDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F84726WaterPipeLocationData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F84726WaterPipeLocationData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetWaterPipeLocationDataTable = new GetWaterPipeLocationDataTableDataTable();
            base.Tables.Add(this.tableGetWaterPipeLocationDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetWaterPipeLocationDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F84726WaterPipeLocationData ds = new F84726WaterPipeLocationData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetWaterPipeLocationDataTableRowChangeEventHandler(object sender, GetWaterPipeLocationDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetWaterPipeLocationDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFeatureID;
            
            private global::System.Data.DataColumn columnAdministrativeAreaID;
            
            private global::System.Data.DataColumn columnOperationalAreaID;
            
            private global::System.Data.DataColumn columnElevation;
            
            private global::System.Data.DataColumn columnDepth;
            
            private global::System.Data.DataColumn columnGridID;
            
            private global::System.Data.DataColumn columnDistrict_Project;
            
            private global::System.Data.DataColumn columnLocationDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipeLocationDataTableDataTable() {
                this.TableName = "GetWaterPipeLocationDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWaterPipeLocationDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetWaterPipeLocationDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdministrativeAreaIDColumn {
                get {
                    return this.columnAdministrativeAreaID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperationalAreaIDColumn {
                get {
                    return this.columnOperationalAreaID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElevationColumn {
                get {
                    return this.columnElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepthColumn {
                get {
                    return this.columnDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GridIDColumn {
                get {
                    return this.columnGridID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn District_ProjectColumn {
                get {
                    return this.columnDistrict_Project;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationDescriptionColumn {
                get {
                    return this.columnLocationDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipeLocationDataTableRow this[int index] {
                get {
                    return ((GetWaterPipeLocationDataTableRow)(this.Rows[index]));
                }
            }
            
            public event GetWaterPipeLocationDataTableRowChangeEventHandler GetWaterPipeLocationDataTableRowChanging;
            
            public event GetWaterPipeLocationDataTableRowChangeEventHandler GetWaterPipeLocationDataTableRowChanged;
            
            public event GetWaterPipeLocationDataTableRowChangeEventHandler GetWaterPipeLocationDataTableRowDeleting;
            
            public event GetWaterPipeLocationDataTableRowChangeEventHandler GetWaterPipeLocationDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetWaterPipeLocationDataTableRow(GetWaterPipeLocationDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipeLocationDataTableRow AddGetWaterPipeLocationDataTableRow(int AdministrativeAreaID, int OperationalAreaID, decimal Elevation, decimal Depth, int GridID, string District_Project, string LocationDescription) {
                GetWaterPipeLocationDataTableRow rowGetWaterPipeLocationDataTableRow = ((GetWaterPipeLocationDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        AdministrativeAreaID,
                        OperationalAreaID,
                        Elevation,
                        Depth,
                        GridID,
                        District_Project,
                        LocationDescription};
                rowGetWaterPipeLocationDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetWaterPipeLocationDataTableRow);
                return rowGetWaterPipeLocationDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetWaterPipeLocationDataTableDataTable cln = ((GetWaterPipeLocationDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetWaterPipeLocationDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeatureID = base.Columns["FeatureID"];
                this.columnAdministrativeAreaID = base.Columns["AdministrativeAreaID"];
                this.columnOperationalAreaID = base.Columns["OperationalAreaID"];
                this.columnElevation = base.Columns["Elevation"];
                this.columnDepth = base.Columns["Depth"];
                this.columnGridID = base.Columns["GridID"];
                this.columnDistrict_Project = base.Columns["District_Project"];
                this.columnLocationDescription = base.Columns["LocationDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeatureID = new global::System.Data.DataColumn("FeatureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureID);
                this.columnAdministrativeAreaID = new global::System.Data.DataColumn("AdministrativeAreaID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministrativeAreaID);
                this.columnOperationalAreaID = new global::System.Data.DataColumn("OperationalAreaID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperationalAreaID);
                this.columnElevation = new global::System.Data.DataColumn("Elevation", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElevation);
                this.columnDepth = new global::System.Data.DataColumn("Depth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepth);
                this.columnGridID = new global::System.Data.DataColumn("GridID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridID);
                this.columnDistrict_Project = new global::System.Data.DataColumn("District_Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict_Project);
                this.columnLocationDescription = new global::System.Data.DataColumn("LocationDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationDescription);
                this.columnFeatureID.AutoIncrement = true;
                this.columnFeatureID.AllowDBNull = false;
                this.columnFeatureID.ReadOnly = true;
                this.columnDistrict_Project.MaxLength = 30;
                this.columnLocationDescription.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipeLocationDataTableRow NewGetWaterPipeLocationDataTableRow() {
                return ((GetWaterPipeLocationDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetWaterPipeLocationDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetWaterPipeLocationDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetWaterPipeLocationDataTableRowChanged != null)) {
                    this.GetWaterPipeLocationDataTableRowChanged(this, new GetWaterPipeLocationDataTableRowChangeEvent(((GetWaterPipeLocationDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetWaterPipeLocationDataTableRowChanging != null)) {
                    this.GetWaterPipeLocationDataTableRowChanging(this, new GetWaterPipeLocationDataTableRowChangeEvent(((GetWaterPipeLocationDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetWaterPipeLocationDataTableRowDeleted != null)) {
                    this.GetWaterPipeLocationDataTableRowDeleted(this, new GetWaterPipeLocationDataTableRowChangeEvent(((GetWaterPipeLocationDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetWaterPipeLocationDataTableRowDeleting != null)) {
                    this.GetWaterPipeLocationDataTableRowDeleting(this, new GetWaterPipeLocationDataTableRowChangeEvent(((GetWaterPipeLocationDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetWaterPipeLocationDataTableRow(GetWaterPipeLocationDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F84726WaterPipeLocationData ds = new F84726WaterPipeLocationData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetWaterPipeLocationDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetWaterPipeLocationDataTableRow : global::System.Data.DataRow {
            
            private GetWaterPipeLocationDataTableDataTable tableGetWaterPipeLocationDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWaterPipeLocationDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetWaterPipeLocationDataTable = ((GetWaterPipeLocationDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureID {
                get {
                    return ((int)(this[this.tableGetWaterPipeLocationDataTable.FeatureIDColumn]));
                }
                set {
                    this[this.tableGetWaterPipeLocationDataTable.FeatureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdministrativeAreaID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipeLocationDataTable.AdministrativeAreaIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdministrativeAreaID\' in table \'GetWaterPipeLocationDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipeLocationDataTable.AdministrativeAreaIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperationalAreaID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipeLocationDataTable.OperationalAreaIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OperationalAreaID\' in table \'GetWaterPipeLocationDataTable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipeLocationDataTable.OperationalAreaIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Elevation {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterPipeLocationDataTable.ElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Elevation\' in table \'GetWaterPipeLocationDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipeLocationDataTable.ElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Depth {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterPipeLocationDataTable.DepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depth\' in table \'GetWaterPipeLocationDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipeLocationDataTable.DepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GridID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipeLocationDataTable.GridIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GridID\' in table \'GetWaterPipeLocationDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipeLocationDataTable.GridIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District_Project {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterPipeLocationDataTable.District_ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District_Project\' in table \'GetWaterPipeLocationDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipeLocationDataTable.District_ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationDescription {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterPipeLocationDataTable.LocationDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationDescription\' in table \'GetWaterPipeLocationDataTabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipeLocationDataTable.LocationDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdministrativeAreaIDNull() {
                return this.IsNull(this.tableGetWaterPipeLocationDataTable.AdministrativeAreaIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdministrativeAreaIDNull() {
                this[this.tableGetWaterPipeLocationDataTable.AdministrativeAreaIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperationalAreaIDNull() {
                return this.IsNull(this.tableGetWaterPipeLocationDataTable.OperationalAreaIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperationalAreaIDNull() {
                this[this.tableGetWaterPipeLocationDataTable.OperationalAreaIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsElevationNull() {
                return this.IsNull(this.tableGetWaterPipeLocationDataTable.ElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetElevationNull() {
                this[this.tableGetWaterPipeLocationDataTable.ElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepthNull() {
                return this.IsNull(this.tableGetWaterPipeLocationDataTable.DepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepthNull() {
                this[this.tableGetWaterPipeLocationDataTable.DepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGridIDNull() {
                return this.IsNull(this.tableGetWaterPipeLocationDataTable.GridIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGridIDNull() {
                this[this.tableGetWaterPipeLocationDataTable.GridIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrict_ProjectNull() {
                return this.IsNull(this.tableGetWaterPipeLocationDataTable.District_ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrict_ProjectNull() {
                this[this.tableGetWaterPipeLocationDataTable.District_ProjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationDescriptionNull() {
                return this.IsNull(this.tableGetWaterPipeLocationDataTable.LocationDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationDescriptionNull() {
                this[this.tableGetWaterPipeLocationDataTable.LocationDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetWaterPipeLocationDataTableRowChangeEvent : global::System.EventArgs {
            
            private GetWaterPipeLocationDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipeLocationDataTableRowChangeEvent(GetWaterPipeLocationDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipeLocationDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591