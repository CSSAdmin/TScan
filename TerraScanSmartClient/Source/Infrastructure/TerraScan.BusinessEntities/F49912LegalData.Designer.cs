//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F49912LegalData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F49912LegalData : global::System.Data.DataSet {
        
        private SubDivisionTableDataTable tableSubDivisionTable;
        
        private NEDetailsTableDataTable tableNEDetailsTable;
        
        private CommentsDetailsTableDataTable tableCommentsDetailsTable;
        
        private NWDetailsTableDataTable tableNWDetailsTable;
        
        private SWDetailsTableDataTable tableSWDetailsTable;
        
        private SEDetailsTableDataTable tableSEDetailsTable;
        
        private F49912SubDivisionComboTableDataTable tableF49912SubDivisionComboTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F49912LegalData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F49912LegalData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SubDivisionTable"] != null)) {
                    base.Tables.Add(new SubDivisionTableDataTable(ds.Tables["SubDivisionTable"]));
                }
                if ((ds.Tables["NEDetailsTable"] != null)) {
                    base.Tables.Add(new NEDetailsTableDataTable(ds.Tables["NEDetailsTable"]));
                }
                if ((ds.Tables["CommentsDetailsTable"] != null)) {
                    base.Tables.Add(new CommentsDetailsTableDataTable(ds.Tables["CommentsDetailsTable"]));
                }
                if ((ds.Tables["NWDetailsTable"] != null)) {
                    base.Tables.Add(new NWDetailsTableDataTable(ds.Tables["NWDetailsTable"]));
                }
                if ((ds.Tables["SWDetailsTable"] != null)) {
                    base.Tables.Add(new SWDetailsTableDataTable(ds.Tables["SWDetailsTable"]));
                }
                if ((ds.Tables["SEDetailsTable"] != null)) {
                    base.Tables.Add(new SEDetailsTableDataTable(ds.Tables["SEDetailsTable"]));
                }
                if ((ds.Tables["F49912SubDivisionComboTable"] != null)) {
                    base.Tables.Add(new F49912SubDivisionComboTableDataTable(ds.Tables["F49912SubDivisionComboTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubDivisionTableDataTable SubDivisionTable {
            get {
                return this.tableSubDivisionTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NEDetailsTableDataTable NEDetailsTable {
            get {
                return this.tableNEDetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CommentsDetailsTableDataTable CommentsDetailsTable {
            get {
                return this.tableCommentsDetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NWDetailsTableDataTable NWDetailsTable {
            get {
                return this.tableNWDetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWDetailsTableDataTable SWDetailsTable {
            get {
                return this.tableSWDetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SEDetailsTableDataTable SEDetailsTable {
            get {
                return this.tableSEDetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F49912SubDivisionComboTableDataTable F49912SubDivisionComboTable {
            get {
                return this.tableF49912SubDivisionComboTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F49912LegalData cln = ((F49912LegalData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SubDivisionTable"] != null)) {
                    base.Tables.Add(new SubDivisionTableDataTable(ds.Tables["SubDivisionTable"]));
                }
                if ((ds.Tables["NEDetailsTable"] != null)) {
                    base.Tables.Add(new NEDetailsTableDataTable(ds.Tables["NEDetailsTable"]));
                }
                if ((ds.Tables["CommentsDetailsTable"] != null)) {
                    base.Tables.Add(new CommentsDetailsTableDataTable(ds.Tables["CommentsDetailsTable"]));
                }
                if ((ds.Tables["NWDetailsTable"] != null)) {
                    base.Tables.Add(new NWDetailsTableDataTable(ds.Tables["NWDetailsTable"]));
                }
                if ((ds.Tables["SWDetailsTable"] != null)) {
                    base.Tables.Add(new SWDetailsTableDataTable(ds.Tables["SWDetailsTable"]));
                }
                if ((ds.Tables["SEDetailsTable"] != null)) {
                    base.Tables.Add(new SEDetailsTableDataTable(ds.Tables["SEDetailsTable"]));
                }
                if ((ds.Tables["F49912SubDivisionComboTable"] != null)) {
                    base.Tables.Add(new F49912SubDivisionComboTableDataTable(ds.Tables["F49912SubDivisionComboTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSubDivisionTable = ((SubDivisionTableDataTable)(base.Tables["SubDivisionTable"]));
            if ((initTable == true)) {
                if ((this.tableSubDivisionTable != null)) {
                    this.tableSubDivisionTable.InitVars();
                }
            }
            this.tableNEDetailsTable = ((NEDetailsTableDataTable)(base.Tables["NEDetailsTable"]));
            if ((initTable == true)) {
                if ((this.tableNEDetailsTable != null)) {
                    this.tableNEDetailsTable.InitVars();
                }
            }
            this.tableCommentsDetailsTable = ((CommentsDetailsTableDataTable)(base.Tables["CommentsDetailsTable"]));
            if ((initTable == true)) {
                if ((this.tableCommentsDetailsTable != null)) {
                    this.tableCommentsDetailsTable.InitVars();
                }
            }
            this.tableNWDetailsTable = ((NWDetailsTableDataTable)(base.Tables["NWDetailsTable"]));
            if ((initTable == true)) {
                if ((this.tableNWDetailsTable != null)) {
                    this.tableNWDetailsTable.InitVars();
                }
            }
            this.tableSWDetailsTable = ((SWDetailsTableDataTable)(base.Tables["SWDetailsTable"]));
            if ((initTable == true)) {
                if ((this.tableSWDetailsTable != null)) {
                    this.tableSWDetailsTable.InitVars();
                }
            }
            this.tableSEDetailsTable = ((SEDetailsTableDataTable)(base.Tables["SEDetailsTable"]));
            if ((initTable == true)) {
                if ((this.tableSEDetailsTable != null)) {
                    this.tableSEDetailsTable.InitVars();
                }
            }
            this.tableF49912SubDivisionComboTable = ((F49912SubDivisionComboTableDataTable)(base.Tables["F49912SubDivisionComboTable"]));
            if ((initTable == true)) {
                if ((this.tableF49912SubDivisionComboTable != null)) {
                    this.tableF49912SubDivisionComboTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F49912LegalData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F49912LegalData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSubDivisionTable = new SubDivisionTableDataTable();
            base.Tables.Add(this.tableSubDivisionTable);
            this.tableNEDetailsTable = new NEDetailsTableDataTable();
            base.Tables.Add(this.tableNEDetailsTable);
            this.tableCommentsDetailsTable = new CommentsDetailsTableDataTable();
            base.Tables.Add(this.tableCommentsDetailsTable);
            this.tableNWDetailsTable = new NWDetailsTableDataTable();
            base.Tables.Add(this.tableNWDetailsTable);
            this.tableSWDetailsTable = new SWDetailsTableDataTable();
            base.Tables.Add(this.tableSWDetailsTable);
            this.tableSEDetailsTable = new SEDetailsTableDataTable();
            base.Tables.Add(this.tableSEDetailsTable);
            this.tableF49912SubDivisionComboTable = new F49912SubDivisionComboTableDataTable();
            base.Tables.Add(this.tableF49912SubDivisionComboTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubDivisionTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNEDetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCommentsDetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNWDetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSWDetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSEDetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF49912SubDivisionComboTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F49912LegalData ds = new F49912LegalData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SubDivisionTableRowChangeEventHandler(object sender, SubDivisionTableRowChangeEvent e);
        
        public delegate void NEDetailsTableRowChangeEventHandler(object sender, NEDetailsTableRowChangeEvent e);
        
        public delegate void CommentsDetailsTableRowChangeEventHandler(object sender, CommentsDetailsTableRowChangeEvent e);
        
        public delegate void NWDetailsTableRowChangeEventHandler(object sender, NWDetailsTableRowChangeEvent e);
        
        public delegate void SWDetailsTableRowChangeEventHandler(object sender, SWDetailsTableRowChangeEvent e);
        
        public delegate void SEDetailsTableRowChangeEventHandler(object sender, SEDetailsTableRowChangeEvent e);
        
        public delegate void F49912SubDivisionComboTableRowChangeEventHandler(object sender, F49912SubDivisionComboTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubDivisionTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLglID;
            
            private global::System.Data.DataColumn columnInstID;
            
            private global::System.Data.DataColumn columnSubID;
            
            private global::System.Data.DataColumn columnSubName;
            
            private global::System.Data.DataColumn columnLot;
            
            private global::System.Data.DataColumn columnPLot;
            
            private global::System.Data.DataColumn columnBlock;
            
            private global::System.Data.DataColumn columnPBlock;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubDivisionTableDataTable() {
                this.TableName = "SubDivisionTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubDivisionTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubDivisionTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LglIDColumn {
                get {
                    return this.columnLglID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstIDColumn {
                get {
                    return this.columnInstID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubIDColumn {
                get {
                    return this.columnSubID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubNameColumn {
                get {
                    return this.columnSubName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotColumn {
                get {
                    return this.columnLot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLotColumn {
                get {
                    return this.columnPLot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BlockColumn {
                get {
                    return this.columnBlock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PBlockColumn {
                get {
                    return this.columnPBlock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubDivisionTableRow this[int index] {
                get {
                    return ((SubDivisionTableRow)(this.Rows[index]));
                }
            }
            
            public event SubDivisionTableRowChangeEventHandler SubDivisionTableRowChanging;
            
            public event SubDivisionTableRowChangeEventHandler SubDivisionTableRowChanged;
            
            public event SubDivisionTableRowChangeEventHandler SubDivisionTableRowDeleting;
            
            public event SubDivisionTableRowChangeEventHandler SubDivisionTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubDivisionTableRow(SubDivisionTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubDivisionTableRow AddSubDivisionTableRow(int LglID, int InstID, int SubID, string SubName, string Lot, bool PLot, string Block, bool PBlock) {
                SubDivisionTableRow rowSubDivisionTableRow = ((SubDivisionTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LglID,
                        InstID,
                        SubID,
                        SubName,
                        Lot,
                        PLot,
                        Block,
                        PBlock};
                rowSubDivisionTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubDivisionTableRow);
                return rowSubDivisionTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubDivisionTableDataTable cln = ((SubDivisionTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubDivisionTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLglID = base.Columns["LglID"];
                this.columnInstID = base.Columns["InstID"];
                this.columnSubID = base.Columns["SubID"];
                this.columnSubName = base.Columns["SubName"];
                this.columnLot = base.Columns["Lot"];
                this.columnPLot = base.Columns["PLot"];
                this.columnBlock = base.Columns["Block"];
                this.columnPBlock = base.Columns["PBlock"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLglID = new global::System.Data.DataColumn("LglID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLglID);
                this.columnInstID = new global::System.Data.DataColumn("InstID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstID);
                this.columnSubID = new global::System.Data.DataColumn("SubID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubID);
                this.columnSubName = new global::System.Data.DataColumn("SubName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubName);
                this.columnLot = new global::System.Data.DataColumn("Lot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLot);
                this.columnPLot = new global::System.Data.DataColumn("PLot", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLot);
                this.columnBlock = new global::System.Data.DataColumn("Block", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlock);
                this.columnPBlock = new global::System.Data.DataColumn("PBlock", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPBlock);
                this.columnLglID.ReadOnly = true;
                this.columnSubName.MaxLength = 80;
                this.columnLot.MaxLength = 50;
                this.columnBlock.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubDivisionTableRow NewSubDivisionTableRow() {
                return ((SubDivisionTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubDivisionTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubDivisionTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubDivisionTableRowChanged != null)) {
                    this.SubDivisionTableRowChanged(this, new SubDivisionTableRowChangeEvent(((SubDivisionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubDivisionTableRowChanging != null)) {
                    this.SubDivisionTableRowChanging(this, new SubDivisionTableRowChangeEvent(((SubDivisionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubDivisionTableRowDeleted != null)) {
                    this.SubDivisionTableRowDeleted(this, new SubDivisionTableRowChangeEvent(((SubDivisionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubDivisionTableRowDeleting != null)) {
                    this.SubDivisionTableRowDeleting(this, new SubDivisionTableRowChangeEvent(((SubDivisionTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubDivisionTableRow(SubDivisionTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49912LegalData ds = new F49912LegalData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubDivisionTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NEDetailsTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNENE;
            
            private global::System.Data.DataColumn columnNENW;
            
            private global::System.Data.DataColumn columnNESW;
            
            private global::System.Data.DataColumn columnNESE;
            
            private global::System.Data.DataColumn columnLglID;
            
            private global::System.Data.DataColumn columnInstID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NEDetailsTableDataTable() {
                this.TableName = "NEDetailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NEDetailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NEDetailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NENEColumn {
                get {
                    return this.columnNENE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NENWColumn {
                get {
                    return this.columnNENW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NESWColumn {
                get {
                    return this.columnNESW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NESEColumn {
                get {
                    return this.columnNESE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LglIDColumn {
                get {
                    return this.columnLglID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstIDColumn {
                get {
                    return this.columnInstID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NEDetailsTableRow this[int index] {
                get {
                    return ((NEDetailsTableRow)(this.Rows[index]));
                }
            }
            
            public event NEDetailsTableRowChangeEventHandler NEDetailsTableRowChanging;
            
            public event NEDetailsTableRowChangeEventHandler NEDetailsTableRowChanged;
            
            public event NEDetailsTableRowChangeEventHandler NEDetailsTableRowDeleting;
            
            public event NEDetailsTableRowChangeEventHandler NEDetailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNEDetailsTableRow(NEDetailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NEDetailsTableRow AddNEDetailsTableRow(string NENE, string NENW, string NESW, string NESE, int LglID, int InstID) {
                NEDetailsTableRow rowNEDetailsTableRow = ((NEDetailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NENE,
                        NENW,
                        NESW,
                        NESE,
                        LglID,
                        InstID};
                rowNEDetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNEDetailsTableRow);
                return rowNEDetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NEDetailsTableDataTable cln = ((NEDetailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NEDetailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNENE = base.Columns["NENE"];
                this.columnNENW = base.Columns["NENW"];
                this.columnNESW = base.Columns["NESW"];
                this.columnNESE = base.Columns["NESE"];
                this.columnLglID = base.Columns["LglID"];
                this.columnInstID = base.Columns["InstID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNENE = new global::System.Data.DataColumn("NENE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNENE);
                this.columnNENW = new global::System.Data.DataColumn("NENW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNENW);
                this.columnNESW = new global::System.Data.DataColumn("NESW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNESW);
                this.columnNESE = new global::System.Data.DataColumn("NESE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNESE);
                this.columnLglID = new global::System.Data.DataColumn("LglID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLglID);
                this.columnInstID = new global::System.Data.DataColumn("InstID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstID);
                this.columnNENE.MaxLength = 2;
                this.columnNENW.MaxLength = 2;
                this.columnNESW.MaxLength = 2;
                this.columnNESE.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NEDetailsTableRow NewNEDetailsTableRow() {
                return ((NEDetailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NEDetailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NEDetailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NEDetailsTableRowChanged != null)) {
                    this.NEDetailsTableRowChanged(this, new NEDetailsTableRowChangeEvent(((NEDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NEDetailsTableRowChanging != null)) {
                    this.NEDetailsTableRowChanging(this, new NEDetailsTableRowChangeEvent(((NEDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NEDetailsTableRowDeleted != null)) {
                    this.NEDetailsTableRowDeleted(this, new NEDetailsTableRowChangeEvent(((NEDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NEDetailsTableRowDeleting != null)) {
                    this.NEDetailsTableRowDeleting(this, new NEDetailsTableRowChangeEvent(((NEDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNEDetailsTableRow(NEDetailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49912LegalData ds = new F49912LegalData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NEDetailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CommentsDetailsTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnLglID;
            
            private global::System.Data.DataColumn columnInstID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentsDetailsTableDataTable() {
                this.TableName = "CommentsDetailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CommentsDetailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CommentsDetailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LglIDColumn {
                get {
                    return this.columnLglID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstIDColumn {
                get {
                    return this.columnInstID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentsDetailsTableRow this[int index] {
                get {
                    return ((CommentsDetailsTableRow)(this.Rows[index]));
                }
            }
            
            public event CommentsDetailsTableRowChangeEventHandler CommentsDetailsTableRowChanging;
            
            public event CommentsDetailsTableRowChangeEventHandler CommentsDetailsTableRowChanged;
            
            public event CommentsDetailsTableRowChangeEventHandler CommentsDetailsTableRowDeleting;
            
            public event CommentsDetailsTableRowChangeEventHandler CommentsDetailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCommentsDetailsTableRow(CommentsDetailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentsDetailsTableRow AddCommentsDetailsTableRow(string Comments, int LglID, int InstID) {
                CommentsDetailsTableRow rowCommentsDetailsTableRow = ((CommentsDetailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Comments,
                        LglID,
                        InstID};
                rowCommentsDetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCommentsDetailsTableRow);
                return rowCommentsDetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CommentsDetailsTableDataTable cln = ((CommentsDetailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CommentsDetailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnComments = base.Columns["Comments"];
                this.columnLglID = base.Columns["LglID"];
                this.columnInstID = base.Columns["InstID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnLglID = new global::System.Data.DataColumn("LglID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLglID);
                this.columnInstID = new global::System.Data.DataColumn("InstID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstID);
                this.columnComments.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentsDetailsTableRow NewCommentsDetailsTableRow() {
                return ((CommentsDetailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CommentsDetailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CommentsDetailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CommentsDetailsTableRowChanged != null)) {
                    this.CommentsDetailsTableRowChanged(this, new CommentsDetailsTableRowChangeEvent(((CommentsDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CommentsDetailsTableRowChanging != null)) {
                    this.CommentsDetailsTableRowChanging(this, new CommentsDetailsTableRowChangeEvent(((CommentsDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CommentsDetailsTableRowDeleted != null)) {
                    this.CommentsDetailsTableRowDeleted(this, new CommentsDetailsTableRowChangeEvent(((CommentsDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CommentsDetailsTableRowDeleting != null)) {
                    this.CommentsDetailsTableRowDeleting(this, new CommentsDetailsTableRowChangeEvent(((CommentsDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCommentsDetailsTableRow(CommentsDetailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49912LegalData ds = new F49912LegalData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CommentsDetailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NWDetailsTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNWNE;
            
            private global::System.Data.DataColumn columnNWNW;
            
            private global::System.Data.DataColumn columnNWSW;
            
            private global::System.Data.DataColumn columnNWSE;
            
            private global::System.Data.DataColumn columnLglID;
            
            private global::System.Data.DataColumn columnInstID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NWDetailsTableDataTable() {
                this.TableName = "NWDetailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NWDetailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NWDetailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NWNEColumn {
                get {
                    return this.columnNWNE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NWNWColumn {
                get {
                    return this.columnNWNW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NWSWColumn {
                get {
                    return this.columnNWSW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NWSEColumn {
                get {
                    return this.columnNWSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LglIDColumn {
                get {
                    return this.columnLglID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstIDColumn {
                get {
                    return this.columnInstID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NWDetailsTableRow this[int index] {
                get {
                    return ((NWDetailsTableRow)(this.Rows[index]));
                }
            }
            
            public event NWDetailsTableRowChangeEventHandler NWDetailsTableRowChanging;
            
            public event NWDetailsTableRowChangeEventHandler NWDetailsTableRowChanged;
            
            public event NWDetailsTableRowChangeEventHandler NWDetailsTableRowDeleting;
            
            public event NWDetailsTableRowChangeEventHandler NWDetailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNWDetailsTableRow(NWDetailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NWDetailsTableRow AddNWDetailsTableRow(string NWNE, string NWNW, string NWSW, string NWSE, int LglID, int InstID) {
                NWDetailsTableRow rowNWDetailsTableRow = ((NWDetailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NWNE,
                        NWNW,
                        NWSW,
                        NWSE,
                        LglID,
                        InstID};
                rowNWDetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNWDetailsTableRow);
                return rowNWDetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NWDetailsTableDataTable cln = ((NWDetailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NWDetailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNWNE = base.Columns["NWNE"];
                this.columnNWNW = base.Columns["NWNW"];
                this.columnNWSW = base.Columns["NWSW"];
                this.columnNWSE = base.Columns["NWSE"];
                this.columnLglID = base.Columns["LglID"];
                this.columnInstID = base.Columns["InstID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNWNE = new global::System.Data.DataColumn("NWNE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNWNE);
                this.columnNWNW = new global::System.Data.DataColumn("NWNW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNWNW);
                this.columnNWSW = new global::System.Data.DataColumn("NWSW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNWSW);
                this.columnNWSE = new global::System.Data.DataColumn("NWSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNWSE);
                this.columnLglID = new global::System.Data.DataColumn("LglID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLglID);
                this.columnInstID = new global::System.Data.DataColumn("InstID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstID);
                this.columnNWNE.MaxLength = 2;
                this.columnNWNW.MaxLength = 2;
                this.columnNWSW.MaxLength = 2;
                this.columnNWSE.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NWDetailsTableRow NewNWDetailsTableRow() {
                return ((NWDetailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NWDetailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NWDetailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NWDetailsTableRowChanged != null)) {
                    this.NWDetailsTableRowChanged(this, new NWDetailsTableRowChangeEvent(((NWDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NWDetailsTableRowChanging != null)) {
                    this.NWDetailsTableRowChanging(this, new NWDetailsTableRowChangeEvent(((NWDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NWDetailsTableRowDeleted != null)) {
                    this.NWDetailsTableRowDeleted(this, new NWDetailsTableRowChangeEvent(((NWDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NWDetailsTableRowDeleting != null)) {
                    this.NWDetailsTableRowDeleting(this, new NWDetailsTableRowChangeEvent(((NWDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNWDetailsTableRow(NWDetailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49912LegalData ds = new F49912LegalData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NWDetailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SWDetailsTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSWNE;
            
            private global::System.Data.DataColumn columnSWNW;
            
            private global::System.Data.DataColumn columnSWSW;
            
            private global::System.Data.DataColumn columnSWSE;
            
            private global::System.Data.DataColumn columnLglID;
            
            private global::System.Data.DataColumn columnInstID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWDetailsTableDataTable() {
                this.TableName = "SWDetailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWDetailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SWDetailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWNEColumn {
                get {
                    return this.columnSWNE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWNWColumn {
                get {
                    return this.columnSWNW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWSWColumn {
                get {
                    return this.columnSWSW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWSEColumn {
                get {
                    return this.columnSWSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LglIDColumn {
                get {
                    return this.columnLglID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstIDColumn {
                get {
                    return this.columnInstID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWDetailsTableRow this[int index] {
                get {
                    return ((SWDetailsTableRow)(this.Rows[index]));
                }
            }
            
            public event SWDetailsTableRowChangeEventHandler SWDetailsTableRowChanging;
            
            public event SWDetailsTableRowChangeEventHandler SWDetailsTableRowChanged;
            
            public event SWDetailsTableRowChangeEventHandler SWDetailsTableRowDeleting;
            
            public event SWDetailsTableRowChangeEventHandler SWDetailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSWDetailsTableRow(SWDetailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWDetailsTableRow AddSWDetailsTableRow(string SWNE, string SWNW, string SWSW, string SWSE, int LglID, int InstID) {
                SWDetailsTableRow rowSWDetailsTableRow = ((SWDetailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SWNE,
                        SWNW,
                        SWSW,
                        SWSE,
                        LglID,
                        InstID};
                rowSWDetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSWDetailsTableRow);
                return rowSWDetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SWDetailsTableDataTable cln = ((SWDetailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SWDetailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSWNE = base.Columns["SWNE"];
                this.columnSWNW = base.Columns["SWNW"];
                this.columnSWSW = base.Columns["SWSW"];
                this.columnSWSE = base.Columns["SWSE"];
                this.columnLglID = base.Columns["LglID"];
                this.columnInstID = base.Columns["InstID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSWNE = new global::System.Data.DataColumn("SWNE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWNE);
                this.columnSWNW = new global::System.Data.DataColumn("SWNW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWNW);
                this.columnSWSW = new global::System.Data.DataColumn("SWSW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWSW);
                this.columnSWSE = new global::System.Data.DataColumn("SWSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWSE);
                this.columnLglID = new global::System.Data.DataColumn("LglID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLglID);
                this.columnInstID = new global::System.Data.DataColumn("InstID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstID);
                this.columnSWNE.MaxLength = 2;
                this.columnSWNW.MaxLength = 2;
                this.columnSWSW.MaxLength = 2;
                this.columnSWSE.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWDetailsTableRow NewSWDetailsTableRow() {
                return ((SWDetailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SWDetailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SWDetailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWDetailsTableRowChanged != null)) {
                    this.SWDetailsTableRowChanged(this, new SWDetailsTableRowChangeEvent(((SWDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWDetailsTableRowChanging != null)) {
                    this.SWDetailsTableRowChanging(this, new SWDetailsTableRowChangeEvent(((SWDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWDetailsTableRowDeleted != null)) {
                    this.SWDetailsTableRowDeleted(this, new SWDetailsTableRowChangeEvent(((SWDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWDetailsTableRowDeleting != null)) {
                    this.SWDetailsTableRowDeleting(this, new SWDetailsTableRowChangeEvent(((SWDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSWDetailsTableRow(SWDetailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49912LegalData ds = new F49912LegalData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SWDetailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SEDetailsTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSENE;
            
            private global::System.Data.DataColumn columnSENW;
            
            private global::System.Data.DataColumn columnSESW;
            
            private global::System.Data.DataColumn columnSESE;
            
            private global::System.Data.DataColumn columnLglID;
            
            private global::System.Data.DataColumn columnInstID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEDetailsTableDataTable() {
                this.TableName = "SEDetailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SEDetailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SEDetailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SENEColumn {
                get {
                    return this.columnSENE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SENWColumn {
                get {
                    return this.columnSENW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SESWColumn {
                get {
                    return this.columnSESW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SESEColumn {
                get {
                    return this.columnSESE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LglIDColumn {
                get {
                    return this.columnLglID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstIDColumn {
                get {
                    return this.columnInstID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEDetailsTableRow this[int index] {
                get {
                    return ((SEDetailsTableRow)(this.Rows[index]));
                }
            }
            
            public event SEDetailsTableRowChangeEventHandler SEDetailsTableRowChanging;
            
            public event SEDetailsTableRowChangeEventHandler SEDetailsTableRowChanged;
            
            public event SEDetailsTableRowChangeEventHandler SEDetailsTableRowDeleting;
            
            public event SEDetailsTableRowChangeEventHandler SEDetailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSEDetailsTableRow(SEDetailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEDetailsTableRow AddSEDetailsTableRow(string SENE, string SENW, string SESW, string SESE, int LglID, int InstID) {
                SEDetailsTableRow rowSEDetailsTableRow = ((SEDetailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SENE,
                        SENW,
                        SESW,
                        SESE,
                        LglID,
                        InstID};
                rowSEDetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSEDetailsTableRow);
                return rowSEDetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SEDetailsTableDataTable cln = ((SEDetailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SEDetailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSENE = base.Columns["SENE"];
                this.columnSENW = base.Columns["SENW"];
                this.columnSESW = base.Columns["SESW"];
                this.columnSESE = base.Columns["SESE"];
                this.columnLglID = base.Columns["LglID"];
                this.columnInstID = base.Columns["InstID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSENE = new global::System.Data.DataColumn("SENE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSENE);
                this.columnSENW = new global::System.Data.DataColumn("SENW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSENW);
                this.columnSESW = new global::System.Data.DataColumn("SESW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSESW);
                this.columnSESE = new global::System.Data.DataColumn("SESE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSESE);
                this.columnLglID = new global::System.Data.DataColumn("LglID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLglID);
                this.columnInstID = new global::System.Data.DataColumn("InstID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstID);
                this.columnSENE.MaxLength = 2;
                this.columnSENW.MaxLength = 2;
                this.columnSESW.MaxLength = 2;
                this.columnSESE.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEDetailsTableRow NewSEDetailsTableRow() {
                return ((SEDetailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SEDetailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SEDetailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SEDetailsTableRowChanged != null)) {
                    this.SEDetailsTableRowChanged(this, new SEDetailsTableRowChangeEvent(((SEDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SEDetailsTableRowChanging != null)) {
                    this.SEDetailsTableRowChanging(this, new SEDetailsTableRowChangeEvent(((SEDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SEDetailsTableRowDeleted != null)) {
                    this.SEDetailsTableRowDeleted(this, new SEDetailsTableRowChangeEvent(((SEDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SEDetailsTableRowDeleting != null)) {
                    this.SEDetailsTableRowDeleting(this, new SEDetailsTableRowChangeEvent(((SEDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSEDetailsTableRow(SEDetailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49912LegalData ds = new F49912LegalData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SEDetailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F49912SubDivisionComboTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubID;
            
            private global::System.Data.DataColumn columnSubName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F49912SubDivisionComboTableDataTable() {
                this.TableName = "F49912SubDivisionComboTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F49912SubDivisionComboTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F49912SubDivisionComboTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubIDColumn {
                get {
                    return this.columnSubID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubNameColumn {
                get {
                    return this.columnSubName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F49912SubDivisionComboTableRow this[int index] {
                get {
                    return ((F49912SubDivisionComboTableRow)(this.Rows[index]));
                }
            }
            
            public event F49912SubDivisionComboTableRowChangeEventHandler F49912SubDivisionComboTableRowChanging;
            
            public event F49912SubDivisionComboTableRowChangeEventHandler F49912SubDivisionComboTableRowChanged;
            
            public event F49912SubDivisionComboTableRowChangeEventHandler F49912SubDivisionComboTableRowDeleting;
            
            public event F49912SubDivisionComboTableRowChangeEventHandler F49912SubDivisionComboTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF49912SubDivisionComboTableRow(F49912SubDivisionComboTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F49912SubDivisionComboTableRow AddF49912SubDivisionComboTableRow(string SubName) {
                F49912SubDivisionComboTableRow rowF49912SubDivisionComboTableRow = ((F49912SubDivisionComboTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SubName};
                rowF49912SubDivisionComboTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF49912SubDivisionComboTableRow);
                return rowF49912SubDivisionComboTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F49912SubDivisionComboTableDataTable cln = ((F49912SubDivisionComboTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F49912SubDivisionComboTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubID = base.Columns["SubID"];
                this.columnSubName = base.Columns["SubName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubID = new global::System.Data.DataColumn("SubID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubID);
                this.columnSubName = new global::System.Data.DataColumn("SubName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubName);
                this.columnSubID.AutoIncrement = true;
                this.columnSubID.AllowDBNull = false;
                this.columnSubID.ReadOnly = true;
                this.columnSubName.AllowDBNull = false;
                this.columnSubName.MaxLength = 80;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F49912SubDivisionComboTableRow NewF49912SubDivisionComboTableRow() {
                return ((F49912SubDivisionComboTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F49912SubDivisionComboTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F49912SubDivisionComboTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F49912SubDivisionComboTableRowChanged != null)) {
                    this.F49912SubDivisionComboTableRowChanged(this, new F49912SubDivisionComboTableRowChangeEvent(((F49912SubDivisionComboTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F49912SubDivisionComboTableRowChanging != null)) {
                    this.F49912SubDivisionComboTableRowChanging(this, new F49912SubDivisionComboTableRowChangeEvent(((F49912SubDivisionComboTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F49912SubDivisionComboTableRowDeleted != null)) {
                    this.F49912SubDivisionComboTableRowDeleted(this, new F49912SubDivisionComboTableRowChangeEvent(((F49912SubDivisionComboTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F49912SubDivisionComboTableRowDeleting != null)) {
                    this.F49912SubDivisionComboTableRowDeleting(this, new F49912SubDivisionComboTableRowChangeEvent(((F49912SubDivisionComboTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF49912SubDivisionComboTableRow(F49912SubDivisionComboTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49912LegalData ds = new F49912LegalData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F49912SubDivisionComboTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubDivisionTableRow : global::System.Data.DataRow {
            
            private SubDivisionTableDataTable tableSubDivisionTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubDivisionTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubDivisionTable = ((SubDivisionTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LglID {
                get {
                    try {
                        return ((int)(this[this.tableSubDivisionTable.LglIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LglID\' in table \'SubDivisionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubDivisionTable.LglIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InstID {
                get {
                    try {
                        return ((int)(this[this.tableSubDivisionTable.InstIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstID\' in table \'SubDivisionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubDivisionTable.InstIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubID {
                get {
                    try {
                        return ((int)(this[this.tableSubDivisionTable.SubIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubID\' in table \'SubDivisionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubDivisionTable.SubIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubName {
                get {
                    try {
                        return ((string)(this[this.tableSubDivisionTable.SubNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubName\' in table \'SubDivisionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubDivisionTable.SubNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lot {
                get {
                    try {
                        return ((string)(this[this.tableSubDivisionTable.LotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lot\' in table \'SubDivisionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubDivisionTable.LotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PLot {
                get {
                    try {
                        return ((bool)(this[this.tableSubDivisionTable.PLotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PLot\' in table \'SubDivisionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubDivisionTable.PLotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Block {
                get {
                    try {
                        return ((string)(this[this.tableSubDivisionTable.BlockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Block\' in table \'SubDivisionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubDivisionTable.BlockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PBlock {
                get {
                    try {
                        return ((bool)(this[this.tableSubDivisionTable.PBlockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PBlock\' in table \'SubDivisionTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubDivisionTable.PBlockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLglIDNull() {
                return this.IsNull(this.tableSubDivisionTable.LglIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLglIDNull() {
                this[this.tableSubDivisionTable.LglIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstIDNull() {
                return this.IsNull(this.tableSubDivisionTable.InstIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstIDNull() {
                this[this.tableSubDivisionTable.InstIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubIDNull() {
                return this.IsNull(this.tableSubDivisionTable.SubIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubIDNull() {
                this[this.tableSubDivisionTable.SubIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubNameNull() {
                return this.IsNull(this.tableSubDivisionTable.SubNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubNameNull() {
                this[this.tableSubDivisionTable.SubNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotNull() {
                return this.IsNull(this.tableSubDivisionTable.LotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotNull() {
                this[this.tableSubDivisionTable.LotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLotNull() {
                return this.IsNull(this.tableSubDivisionTable.PLotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLotNull() {
                this[this.tableSubDivisionTable.PLotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlockNull() {
                return this.IsNull(this.tableSubDivisionTable.BlockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlockNull() {
                this[this.tableSubDivisionTable.BlockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPBlockNull() {
                return this.IsNull(this.tableSubDivisionTable.PBlockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPBlockNull() {
                this[this.tableSubDivisionTable.PBlockColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NEDetailsTableRow : global::System.Data.DataRow {
            
            private NEDetailsTableDataTable tableNEDetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NEDetailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNEDetailsTable = ((NEDetailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NENE {
                get {
                    try {
                        return ((string)(this[this.tableNEDetailsTable.NENEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NENE\' in table \'NEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNEDetailsTable.NENEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NENW {
                get {
                    try {
                        return ((string)(this[this.tableNEDetailsTable.NENWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NENW\' in table \'NEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNEDetailsTable.NENWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NESW {
                get {
                    try {
                        return ((string)(this[this.tableNEDetailsTable.NESWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NESW\' in table \'NEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNEDetailsTable.NESWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NESE {
                get {
                    try {
                        return ((string)(this[this.tableNEDetailsTable.NESEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NESE\' in table \'NEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNEDetailsTable.NESEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LglID {
                get {
                    try {
                        return ((int)(this[this.tableNEDetailsTable.LglIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LglID\' in table \'NEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNEDetailsTable.LglIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InstID {
                get {
                    try {
                        return ((int)(this[this.tableNEDetailsTable.InstIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstID\' in table \'NEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNEDetailsTable.InstIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNENENull() {
                return this.IsNull(this.tableNEDetailsTable.NENEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNENENull() {
                this[this.tableNEDetailsTable.NENEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNENWNull() {
                return this.IsNull(this.tableNEDetailsTable.NENWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNENWNull() {
                this[this.tableNEDetailsTable.NENWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNESWNull() {
                return this.IsNull(this.tableNEDetailsTable.NESWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNESWNull() {
                this[this.tableNEDetailsTable.NESWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNESENull() {
                return this.IsNull(this.tableNEDetailsTable.NESEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNESENull() {
                this[this.tableNEDetailsTable.NESEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLglIDNull() {
                return this.IsNull(this.tableNEDetailsTable.LglIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLglIDNull() {
                this[this.tableNEDetailsTable.LglIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstIDNull() {
                return this.IsNull(this.tableNEDetailsTable.InstIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstIDNull() {
                this[this.tableNEDetailsTable.InstIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CommentsDetailsTableRow : global::System.Data.DataRow {
            
            private CommentsDetailsTableDataTable tableCommentsDetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CommentsDetailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCommentsDetailsTable = ((CommentsDetailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableCommentsDetailsTable.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'CommentsDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentsDetailsTable.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LglID {
                get {
                    try {
                        return ((int)(this[this.tableCommentsDetailsTable.LglIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LglID\' in table \'CommentsDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentsDetailsTable.LglIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InstID {
                get {
                    try {
                        return ((int)(this[this.tableCommentsDetailsTable.InstIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstID\' in table \'CommentsDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentsDetailsTable.InstIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableCommentsDetailsTable.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableCommentsDetailsTable.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLglIDNull() {
                return this.IsNull(this.tableCommentsDetailsTable.LglIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLglIDNull() {
                this[this.tableCommentsDetailsTable.LglIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstIDNull() {
                return this.IsNull(this.tableCommentsDetailsTable.InstIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstIDNull() {
                this[this.tableCommentsDetailsTable.InstIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NWDetailsTableRow : global::System.Data.DataRow {
            
            private NWDetailsTableDataTable tableNWDetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NWDetailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNWDetailsTable = ((NWDetailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NWNE {
                get {
                    try {
                        return ((string)(this[this.tableNWDetailsTable.NWNEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NWNE\' in table \'NWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNWDetailsTable.NWNEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NWNW {
                get {
                    try {
                        return ((string)(this[this.tableNWDetailsTable.NWNWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NWNW\' in table \'NWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNWDetailsTable.NWNWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NWSW {
                get {
                    try {
                        return ((string)(this[this.tableNWDetailsTable.NWSWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NWSW\' in table \'NWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNWDetailsTable.NWSWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NWSE {
                get {
                    try {
                        return ((string)(this[this.tableNWDetailsTable.NWSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NWSE\' in table \'NWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNWDetailsTable.NWSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LglID {
                get {
                    try {
                        return ((int)(this[this.tableNWDetailsTable.LglIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LglID\' in table \'NWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNWDetailsTable.LglIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InstID {
                get {
                    try {
                        return ((int)(this[this.tableNWDetailsTable.InstIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstID\' in table \'NWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNWDetailsTable.InstIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNWNENull() {
                return this.IsNull(this.tableNWDetailsTable.NWNEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNWNENull() {
                this[this.tableNWDetailsTable.NWNEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNWNWNull() {
                return this.IsNull(this.tableNWDetailsTable.NWNWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNWNWNull() {
                this[this.tableNWDetailsTable.NWNWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNWSWNull() {
                return this.IsNull(this.tableNWDetailsTable.NWSWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNWSWNull() {
                this[this.tableNWDetailsTable.NWSWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNWSENull() {
                return this.IsNull(this.tableNWDetailsTable.NWSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNWSENull() {
                this[this.tableNWDetailsTable.NWSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLglIDNull() {
                return this.IsNull(this.tableNWDetailsTable.LglIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLglIDNull() {
                this[this.tableNWDetailsTable.LglIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstIDNull() {
                return this.IsNull(this.tableNWDetailsTable.InstIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstIDNull() {
                this[this.tableNWDetailsTable.InstIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SWDetailsTableRow : global::System.Data.DataRow {
            
            private SWDetailsTableDataTable tableSWDetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SWDetailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWDetailsTable = ((SWDetailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SWNE {
                get {
                    try {
                        return ((string)(this[this.tableSWDetailsTable.SWNEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWNE\' in table \'SWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWDetailsTable.SWNEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SWNW {
                get {
                    try {
                        return ((string)(this[this.tableSWDetailsTable.SWNWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWNW\' in table \'SWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWDetailsTable.SWNWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SWSW {
                get {
                    try {
                        return ((string)(this[this.tableSWDetailsTable.SWSWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWSW\' in table \'SWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWDetailsTable.SWSWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SWSE {
                get {
                    try {
                        return ((string)(this[this.tableSWDetailsTable.SWSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWSE\' in table \'SWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWDetailsTable.SWSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LglID {
                get {
                    try {
                        return ((int)(this[this.tableSWDetailsTable.LglIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LglID\' in table \'SWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWDetailsTable.LglIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InstID {
                get {
                    try {
                        return ((int)(this[this.tableSWDetailsTable.InstIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstID\' in table \'SWDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWDetailsTable.InstIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWNENull() {
                return this.IsNull(this.tableSWDetailsTable.SWNEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWNENull() {
                this[this.tableSWDetailsTable.SWNEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWNWNull() {
                return this.IsNull(this.tableSWDetailsTable.SWNWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWNWNull() {
                this[this.tableSWDetailsTable.SWNWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWSWNull() {
                return this.IsNull(this.tableSWDetailsTable.SWSWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWSWNull() {
                this[this.tableSWDetailsTable.SWSWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWSENull() {
                return this.IsNull(this.tableSWDetailsTable.SWSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWSENull() {
                this[this.tableSWDetailsTable.SWSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLglIDNull() {
                return this.IsNull(this.tableSWDetailsTable.LglIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLglIDNull() {
                this[this.tableSWDetailsTable.LglIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstIDNull() {
                return this.IsNull(this.tableSWDetailsTable.InstIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstIDNull() {
                this[this.tableSWDetailsTable.InstIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SEDetailsTableRow : global::System.Data.DataRow {
            
            private SEDetailsTableDataTable tableSEDetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SEDetailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSEDetailsTable = ((SEDetailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SENE {
                get {
                    try {
                        return ((string)(this[this.tableSEDetailsTable.SENEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SENE\' in table \'SEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEDetailsTable.SENEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SENW {
                get {
                    try {
                        return ((string)(this[this.tableSEDetailsTable.SENWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SENW\' in table \'SEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEDetailsTable.SENWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SESW {
                get {
                    try {
                        return ((string)(this[this.tableSEDetailsTable.SESWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SESW\' in table \'SEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEDetailsTable.SESWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SESE {
                get {
                    try {
                        return ((string)(this[this.tableSEDetailsTable.SESEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SESE\' in table \'SEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEDetailsTable.SESEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LglID {
                get {
                    try {
                        return ((int)(this[this.tableSEDetailsTable.LglIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LglID\' in table \'SEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEDetailsTable.LglIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InstID {
                get {
                    try {
                        return ((int)(this[this.tableSEDetailsTable.InstIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstID\' in table \'SEDetailsTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEDetailsTable.InstIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSENENull() {
                return this.IsNull(this.tableSEDetailsTable.SENEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSENENull() {
                this[this.tableSEDetailsTable.SENEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSENWNull() {
                return this.IsNull(this.tableSEDetailsTable.SENWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSENWNull() {
                this[this.tableSEDetailsTable.SENWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSESWNull() {
                return this.IsNull(this.tableSEDetailsTable.SESWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSESWNull() {
                this[this.tableSEDetailsTable.SESWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSESENull() {
                return this.IsNull(this.tableSEDetailsTable.SESEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSESENull() {
                this[this.tableSEDetailsTable.SESEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLglIDNull() {
                return this.IsNull(this.tableSEDetailsTable.LglIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLglIDNull() {
                this[this.tableSEDetailsTable.LglIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstIDNull() {
                return this.IsNull(this.tableSEDetailsTable.InstIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstIDNull() {
                this[this.tableSEDetailsTable.InstIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F49912SubDivisionComboTableRow : global::System.Data.DataRow {
            
            private F49912SubDivisionComboTableDataTable tableF49912SubDivisionComboTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F49912SubDivisionComboTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF49912SubDivisionComboTable = ((F49912SubDivisionComboTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubID {
                get {
                    return ((int)(this[this.tableF49912SubDivisionComboTable.SubIDColumn]));
                }
                set {
                    this[this.tableF49912SubDivisionComboTable.SubIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubName {
                get {
                    return ((string)(this[this.tableF49912SubDivisionComboTable.SubNameColumn]));
                }
                set {
                    this[this.tableF49912SubDivisionComboTable.SubNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubDivisionTableRowChangeEvent : global::System.EventArgs {
            
            private SubDivisionTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubDivisionTableRowChangeEvent(SubDivisionTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubDivisionTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NEDetailsTableRowChangeEvent : global::System.EventArgs {
            
            private NEDetailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NEDetailsTableRowChangeEvent(NEDetailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NEDetailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CommentsDetailsTableRowChangeEvent : global::System.EventArgs {
            
            private CommentsDetailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentsDetailsTableRowChangeEvent(CommentsDetailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentsDetailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NWDetailsTableRowChangeEvent : global::System.EventArgs {
            
            private NWDetailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NWDetailsTableRowChangeEvent(NWDetailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NWDetailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SWDetailsTableRowChangeEvent : global::System.EventArgs {
            
            private SWDetailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWDetailsTableRowChangeEvent(SWDetailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SWDetailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SEDetailsTableRowChangeEvent : global::System.EventArgs {
            
            private SEDetailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEDetailsTableRowChangeEvent(SEDetailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SEDetailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F49912SubDivisionComboTableRowChangeEvent : global::System.EventArgs {
            
            private F49912SubDivisionComboTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F49912SubDivisionComboTableRowChangeEvent(F49912SubDivisionComboTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F49912SubDivisionComboTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591