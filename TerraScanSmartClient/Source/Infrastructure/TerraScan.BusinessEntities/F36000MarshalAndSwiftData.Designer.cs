//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F36000MarshalAndSwiftData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F36000MarshalAndSwiftData : global::System.Data.DataSet {
        
        private ListHouseTypeCollectionDatatableDataTable tableListHouseTypeCollectionDatatable;
        
        private ListEstimateIDDataTableDataTable tableListEstimateIDDataTable;
        
        private ListDeprValueDataTableDataTable tableListDeprValueDataTable;
        
        private ListDeprTableDataTable tableListDeprTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F36000MarshalAndSwiftData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F36000MarshalAndSwiftData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListHouseTypeCollectionDatatable"] != null)) {
                    base.Tables.Add(new ListHouseTypeCollectionDatatableDataTable(ds.Tables["ListHouseTypeCollectionDatatable"]));
                }
                if ((ds.Tables["ListEstimateIDDataTable"] != null)) {
                    base.Tables.Add(new ListEstimateIDDataTableDataTable(ds.Tables["ListEstimateIDDataTable"]));
                }
                if ((ds.Tables["ListDeprValueDataTable"] != null)) {
                    base.Tables.Add(new ListDeprValueDataTableDataTable(ds.Tables["ListDeprValueDataTable"]));
                }
                if ((ds.Tables["ListDeprTable"] != null)) {
                    base.Tables.Add(new ListDeprTableDataTable(ds.Tables["ListDeprTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListHouseTypeCollectionDatatableDataTable ListHouseTypeCollectionDatatable {
            get {
                return this.tableListHouseTypeCollectionDatatable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListEstimateIDDataTableDataTable ListEstimateIDDataTable {
            get {
                return this.tableListEstimateIDDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDeprValueDataTableDataTable ListDeprValueDataTable {
            get {
                return this.tableListDeprValueDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDeprTableDataTable ListDeprTable {
            get {
                return this.tableListDeprTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F36000MarshalAndSwiftData cln = ((F36000MarshalAndSwiftData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListHouseTypeCollectionDatatable"] != null)) {
                    base.Tables.Add(new ListHouseTypeCollectionDatatableDataTable(ds.Tables["ListHouseTypeCollectionDatatable"]));
                }
                if ((ds.Tables["ListEstimateIDDataTable"] != null)) {
                    base.Tables.Add(new ListEstimateIDDataTableDataTable(ds.Tables["ListEstimateIDDataTable"]));
                }
                if ((ds.Tables["ListDeprValueDataTable"] != null)) {
                    base.Tables.Add(new ListDeprValueDataTableDataTable(ds.Tables["ListDeprValueDataTable"]));
                }
                if ((ds.Tables["ListDeprTable"] != null)) {
                    base.Tables.Add(new ListDeprTableDataTable(ds.Tables["ListDeprTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListHouseTypeCollectionDatatable = ((ListHouseTypeCollectionDatatableDataTable)(base.Tables["ListHouseTypeCollectionDatatable"]));
            if ((initTable == true)) {
                if ((this.tableListHouseTypeCollectionDatatable != null)) {
                    this.tableListHouseTypeCollectionDatatable.InitVars();
                }
            }
            this.tableListEstimateIDDataTable = ((ListEstimateIDDataTableDataTable)(base.Tables["ListEstimateIDDataTable"]));
            if ((initTable == true)) {
                if ((this.tableListEstimateIDDataTable != null)) {
                    this.tableListEstimateIDDataTable.InitVars();
                }
            }
            this.tableListDeprValueDataTable = ((ListDeprValueDataTableDataTable)(base.Tables["ListDeprValueDataTable"]));
            if ((initTable == true)) {
                if ((this.tableListDeprValueDataTable != null)) {
                    this.tableListDeprValueDataTable.InitVars();
                }
            }
            this.tableListDeprTable = ((ListDeprTableDataTable)(base.Tables["ListDeprTable"]));
            if ((initTable == true)) {
                if ((this.tableListDeprTable != null)) {
                    this.tableListDeprTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F36000MarshalAndSwiftData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F36000MarshalAndSwiftData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListHouseTypeCollectionDatatable = new ListHouseTypeCollectionDatatableDataTable();
            base.Tables.Add(this.tableListHouseTypeCollectionDatatable);
            this.tableListEstimateIDDataTable = new ListEstimateIDDataTableDataTable();
            base.Tables.Add(this.tableListEstimateIDDataTable);
            this.tableListDeprValueDataTable = new ListDeprValueDataTableDataTable();
            base.Tables.Add(this.tableListDeprValueDataTable);
            this.tableListDeprTable = new ListDeprTableDataTable();
            base.Tables.Add(this.tableListDeprTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListHouseTypeCollectionDatatable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListEstimateIDDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDeprValueDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDeprTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F36000MarshalAndSwiftData ds = new F36000MarshalAndSwiftData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListHouseTypeCollectionDatatableRowChangeEventHandler(object sender, ListHouseTypeCollectionDatatableRowChangeEvent e);
        
        public delegate void ListEstimateIDDataTableRowChangeEventHandler(object sender, ListEstimateIDDataTableRowChangeEvent e);
        
        public delegate void ListDeprValueDataTableRowChangeEventHandler(object sender, ListDeprValueDataTableRowChangeEvent e);
        
        public delegate void ListDeprTableRowChangeEventHandler(object sender, ListDeprTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListHouseTypeCollectionDatatableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnHTCID;
            
            private global::System.Data.DataColumn columnSliceTypeID;
            
            private global::System.Data.DataColumn columnConstructionTypeID;
            
            private global::System.Data.DataColumn columnMSVersionID;
            
            private global::System.Data.DataColumn columnHTCXML;
            
            private global::System.Data.DataColumn columnAdjustmentXML;
            
            private global::System.Data.DataColumn columnAdjustmentDefaultXML;
            
            private global::System.Data.DataColumn columnRangeXML;
            
            private global::System.Data.DataColumn columnZipCode;
            
            private global::System.Data.DataColumn columnConnectionString;
            
            private global::System.Data.DataColumn columnCostMultiplier;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnObjectCondition;
            
            private global::System.Data.DataColumn columnEffectiveAge;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListHouseTypeCollectionDatatableDataTable() {
                this.TableName = "ListHouseTypeCollectionDatatable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListHouseTypeCollectionDatatableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListHouseTypeCollectionDatatableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HTCIDColumn {
                get {
                    return this.columnHTCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SliceTypeIDColumn {
                get {
                    return this.columnSliceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructionTypeIDColumn {
                get {
                    return this.columnConstructionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MSVersionIDColumn {
                get {
                    return this.columnMSVersionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HTCXMLColumn {
                get {
                    return this.columnHTCXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentXMLColumn {
                get {
                    return this.columnAdjustmentXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentDefaultXMLColumn {
                get {
                    return this.columnAdjustmentDefaultXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RangeXMLColumn {
                get {
                    return this.columnRangeXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionStringColumn {
                get {
                    return this.columnConnectionString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostMultiplierColumn {
                get {
                    return this.columnCostMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectConditionColumn {
                get {
                    return this.columnObjectCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveAgeColumn {
                get {
                    return this.columnEffectiveAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListHouseTypeCollectionDatatableRow this[int index] {
                get {
                    return ((ListHouseTypeCollectionDatatableRow)(this.Rows[index]));
                }
            }
            
            public event ListHouseTypeCollectionDatatableRowChangeEventHandler ListHouseTypeCollectionDatatableRowChanging;
            
            public event ListHouseTypeCollectionDatatableRowChangeEventHandler ListHouseTypeCollectionDatatableRowChanged;
            
            public event ListHouseTypeCollectionDatatableRowChangeEventHandler ListHouseTypeCollectionDatatableRowDeleting;
            
            public event ListHouseTypeCollectionDatatableRowChangeEventHandler ListHouseTypeCollectionDatatableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListHouseTypeCollectionDatatableRow(ListHouseTypeCollectionDatatableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListHouseTypeCollectionDatatableRow AddListHouseTypeCollectionDatatableRow(int HTCID, int SliceTypeID, int ConstructionTypeID, int MSVersionID, string HTCXML, string AdjustmentXML, string AdjustmentDefaultXML, string RangeXML, string ZipCode, string ConnectionString, string CostMultiplier, int RollYear, decimal ObjectCondition, byte EffectiveAge) {
                ListHouseTypeCollectionDatatableRow rowListHouseTypeCollectionDatatableRow = ((ListHouseTypeCollectionDatatableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HTCID,
                        SliceTypeID,
                        ConstructionTypeID,
                        MSVersionID,
                        HTCXML,
                        AdjustmentXML,
                        AdjustmentDefaultXML,
                        RangeXML,
                        ZipCode,
                        ConnectionString,
                        CostMultiplier,
                        RollYear,
                        ObjectCondition,
                        EffectiveAge};
                rowListHouseTypeCollectionDatatableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListHouseTypeCollectionDatatableRow);
                return rowListHouseTypeCollectionDatatableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListHouseTypeCollectionDatatableRow FindByHTCID(int HTCID) {
                return ((ListHouseTypeCollectionDatatableRow)(this.Rows.Find(new object[] {
                            HTCID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListHouseTypeCollectionDatatableDataTable cln = ((ListHouseTypeCollectionDatatableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListHouseTypeCollectionDatatableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHTCID = base.Columns["HTCID"];
                this.columnSliceTypeID = base.Columns["SliceTypeID"];
                this.columnConstructionTypeID = base.Columns["ConstructionTypeID"];
                this.columnMSVersionID = base.Columns["MSVersionID"];
                this.columnHTCXML = base.Columns["HTCXML"];
                this.columnAdjustmentXML = base.Columns["AdjustmentXML"];
                this.columnAdjustmentDefaultXML = base.Columns["AdjustmentDefaultXML"];
                this.columnRangeXML = base.Columns["RangeXML"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnConnectionString = base.Columns["ConnectionString"];
                this.columnCostMultiplier = base.Columns["CostMultiplier"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnObjectCondition = base.Columns["ObjectCondition"];
                this.columnEffectiveAge = base.Columns["EffectiveAge"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHTCID = new global::System.Data.DataColumn("HTCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHTCID);
                this.columnSliceTypeID = new global::System.Data.DataColumn("SliceTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceTypeID);
                this.columnConstructionTypeID = new global::System.Data.DataColumn("ConstructionTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructionTypeID);
                this.columnMSVersionID = new global::System.Data.DataColumn("MSVersionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMSVersionID);
                this.columnHTCXML = new global::System.Data.DataColumn("HTCXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHTCXML);
                this.columnAdjustmentXML = new global::System.Data.DataColumn("AdjustmentXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentXML);
                this.columnAdjustmentDefaultXML = new global::System.Data.DataColumn("AdjustmentDefaultXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentDefaultXML);
                this.columnRangeXML = new global::System.Data.DataColumn("RangeXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRangeXML);
                this.columnZipCode = new global::System.Data.DataColumn("ZipCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnConnectionString = new global::System.Data.DataColumn("ConnectionString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionString);
                this.columnCostMultiplier = new global::System.Data.DataColumn("CostMultiplier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostMultiplier);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnObjectCondition = new global::System.Data.DataColumn("ObjectCondition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectCondition);
                this.columnEffectiveAge = new global::System.Data.DataColumn("EffectiveAge", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveAge);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnHTCID}, true));
                this.columnHTCID.AllowDBNull = false;
                this.columnHTCID.Unique = true;
                this.columnSliceTypeID.ReadOnly = true;
                this.columnMSVersionID.ReadOnly = true;
                this.columnHTCXML.AllowDBNull = false;
                this.columnHTCXML.MaxLength = 2147483647;
                this.columnAdjustmentXML.MaxLength = 2147483647;
                this.columnZipCode.ReadOnly = true;
                this.columnZipCode.MaxLength = 1000;
                this.columnConnectionString.MaxLength = 200;
                this.columnCostMultiplier.MaxLength = 2000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListHouseTypeCollectionDatatableRow NewListHouseTypeCollectionDatatableRow() {
                return ((ListHouseTypeCollectionDatatableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListHouseTypeCollectionDatatableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListHouseTypeCollectionDatatableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListHouseTypeCollectionDatatableRowChanged != null)) {
                    this.ListHouseTypeCollectionDatatableRowChanged(this, new ListHouseTypeCollectionDatatableRowChangeEvent(((ListHouseTypeCollectionDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListHouseTypeCollectionDatatableRowChanging != null)) {
                    this.ListHouseTypeCollectionDatatableRowChanging(this, new ListHouseTypeCollectionDatatableRowChangeEvent(((ListHouseTypeCollectionDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListHouseTypeCollectionDatatableRowDeleted != null)) {
                    this.ListHouseTypeCollectionDatatableRowDeleted(this, new ListHouseTypeCollectionDatatableRowChangeEvent(((ListHouseTypeCollectionDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListHouseTypeCollectionDatatableRowDeleting != null)) {
                    this.ListHouseTypeCollectionDatatableRowDeleting(this, new ListHouseTypeCollectionDatatableRowChangeEvent(((ListHouseTypeCollectionDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListHouseTypeCollectionDatatableRow(ListHouseTypeCollectionDatatableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36000MarshalAndSwiftData ds = new F36000MarshalAndSwiftData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListHouseTypeCollectionDatatableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListEstimateIDDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEstimateID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListEstimateIDDataTableDataTable() {
                this.TableName = "ListEstimateIDDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListEstimateIDDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListEstimateIDDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstimateIDColumn {
                get {
                    return this.columnEstimateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListEstimateIDDataTableRow this[int index] {
                get {
                    return ((ListEstimateIDDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ListEstimateIDDataTableRowChangeEventHandler ListEstimateIDDataTableRowChanging;
            
            public event ListEstimateIDDataTableRowChangeEventHandler ListEstimateIDDataTableRowChanged;
            
            public event ListEstimateIDDataTableRowChangeEventHandler ListEstimateIDDataTableRowDeleting;
            
            public event ListEstimateIDDataTableRowChangeEventHandler ListEstimateIDDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListEstimateIDDataTableRow(ListEstimateIDDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListEstimateIDDataTableRow AddListEstimateIDDataTableRow(int EstimateID) {
                ListEstimateIDDataTableRow rowListEstimateIDDataTableRow = ((ListEstimateIDDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EstimateID};
                rowListEstimateIDDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListEstimateIDDataTableRow);
                return rowListEstimateIDDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListEstimateIDDataTableDataTable cln = ((ListEstimateIDDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListEstimateIDDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEstimateID = base.Columns["EstimateID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEstimateID = new global::System.Data.DataColumn("EstimateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstimateID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListEstimateIDDataTableRow NewListEstimateIDDataTableRow() {
                return ((ListEstimateIDDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListEstimateIDDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListEstimateIDDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListEstimateIDDataTableRowChanged != null)) {
                    this.ListEstimateIDDataTableRowChanged(this, new ListEstimateIDDataTableRowChangeEvent(((ListEstimateIDDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListEstimateIDDataTableRowChanging != null)) {
                    this.ListEstimateIDDataTableRowChanging(this, new ListEstimateIDDataTableRowChangeEvent(((ListEstimateIDDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListEstimateIDDataTableRowDeleted != null)) {
                    this.ListEstimateIDDataTableRowDeleted(this, new ListEstimateIDDataTableRowChangeEvent(((ListEstimateIDDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListEstimateIDDataTableRowDeleting != null)) {
                    this.ListEstimateIDDataTableRowDeleting(this, new ListEstimateIDDataTableRowChangeEvent(((ListEstimateIDDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListEstimateIDDataTableRow(ListEstimateIDDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36000MarshalAndSwiftData ds = new F36000MarshalAndSwiftData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListEstimateIDDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDeprValueDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnVSDeprecitionID;
            
            private global::System.Data.DataColumn columnIsByObject;
            
            private global::System.Data.DataColumn columnDeprYear;
            
            private global::System.Data.DataColumn columnAge;
            
            private global::System.Data.DataColumn columnCondition;
            
            private global::System.Data.DataColumn columnDeprTableID;
            
            private global::System.Data.DataColumn columnDeprName;
            
            private global::System.Data.DataColumn columnQuality;
            
            private global::System.Data.DataColumn columnObjectCondition;
            
            private global::System.Data.DataColumn columnDepreciationTableID;
            
            private global::System.Data.DataColumn columnDepreciationTable;
            
            private global::System.Data.DataColumn columnEffectiveAge;
            
            private global::System.Data.DataColumn columnOriginalValue;
            
            private global::System.Data.DataColumn columnDepreciationPercent;
            
            private global::System.Data.DataColumn columnDepreciationAmount;
            
            private global::System.Data.DataColumn columnAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableDataTable() {
                this.TableName = "ListDeprValueDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprValueDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDeprValueDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSDeprecitionIDColumn {
                get {
                    return this.columnVSDeprecitionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsByObjectColumn {
                get {
                    return this.columnIsByObject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprYearColumn {
                get {
                    return this.columnDeprYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionColumn {
                get {
                    return this.columnCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprTableIDColumn {
                get {
                    return this.columnDeprTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprNameColumn {
                get {
                    return this.columnDeprName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityColumn {
                get {
                    return this.columnQuality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectConditionColumn {
                get {
                    return this.columnObjectCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepreciationTableIDColumn {
                get {
                    return this.columnDepreciationTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepreciationTableColumn {
                get {
                    return this.columnDepreciationTable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveAgeColumn {
                get {
                    return this.columnEffectiveAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalValueColumn {
                get {
                    return this.columnOriginalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepreciationPercentColumn {
                get {
                    return this.columnDepreciationPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepreciationAmountColumn {
                get {
                    return this.columnDepreciationAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRow this[int index] {
                get {
                    return ((ListDeprValueDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ListDeprValueDataTableRowChangeEventHandler ListDeprValueDataTableRowChanging;
            
            public event ListDeprValueDataTableRowChangeEventHandler ListDeprValueDataTableRowChanged;
            
            public event ListDeprValueDataTableRowChangeEventHandler ListDeprValueDataTableRowDeleting;
            
            public event ListDeprValueDataTableRowChangeEventHandler ListDeprValueDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDeprValueDataTableRow(ListDeprValueDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRow AddListDeprValueDataTableRow(bool IsByObject, short DeprYear, int Age, decimal Condition, int DeprTableID, string DeprName, int Quality, decimal ObjectCondition, int DepreciationTableID, string DepreciationTable, byte EffectiveAge, decimal OriginalValue, decimal DepreciationPercent, decimal DepreciationAmount, decimal Amount) {
                ListDeprValueDataTableRow rowListDeprValueDataTableRow = ((ListDeprValueDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IsByObject,
                        DeprYear,
                        Age,
                        Condition,
                        DeprTableID,
                        DeprName,
                        Quality,
                        ObjectCondition,
                        DepreciationTableID,
                        DepreciationTable,
                        EffectiveAge,
                        OriginalValue,
                        DepreciationPercent,
                        DepreciationAmount,
                        Amount};
                rowListDeprValueDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDeprValueDataTableRow);
                return rowListDeprValueDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDeprValueDataTableDataTable cln = ((ListDeprValueDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDeprValueDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVSDeprecitionID = base.Columns["VSDeprecitionID"];
                this.columnIsByObject = base.Columns["IsByObject"];
                this.columnDeprYear = base.Columns["DeprYear"];
                this.columnAge = base.Columns["Age"];
                this.columnCondition = base.Columns["Condition"];
                this.columnDeprTableID = base.Columns["DeprTableID"];
                this.columnDeprName = base.Columns["DeprName"];
                this.columnQuality = base.Columns["Quality"];
                this.columnObjectCondition = base.Columns["ObjectCondition"];
                this.columnDepreciationTableID = base.Columns["DepreciationTableID"];
                this.columnDepreciationTable = base.Columns["DepreciationTable"];
                this.columnEffectiveAge = base.Columns["EffectiveAge"];
                this.columnOriginalValue = base.Columns["OriginalValue"];
                this.columnDepreciationPercent = base.Columns["DepreciationPercent"];
                this.columnDepreciationAmount = base.Columns["DepreciationAmount"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVSDeprecitionID = new global::System.Data.DataColumn("VSDeprecitionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSDeprecitionID);
                this.columnIsByObject = new global::System.Data.DataColumn("IsByObject", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsByObject);
                this.columnDeprYear = new global::System.Data.DataColumn("DeprYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprYear);
                this.columnAge = new global::System.Data.DataColumn("Age", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAge);
                this.columnCondition = new global::System.Data.DataColumn("Condition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondition);
                this.columnDeprTableID = new global::System.Data.DataColumn("DeprTableID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprTableID);
                this.columnDeprName = new global::System.Data.DataColumn("DeprName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprName);
                this.columnQuality = new global::System.Data.DataColumn("Quality", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuality);
                this.columnObjectCondition = new global::System.Data.DataColumn("ObjectCondition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectCondition);
                this.columnDepreciationTableID = new global::System.Data.DataColumn("DepreciationTableID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepreciationTableID);
                this.columnDepreciationTable = new global::System.Data.DataColumn("DepreciationTable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepreciationTable);
                this.columnEffectiveAge = new global::System.Data.DataColumn("EffectiveAge", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveAge);
                this.columnOriginalValue = new global::System.Data.DataColumn("OriginalValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalValue);
                this.columnDepreciationPercent = new global::System.Data.DataColumn("DepreciationPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepreciationPercent);
                this.columnDepreciationAmount = new global::System.Data.DataColumn("DepreciationAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepreciationAmount);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnVSDeprecitionID.AutoIncrement = true;
                this.columnVSDeprecitionID.ReadOnly = true;
                this.columnAge.ReadOnly = true;
                this.columnDeprName.MaxLength = 50;
                this.columnDepreciationTable.ReadOnly = true;
                this.columnDepreciationTable.MaxLength = 200;
                this.columnDepreciationPercent.ReadOnly = true;
                this.columnDepreciationAmount.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRow NewListDeprValueDataTableRow() {
                return ((ListDeprValueDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDeprValueDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDeprValueDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDeprValueDataTableRowChanged != null)) {
                    this.ListDeprValueDataTableRowChanged(this, new ListDeprValueDataTableRowChangeEvent(((ListDeprValueDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDeprValueDataTableRowChanging != null)) {
                    this.ListDeprValueDataTableRowChanging(this, new ListDeprValueDataTableRowChangeEvent(((ListDeprValueDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDeprValueDataTableRowDeleted != null)) {
                    this.ListDeprValueDataTableRowDeleted(this, new ListDeprValueDataTableRowChangeEvent(((ListDeprValueDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDeprValueDataTableRowDeleting != null)) {
                    this.ListDeprValueDataTableRowDeleting(this, new ListDeprValueDataTableRowChangeEvent(((ListDeprValueDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDeprValueDataTableRow(ListDeprValueDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36000MarshalAndSwiftData ds = new F36000MarshalAndSwiftData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDeprValueDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDeprTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDeprTableID;
            
            private global::System.Data.DataColumn columnDeprName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableDataTable() {
                this.TableName = "ListDeprTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDeprTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprTableIDColumn {
                get {
                    return this.columnDeprTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprNameColumn {
                get {
                    return this.columnDeprName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow this[int index] {
                get {
                    return ((ListDeprTableRow)(this.Rows[index]));
                }
            }
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowChanging;
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowChanged;
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowDeleting;
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDeprTableRow(ListDeprTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow AddListDeprTableRow(int DeprTableID, string DeprName) {
                ListDeprTableRow rowListDeprTableRow = ((ListDeprTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeprTableID,
                        DeprName};
                rowListDeprTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDeprTableRow);
                return rowListDeprTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDeprTableDataTable cln = ((ListDeprTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDeprTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeprTableID = base.Columns["DeprTableID"];
                this.columnDeprName = base.Columns["DeprName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeprTableID = new global::System.Data.DataColumn("DeprTableID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprTableID);
                this.columnDeprName = new global::System.Data.DataColumn("DeprName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprName);
                this.columnDeprTableID.ReadOnly = true;
                this.columnDeprName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow NewListDeprTableRow() {
                return ((ListDeprTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDeprTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDeprTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDeprTableRowChanged != null)) {
                    this.ListDeprTableRowChanged(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDeprTableRowChanging != null)) {
                    this.ListDeprTableRowChanging(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDeprTableRowDeleted != null)) {
                    this.ListDeprTableRowDeleted(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDeprTableRowDeleting != null)) {
                    this.ListDeprTableRowDeleting(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDeprTableRow(ListDeprTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36000MarshalAndSwiftData ds = new F36000MarshalAndSwiftData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDeprTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListHouseTypeCollectionDatatableRow : global::System.Data.DataRow {
            
            private ListHouseTypeCollectionDatatableDataTable tableListHouseTypeCollectionDatatable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListHouseTypeCollectionDatatableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListHouseTypeCollectionDatatable = ((ListHouseTypeCollectionDatatableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HTCID {
                get {
                    return ((int)(this[this.tableListHouseTypeCollectionDatatable.HTCIDColumn]));
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.HTCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SliceTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListHouseTypeCollectionDatatable.SliceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SliceTypeID\' in table \'ListHouseTypeCollectionDatatable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.SliceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConstructionTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListHouseTypeCollectionDatatable.ConstructionTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConstructionTypeID\' in table \'ListHouseTypeCollectionDatata" +
                                "ble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.ConstructionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MSVersionID {
                get {
                    try {
                        return ((int)(this[this.tableListHouseTypeCollectionDatatable.MSVersionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MSVersionID\' in table \'ListHouseTypeCollectionDatatable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.MSVersionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HTCXML {
                get {
                    return ((string)(this[this.tableListHouseTypeCollectionDatatable.HTCXMLColumn]));
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.HTCXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentXML {
                get {
                    try {
                        return ((string)(this[this.tableListHouseTypeCollectionDatatable.AdjustmentXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentXML\' in table \'ListHouseTypeCollectionDatatable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.AdjustmentXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentDefaultXML {
                get {
                    try {
                        return ((string)(this[this.tableListHouseTypeCollectionDatatable.AdjustmentDefaultXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentDefaultXML\' in table \'ListHouseTypeCollectionData" +
                                "table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.AdjustmentDefaultXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RangeXML {
                get {
                    try {
                        return ((string)(this[this.tableListHouseTypeCollectionDatatable.RangeXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RangeXML\' in table \'ListHouseTypeCollectionDatatable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.RangeXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZipCode {
                get {
                    try {
                        return ((string)(this[this.tableListHouseTypeCollectionDatatable.ZipCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZipCode\' in table \'ListHouseTypeCollectionDatatable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.ZipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConnectionString {
                get {
                    try {
                        return ((string)(this[this.tableListHouseTypeCollectionDatatable.ConnectionStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionString\' in table \'ListHouseTypeCollectionDatatabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.ConnectionStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CostMultiplier {
                get {
                    try {
                        return ((string)(this[this.tableListHouseTypeCollectionDatatable.CostMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostMultiplier\' in table \'ListHouseTypeCollectionDatatable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.CostMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListHouseTypeCollectionDatatable.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListHouseTypeCollectionDatatable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ObjectCondition {
                get {
                    try {
                        return ((decimal)(this[this.tableListHouseTypeCollectionDatatable.ObjectConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectCondition\' in table \'ListHouseTypeCollectionDatatable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.ObjectConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte EffectiveAge {
                get {
                    try {
                        return ((byte)(this[this.tableListHouseTypeCollectionDatatable.EffectiveAgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveAge\' in table \'ListHouseTypeCollectionDatatable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableListHouseTypeCollectionDatatable.EffectiveAgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeIDNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.SliceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeIDNull() {
                this[this.tableListHouseTypeCollectionDatatable.SliceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructionTypeIDNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.ConstructionTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructionTypeIDNull() {
                this[this.tableListHouseTypeCollectionDatatable.ConstructionTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMSVersionIDNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.MSVersionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMSVersionIDNull() {
                this[this.tableListHouseTypeCollectionDatatable.MSVersionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentXMLNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.AdjustmentXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentXMLNull() {
                this[this.tableListHouseTypeCollectionDatatable.AdjustmentXMLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentDefaultXMLNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.AdjustmentDefaultXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentDefaultXMLNull() {
                this[this.tableListHouseTypeCollectionDatatable.AdjustmentDefaultXMLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRangeXMLNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.RangeXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRangeXMLNull() {
                this[this.tableListHouseTypeCollectionDatatable.RangeXMLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipCodeNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.ZipCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipCodeNull() {
                this[this.tableListHouseTypeCollectionDatatable.ZipCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConnectionStringNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.ConnectionStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConnectionStringNull() {
                this[this.tableListHouseTypeCollectionDatatable.ConnectionStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostMultiplierNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.CostMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostMultiplierNull() {
                this[this.tableListHouseTypeCollectionDatatable.CostMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListHouseTypeCollectionDatatable.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectConditionNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.ObjectConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectConditionNull() {
                this[this.tableListHouseTypeCollectionDatatable.ObjectConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveAgeNull() {
                return this.IsNull(this.tableListHouseTypeCollectionDatatable.EffectiveAgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveAgeNull() {
                this[this.tableListHouseTypeCollectionDatatable.EffectiveAgeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListEstimateIDDataTableRow : global::System.Data.DataRow {
            
            private ListEstimateIDDataTableDataTable tableListEstimateIDDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListEstimateIDDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListEstimateIDDataTable = ((ListEstimateIDDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EstimateID {
                get {
                    try {
                        return ((int)(this[this.tableListEstimateIDDataTable.EstimateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstimateID\' in table \'ListEstimateIDDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListEstimateIDDataTable.EstimateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstimateIDNull() {
                return this.IsNull(this.tableListEstimateIDDataTable.EstimateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstimateIDNull() {
                this[this.tableListEstimateIDDataTable.EstimateIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDeprValueDataTableRow : global::System.Data.DataRow {
            
            private ListDeprValueDataTableDataTable tableListDeprValueDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprValueDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDeprValueDataTable = ((ListDeprValueDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VSDeprecitionID {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.VSDeprecitionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSDeprecitionID\' in table \'ListDeprValueDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.VSDeprecitionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsByObject {
                get {
                    try {
                        return ((bool)(this[this.tableListDeprValueDataTable.IsByObjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsByObject\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.IsByObjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DeprYear {
                get {
                    try {
                        return ((short)(this[this.tableListDeprValueDataTable.DeprYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprYear\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DeprYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Age {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.AgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Age\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.AgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Condition {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.ConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Condition\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.ConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeprTableID {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.DeprTableIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprTableID\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DeprTableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeprName {
                get {
                    try {
                        return ((string)(this[this.tableListDeprValueDataTable.DeprNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprName\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DeprNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Quality {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.QualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quality\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.QualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ObjectCondition {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.ObjectConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectCondition\' in table \'ListDeprValueDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.ObjectConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepreciationTableID {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.DepreciationTableIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepreciationTableID\' in table \'ListDeprValueDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DepreciationTableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepreciationTable {
                get {
                    try {
                        return ((string)(this[this.tableListDeprValueDataTable.DepreciationTableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepreciationTable\' in table \'ListDeprValueDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DepreciationTableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte EffectiveAge {
                get {
                    try {
                        return ((byte)(this[this.tableListDeprValueDataTable.EffectiveAgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveAge\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.EffectiveAgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.OriginalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalValue\' in table \'ListDeprValueDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.OriginalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DepreciationPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.DepreciationPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepreciationPercent\' in table \'ListDeprValueDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DepreciationPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DepreciationAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.DepreciationAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepreciationAmount\' in table \'ListDeprValueDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DepreciationAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSDeprecitionIDNull() {
                return this.IsNull(this.tableListDeprValueDataTable.VSDeprecitionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSDeprecitionIDNull() {
                this[this.tableListDeprValueDataTable.VSDeprecitionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsByObjectNull() {
                return this.IsNull(this.tableListDeprValueDataTable.IsByObjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsByObjectNull() {
                this[this.tableListDeprValueDataTable.IsByObjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprYearNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DeprYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprYearNull() {
                this[this.tableListDeprValueDataTable.DeprYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeNull() {
                return this.IsNull(this.tableListDeprValueDataTable.AgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeNull() {
                this[this.tableListDeprValueDataTable.AgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionNull() {
                return this.IsNull(this.tableListDeprValueDataTable.ConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionNull() {
                this[this.tableListDeprValueDataTable.ConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprTableIDNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DeprTableIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprTableIDNull() {
                this[this.tableListDeprValueDataTable.DeprTableIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprNameNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DeprNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprNameNull() {
                this[this.tableListDeprValueDataTable.DeprNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityNull() {
                return this.IsNull(this.tableListDeprValueDataTable.QualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityNull() {
                this[this.tableListDeprValueDataTable.QualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectConditionNull() {
                return this.IsNull(this.tableListDeprValueDataTable.ObjectConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectConditionNull() {
                this[this.tableListDeprValueDataTable.ObjectConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepreciationTableIDNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DepreciationTableIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepreciationTableIDNull() {
                this[this.tableListDeprValueDataTable.DepreciationTableIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepreciationTableNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DepreciationTableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepreciationTableNull() {
                this[this.tableListDeprValueDataTable.DepreciationTableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveAgeNull() {
                return this.IsNull(this.tableListDeprValueDataTable.EffectiveAgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveAgeNull() {
                this[this.tableListDeprValueDataTable.EffectiveAgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalValueNull() {
                return this.IsNull(this.tableListDeprValueDataTable.OriginalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalValueNull() {
                this[this.tableListDeprValueDataTable.OriginalValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepreciationPercentNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DepreciationPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepreciationPercentNull() {
                this[this.tableListDeprValueDataTable.DepreciationPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepreciationAmountNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DepreciationAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepreciationAmountNull() {
                this[this.tableListDeprValueDataTable.DepreciationAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableListDeprValueDataTable.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableListDeprValueDataTable.AmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDeprTableRow : global::System.Data.DataRow {
            
            private ListDeprTableDataTable tableListDeprTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDeprTable = ((ListDeprTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeprTableID {
                get {
                    try {
                        return ((int)(this[this.tableListDeprTable.DeprTableIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprTableID\' in table \'ListDeprTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprTable.DeprTableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeprName {
                get {
                    try {
                        return ((string)(this[this.tableListDeprTable.DeprNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprName\' in table \'ListDeprTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprTable.DeprNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprTableIDNull() {
                return this.IsNull(this.tableListDeprTable.DeprTableIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprTableIDNull() {
                this[this.tableListDeprTable.DeprTableIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprNameNull() {
                return this.IsNull(this.tableListDeprTable.DeprNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprNameNull() {
                this[this.tableListDeprTable.DeprNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListHouseTypeCollectionDatatableRowChangeEvent : global::System.EventArgs {
            
            private ListHouseTypeCollectionDatatableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListHouseTypeCollectionDatatableRowChangeEvent(ListHouseTypeCollectionDatatableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListHouseTypeCollectionDatatableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListEstimateIDDataTableRowChangeEvent : global::System.EventArgs {
            
            private ListEstimateIDDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListEstimateIDDataTableRowChangeEvent(ListEstimateIDDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListEstimateIDDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDeprValueDataTableRowChangeEvent : global::System.EventArgs {
            
            private ListDeprValueDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRowChangeEvent(ListDeprValueDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDeprTableRowChangeEvent : global::System.EventArgs {
            
            private ListDeprTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRowChangeEvent(ListDeprTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591