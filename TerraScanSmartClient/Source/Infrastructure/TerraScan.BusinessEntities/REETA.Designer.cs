//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("REETA")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class REETA : global::System.Data.DataSet {
        
        private AFFIDAVITDataTable tableAFFIDAVIT;
        
        private INDIVIDUALDataTable tableINDIVIDUAL;
        
        private PARCELDataTable tablePARCEL;
        
        private USE_CODESDataTable tableUSE_CODES;
        
        private SUPPLEMENTALDataTable tableSUPPLEMENTAL;
        
        private ErrorStatusDataTableDataTable tableErrorStatusDataTable;
        
        private global::System.Data.DataRelation relationFK_AFFIDAVIT_INDIVIDUAL;
        
        private global::System.Data.DataRelation relationFK_AFFIDAVIT_PARCEL;
        
        private global::System.Data.DataRelation relationFK_AFFIDAVIT_USE_CODES;
        
        private global::System.Data.DataRelation relationFK_AFFIDAVIT_SUPPLEMENTAL;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public REETA() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected REETA(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AFFIDAVIT"] != null)) {
                    base.Tables.Add(new AFFIDAVITDataTable(ds.Tables["AFFIDAVIT"]));
                }
                if ((ds.Tables["INDIVIDUAL"] != null)) {
                    base.Tables.Add(new INDIVIDUALDataTable(ds.Tables["INDIVIDUAL"]));
                }
                if ((ds.Tables["PARCEL"] != null)) {
                    base.Tables.Add(new PARCELDataTable(ds.Tables["PARCEL"]));
                }
                if ((ds.Tables["USE_CODES"] != null)) {
                    base.Tables.Add(new USE_CODESDataTable(ds.Tables["USE_CODES"]));
                }
                if ((ds.Tables["SUPPLEMENTAL"] != null)) {
                    base.Tables.Add(new SUPPLEMENTALDataTable(ds.Tables["SUPPLEMENTAL"]));
                }
                if ((ds.Tables["ErrorStatusDataTable"] != null)) {
                    base.Tables.Add(new ErrorStatusDataTableDataTable(ds.Tables["ErrorStatusDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AFFIDAVITDataTable AFFIDAVIT {
            get {
                return this.tableAFFIDAVIT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public INDIVIDUALDataTable INDIVIDUAL {
            get {
                return this.tableINDIVIDUAL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PARCELDataTable PARCEL {
            get {
                return this.tablePARCEL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public USE_CODESDataTable USE_CODES {
            get {
                return this.tableUSE_CODES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SUPPLEMENTALDataTable SUPPLEMENTAL {
            get {
                return this.tableSUPPLEMENTAL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ErrorStatusDataTableDataTable ErrorStatusDataTable {
            get {
                return this.tableErrorStatusDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            REETA cln = ((REETA)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AFFIDAVIT"] != null)) {
                    base.Tables.Add(new AFFIDAVITDataTable(ds.Tables["AFFIDAVIT"]));
                }
                if ((ds.Tables["INDIVIDUAL"] != null)) {
                    base.Tables.Add(new INDIVIDUALDataTable(ds.Tables["INDIVIDUAL"]));
                }
                if ((ds.Tables["PARCEL"] != null)) {
                    base.Tables.Add(new PARCELDataTable(ds.Tables["PARCEL"]));
                }
                if ((ds.Tables["USE_CODES"] != null)) {
                    base.Tables.Add(new USE_CODESDataTable(ds.Tables["USE_CODES"]));
                }
                if ((ds.Tables["SUPPLEMENTAL"] != null)) {
                    base.Tables.Add(new SUPPLEMENTALDataTable(ds.Tables["SUPPLEMENTAL"]));
                }
                if ((ds.Tables["ErrorStatusDataTable"] != null)) {
                    base.Tables.Add(new ErrorStatusDataTableDataTable(ds.Tables["ErrorStatusDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAFFIDAVIT = ((AFFIDAVITDataTable)(base.Tables["AFFIDAVIT"]));
            if ((initTable == true)) {
                if ((this.tableAFFIDAVIT != null)) {
                    this.tableAFFIDAVIT.InitVars();
                }
            }
            this.tableINDIVIDUAL = ((INDIVIDUALDataTable)(base.Tables["INDIVIDUAL"]));
            if ((initTable == true)) {
                if ((this.tableINDIVIDUAL != null)) {
                    this.tableINDIVIDUAL.InitVars();
                }
            }
            this.tablePARCEL = ((PARCELDataTable)(base.Tables["PARCEL"]));
            if ((initTable == true)) {
                if ((this.tablePARCEL != null)) {
                    this.tablePARCEL.InitVars();
                }
            }
            this.tableUSE_CODES = ((USE_CODESDataTable)(base.Tables["USE_CODES"]));
            if ((initTable == true)) {
                if ((this.tableUSE_CODES != null)) {
                    this.tableUSE_CODES.InitVars();
                }
            }
            this.tableSUPPLEMENTAL = ((SUPPLEMENTALDataTable)(base.Tables["SUPPLEMENTAL"]));
            if ((initTable == true)) {
                if ((this.tableSUPPLEMENTAL != null)) {
                    this.tableSUPPLEMENTAL.InitVars();
                }
            }
            this.tableErrorStatusDataTable = ((ErrorStatusDataTableDataTable)(base.Tables["ErrorStatusDataTable"]));
            if ((initTable == true)) {
                if ((this.tableErrorStatusDataTable != null)) {
                    this.tableErrorStatusDataTable.InitVars();
                }
            }
            this.relationFK_AFFIDAVIT_INDIVIDUAL = this.Relations["FK_AFFIDAVIT_INDIVIDUAL"];
            this.relationFK_AFFIDAVIT_PARCEL = this.Relations["FK_AFFIDAVIT_PARCEL"];
            this.relationFK_AFFIDAVIT_USE_CODES = this.Relations["FK_AFFIDAVIT_USE_CODES"];
            this.relationFK_AFFIDAVIT_SUPPLEMENTAL = this.Relations["FK_AFFIDAVIT_SUPPLEMENTAL"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "REETA";
            this.Prefix = "";
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAFFIDAVIT = new AFFIDAVITDataTable();
            base.Tables.Add(this.tableAFFIDAVIT);
            this.tableINDIVIDUAL = new INDIVIDUALDataTable();
            base.Tables.Add(this.tableINDIVIDUAL);
            this.tablePARCEL = new PARCELDataTable();
            base.Tables.Add(this.tablePARCEL);
            this.tableUSE_CODES = new USE_CODESDataTable();
            base.Tables.Add(this.tableUSE_CODES);
            this.tableSUPPLEMENTAL = new SUPPLEMENTALDataTable();
            base.Tables.Add(this.tableSUPPLEMENTAL);
            this.tableErrorStatusDataTable = new ErrorStatusDataTableDataTable();
            base.Tables.Add(this.tableErrorStatusDataTable);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_AFFIDAVIT_INDIVIDUAL", new global::System.Data.DataColumn[] {
                        this.tableAFFIDAVIT.StatementIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableINDIVIDUAL.StatementIDColumn});
            this.tableINDIVIDUAL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_AFFIDAVIT_PARCEL", new global::System.Data.DataColumn[] {
                        this.tableAFFIDAVIT.StatementIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePARCEL.StatementIDColumn});
            this.tablePARCEL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_AFFIDAVIT_USE_CODES", new global::System.Data.DataColumn[] {
                        this.tableAFFIDAVIT.StatementIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableUSE_CODES.StatementIDColumn});
            this.tableUSE_CODES.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_AFFIDAVIT_SUPPLEMENTAL", new global::System.Data.DataColumn[] {
                        this.tableAFFIDAVIT.StatementIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableSUPPLEMENTAL.StatementIDColumn});
            this.tableSUPPLEMENTAL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_AFFIDAVIT_INDIVIDUAL = new global::System.Data.DataRelation("FK_AFFIDAVIT_INDIVIDUAL", new global::System.Data.DataColumn[] {
                        this.tableAFFIDAVIT.StatementIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableINDIVIDUAL.StatementIDColumn}, false);
            this.relationFK_AFFIDAVIT_INDIVIDUAL.Nested = true;
            this.Relations.Add(this.relationFK_AFFIDAVIT_INDIVIDUAL);
            this.relationFK_AFFIDAVIT_PARCEL = new global::System.Data.DataRelation("FK_AFFIDAVIT_PARCEL", new global::System.Data.DataColumn[] {
                        this.tableAFFIDAVIT.StatementIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePARCEL.StatementIDColumn}, false);
            this.relationFK_AFFIDAVIT_PARCEL.Nested = true;
            this.Relations.Add(this.relationFK_AFFIDAVIT_PARCEL);
            this.relationFK_AFFIDAVIT_USE_CODES = new global::System.Data.DataRelation("FK_AFFIDAVIT_USE_CODES", new global::System.Data.DataColumn[] {
                        this.tableAFFIDAVIT.StatementIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableUSE_CODES.StatementIDColumn}, false);
            this.relationFK_AFFIDAVIT_USE_CODES.Nested = true;
            this.Relations.Add(this.relationFK_AFFIDAVIT_USE_CODES);
            this.relationFK_AFFIDAVIT_SUPPLEMENTAL = new global::System.Data.DataRelation("FK_AFFIDAVIT_SUPPLEMENTAL", new global::System.Data.DataColumn[] {
                        this.tableAFFIDAVIT.StatementIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableSUPPLEMENTAL.StatementIDColumn}, false);
            this.relationFK_AFFIDAVIT_SUPPLEMENTAL.Nested = true;
            this.Relations.Add(this.relationFK_AFFIDAVIT_SUPPLEMENTAL);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAFFIDAVIT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeINDIVIDUAL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePARCEL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUSE_CODES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSUPPLEMENTAL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeErrorStatusDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            REETA ds = new REETA();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AFFIDAVITRowChangeEventHandler(object sender, AFFIDAVITRowChangeEvent e);
        
        public delegate void INDIVIDUALRowChangeEventHandler(object sender, INDIVIDUALRowChangeEvent e);
        
        public delegate void PARCELRowChangeEventHandler(object sender, PARCELRowChangeEvent e);
        
        public delegate void USE_CODESRowChangeEventHandler(object sender, USE_CODESRowChangeEvent e);
        
        public delegate void SUPPLEMENTALRowChangeEventHandler(object sender, SUPPLEMENTALRowChangeEvent e);
        
        public delegate void ErrorStatusDataTableRowChangeEventHandler(object sender, ErrorStatusDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AFFIDAVITDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnPARTIAL_SALE;
            
            private global::System.Data.DataColumn columnPROP_ST_ADDRESS;
            
            private global::System.Data.DataColumn columnLOC_CODE;
            
            private global::System.Data.DataColumn columnCOUNTY_NAME;
            
            private global::System.Data.DataColumn columnCITY_NAME;
            
            private global::System.Data.DataColumn columnPARCEL_SEGREGATED;
            
            private global::System.Data.DataColumn columnEXEMPT_PROPERTY;
            
            private global::System.Data.DataColumn columnFORESTLAND;
            
            private global::System.Data.DataColumn columnOPEN_SPACE;
            
            private global::System.Data.DataColumn columnHISTORIC;
            
            private global::System.Data.DataColumn columnCONTINUANCE;
            
            private global::System.Data.DataColumn columnPERSONAL_PROP_DESC;
            
            private global::System.Data.DataColumn columnEXEMPTION_CODE;
            
            private global::System.Data.DataColumn columnEXEMPTION_EXPLANATION;
            
            private global::System.Data.DataColumn columnDOC_TYPE;
            
            private global::System.Data.DataColumn columnDOC_DATE;
            
            private global::System.Data.DataColumn columnGROSS_SELL_PRICE;
            
            private global::System.Data.DataColumn columnPERSONAL_PROPERTY_AMT;
            
            private global::System.Data.DataColumn columnREAL_PROP_EXEMPT_AMT;
            
            private global::System.Data.DataColumn columnTAXABLE_SELL_PRICE;
            
            private global::System.Data.DataColumn columnEXCISE_TAX_STATE;
            
            private global::System.Data.DataColumn columnEXCISE_TAX_LOCAL;
            
            private global::System.Data.DataColumn columnDELQ_INT_STATE;
            
            private global::System.Data.DataColumn columnDELQ_INT_LOCAL;
            
            private global::System.Data.DataColumn columnDELQ_PENALTY;
            
            private global::System.Data.DataColumn columnSUB_TOTAL;
            
            private global::System.Data.DataColumn columnSTATE_TECH_FEE;
            
            private global::System.Data.DataColumn columnPROCESSING_FEE;
            
            private global::System.Data.DataColumn columnTOTAL_DUE;
            
            private global::System.Data.DataColumn columnRECEIPT_DATE;
            
            private global::System.Data.DataColumn columnRECEIPT_NUM;
            
            private global::System.Data.DataColumn columnNOTE_TO_DOR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITDataTable() {
                this.TableName = "AFFIDAVIT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AFFIDAVITDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AFFIDAVITDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARTIAL_SALEColumn {
                get {
                    return this.columnPARTIAL_SALE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROP_ST_ADDRESSColumn {
                get {
                    return this.columnPROP_ST_ADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOC_CODEColumn {
                get {
                    return this.columnLOC_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTY_NAMEColumn {
                get {
                    return this.columnCOUNTY_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITY_NAMEColumn {
                get {
                    return this.columnCITY_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARCEL_SEGREGATEDColumn {
                get {
                    return this.columnPARCEL_SEGREGATED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXEMPT_PROPERTYColumn {
                get {
                    return this.columnEXEMPT_PROPERTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FORESTLANDColumn {
                get {
                    return this.columnFORESTLAND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPEN_SPACEColumn {
                get {
                    return this.columnOPEN_SPACE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HISTORICColumn {
                get {
                    return this.columnHISTORIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTINUANCEColumn {
                get {
                    return this.columnCONTINUANCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PERSONAL_PROP_DESCColumn {
                get {
                    return this.columnPERSONAL_PROP_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXEMPTION_CODEColumn {
                get {
                    return this.columnEXEMPTION_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXEMPTION_EXPLANATIONColumn {
                get {
                    return this.columnEXEMPTION_EXPLANATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_TYPEColumn {
                get {
                    return this.columnDOC_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOC_DATEColumn {
                get {
                    return this.columnDOC_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GROSS_SELL_PRICEColumn {
                get {
                    return this.columnGROSS_SELL_PRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PERSONAL_PROPERTY_AMTColumn {
                get {
                    return this.columnPERSONAL_PROPERTY_AMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REAL_PROP_EXEMPT_AMTColumn {
                get {
                    return this.columnREAL_PROP_EXEMPT_AMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TAXABLE_SELL_PRICEColumn {
                get {
                    return this.columnTAXABLE_SELL_PRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCISE_TAX_STATEColumn {
                get {
                    return this.columnEXCISE_TAX_STATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXCISE_TAX_LOCALColumn {
                get {
                    return this.columnEXCISE_TAX_LOCAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DELQ_INT_STATEColumn {
                get {
                    return this.columnDELQ_INT_STATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DELQ_INT_LOCALColumn {
                get {
                    return this.columnDELQ_INT_LOCAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DELQ_PENALTYColumn {
                get {
                    return this.columnDELQ_PENALTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUB_TOTALColumn {
                get {
                    return this.columnSUB_TOTAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATE_TECH_FEEColumn {
                get {
                    return this.columnSTATE_TECH_FEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROCESSING_FEEColumn {
                get {
                    return this.columnPROCESSING_FEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_DUEColumn {
                get {
                    return this.columnTOTAL_DUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RECEIPT_DATEColumn {
                get {
                    return this.columnRECEIPT_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RECEIPT_NUMColumn {
                get {
                    return this.columnRECEIPT_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOTE_TO_DORColumn {
                get {
                    return this.columnNOTE_TO_DOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRow this[int index] {
                get {
                    return ((AFFIDAVITRow)(this.Rows[index]));
                }
            }
            
            public event AFFIDAVITRowChangeEventHandler AFFIDAVITRowChanging;
            
            public event AFFIDAVITRowChangeEventHandler AFFIDAVITRowChanged;
            
            public event AFFIDAVITRowChangeEventHandler AFFIDAVITRowDeleting;
            
            public event AFFIDAVITRowChangeEventHandler AFFIDAVITRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAFFIDAVITRow(AFFIDAVITRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRow AddAFFIDAVITRow(
                        int StatementID, 
                        string PARTIAL_SALE, 
                        string PROP_ST_ADDRESS, 
                        string LOC_CODE, 
                        string COUNTY_NAME, 
                        string CITY_NAME, 
                        string PARCEL_SEGREGATED, 
                        string EXEMPT_PROPERTY, 
                        string FORESTLAND, 
                        string OPEN_SPACE, 
                        string HISTORIC, 
                        string CONTINUANCE, 
                        string PERSONAL_PROP_DESC, 
                        string EXEMPTION_CODE, 
                        string EXEMPTION_EXPLANATION, 
                        string DOC_TYPE, 
                        System.DateTime DOC_DATE, 
                        string GROSS_SELL_PRICE, 
                        string PERSONAL_PROPERTY_AMT, 
                        string REAL_PROP_EXEMPT_AMT, 
                        string TAXABLE_SELL_PRICE, 
                        string EXCISE_TAX_STATE, 
                        string EXCISE_TAX_LOCAL, 
                        string DELQ_INT_STATE, 
                        string DELQ_INT_LOCAL, 
                        string DELQ_PENALTY, 
                        string SUB_TOTAL, 
                        string STATE_TECH_FEE, 
                        string PROCESSING_FEE, 
                        string TOTAL_DUE, 
                        System.DateTime RECEIPT_DATE, 
                        string RECEIPT_NUM, 
                        string NOTE_TO_DOR) {
                AFFIDAVITRow rowAFFIDAVITRow = ((AFFIDAVITRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        PARTIAL_SALE,
                        PROP_ST_ADDRESS,
                        LOC_CODE,
                        COUNTY_NAME,
                        CITY_NAME,
                        PARCEL_SEGREGATED,
                        EXEMPT_PROPERTY,
                        FORESTLAND,
                        OPEN_SPACE,
                        HISTORIC,
                        CONTINUANCE,
                        PERSONAL_PROP_DESC,
                        EXEMPTION_CODE,
                        EXEMPTION_EXPLANATION,
                        DOC_TYPE,
                        DOC_DATE,
                        GROSS_SELL_PRICE,
                        PERSONAL_PROPERTY_AMT,
                        REAL_PROP_EXEMPT_AMT,
                        TAXABLE_SELL_PRICE,
                        EXCISE_TAX_STATE,
                        EXCISE_TAX_LOCAL,
                        DELQ_INT_STATE,
                        DELQ_INT_LOCAL,
                        DELQ_PENALTY,
                        SUB_TOTAL,
                        STATE_TECH_FEE,
                        PROCESSING_FEE,
                        TOTAL_DUE,
                        RECEIPT_DATE,
                        RECEIPT_NUM,
                        NOTE_TO_DOR};
                rowAFFIDAVITRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAFFIDAVITRow);
                return rowAFFIDAVITRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRow FindByStatementID(int StatementID) {
                return ((AFFIDAVITRow)(this.Rows.Find(new object[] {
                            StatementID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AFFIDAVITDataTable cln = ((AFFIDAVITDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AFFIDAVITDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnPARTIAL_SALE = base.Columns["PARTIAL_SALE"];
                this.columnPROP_ST_ADDRESS = base.Columns["PROP_ST_ADDRESS"];
                this.columnLOC_CODE = base.Columns["LOC_CODE"];
                this.columnCOUNTY_NAME = base.Columns["COUNTY_NAME"];
                this.columnCITY_NAME = base.Columns["CITY_NAME"];
                this.columnPARCEL_SEGREGATED = base.Columns["PARCEL_SEGREGATED"];
                this.columnEXEMPT_PROPERTY = base.Columns["EXEMPT_PROPERTY"];
                this.columnFORESTLAND = base.Columns["FORESTLAND"];
                this.columnOPEN_SPACE = base.Columns["OPEN_SPACE"];
                this.columnHISTORIC = base.Columns["HISTORIC"];
                this.columnCONTINUANCE = base.Columns["CONTINUANCE"];
                this.columnPERSONAL_PROP_DESC = base.Columns["PERSONAL_PROP_DESC"];
                this.columnEXEMPTION_CODE = base.Columns["EXEMPTION_CODE"];
                this.columnEXEMPTION_EXPLANATION = base.Columns["EXEMPTION_EXPLANATION"];
                this.columnDOC_TYPE = base.Columns["DOC_TYPE"];
                this.columnDOC_DATE = base.Columns["DOC_DATE"];
                this.columnGROSS_SELL_PRICE = base.Columns["GROSS_SELL_PRICE"];
                this.columnPERSONAL_PROPERTY_AMT = base.Columns["PERSONAL_PROPERTY_AMT"];
                this.columnREAL_PROP_EXEMPT_AMT = base.Columns["REAL_PROP_EXEMPT_AMT"];
                this.columnTAXABLE_SELL_PRICE = base.Columns["TAXABLE_SELL_PRICE"];
                this.columnEXCISE_TAX_STATE = base.Columns["EXCISE_TAX_STATE"];
                this.columnEXCISE_TAX_LOCAL = base.Columns["EXCISE_TAX_LOCAL"];
                this.columnDELQ_INT_STATE = base.Columns["DELQ_INT_STATE"];
                this.columnDELQ_INT_LOCAL = base.Columns["DELQ_INT_LOCAL"];
                this.columnDELQ_PENALTY = base.Columns["DELQ_PENALTY"];
                this.columnSUB_TOTAL = base.Columns["SUB_TOTAL"];
                this.columnSTATE_TECH_FEE = base.Columns["STATE_TECH_FEE"];
                this.columnPROCESSING_FEE = base.Columns["PROCESSING_FEE"];
                this.columnTOTAL_DUE = base.Columns["TOTAL_DUE"];
                this.columnRECEIPT_DATE = base.Columns["RECEIPT_DATE"];
                this.columnRECEIPT_NUM = base.Columns["RECEIPT_NUM"];
                this.columnNOTE_TO_DOR = base.Columns["NOTE_TO_DOR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnPARTIAL_SALE = new global::System.Data.DataColumn("PARTIAL_SALE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARTIAL_SALE);
                this.columnPROP_ST_ADDRESS = new global::System.Data.DataColumn("PROP_ST_ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROP_ST_ADDRESS);
                this.columnLOC_CODE = new global::System.Data.DataColumn("LOC_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOC_CODE);
                this.columnCOUNTY_NAME = new global::System.Data.DataColumn("COUNTY_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTY_NAME);
                this.columnCITY_NAME = new global::System.Data.DataColumn("CITY_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY_NAME);
                this.columnPARCEL_SEGREGATED = new global::System.Data.DataColumn("PARCEL_SEGREGATED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARCEL_SEGREGATED);
                this.columnEXEMPT_PROPERTY = new global::System.Data.DataColumn("EXEMPT_PROPERTY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXEMPT_PROPERTY);
                this.columnFORESTLAND = new global::System.Data.DataColumn("FORESTLAND", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFORESTLAND);
                this.columnOPEN_SPACE = new global::System.Data.DataColumn("OPEN_SPACE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPEN_SPACE);
                this.columnHISTORIC = new global::System.Data.DataColumn("HISTORIC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHISTORIC);
                this.columnCONTINUANCE = new global::System.Data.DataColumn("CONTINUANCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTINUANCE);
                this.columnPERSONAL_PROP_DESC = new global::System.Data.DataColumn("PERSONAL_PROP_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPERSONAL_PROP_DESC);
                this.columnEXEMPTION_CODE = new global::System.Data.DataColumn("EXEMPTION_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXEMPTION_CODE);
                this.columnEXEMPTION_EXPLANATION = new global::System.Data.DataColumn("EXEMPTION_EXPLANATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXEMPTION_EXPLANATION);
                this.columnDOC_TYPE = new global::System.Data.DataColumn("DOC_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_TYPE);
                this.columnDOC_DATE = new global::System.Data.DataColumn("DOC_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_DATE);
                this.columnGROSS_SELL_PRICE = new global::System.Data.DataColumn("GROSS_SELL_PRICE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROSS_SELL_PRICE);
                this.columnPERSONAL_PROPERTY_AMT = new global::System.Data.DataColumn("PERSONAL_PROPERTY_AMT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPERSONAL_PROPERTY_AMT);
                this.columnREAL_PROP_EXEMPT_AMT = new global::System.Data.DataColumn("REAL_PROP_EXEMPT_AMT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREAL_PROP_EXEMPT_AMT);
                this.columnTAXABLE_SELL_PRICE = new global::System.Data.DataColumn("TAXABLE_SELL_PRICE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXABLE_SELL_PRICE);
                this.columnEXCISE_TAX_STATE = new global::System.Data.DataColumn("EXCISE_TAX_STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCISE_TAX_STATE);
                this.columnEXCISE_TAX_LOCAL = new global::System.Data.DataColumn("EXCISE_TAX_LOCAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCISE_TAX_LOCAL);
                this.columnDELQ_INT_STATE = new global::System.Data.DataColumn("DELQ_INT_STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELQ_INT_STATE);
                this.columnDELQ_INT_LOCAL = new global::System.Data.DataColumn("DELQ_INT_LOCAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELQ_INT_LOCAL);
                this.columnDELQ_PENALTY = new global::System.Data.DataColumn("DELQ_PENALTY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELQ_PENALTY);
                this.columnSUB_TOTAL = new global::System.Data.DataColumn("SUB_TOTAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUB_TOTAL);
                this.columnSTATE_TECH_FEE = new global::System.Data.DataColumn("STATE_TECH_FEE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE_TECH_FEE);
                this.columnPROCESSING_FEE = new global::System.Data.DataColumn("PROCESSING_FEE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROCESSING_FEE);
                this.columnTOTAL_DUE = new global::System.Data.DataColumn("TOTAL_DUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_DUE);
                this.columnRECEIPT_DATE = new global::System.Data.DataColumn("RECEIPT_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECEIPT_DATE);
                this.columnRECEIPT_NUM = new global::System.Data.DataColumn("RECEIPT_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECEIPT_NUM);
                this.columnNOTE_TO_DOR = new global::System.Data.DataColumn("NOTE_TO_DOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOTE_TO_DOR);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStatementID}, true));
                this.columnStatementID.AllowDBNull = false;
                this.columnStatementID.Unique = true;
                this.columnPARTIAL_SALE.ReadOnly = true;
                this.columnPARTIAL_SALE.MaxLength = 5;
                this.columnPROP_ST_ADDRESS.ReadOnly = true;
                this.columnPROP_ST_ADDRESS.MaxLength = 150;
                this.columnLOC_CODE.ReadOnly = true;
                this.columnLOC_CODE.MaxLength = 10;
                this.columnCOUNTY_NAME.ReadOnly = true;
                this.columnCOUNTY_NAME.MaxLength = 150;
                this.columnCITY_NAME.ReadOnly = true;
                this.columnCITY_NAME.MaxLength = 150;
                this.columnPARCEL_SEGREGATED.ReadOnly = true;
                this.columnPARCEL_SEGREGATED.MaxLength = 5;
                this.columnEXEMPT_PROPERTY.ReadOnly = true;
                this.columnEXEMPT_PROPERTY.MaxLength = 10;
                this.columnFORESTLAND.ReadOnly = true;
                this.columnFORESTLAND.MaxLength = 5;
                this.columnOPEN_SPACE.ReadOnly = true;
                this.columnOPEN_SPACE.MaxLength = 5;
                this.columnHISTORIC.ReadOnly = true;
                this.columnHISTORIC.MaxLength = 5;
                this.columnCONTINUANCE.ReadOnly = true;
                this.columnCONTINUANCE.MaxLength = 5;
                this.columnPERSONAL_PROP_DESC.ReadOnly = true;
                this.columnPERSONAL_PROP_DESC.Caption = "PERSONAL_PROPERTY_DESC";
                this.columnPERSONAL_PROP_DESC.MaxLength = 1000;
                this.columnEXEMPTION_CODE.ReadOnly = true;
                this.columnEXEMPTION_CODE.MaxLength = 32;
                this.columnEXEMPTION_EXPLANATION.ReadOnly = true;
                this.columnEXEMPTION_EXPLANATION.MaxLength = 250;
                this.columnDOC_TYPE.ReadOnly = true;
                this.columnDOC_TYPE.MaxLength = 1000;
                this.columnDOC_DATE.AllowDBNull = false;
                this.columnGROSS_SELL_PRICE.ReadOnly = true;
                this.columnGROSS_SELL_PRICE.MaxLength = 50;
                this.columnPERSONAL_PROPERTY_AMT.ReadOnly = true;
                this.columnPERSONAL_PROPERTY_AMT.MaxLength = 50;
                this.columnREAL_PROP_EXEMPT_AMT.ReadOnly = true;
                this.columnREAL_PROP_EXEMPT_AMT.MaxLength = 50;
                this.columnTAXABLE_SELL_PRICE.ReadOnly = true;
                this.columnTAXABLE_SELL_PRICE.MaxLength = 50;
                this.columnEXCISE_TAX_STATE.ReadOnly = true;
                this.columnEXCISE_TAX_STATE.MaxLength = 50;
                this.columnEXCISE_TAX_LOCAL.ReadOnly = true;
                this.columnEXCISE_TAX_LOCAL.MaxLength = 50;
                this.columnDELQ_INT_STATE.ReadOnly = true;
                this.columnDELQ_INT_STATE.MaxLength = 50;
                this.columnDELQ_INT_LOCAL.ReadOnly = true;
                this.columnDELQ_INT_LOCAL.MaxLength = 50;
                this.columnDELQ_PENALTY.ReadOnly = true;
                this.columnDELQ_PENALTY.MaxLength = 50;
                this.columnSUB_TOTAL.ReadOnly = true;
                this.columnSUB_TOTAL.MaxLength = 50;
                this.columnSTATE_TECH_FEE.ReadOnly = true;
                this.columnSTATE_TECH_FEE.MaxLength = 50;
                this.columnPROCESSING_FEE.ReadOnly = true;
                this.columnPROCESSING_FEE.MaxLength = 50;
                this.columnTOTAL_DUE.ReadOnly = true;
                this.columnTOTAL_DUE.MaxLength = 50;
                this.columnRECEIPT_NUM.ReadOnly = true;
                this.columnRECEIPT_NUM.MaxLength = 50;
                this.columnNOTE_TO_DOR.ReadOnly = true;
                this.columnNOTE_TO_DOR.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRow NewAFFIDAVITRow() {
                return ((AFFIDAVITRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AFFIDAVITRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AFFIDAVITRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AFFIDAVITRowChanged != null)) {
                    this.AFFIDAVITRowChanged(this, new AFFIDAVITRowChangeEvent(((AFFIDAVITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AFFIDAVITRowChanging != null)) {
                    this.AFFIDAVITRowChanging(this, new AFFIDAVITRowChangeEvent(((AFFIDAVITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AFFIDAVITRowDeleted != null)) {
                    this.AFFIDAVITRowDeleted(this, new AFFIDAVITRowChangeEvent(((AFFIDAVITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AFFIDAVITRowDeleting != null)) {
                    this.AFFIDAVITRowDeleting(this, new AFFIDAVITRowChangeEvent(((AFFIDAVITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAFFIDAVITRow(AFFIDAVITRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                REETA ds = new REETA();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AFFIDAVITDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class INDIVIDUALDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnADDRESS_LINE1;
            
            private global::System.Data.DataColumn columnADDRESS_LINE2;
            
            private global::System.Data.DataColumn columnCITY;
            
            private global::System.Data.DataColumn columnSTATE_PROV;
            
            private global::System.Data.DataColumn columnZIP_CODE;
            
            private global::System.Data.DataColumn columnCOUNTRY;
            
            private global::System.Data.DataColumn columnPHONE_NUMBER;
            
            private global::System.Data.DataColumn columnIndividualType;
            
            private global::System.Data.DataColumn columnStatementID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INDIVIDUALDataTable() {
                this.TableName = "INDIVIDUAL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INDIVIDUALDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected INDIVIDUALDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE1Column {
                get {
                    return this.columnADDRESS_LINE1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESS_LINE2Column {
                get {
                    return this.columnADDRESS_LINE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATE_PROVColumn {
                get {
                    return this.columnSTATE_PROV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIP_CODEColumn {
                get {
                    return this.columnZIP_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTRYColumn {
                get {
                    return this.columnCOUNTRY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHONE_NUMBERColumn {
                get {
                    return this.columnPHONE_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeColumn {
                get {
                    return this.columnIndividualType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INDIVIDUALRow this[int index] {
                get {
                    return ((INDIVIDUALRow)(this.Rows[index]));
                }
            }
            
            public event INDIVIDUALRowChangeEventHandler INDIVIDUALRowChanging;
            
            public event INDIVIDUALRowChangeEventHandler INDIVIDUALRowChanged;
            
            public event INDIVIDUALRowChangeEventHandler INDIVIDUALRowDeleting;
            
            public event INDIVIDUALRowChangeEventHandler INDIVIDUALRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddINDIVIDUALRow(INDIVIDUALRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INDIVIDUALRow AddINDIVIDUALRow(string NAME, string ADDRESS_LINE1, string ADDRESS_LINE2, string CITY, string STATE_PROV, string ZIP_CODE, string COUNTRY, string PHONE_NUMBER, string IndividualType, AFFIDAVITRow parentAFFIDAVITRowByFK_AFFIDAVIT_INDIVIDUAL) {
                INDIVIDUALRow rowINDIVIDUALRow = ((INDIVIDUALRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NAME,
                        ADDRESS_LINE1,
                        ADDRESS_LINE2,
                        CITY,
                        STATE_PROV,
                        ZIP_CODE,
                        COUNTRY,
                        PHONE_NUMBER,
                        IndividualType,
                        null};
                if ((parentAFFIDAVITRowByFK_AFFIDAVIT_INDIVIDUAL != null)) {
                    columnValuesArray[9] = parentAFFIDAVITRowByFK_AFFIDAVIT_INDIVIDUAL[0];
                }
                rowINDIVIDUALRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowINDIVIDUALRow);
                return rowINDIVIDUALRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INDIVIDUALRow FindByStatementID(int StatementID) {
                return ((INDIVIDUALRow)(this.Rows.Find(new object[] {
                            StatementID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                INDIVIDUALDataTable cln = ((INDIVIDUALDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new INDIVIDUALDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNAME = base.Columns["NAME"];
                this.columnADDRESS_LINE1 = base.Columns["ADDRESS_LINE1"];
                this.columnADDRESS_LINE2 = base.Columns["ADDRESS_LINE2"];
                this.columnCITY = base.Columns["CITY"];
                this.columnSTATE_PROV = base.Columns["STATE_PROV"];
                this.columnZIP_CODE = base.Columns["ZIP_CODE"];
                this.columnCOUNTRY = base.Columns["COUNTRY"];
                this.columnPHONE_NUMBER = base.Columns["PHONE_NUMBER"];
                this.columnIndividualType = base.Columns["IndividualType"];
                this.columnStatementID = base.Columns["StatementID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnADDRESS_LINE1 = new global::System.Data.DataColumn("ADDRESS_LINE1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE1);
                this.columnADDRESS_LINE2 = new global::System.Data.DataColumn("ADDRESS_LINE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS_LINE2);
                this.columnCITY = new global::System.Data.DataColumn("CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY);
                this.columnSTATE_PROV = new global::System.Data.DataColumn("STATE_PROV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE_PROV);
                this.columnZIP_CODE = new global::System.Data.DataColumn("ZIP_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP_CODE);
                this.columnCOUNTRY = new global::System.Data.DataColumn("COUNTRY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTRY);
                this.columnPHONE_NUMBER = new global::System.Data.DataColumn("PHONE_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONE_NUMBER);
                this.columnIndividualType = new global::System.Data.DataColumn("IndividualType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualType);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStatementID}, true));
                this.columnNAME.ReadOnly = true;
                this.columnNAME.MaxLength = 350;
                this.columnADDRESS_LINE1.ReadOnly = true;
                this.columnADDRESS_LINE1.MaxLength = 150;
                this.columnADDRESS_LINE2.ReadOnly = true;
                this.columnADDRESS_LINE2.MaxLength = 150;
                this.columnCITY.ReadOnly = true;
                this.columnCITY.MaxLength = 50;
                this.columnSTATE_PROV.ReadOnly = true;
                this.columnSTATE_PROV.MaxLength = 50;
                this.columnZIP_CODE.ReadOnly = true;
                this.columnZIP_CODE.MaxLength = 50;
                this.columnCOUNTRY.ReadOnly = true;
                this.columnCOUNTRY.MaxLength = 100;
                this.columnPHONE_NUMBER.ReadOnly = true;
                this.columnPHONE_NUMBER.MaxLength = 12;
                this.columnIndividualType.ReadOnly = true;
                this.columnIndividualType.MaxLength = 50;
                this.columnStatementID.AllowDBNull = false;
                this.columnStatementID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INDIVIDUALRow NewINDIVIDUALRow() {
                return ((INDIVIDUALRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new INDIVIDUALRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(INDIVIDUALRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.INDIVIDUALRowChanged != null)) {
                    this.INDIVIDUALRowChanged(this, new INDIVIDUALRowChangeEvent(((INDIVIDUALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.INDIVIDUALRowChanging != null)) {
                    this.INDIVIDUALRowChanging(this, new INDIVIDUALRowChangeEvent(((INDIVIDUALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.INDIVIDUALRowDeleted != null)) {
                    this.INDIVIDUALRowDeleted(this, new INDIVIDUALRowChangeEvent(((INDIVIDUALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.INDIVIDUALRowDeleting != null)) {
                    this.INDIVIDUALRowDeleting(this, new INDIVIDUALRowChangeEvent(((INDIVIDUALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveINDIVIDUALRow(INDIVIDUALRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                REETA ds = new REETA();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "INDIVIDUALDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PARCELDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNUMBER;
            
            private global::System.Data.DataColumn columnASSESSED_VALUE;
            
            private global::System.Data.DataColumn columnPERSONAL_PROPERTY;
            
            private global::System.Data.DataColumn columnLEGAL_DESC;
            
            private global::System.Data.DataColumn columnStatementID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARCELDataTable() {
                this.TableName = "PARCEL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARCELDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PARCELDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBERColumn {
                get {
                    return this.columnNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ASSESSED_VALUEColumn {
                get {
                    return this.columnASSESSED_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PERSONAL_PROPERTYColumn {
                get {
                    return this.columnPERSONAL_PROPERTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LEGAL_DESCColumn {
                get {
                    return this.columnLEGAL_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARCELRow this[int index] {
                get {
                    return ((PARCELRow)(this.Rows[index]));
                }
            }
            
            public event PARCELRowChangeEventHandler PARCELRowChanging;
            
            public event PARCELRowChangeEventHandler PARCELRowChanged;
            
            public event PARCELRowChangeEventHandler PARCELRowDeleting;
            
            public event PARCELRowChangeEventHandler PARCELRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPARCELRow(PARCELRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARCELRow AddPARCELRow(string NUMBER, string ASSESSED_VALUE, string PERSONAL_PROPERTY, string LEGAL_DESC, AFFIDAVITRow parentAFFIDAVITRowByFK_AFFIDAVIT_PARCEL) {
                PARCELRow rowPARCELRow = ((PARCELRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NUMBER,
                        ASSESSED_VALUE,
                        PERSONAL_PROPERTY,
                        LEGAL_DESC,
                        null};
                if ((parentAFFIDAVITRowByFK_AFFIDAVIT_PARCEL != null)) {
                    columnValuesArray[4] = parentAFFIDAVITRowByFK_AFFIDAVIT_PARCEL[0];
                }
                rowPARCELRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPARCELRow);
                return rowPARCELRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARCELRow FindByStatementID(int StatementID) {
                return ((PARCELRow)(this.Rows.Find(new object[] {
                            StatementID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PARCELDataTable cln = ((PARCELDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PARCELDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNUMBER = base.Columns["NUMBER"];
                this.columnASSESSED_VALUE = base.Columns["ASSESSED_VALUE"];
                this.columnPERSONAL_PROPERTY = base.Columns["PERSONAL_PROPERTY"];
                this.columnLEGAL_DESC = base.Columns["LEGAL_DESC"];
                this.columnStatementID = base.Columns["StatementID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNUMBER = new global::System.Data.DataColumn("NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER);
                this.columnASSESSED_VALUE = new global::System.Data.DataColumn("ASSESSED_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnASSESSED_VALUE);
                this.columnPERSONAL_PROPERTY = new global::System.Data.DataColumn("PERSONAL_PROPERTY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPERSONAL_PROPERTY);
                this.columnLEGAL_DESC = new global::System.Data.DataColumn("LEGAL_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLEGAL_DESC);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStatementID}, true));
                this.columnNUMBER.ReadOnly = true;
                this.columnNUMBER.MaxLength = 50;
                this.columnASSESSED_VALUE.ReadOnly = true;
                this.columnASSESSED_VALUE.MaxLength = 50;
                this.columnPERSONAL_PROPERTY.ReadOnly = true;
                this.columnPERSONAL_PROPERTY.DefaultValue = ((string)(""));
                this.columnPERSONAL_PROPERTY.MaxLength = 10;
                this.columnLEGAL_DESC.ReadOnly = true;
                this.columnLEGAL_DESC.MaxLength = 2000;
                this.columnStatementID.AllowDBNull = false;
                this.columnStatementID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARCELRow NewPARCELRow() {
                return ((PARCELRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PARCELRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PARCELRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PARCELRowChanged != null)) {
                    this.PARCELRowChanged(this, new PARCELRowChangeEvent(((PARCELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PARCELRowChanging != null)) {
                    this.PARCELRowChanging(this, new PARCELRowChangeEvent(((PARCELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PARCELRowDeleted != null)) {
                    this.PARCELRowDeleted(this, new PARCELRowChangeEvent(((PARCELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PARCELRowDeleting != null)) {
                    this.PARCELRowDeleting(this, new PARCELRowChangeEvent(((PARCELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePARCELRow(PARCELRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                REETA ds = new REETA();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PARCELDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class USE_CODESDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnUseCode1;
            
            private global::System.Data.DataColumn columnUseCode2;
            
            private global::System.Data.DataColumn columnUseCode3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USE_CODESDataTable() {
                this.TableName = "USE_CODES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USE_CODESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected USE_CODESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCode1Column {
                get {
                    return this.columnUseCode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCode2Column {
                get {
                    return this.columnUseCode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCode3Column {
                get {
                    return this.columnUseCode3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USE_CODESRow this[int index] {
                get {
                    return ((USE_CODESRow)(this.Rows[index]));
                }
            }
            
            public event USE_CODESRowChangeEventHandler USE_CODESRowChanging;
            
            public event USE_CODESRowChangeEventHandler USE_CODESRowChanged;
            
            public event USE_CODESRowChangeEventHandler USE_CODESRowDeleting;
            
            public event USE_CODESRowChangeEventHandler USE_CODESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUSE_CODESRow(USE_CODESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USE_CODESRow AddUSE_CODESRow(AFFIDAVITRow parentAFFIDAVITRowByFK_AFFIDAVIT_USE_CODES, string UseCode1, string UseCode2, string UseCode3) {
                USE_CODESRow rowUSE_CODESRow = ((USE_CODESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UseCode1,
                        UseCode2,
                        UseCode3};
                if ((parentAFFIDAVITRowByFK_AFFIDAVIT_USE_CODES != null)) {
                    columnValuesArray[0] = parentAFFIDAVITRowByFK_AFFIDAVIT_USE_CODES[0];
                }
                rowUSE_CODESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUSE_CODESRow);
                return rowUSE_CODESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USE_CODESRow FindByStatementID(int StatementID) {
                return ((USE_CODESRow)(this.Rows.Find(new object[] {
                            StatementID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                USE_CODESDataTable cln = ((USE_CODESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new USE_CODESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnUseCode1 = base.Columns["UseCode1"];
                this.columnUseCode2 = base.Columns["UseCode2"];
                this.columnUseCode3 = base.Columns["UseCode3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnUseCode1 = new global::System.Data.DataColumn("UseCode1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode1);
                this.columnUseCode2 = new global::System.Data.DataColumn("UseCode2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode2);
                this.columnUseCode3 = new global::System.Data.DataColumn("UseCode3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode3);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStatementID}, true));
                this.columnStatementID.AllowDBNull = false;
                this.columnStatementID.Unique = true;
                this.columnUseCode1.ReadOnly = true;
                this.columnUseCode1.MaxLength = 2;
                this.columnUseCode2.ReadOnly = true;
                this.columnUseCode2.MaxLength = 2;
                this.columnUseCode3.ReadOnly = true;
                this.columnUseCode3.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USE_CODESRow NewUSE_CODESRow() {
                return ((USE_CODESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new USE_CODESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(USE_CODESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.USE_CODESRowChanged != null)) {
                    this.USE_CODESRowChanged(this, new USE_CODESRowChangeEvent(((USE_CODESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.USE_CODESRowChanging != null)) {
                    this.USE_CODESRowChanging(this, new USE_CODESRowChangeEvent(((USE_CODESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.USE_CODESRowDeleted != null)) {
                    this.USE_CODESRowDeleted(this, new USE_CODESRowChangeEvent(((USE_CODESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.USE_CODESRowDeleting != null)) {
                    this.USE_CODESRowDeleting(this, new USE_CODESRowChangeEvent(((USE_CODESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUSE_CODESRow(USE_CODESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                REETA ds = new REETA();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "USE_CODESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SUPPLEMENTALDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnDATE_OF_SALE;
            
            private global::System.Data.DataColumn columnAGENT_NAME;
            
            private global::System.Data.DataColumn columnINSTRUMENT_TYPE;
            
            private global::System.Data.DataColumn columnINSTRUMENT_DATE;
            
            private global::System.Data.DataColumn columnGRANTOR_NAME;
            
            private global::System.Data.DataColumn columnREASON_HELD;
            
            private global::System.Data.DataColumn columnFIRM_NAME;
            
            private global::System.Data.DataColumn columnGIFT_CONSIDERATION_A1;
            
            private global::System.Data.DataColumn columnTOTAL_DEBT_A1;
            
            private global::System.Data.DataColumn columnGRANTEE_PAYS_GRANTOR_A1;
            
            private global::System.Data.DataColumn columnGIFT_CONSIDERATION_A2;
            
            private global::System.Data.DataColumn columnDEBT_PERCENTAGE_A2;
            
            private global::System.Data.DataColumn columnTOTAL_DEBT_A2;
            
            private global::System.Data.DataColumn columnGRANTEE_PAYS_GRANTOR_A2;
            
            private global::System.Data.DataColumn columnGIFT_NOCONSIDERATION_B1;
            
            private global::System.Data.DataColumn columnGIFT_NOCONSIDERATION_B2;
            
            private global::System.Data.DataColumn columnTOTAL_DEBT_B2;
            
            private global::System.Data.DataColumn columnGIFT_NOCONSIDERATION_B3;
            
            private global::System.Data.DataColumn columnGIFT_NOCONSIDERATION_B4;
            
            private global::System.Data.DataColumn columnREFINANCE;
            
            private global::System.Data.DataColumn columnIRS_EXCHANGE;
            
            private global::System.Data.DataColumn columnFACILITATOR_NAME;
            
            private global::System.Data.DataColumn columnGRANTEE_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPPLEMENTALDataTable() {
                this.TableName = "SUPPLEMENTAL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SUPPLEMENTALDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SUPPLEMENTALDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATE_OF_SALEColumn {
                get {
                    return this.columnDATE_OF_SALE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AGENT_NAMEColumn {
                get {
                    return this.columnAGENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INSTRUMENT_TYPEColumn {
                get {
                    return this.columnINSTRUMENT_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INSTRUMENT_DATEColumn {
                get {
                    return this.columnINSTRUMENT_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRANTOR_NAMEColumn {
                get {
                    return this.columnGRANTOR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASON_HELDColumn {
                get {
                    return this.columnREASON_HELD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIRM_NAMEColumn {
                get {
                    return this.columnFIRM_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GIFT_CONSIDERATION_A1Column {
                get {
                    return this.columnGIFT_CONSIDERATION_A1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_DEBT_A1Column {
                get {
                    return this.columnTOTAL_DEBT_A1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRANTEE_PAYS_GRANTOR_A1Column {
                get {
                    return this.columnGRANTEE_PAYS_GRANTOR_A1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GIFT_CONSIDERATION_A2Column {
                get {
                    return this.columnGIFT_CONSIDERATION_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEBT_PERCENTAGE_A2Column {
                get {
                    return this.columnDEBT_PERCENTAGE_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_DEBT_A2Column {
                get {
                    return this.columnTOTAL_DEBT_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRANTEE_PAYS_GRANTOR_A2Column {
                get {
                    return this.columnGRANTEE_PAYS_GRANTOR_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GIFT_NOCONSIDERATION_B1Column {
                get {
                    return this.columnGIFT_NOCONSIDERATION_B1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GIFT_NOCONSIDERATION_B2Column {
                get {
                    return this.columnGIFT_NOCONSIDERATION_B2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_DEBT_B2Column {
                get {
                    return this.columnTOTAL_DEBT_B2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GIFT_NOCONSIDERATION_B3Column {
                get {
                    return this.columnGIFT_NOCONSIDERATION_B3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GIFT_NOCONSIDERATION_B4Column {
                get {
                    return this.columnGIFT_NOCONSIDERATION_B4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REFINANCEColumn {
                get {
                    return this.columnREFINANCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IRS_EXCHANGEColumn {
                get {
                    return this.columnIRS_EXCHANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FACILITATOR_NAMEColumn {
                get {
                    return this.columnFACILITATOR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRANTEE_NAMEColumn {
                get {
                    return this.columnGRANTEE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPPLEMENTALRow this[int index] {
                get {
                    return ((SUPPLEMENTALRow)(this.Rows[index]));
                }
            }
            
            public event SUPPLEMENTALRowChangeEventHandler SUPPLEMENTALRowChanging;
            
            public event SUPPLEMENTALRowChangeEventHandler SUPPLEMENTALRowChanged;
            
            public event SUPPLEMENTALRowChangeEventHandler SUPPLEMENTALRowDeleting;
            
            public event SUPPLEMENTALRowChangeEventHandler SUPPLEMENTALRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSUPPLEMENTALRow(SUPPLEMENTALRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPPLEMENTALRow AddSUPPLEMENTALRow(
                        AFFIDAVITRow parentAFFIDAVITRowByFK_AFFIDAVIT_SUPPLEMENTAL, 
                        string DATE_OF_SALE, 
                        string AGENT_NAME, 
                        string INSTRUMENT_TYPE, 
                        System.DateTime INSTRUMENT_DATE, 
                        string GRANTOR_NAME, 
                        string REASON_HELD, 
                        string FIRM_NAME, 
                        string GIFT_CONSIDERATION_A1, 
                        string TOTAL_DEBT_A1, 
                        string GRANTEE_PAYS_GRANTOR_A1, 
                        string GIFT_CONSIDERATION_A2, 
                        string DEBT_PERCENTAGE_A2, 
                        string TOTAL_DEBT_A2, 
                        string GRANTEE_PAYS_GRANTOR_A2, 
                        string GIFT_NOCONSIDERATION_B1, 
                        string GIFT_NOCONSIDERATION_B2, 
                        string TOTAL_DEBT_B2, 
                        string GIFT_NOCONSIDERATION_B3, 
                        string GIFT_NOCONSIDERATION_B4, 
                        string REFINANCE, 
                        string IRS_EXCHANGE, 
                        string FACILITATOR_NAME, 
                        string GRANTEE_NAME) {
                SUPPLEMENTALRow rowSUPPLEMENTALRow = ((SUPPLEMENTALRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DATE_OF_SALE,
                        AGENT_NAME,
                        INSTRUMENT_TYPE,
                        INSTRUMENT_DATE,
                        GRANTOR_NAME,
                        REASON_HELD,
                        FIRM_NAME,
                        GIFT_CONSIDERATION_A1,
                        TOTAL_DEBT_A1,
                        GRANTEE_PAYS_GRANTOR_A1,
                        GIFT_CONSIDERATION_A2,
                        DEBT_PERCENTAGE_A2,
                        TOTAL_DEBT_A2,
                        GRANTEE_PAYS_GRANTOR_A2,
                        GIFT_NOCONSIDERATION_B1,
                        GIFT_NOCONSIDERATION_B2,
                        TOTAL_DEBT_B2,
                        GIFT_NOCONSIDERATION_B3,
                        GIFT_NOCONSIDERATION_B4,
                        REFINANCE,
                        IRS_EXCHANGE,
                        FACILITATOR_NAME,
                        GRANTEE_NAME};
                if ((parentAFFIDAVITRowByFK_AFFIDAVIT_SUPPLEMENTAL != null)) {
                    columnValuesArray[0] = parentAFFIDAVITRowByFK_AFFIDAVIT_SUPPLEMENTAL[0];
                }
                rowSUPPLEMENTALRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSUPPLEMENTALRow);
                return rowSUPPLEMENTALRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPPLEMENTALRow FindByStatementID(int StatementID) {
                return ((SUPPLEMENTALRow)(this.Rows.Find(new object[] {
                            StatementID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SUPPLEMENTALDataTable cln = ((SUPPLEMENTALDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SUPPLEMENTALDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnDATE_OF_SALE = base.Columns["DATE_OF_SALE"];
                this.columnAGENT_NAME = base.Columns["AGENT_NAME"];
                this.columnINSTRUMENT_TYPE = base.Columns["INSTRUMENT_TYPE"];
                this.columnINSTRUMENT_DATE = base.Columns["INSTRUMENT_DATE"];
                this.columnGRANTOR_NAME = base.Columns["GRANTOR_NAME"];
                this.columnREASON_HELD = base.Columns["REASON_HELD"];
                this.columnFIRM_NAME = base.Columns["FIRM_NAME"];
                this.columnGIFT_CONSIDERATION_A1 = base.Columns["GIFT_CONSIDERATION_A1"];
                this.columnTOTAL_DEBT_A1 = base.Columns["TOTAL_DEBT_A1"];
                this.columnGRANTEE_PAYS_GRANTOR_A1 = base.Columns["GRANTEE_PAYS_GRANTOR_A1"];
                this.columnGIFT_CONSIDERATION_A2 = base.Columns["GIFT_CONSIDERATION_A2"];
                this.columnDEBT_PERCENTAGE_A2 = base.Columns["DEBT_PERCENTAGE_A2"];
                this.columnTOTAL_DEBT_A2 = base.Columns["TOTAL_DEBT_A2"];
                this.columnGRANTEE_PAYS_GRANTOR_A2 = base.Columns["GRANTEE_PAYS_GRANTOR_A2"];
                this.columnGIFT_NOCONSIDERATION_B1 = base.Columns["GIFT_NOCONSIDERATION_B1"];
                this.columnGIFT_NOCONSIDERATION_B2 = base.Columns["GIFT_NOCONSIDERATION_B2"];
                this.columnTOTAL_DEBT_B2 = base.Columns["TOTAL_DEBT_B2"];
                this.columnGIFT_NOCONSIDERATION_B3 = base.Columns["GIFT_NOCONSIDERATION_B3"];
                this.columnGIFT_NOCONSIDERATION_B4 = base.Columns["GIFT_NOCONSIDERATION_B4"];
                this.columnREFINANCE = base.Columns["REFINANCE"];
                this.columnIRS_EXCHANGE = base.Columns["IRS_EXCHANGE"];
                this.columnFACILITATOR_NAME = base.Columns["FACILITATOR_NAME"];
                this.columnGRANTEE_NAME = base.Columns["GRANTEE_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnDATE_OF_SALE = new global::System.Data.DataColumn("DATE_OF_SALE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_OF_SALE);
                this.columnAGENT_NAME = new global::System.Data.DataColumn("AGENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAGENT_NAME);
                this.columnINSTRUMENT_TYPE = new global::System.Data.DataColumn("INSTRUMENT_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINSTRUMENT_TYPE);
                this.columnINSTRUMENT_DATE = new global::System.Data.DataColumn("INSTRUMENT_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINSTRUMENT_DATE);
                this.columnGRANTOR_NAME = new global::System.Data.DataColumn("GRANTOR_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRANTOR_NAME);
                this.columnREASON_HELD = new global::System.Data.DataColumn("REASON_HELD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASON_HELD);
                this.columnFIRM_NAME = new global::System.Data.DataColumn("FIRM_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIRM_NAME);
                this.columnGIFT_CONSIDERATION_A1 = new global::System.Data.DataColumn("GIFT_CONSIDERATION_A1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGIFT_CONSIDERATION_A1);
                this.columnTOTAL_DEBT_A1 = new global::System.Data.DataColumn("TOTAL_DEBT_A1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_DEBT_A1);
                this.columnGRANTEE_PAYS_GRANTOR_A1 = new global::System.Data.DataColumn("GRANTEE_PAYS_GRANTOR_A1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRANTEE_PAYS_GRANTOR_A1);
                this.columnGIFT_CONSIDERATION_A2 = new global::System.Data.DataColumn("GIFT_CONSIDERATION_A2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGIFT_CONSIDERATION_A2);
                this.columnDEBT_PERCENTAGE_A2 = new global::System.Data.DataColumn("DEBT_PERCENTAGE_A2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEBT_PERCENTAGE_A2);
                this.columnTOTAL_DEBT_A2 = new global::System.Data.DataColumn("TOTAL_DEBT_A2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_DEBT_A2);
                this.columnGRANTEE_PAYS_GRANTOR_A2 = new global::System.Data.DataColumn("GRANTEE_PAYS_GRANTOR_A2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRANTEE_PAYS_GRANTOR_A2);
                this.columnGIFT_NOCONSIDERATION_B1 = new global::System.Data.DataColumn("GIFT_NOCONSIDERATION_B1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGIFT_NOCONSIDERATION_B1);
                this.columnGIFT_NOCONSIDERATION_B2 = new global::System.Data.DataColumn("GIFT_NOCONSIDERATION_B2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGIFT_NOCONSIDERATION_B2);
                this.columnTOTAL_DEBT_B2 = new global::System.Data.DataColumn("TOTAL_DEBT_B2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_DEBT_B2);
                this.columnGIFT_NOCONSIDERATION_B3 = new global::System.Data.DataColumn("GIFT_NOCONSIDERATION_B3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGIFT_NOCONSIDERATION_B3);
                this.columnGIFT_NOCONSIDERATION_B4 = new global::System.Data.DataColumn("GIFT_NOCONSIDERATION_B4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGIFT_NOCONSIDERATION_B4);
                this.columnREFINANCE = new global::System.Data.DataColumn("REFINANCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFINANCE);
                this.columnIRS_EXCHANGE = new global::System.Data.DataColumn("IRS_EXCHANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIRS_EXCHANGE);
                this.columnFACILITATOR_NAME = new global::System.Data.DataColumn("FACILITATOR_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFACILITATOR_NAME);
                this.columnGRANTEE_NAME = new global::System.Data.DataColumn("GRANTEE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRANTEE_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStatementID}, true));
                this.columnStatementID.AllowDBNull = false;
                this.columnStatementID.Unique = true;
                this.columnDATE_OF_SALE.ReadOnly = true;
                this.columnDATE_OF_SALE.MaxLength = 4;
                this.columnAGENT_NAME.ReadOnly = true;
                this.columnAGENT_NAME.MaxLength = 150;
                this.columnINSTRUMENT_TYPE.ReadOnly = true;
                this.columnINSTRUMENT_TYPE.MaxLength = 150;
                this.columnINSTRUMENT_DATE.AllowDBNull = false;
                this.columnGRANTOR_NAME.ReadOnly = true;
                this.columnGRANTOR_NAME.MaxLength = 350;
                this.columnREASON_HELD.ReadOnly = true;
                this.columnREASON_HELD.MaxLength = 1000;
                this.columnFIRM_NAME.ReadOnly = true;
                this.columnFIRM_NAME.MaxLength = 150;
                this.columnGIFT_CONSIDERATION_A1.ReadOnly = true;
                this.columnGIFT_CONSIDERATION_A1.MaxLength = 5;
                this.columnTOTAL_DEBT_A1.ReadOnly = true;
                this.columnTOTAL_DEBT_A1.MaxLength = 50;
                this.columnGRANTEE_PAYS_GRANTOR_A1.ReadOnly = true;
                this.columnGRANTEE_PAYS_GRANTOR_A1.MaxLength = 50;
                this.columnGIFT_CONSIDERATION_A2.ReadOnly = true;
                this.columnGIFT_CONSIDERATION_A2.MaxLength = 5;
                this.columnDEBT_PERCENTAGE_A2.ReadOnly = true;
                this.columnDEBT_PERCENTAGE_A2.MaxLength = 50;
                this.columnTOTAL_DEBT_A2.ReadOnly = true;
                this.columnTOTAL_DEBT_A2.MaxLength = 50;
                this.columnGRANTEE_PAYS_GRANTOR_A2.ReadOnly = true;
                this.columnGRANTEE_PAYS_GRANTOR_A2.MaxLength = 50;
                this.columnGIFT_NOCONSIDERATION_B1.ReadOnly = true;
                this.columnGIFT_NOCONSIDERATION_B1.MaxLength = 5;
                this.columnGIFT_NOCONSIDERATION_B2.ReadOnly = true;
                this.columnGIFT_NOCONSIDERATION_B2.MaxLength = 5;
                this.columnTOTAL_DEBT_B2.ReadOnly = true;
                this.columnTOTAL_DEBT_B2.MaxLength = 50;
                this.columnGIFT_NOCONSIDERATION_B3.ReadOnly = true;
                this.columnGIFT_NOCONSIDERATION_B3.MaxLength = 5;
                this.columnGIFT_NOCONSIDERATION_B4.ReadOnly = true;
                this.columnGIFT_NOCONSIDERATION_B4.MaxLength = 5;
                this.columnREFINANCE.ReadOnly = true;
                this.columnREFINANCE.MaxLength = 5;
                this.columnIRS_EXCHANGE.ReadOnly = true;
                this.columnIRS_EXCHANGE.MaxLength = 5;
                this.columnFACILITATOR_NAME.ReadOnly = true;
                this.columnFACILITATOR_NAME.MaxLength = 150;
                this.columnGRANTEE_NAME.ReadOnly = true;
                this.columnGRANTEE_NAME.MaxLength = 350;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPPLEMENTALRow NewSUPPLEMENTALRow() {
                return ((SUPPLEMENTALRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SUPPLEMENTALRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SUPPLEMENTALRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SUPPLEMENTALRowChanged != null)) {
                    this.SUPPLEMENTALRowChanged(this, new SUPPLEMENTALRowChangeEvent(((SUPPLEMENTALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SUPPLEMENTALRowChanging != null)) {
                    this.SUPPLEMENTALRowChanging(this, new SUPPLEMENTALRowChangeEvent(((SUPPLEMENTALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SUPPLEMENTALRowDeleted != null)) {
                    this.SUPPLEMENTALRowDeleted(this, new SUPPLEMENTALRowChangeEvent(((SUPPLEMENTALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SUPPLEMENTALRowDeleting != null)) {
                    this.SUPPLEMENTALRowDeleting(this, new SUPPLEMENTALRowChangeEvent(((SUPPLEMENTALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSUPPLEMENTALRow(SUPPLEMENTALRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                REETA ds = new REETA();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SUPPLEMENTALDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ErrorStatusDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnErrorStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorStatusDataTableDataTable() {
                this.TableName = "ErrorStatusDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorStatusDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ErrorStatusDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorStatusColumn {
                get {
                    return this.columnErrorStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorStatusDataTableRow this[int index] {
                get {
                    return ((ErrorStatusDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ErrorStatusDataTableRowChangeEventHandler ErrorStatusDataTableRowChanging;
            
            public event ErrorStatusDataTableRowChangeEventHandler ErrorStatusDataTableRowChanged;
            
            public event ErrorStatusDataTableRowChangeEventHandler ErrorStatusDataTableRowDeleting;
            
            public event ErrorStatusDataTableRowChangeEventHandler ErrorStatusDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddErrorStatusDataTableRow(ErrorStatusDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorStatusDataTableRow AddErrorStatusDataTableRow(string ErrorStatus) {
                ErrorStatusDataTableRow rowErrorStatusDataTableRow = ((ErrorStatusDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorStatus};
                rowErrorStatusDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowErrorStatusDataTableRow);
                return rowErrorStatusDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ErrorStatusDataTableDataTable cln = ((ErrorStatusDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ErrorStatusDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorStatus = base.Columns["ErrorStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorStatus = new global::System.Data.DataColumn("ErrorStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorStatus);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorStatusDataTableRow NewErrorStatusDataTableRow() {
                return ((ErrorStatusDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ErrorStatusDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ErrorStatusDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ErrorStatusDataTableRowChanged != null)) {
                    this.ErrorStatusDataTableRowChanged(this, new ErrorStatusDataTableRowChangeEvent(((ErrorStatusDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ErrorStatusDataTableRowChanging != null)) {
                    this.ErrorStatusDataTableRowChanging(this, new ErrorStatusDataTableRowChangeEvent(((ErrorStatusDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ErrorStatusDataTableRowDeleted != null)) {
                    this.ErrorStatusDataTableRowDeleted(this, new ErrorStatusDataTableRowChangeEvent(((ErrorStatusDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ErrorStatusDataTableRowDeleting != null)) {
                    this.ErrorStatusDataTableRowDeleting(this, new ErrorStatusDataTableRowChangeEvent(((ErrorStatusDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveErrorStatusDataTableRow(ErrorStatusDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                REETA ds = new REETA();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ErrorStatusDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AFFIDAVITRow : global::System.Data.DataRow {
            
            private AFFIDAVITDataTable tableAFFIDAVIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AFFIDAVITRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAFFIDAVIT = ((AFFIDAVITDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableAFFIDAVIT.StatementIDColumn]));
                }
                set {
                    this[this.tableAFFIDAVIT.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARTIAL_SALE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.PARTIAL_SALEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARTIAL_SALE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.PARTIAL_SALEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROP_ST_ADDRESS {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.PROP_ST_ADDRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROP_ST_ADDRESS\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.PROP_ST_ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOC_CODE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.LOC_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOC_CODE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.LOC_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COUNTY_NAME {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.COUNTY_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNTY_NAME\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.COUNTY_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY_NAME {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.CITY_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITY_NAME\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.CITY_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARCEL_SEGREGATED {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.PARCEL_SEGREGATEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARCEL_SEGREGATED\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.PARCEL_SEGREGATEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXEMPT_PROPERTY {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.EXEMPT_PROPERTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXEMPT_PROPERTY\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.EXEMPT_PROPERTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FORESTLAND {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.FORESTLANDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FORESTLAND\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.FORESTLANDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OPEN_SPACE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.OPEN_SPACEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPEN_SPACE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.OPEN_SPACEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HISTORIC {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.HISTORICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HISTORIC\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.HISTORICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTINUANCE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.CONTINUANCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONTINUANCE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.CONTINUANCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PERSONAL_PROP_DESC {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.PERSONAL_PROP_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PERSONAL_PROP_DESC\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.PERSONAL_PROP_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXEMPTION_CODE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.EXEMPTION_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXEMPTION_CODE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.EXEMPTION_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXEMPTION_EXPLANATION {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.EXEMPTION_EXPLANATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXEMPTION_EXPLANATION\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.EXEMPTION_EXPLANATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOC_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.DOC_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOC_TYPE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.DOC_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOC_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableAFFIDAVIT.DOC_DATEColumn]));
                }
                set {
                    this[this.tableAFFIDAVIT.DOC_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GROSS_SELL_PRICE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.GROSS_SELL_PRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GROSS_SELL_PRICE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.GROSS_SELL_PRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PERSONAL_PROPERTY_AMT {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.PERSONAL_PROPERTY_AMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PERSONAL_PROPERTY_AMT\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.PERSONAL_PROPERTY_AMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REAL_PROP_EXEMPT_AMT {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.REAL_PROP_EXEMPT_AMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REAL_PROP_EXEMPT_AMT\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.REAL_PROP_EXEMPT_AMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TAXABLE_SELL_PRICE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.TAXABLE_SELL_PRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TAXABLE_SELL_PRICE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.TAXABLE_SELL_PRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXCISE_TAX_STATE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.EXCISE_TAX_STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCISE_TAX_STATE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.EXCISE_TAX_STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXCISE_TAX_LOCAL {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.EXCISE_TAX_LOCALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCISE_TAX_LOCAL\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.EXCISE_TAX_LOCALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DELQ_INT_STATE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.DELQ_INT_STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DELQ_INT_STATE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.DELQ_INT_STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DELQ_INT_LOCAL {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.DELQ_INT_LOCALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DELQ_INT_LOCAL\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.DELQ_INT_LOCALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DELQ_PENALTY {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.DELQ_PENALTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DELQ_PENALTY\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.DELQ_PENALTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUB_TOTAL {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.SUB_TOTALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUB_TOTAL\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.SUB_TOTALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE_TECH_FEE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.STATE_TECH_FEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATE_TECH_FEE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.STATE_TECH_FEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROCESSING_FEE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.PROCESSING_FEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROCESSING_FEE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.PROCESSING_FEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_DUE {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.TOTAL_DUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTAL_DUE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.TOTAL_DUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RECEIPT_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAFFIDAVIT.RECEIPT_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RECEIPT_DATE\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.RECEIPT_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RECEIPT_NUM {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.RECEIPT_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RECEIPT_NUM\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.RECEIPT_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOTE_TO_DOR {
                get {
                    try {
                        return ((string)(this[this.tableAFFIDAVIT.NOTE_TO_DORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NOTE_TO_DOR\' in table \'AFFIDAVIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAFFIDAVIT.NOTE_TO_DORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARTIAL_SALENull() {
                return this.IsNull(this.tableAFFIDAVIT.PARTIAL_SALEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARTIAL_SALENull() {
                this[this.tableAFFIDAVIT.PARTIAL_SALEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROP_ST_ADDRESSNull() {
                return this.IsNull(this.tableAFFIDAVIT.PROP_ST_ADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROP_ST_ADDRESSNull() {
                this[this.tableAFFIDAVIT.PROP_ST_ADDRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOC_CODENull() {
                return this.IsNull(this.tableAFFIDAVIT.LOC_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOC_CODENull() {
                this[this.tableAFFIDAVIT.LOC_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTY_NAMENull() {
                return this.IsNull(this.tableAFFIDAVIT.COUNTY_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTY_NAMENull() {
                this[this.tableAFFIDAVIT.COUNTY_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITY_NAMENull() {
                return this.IsNull(this.tableAFFIDAVIT.CITY_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITY_NAMENull() {
                this[this.tableAFFIDAVIT.CITY_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARCEL_SEGREGATEDNull() {
                return this.IsNull(this.tableAFFIDAVIT.PARCEL_SEGREGATEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARCEL_SEGREGATEDNull() {
                this[this.tableAFFIDAVIT.PARCEL_SEGREGATEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXEMPT_PROPERTYNull() {
                return this.IsNull(this.tableAFFIDAVIT.EXEMPT_PROPERTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXEMPT_PROPERTYNull() {
                this[this.tableAFFIDAVIT.EXEMPT_PROPERTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFORESTLANDNull() {
                return this.IsNull(this.tableAFFIDAVIT.FORESTLANDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFORESTLANDNull() {
                this[this.tableAFFIDAVIT.FORESTLANDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPEN_SPACENull() {
                return this.IsNull(this.tableAFFIDAVIT.OPEN_SPACEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPEN_SPACENull() {
                this[this.tableAFFIDAVIT.OPEN_SPACEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHISTORICNull() {
                return this.IsNull(this.tableAFFIDAVIT.HISTORICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHISTORICNull() {
                this[this.tableAFFIDAVIT.HISTORICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTINUANCENull() {
                return this.IsNull(this.tableAFFIDAVIT.CONTINUANCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTINUANCENull() {
                this[this.tableAFFIDAVIT.CONTINUANCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPERSONAL_PROP_DESCNull() {
                return this.IsNull(this.tableAFFIDAVIT.PERSONAL_PROP_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPERSONAL_PROP_DESCNull() {
                this[this.tableAFFIDAVIT.PERSONAL_PROP_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXEMPTION_CODENull() {
                return this.IsNull(this.tableAFFIDAVIT.EXEMPTION_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXEMPTION_CODENull() {
                this[this.tableAFFIDAVIT.EXEMPTION_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXEMPTION_EXPLANATIONNull() {
                return this.IsNull(this.tableAFFIDAVIT.EXEMPTION_EXPLANATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXEMPTION_EXPLANATIONNull() {
                this[this.tableAFFIDAVIT.EXEMPTION_EXPLANATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOC_TYPENull() {
                return this.IsNull(this.tableAFFIDAVIT.DOC_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOC_TYPENull() {
                this[this.tableAFFIDAVIT.DOC_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGROSS_SELL_PRICENull() {
                return this.IsNull(this.tableAFFIDAVIT.GROSS_SELL_PRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGROSS_SELL_PRICENull() {
                this[this.tableAFFIDAVIT.GROSS_SELL_PRICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPERSONAL_PROPERTY_AMTNull() {
                return this.IsNull(this.tableAFFIDAVIT.PERSONAL_PROPERTY_AMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPERSONAL_PROPERTY_AMTNull() {
                this[this.tableAFFIDAVIT.PERSONAL_PROPERTY_AMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREAL_PROP_EXEMPT_AMTNull() {
                return this.IsNull(this.tableAFFIDAVIT.REAL_PROP_EXEMPT_AMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREAL_PROP_EXEMPT_AMTNull() {
                this[this.tableAFFIDAVIT.REAL_PROP_EXEMPT_AMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTAXABLE_SELL_PRICENull() {
                return this.IsNull(this.tableAFFIDAVIT.TAXABLE_SELL_PRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTAXABLE_SELL_PRICENull() {
                this[this.tableAFFIDAVIT.TAXABLE_SELL_PRICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCISE_TAX_STATENull() {
                return this.IsNull(this.tableAFFIDAVIT.EXCISE_TAX_STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCISE_TAX_STATENull() {
                this[this.tableAFFIDAVIT.EXCISE_TAX_STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXCISE_TAX_LOCALNull() {
                return this.IsNull(this.tableAFFIDAVIT.EXCISE_TAX_LOCALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXCISE_TAX_LOCALNull() {
                this[this.tableAFFIDAVIT.EXCISE_TAX_LOCALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDELQ_INT_STATENull() {
                return this.IsNull(this.tableAFFIDAVIT.DELQ_INT_STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDELQ_INT_STATENull() {
                this[this.tableAFFIDAVIT.DELQ_INT_STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDELQ_INT_LOCALNull() {
                return this.IsNull(this.tableAFFIDAVIT.DELQ_INT_LOCALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDELQ_INT_LOCALNull() {
                this[this.tableAFFIDAVIT.DELQ_INT_LOCALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDELQ_PENALTYNull() {
                return this.IsNull(this.tableAFFIDAVIT.DELQ_PENALTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDELQ_PENALTYNull() {
                this[this.tableAFFIDAVIT.DELQ_PENALTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUB_TOTALNull() {
                return this.IsNull(this.tableAFFIDAVIT.SUB_TOTALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUB_TOTALNull() {
                this[this.tableAFFIDAVIT.SUB_TOTALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATE_TECH_FEENull() {
                return this.IsNull(this.tableAFFIDAVIT.STATE_TECH_FEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATE_TECH_FEENull() {
                this[this.tableAFFIDAVIT.STATE_TECH_FEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROCESSING_FEENull() {
                return this.IsNull(this.tableAFFIDAVIT.PROCESSING_FEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROCESSING_FEENull() {
                this[this.tableAFFIDAVIT.PROCESSING_FEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_DUENull() {
                return this.IsNull(this.tableAFFIDAVIT.TOTAL_DUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_DUENull() {
                this[this.tableAFFIDAVIT.TOTAL_DUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRECEIPT_DATENull() {
                return this.IsNull(this.tableAFFIDAVIT.RECEIPT_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRECEIPT_DATENull() {
                this[this.tableAFFIDAVIT.RECEIPT_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRECEIPT_NUMNull() {
                return this.IsNull(this.tableAFFIDAVIT.RECEIPT_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRECEIPT_NUMNull() {
                this[this.tableAFFIDAVIT.RECEIPT_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOTE_TO_DORNull() {
                return this.IsNull(this.tableAFFIDAVIT.NOTE_TO_DORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOTE_TO_DORNull() {
                this[this.tableAFFIDAVIT.NOTE_TO_DORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INDIVIDUALRow[] GetINDIVIDUALRows() {
                if ((this.Table.ChildRelations["FK_AFFIDAVIT_INDIVIDUAL"] == null)) {
                    return new INDIVIDUALRow[0];
                }
                else {
                    return ((INDIVIDUALRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AFFIDAVIT_INDIVIDUAL"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARCELRow[] GetPARCELRows() {
                if ((this.Table.ChildRelations["FK_AFFIDAVIT_PARCEL"] == null)) {
                    return new PARCELRow[0];
                }
                else {
                    return ((PARCELRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AFFIDAVIT_PARCEL"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USE_CODESRow[] GetUSE_CODESRows() {
                if ((this.Table.ChildRelations["FK_AFFIDAVIT_USE_CODES"] == null)) {
                    return new USE_CODESRow[0];
                }
                else {
                    return ((USE_CODESRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AFFIDAVIT_USE_CODES"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPPLEMENTALRow[] GetSUPPLEMENTALRows() {
                if ((this.Table.ChildRelations["FK_AFFIDAVIT_SUPPLEMENTAL"] == null)) {
                    return new SUPPLEMENTALRow[0];
                }
                else {
                    return ((SUPPLEMENTALRow[])(base.GetChildRows(this.Table.ChildRelations["FK_AFFIDAVIT_SUPPLEMENTAL"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class INDIVIDUALRow : global::System.Data.DataRow {
            
            private INDIVIDUALDataTable tableINDIVIDUAL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INDIVIDUALRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableINDIVIDUAL = ((INDIVIDUALDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableINDIVIDUAL.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'INDIVIDUAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINDIVIDUAL.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE1 {
                get {
                    try {
                        return ((string)(this[this.tableINDIVIDUAL.ADDRESS_LINE1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE1\' in table \'INDIVIDUAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINDIVIDUAL.ADDRESS_LINE1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS_LINE2 {
                get {
                    try {
                        return ((string)(this[this.tableINDIVIDUAL.ADDRESS_LINE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS_LINE2\' in table \'INDIVIDUAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINDIVIDUAL.ADDRESS_LINE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableINDIVIDUAL.CITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITY\' in table \'INDIVIDUAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINDIVIDUAL.CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE_PROV {
                get {
                    try {
                        return ((string)(this[this.tableINDIVIDUAL.STATE_PROVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATE_PROV\' in table \'INDIVIDUAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINDIVIDUAL.STATE_PROVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP_CODE {
                get {
                    try {
                        return ((string)(this[this.tableINDIVIDUAL.ZIP_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP_CODE\' in table \'INDIVIDUAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINDIVIDUAL.ZIP_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COUNTRY {
                get {
                    try {
                        return ((string)(this[this.tableINDIVIDUAL.COUNTRYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNTRY\' in table \'INDIVIDUAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINDIVIDUAL.COUNTRYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHONE_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableINDIVIDUAL.PHONE_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHONE_NUMBER\' in table \'INDIVIDUAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINDIVIDUAL.PHONE_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IndividualType {
                get {
                    try {
                        return ((string)(this[this.tableINDIVIDUAL.IndividualTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndividualType\' in table \'INDIVIDUAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINDIVIDUAL.IndividualTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableINDIVIDUAL.StatementIDColumn]));
                }
                set {
                    this[this.tableINDIVIDUAL.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRow AFFIDAVITRow {
                get {
                    return ((AFFIDAVITRow)(this.GetParentRow(this.Table.ParentRelations["FK_AFFIDAVIT_INDIVIDUAL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AFFIDAVIT_INDIVIDUAL"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableINDIVIDUAL.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableINDIVIDUAL.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE1Null() {
                return this.IsNull(this.tableINDIVIDUAL.ADDRESS_LINE1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE1Null() {
                this[this.tableINDIVIDUAL.ADDRESS_LINE1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESS_LINE2Null() {
                return this.IsNull(this.tableINDIVIDUAL.ADDRESS_LINE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESS_LINE2Null() {
                this[this.tableINDIVIDUAL.ADDRESS_LINE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITYNull() {
                return this.IsNull(this.tableINDIVIDUAL.CITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITYNull() {
                this[this.tableINDIVIDUAL.CITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATE_PROVNull() {
                return this.IsNull(this.tableINDIVIDUAL.STATE_PROVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATE_PROVNull() {
                this[this.tableINDIVIDUAL.STATE_PROVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIP_CODENull() {
                return this.IsNull(this.tableINDIVIDUAL.ZIP_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIP_CODENull() {
                this[this.tableINDIVIDUAL.ZIP_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTRYNull() {
                return this.IsNull(this.tableINDIVIDUAL.COUNTRYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTRYNull() {
                this[this.tableINDIVIDUAL.COUNTRYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHONE_NUMBERNull() {
                return this.IsNull(this.tableINDIVIDUAL.PHONE_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHONE_NUMBERNull() {
                this[this.tableINDIVIDUAL.PHONE_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndividualTypeNull() {
                return this.IsNull(this.tableINDIVIDUAL.IndividualTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndividualTypeNull() {
                this[this.tableINDIVIDUAL.IndividualTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PARCELRow : global::System.Data.DataRow {
            
            private PARCELDataTable tablePARCEL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARCELRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePARCEL = ((PARCELDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER {
                get {
                    try {
                        return ((string)(this[this.tablePARCEL.NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NUMBER\' in table \'PARCEL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARCEL.NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ASSESSED_VALUE {
                get {
                    try {
                        return ((string)(this[this.tablePARCEL.ASSESSED_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ASSESSED_VALUE\' in table \'PARCEL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARCEL.ASSESSED_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PERSONAL_PROPERTY {
                get {
                    try {
                        return ((string)(this[this.tablePARCEL.PERSONAL_PROPERTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PERSONAL_PROPERTY\' in table \'PARCEL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARCEL.PERSONAL_PROPERTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LEGAL_DESC {
                get {
                    try {
                        return ((string)(this[this.tablePARCEL.LEGAL_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LEGAL_DESC\' in table \'PARCEL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARCEL.LEGAL_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tablePARCEL.StatementIDColumn]));
                }
                set {
                    this[this.tablePARCEL.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRow AFFIDAVITRow {
                get {
                    return ((AFFIDAVITRow)(this.GetParentRow(this.Table.ParentRelations["FK_AFFIDAVIT_PARCEL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AFFIDAVIT_PARCEL"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBERNull() {
                return this.IsNull(this.tablePARCEL.NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBERNull() {
                this[this.tablePARCEL.NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsASSESSED_VALUENull() {
                return this.IsNull(this.tablePARCEL.ASSESSED_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetASSESSED_VALUENull() {
                this[this.tablePARCEL.ASSESSED_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPERSONAL_PROPERTYNull() {
                return this.IsNull(this.tablePARCEL.PERSONAL_PROPERTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPERSONAL_PROPERTYNull() {
                this[this.tablePARCEL.PERSONAL_PROPERTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLEGAL_DESCNull() {
                return this.IsNull(this.tablePARCEL.LEGAL_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLEGAL_DESCNull() {
                this[this.tablePARCEL.LEGAL_DESCColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class USE_CODESRow : global::System.Data.DataRow {
            
            private USE_CODESDataTable tableUSE_CODES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USE_CODESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUSE_CODES = ((USE_CODESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableUSE_CODES.StatementIDColumn]));
                }
                set {
                    this[this.tableUSE_CODES.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode1 {
                get {
                    try {
                        return ((string)(this[this.tableUSE_CODES.UseCode1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode1\' in table \'USE_CODES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSE_CODES.UseCode1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode2 {
                get {
                    try {
                        return ((string)(this[this.tableUSE_CODES.UseCode2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode2\' in table \'USE_CODES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSE_CODES.UseCode2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode3 {
                get {
                    try {
                        return ((string)(this[this.tableUSE_CODES.UseCode3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode3\' in table \'USE_CODES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSE_CODES.UseCode3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRow AFFIDAVITRow {
                get {
                    return ((AFFIDAVITRow)(this.GetParentRow(this.Table.ParentRelations["FK_AFFIDAVIT_USE_CODES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AFFIDAVIT_USE_CODES"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCode1Null() {
                return this.IsNull(this.tableUSE_CODES.UseCode1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCode1Null() {
                this[this.tableUSE_CODES.UseCode1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCode2Null() {
                return this.IsNull(this.tableUSE_CODES.UseCode2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCode2Null() {
                this[this.tableUSE_CODES.UseCode2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCode3Null() {
                return this.IsNull(this.tableUSE_CODES.UseCode3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCode3Null() {
                this[this.tableUSE_CODES.UseCode3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SUPPLEMENTALRow : global::System.Data.DataRow {
            
            private SUPPLEMENTALDataTable tableSUPPLEMENTAL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SUPPLEMENTALRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSUPPLEMENTAL = ((SUPPLEMENTALDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableSUPPLEMENTAL.StatementIDColumn]));
                }
                set {
                    this[this.tableSUPPLEMENTAL.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DATE_OF_SALE {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.DATE_OF_SALEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATE_OF_SALE\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.DATE_OF_SALEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AGENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.AGENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AGENT_NAME\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.AGENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INSTRUMENT_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.INSTRUMENT_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INSTRUMENT_TYPE\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.INSTRUMENT_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime INSTRUMENT_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableSUPPLEMENTAL.INSTRUMENT_DATEColumn]));
                }
                set {
                    this[this.tableSUPPLEMENTAL.INSTRUMENT_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRANTOR_NAME {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GRANTOR_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRANTOR_NAME\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GRANTOR_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REASON_HELD {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.REASON_HELDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REASON_HELD\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.REASON_HELDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIRM_NAME {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.FIRM_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIRM_NAME\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.FIRM_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GIFT_CONSIDERATION_A1 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GIFT_CONSIDERATION_A1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GIFT_CONSIDERATION_A1\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GIFT_CONSIDERATION_A1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_DEBT_A1 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.TOTAL_DEBT_A1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTAL_DEBT_A1\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.TOTAL_DEBT_A1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRANTEE_PAYS_GRANTOR_A1 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GRANTEE_PAYS_GRANTOR_A1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRANTEE_PAYS_GRANTOR_A1\' in table \'SUPPLEMENTAL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GRANTEE_PAYS_GRANTOR_A1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GIFT_CONSIDERATION_A2 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GIFT_CONSIDERATION_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GIFT_CONSIDERATION_A2\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GIFT_CONSIDERATION_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEBT_PERCENTAGE_A2 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.DEBT_PERCENTAGE_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEBT_PERCENTAGE_A2\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.DEBT_PERCENTAGE_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_DEBT_A2 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.TOTAL_DEBT_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTAL_DEBT_A2\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.TOTAL_DEBT_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRANTEE_PAYS_GRANTOR_A2 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GRANTEE_PAYS_GRANTOR_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRANTEE_PAYS_GRANTOR_A2\' in table \'SUPPLEMENTAL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GRANTEE_PAYS_GRANTOR_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GIFT_NOCONSIDERATION_B1 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GIFT_NOCONSIDERATION_B1\' in table \'SUPPLEMENTAL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GIFT_NOCONSIDERATION_B2 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GIFT_NOCONSIDERATION_B2\' in table \'SUPPLEMENTAL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_DEBT_B2 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.TOTAL_DEBT_B2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTAL_DEBT_B2\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.TOTAL_DEBT_B2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GIFT_NOCONSIDERATION_B3 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GIFT_NOCONSIDERATION_B3\' in table \'SUPPLEMENTAL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GIFT_NOCONSIDERATION_B4 {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GIFT_NOCONSIDERATION_B4\' in table \'SUPPLEMENTAL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REFINANCE {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.REFINANCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REFINANCE\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.REFINANCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IRS_EXCHANGE {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.IRS_EXCHANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IRS_EXCHANGE\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.IRS_EXCHANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FACILITATOR_NAME {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.FACILITATOR_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FACILITATOR_NAME\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.FACILITATOR_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRANTEE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableSUPPLEMENTAL.GRANTEE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRANTEE_NAME\' in table \'SUPPLEMENTAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUPPLEMENTAL.GRANTEE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRow AFFIDAVITRow {
                get {
                    return ((AFFIDAVITRow)(this.GetParentRow(this.Table.ParentRelations["FK_AFFIDAVIT_SUPPLEMENTAL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_AFFIDAVIT_SUPPLEMENTAL"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATE_OF_SALENull() {
                return this.IsNull(this.tableSUPPLEMENTAL.DATE_OF_SALEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATE_OF_SALENull() {
                this[this.tableSUPPLEMENTAL.DATE_OF_SALEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAGENT_NAMENull() {
                return this.IsNull(this.tableSUPPLEMENTAL.AGENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAGENT_NAMENull() {
                this[this.tableSUPPLEMENTAL.AGENT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINSTRUMENT_TYPENull() {
                return this.IsNull(this.tableSUPPLEMENTAL.INSTRUMENT_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINSTRUMENT_TYPENull() {
                this[this.tableSUPPLEMENTAL.INSTRUMENT_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRANTOR_NAMENull() {
                return this.IsNull(this.tableSUPPLEMENTAL.GRANTOR_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRANTOR_NAMENull() {
                this[this.tableSUPPLEMENTAL.GRANTOR_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREASON_HELDNull() {
                return this.IsNull(this.tableSUPPLEMENTAL.REASON_HELDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREASON_HELDNull() {
                this[this.tableSUPPLEMENTAL.REASON_HELDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIRM_NAMENull() {
                return this.IsNull(this.tableSUPPLEMENTAL.FIRM_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIRM_NAMENull() {
                this[this.tableSUPPLEMENTAL.FIRM_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGIFT_CONSIDERATION_A1Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.GIFT_CONSIDERATION_A1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGIFT_CONSIDERATION_A1Null() {
                this[this.tableSUPPLEMENTAL.GIFT_CONSIDERATION_A1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_DEBT_A1Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.TOTAL_DEBT_A1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_DEBT_A1Null() {
                this[this.tableSUPPLEMENTAL.TOTAL_DEBT_A1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRANTEE_PAYS_GRANTOR_A1Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.GRANTEE_PAYS_GRANTOR_A1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRANTEE_PAYS_GRANTOR_A1Null() {
                this[this.tableSUPPLEMENTAL.GRANTEE_PAYS_GRANTOR_A1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGIFT_CONSIDERATION_A2Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.GIFT_CONSIDERATION_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGIFT_CONSIDERATION_A2Null() {
                this[this.tableSUPPLEMENTAL.GIFT_CONSIDERATION_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEBT_PERCENTAGE_A2Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.DEBT_PERCENTAGE_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEBT_PERCENTAGE_A2Null() {
                this[this.tableSUPPLEMENTAL.DEBT_PERCENTAGE_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_DEBT_A2Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.TOTAL_DEBT_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_DEBT_A2Null() {
                this[this.tableSUPPLEMENTAL.TOTAL_DEBT_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRANTEE_PAYS_GRANTOR_A2Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.GRANTEE_PAYS_GRANTOR_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRANTEE_PAYS_GRANTOR_A2Null() {
                this[this.tableSUPPLEMENTAL.GRANTEE_PAYS_GRANTOR_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGIFT_NOCONSIDERATION_B1Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGIFT_NOCONSIDERATION_B1Null() {
                this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGIFT_NOCONSIDERATION_B2Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGIFT_NOCONSIDERATION_B2Null() {
                this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_DEBT_B2Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.TOTAL_DEBT_B2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_DEBT_B2Null() {
                this[this.tableSUPPLEMENTAL.TOTAL_DEBT_B2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGIFT_NOCONSIDERATION_B3Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGIFT_NOCONSIDERATION_B3Null() {
                this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGIFT_NOCONSIDERATION_B4Null() {
                return this.IsNull(this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGIFT_NOCONSIDERATION_B4Null() {
                this[this.tableSUPPLEMENTAL.GIFT_NOCONSIDERATION_B4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREFINANCENull() {
                return this.IsNull(this.tableSUPPLEMENTAL.REFINANCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREFINANCENull() {
                this[this.tableSUPPLEMENTAL.REFINANCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIRS_EXCHANGENull() {
                return this.IsNull(this.tableSUPPLEMENTAL.IRS_EXCHANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIRS_EXCHANGENull() {
                this[this.tableSUPPLEMENTAL.IRS_EXCHANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFACILITATOR_NAMENull() {
                return this.IsNull(this.tableSUPPLEMENTAL.FACILITATOR_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFACILITATOR_NAMENull() {
                this[this.tableSUPPLEMENTAL.FACILITATOR_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRANTEE_NAMENull() {
                return this.IsNull(this.tableSUPPLEMENTAL.GRANTEE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRANTEE_NAMENull() {
                this[this.tableSUPPLEMENTAL.GRANTEE_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ErrorStatusDataTableRow : global::System.Data.DataRow {
            
            private ErrorStatusDataTableDataTable tableErrorStatusDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorStatusDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableErrorStatusDataTable = ((ErrorStatusDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorStatus {
                get {
                    try {
                        return ((string)(this[this.tableErrorStatusDataTable.ErrorStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorStatus\' in table \'ErrorStatusDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorStatusDataTable.ErrorStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorStatusNull() {
                return this.IsNull(this.tableErrorStatusDataTable.ErrorStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorStatusNull() {
                this[this.tableErrorStatusDataTable.ErrorStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AFFIDAVITRowChangeEvent : global::System.EventArgs {
            
            private AFFIDAVITRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRowChangeEvent(AFFIDAVITRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AFFIDAVITRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class INDIVIDUALRowChangeEvent : global::System.EventArgs {
            
            private INDIVIDUALRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INDIVIDUALRowChangeEvent(INDIVIDUALRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INDIVIDUALRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PARCELRowChangeEvent : global::System.EventArgs {
            
            private PARCELRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARCELRowChangeEvent(PARCELRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARCELRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class USE_CODESRowChangeEvent : global::System.EventArgs {
            
            private USE_CODESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USE_CODESRowChangeEvent(USE_CODESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USE_CODESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SUPPLEMENTALRowChangeEvent : global::System.EventArgs {
            
            private SUPPLEMENTALRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPPLEMENTALRowChangeEvent(SUPPLEMENTALRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUPPLEMENTALRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ErrorStatusDataTableRowChangeEvent : global::System.EventArgs {
            
            private ErrorStatusDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorStatusDataTableRowChangeEvent(ErrorStatusDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorStatusDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591