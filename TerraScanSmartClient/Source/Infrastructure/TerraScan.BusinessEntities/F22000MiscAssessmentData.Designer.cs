//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F22000MiscAssessmentData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F22000MiscAssessmentData : global::System.Data.DataSet {
        
        private ListMADistributionItemDataTable tableListMADistributionItem;
        
        private GetMADetailsDataTable tableGetMADetails;
        
        private SaveMiscAssessmentDataTable tableSaveMiscAssessment;
        
        private AccountRequiredTableDataTable tableAccountRequiredTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F22000MiscAssessmentData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F22000MiscAssessmentData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListMADistributionItem"] != null)) {
                    base.Tables.Add(new ListMADistributionItemDataTable(ds.Tables["ListMADistributionItem"]));
                }
                if ((ds.Tables["GetMADetails"] != null)) {
                    base.Tables.Add(new GetMADetailsDataTable(ds.Tables["GetMADetails"]));
                }
                if ((ds.Tables["SaveMiscAssessment"] != null)) {
                    base.Tables.Add(new SaveMiscAssessmentDataTable(ds.Tables["SaveMiscAssessment"]));
                }
                if ((ds.Tables["AccountRequiredTable"] != null)) {
                    base.Tables.Add(new AccountRequiredTableDataTable(ds.Tables["AccountRequiredTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMADistributionItemDataTable ListMADistributionItem {
            get {
                return this.tableListMADistributionItem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMADetailsDataTable GetMADetails {
            get {
                return this.tableGetMADetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveMiscAssessmentDataTable SaveMiscAssessment {
            get {
                return this.tableSaveMiscAssessment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountRequiredTableDataTable AccountRequiredTable {
            get {
                return this.tableAccountRequiredTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F22000MiscAssessmentData cln = ((F22000MiscAssessmentData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListMADistributionItem"] != null)) {
                    base.Tables.Add(new ListMADistributionItemDataTable(ds.Tables["ListMADistributionItem"]));
                }
                if ((ds.Tables["GetMADetails"] != null)) {
                    base.Tables.Add(new GetMADetailsDataTable(ds.Tables["GetMADetails"]));
                }
                if ((ds.Tables["SaveMiscAssessment"] != null)) {
                    base.Tables.Add(new SaveMiscAssessmentDataTable(ds.Tables["SaveMiscAssessment"]));
                }
                if ((ds.Tables["AccountRequiredTable"] != null)) {
                    base.Tables.Add(new AccountRequiredTableDataTable(ds.Tables["AccountRequiredTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListMADistributionItem = ((ListMADistributionItemDataTable)(base.Tables["ListMADistributionItem"]));
            if ((initTable == true)) {
                if ((this.tableListMADistributionItem != null)) {
                    this.tableListMADistributionItem.InitVars();
                }
            }
            this.tableGetMADetails = ((GetMADetailsDataTable)(base.Tables["GetMADetails"]));
            if ((initTable == true)) {
                if ((this.tableGetMADetails != null)) {
                    this.tableGetMADetails.InitVars();
                }
            }
            this.tableSaveMiscAssessment = ((SaveMiscAssessmentDataTable)(base.Tables["SaveMiscAssessment"]));
            if ((initTable == true)) {
                if ((this.tableSaveMiscAssessment != null)) {
                    this.tableSaveMiscAssessment.InitVars();
                }
            }
            this.tableAccountRequiredTable = ((AccountRequiredTableDataTable)(base.Tables["AccountRequiredTable"]));
            if ((initTable == true)) {
                if ((this.tableAccountRequiredTable != null)) {
                    this.tableAccountRequiredTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F22000MiscAssessmentData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F22000MiscAssessmentData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListMADistributionItem = new ListMADistributionItemDataTable();
            base.Tables.Add(this.tableListMADistributionItem);
            this.tableGetMADetails = new GetMADetailsDataTable();
            base.Tables.Add(this.tableGetMADetails);
            this.tableSaveMiscAssessment = new SaveMiscAssessmentDataTable();
            base.Tables.Add(this.tableSaveMiscAssessment);
            this.tableAccountRequiredTable = new AccountRequiredTableDataTable();
            base.Tables.Add(this.tableAccountRequiredTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMADistributionItem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMADetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveMiscAssessment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAccountRequiredTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F22000MiscAssessmentData ds = new F22000MiscAssessmentData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListMADistributionItemRowChangeEventHandler(object sender, ListMADistributionItemRowChangeEvent e);
        
        public delegate void GetMADetailsRowChangeEventHandler(object sender, GetMADetailsRowChangeEvent e);
        
        public delegate void SaveMiscAssessmentRowChangeEventHandler(object sender, SaveMiscAssessmentRowChangeEvent e);
        
        public delegate void AccountRequiredTableRowChangeEventHandler(object sender, AccountRequiredTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMADistributionItemDataTable : global::System.Data.TypedTableBase<ListMADistributionItemRow> {
            
            private global::System.Data.DataColumn columnMADistItemID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnItemTypeID;
            
            private global::System.Data.DataColumn columnDistributionType;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnAccountID;
            
            private global::System.Data.DataColumn columnAccountName;
            
            private global::System.Data.DataColumn columnIsActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADistributionItemDataTable() {
                this.TableName = "ListMADistributionItem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMADistributionItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMADistributionItemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistItemIDColumn {
                get {
                    return this.columnMADistItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemTypeIDColumn {
                get {
                    return this.columnItemTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributionTypeColumn {
                get {
                    return this.columnDistributionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADistributionItemRow this[int index] {
                get {
                    return ((ListMADistributionItemRow)(this.Rows[index]));
                }
            }
            
            public event ListMADistributionItemRowChangeEventHandler ListMADistributionItemRowChanging;
            
            public event ListMADistributionItemRowChangeEventHandler ListMADistributionItemRowChanged;
            
            public event ListMADistributionItemRowChangeEventHandler ListMADistributionItemRowDeleting;
            
            public event ListMADistributionItemRowChangeEventHandler ListMADistributionItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMADistributionItemRow(ListMADistributionItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADistributionItemRow AddListMADistributionItemRow(int MADistItemID, int MADistrictID, byte ItemTypeID, string DistributionType, decimal Rate, int AccountID, string AccountName, bool IsActive) {
                ListMADistributionItemRow rowListMADistributionItemRow = ((ListMADistributionItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistItemID,
                        MADistrictID,
                        ItemTypeID,
                        DistributionType,
                        Rate,
                        AccountID,
                        AccountName,
                        IsActive};
                rowListMADistributionItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMADistributionItemRow);
                return rowListMADistributionItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMADistributionItemDataTable cln = ((ListMADistributionItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMADistributionItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistItemID = base.Columns["MADistItemID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnItemTypeID = base.Columns["ItemTypeID"];
                this.columnDistributionType = base.Columns["DistributionType"];
                this.columnRate = base.Columns["Rate"];
                this.columnAccountID = base.Columns["AccountID"];
                this.columnAccountName = base.Columns["AccountName"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistItemID = new global::System.Data.DataColumn("MADistItemID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistItemID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnItemTypeID = new global::System.Data.DataColumn("ItemTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemTypeID);
                this.columnDistributionType = new global::System.Data.DataColumn("DistributionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributionType);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnAccountID = new global::System.Data.DataColumn("AccountID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountID);
                this.columnAccountName = new global::System.Data.DataColumn("AccountName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnMADistrictID.AllowDBNull = false;
                this.columnItemTypeID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnAccountID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADistributionItemRow NewListMADistributionItemRow() {
                return ((ListMADistributionItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMADistributionItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMADistributionItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMADistributionItemRowChanged != null)) {
                    this.ListMADistributionItemRowChanged(this, new ListMADistributionItemRowChangeEvent(((ListMADistributionItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMADistributionItemRowChanging != null)) {
                    this.ListMADistributionItemRowChanging(this, new ListMADistributionItemRowChangeEvent(((ListMADistributionItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMADistributionItemRowDeleted != null)) {
                    this.ListMADistributionItemRowDeleted(this, new ListMADistributionItemRowChangeEvent(((ListMADistributionItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMADistributionItemRowDeleting != null)) {
                    this.ListMADistributionItemRowDeleting(this, new ListMADistributionItemRowChangeEvent(((ListMADistributionItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMADistributionItemRow(ListMADistributionItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F22000MiscAssessmentData ds = new F22000MiscAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMADistributionItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMADetailsDataTable : global::System.Data.TypedTableBase<GetMADetailsRow> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnMADTypeID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMinimumCharge;
            
            private global::System.Data.DataColumn columnMaximumAcres;
            
            private global::System.Data.DataColumn columnIsOwnerAssessed;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            private global::System.Data.DataColumn columnBaseAcres;
            
            private global::System.Data.DataColumn columnBaseRate;
            
            private global::System.Data.DataColumn columnLevyRate;
            
            private global::System.Data.DataColumn columnSiteBase;
            
            private global::System.Data.DataColumn columnSiteRate;
            
            private global::System.Data.DataColumn columnDryBase;
            
            private global::System.Data.DataColumn columnDryRate;
            
            private global::System.Data.DataColumn columnIrrigatedBase;
            
            private global::System.Data.DataColumn columnIrrigatedRate;
            
            private global::System.Data.DataColumn columnTimberBase;
            
            private global::System.Data.DataColumn columnTimberRate;
            
            private global::System.Data.DataColumn columnOtherBase;
            
            private global::System.Data.DataColumn columnOtherRate;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnCountyFee;
            
            private global::System.Data.DataColumn columnMaxLotSize;
            
            private global::System.Data.DataColumn columnFPAFee;
            
            private global::System.Data.DataColumn columnLCFFee;
            
            private global::System.Data.DataColumn columnFPARate;
            
            private global::System.Data.DataColumn columnLCFRate;
            
            private global::System.Data.DataColumn columnTotalFlatFee;
            
            private global::System.Data.DataColumn columnTotalAcreRate;
            
            private global::System.Data.DataColumn columnResidentialRate;
            
            private global::System.Data.DataColumn columnCommercialRate;
            
            private global::System.Data.DataColumn columnConservationBaseFee;
            
            private global::System.Data.DataColumn columnLakeRate;
            
            private global::System.Data.DataColumn columnMinSiteAcres;
            
            private global::System.Data.DataColumn columnMinDryAcres;
            
            private global::System.Data.DataColumn columnMinIrrigatedAcres;
            
            private global::System.Data.DataColumn columnMinTimberAcres;
            
            private global::System.Data.DataColumn columnMinOtherAcres;
            
            private global::System.Data.DataColumn columnPerAcre;
            
            private global::System.Data.DataColumn columnPerParcel;
            
            private global::System.Data.DataColumn columnMarketRate;
            
            private global::System.Data.DataColumn columnMinimum;
            
            private global::System.Data.DataColumn columnMaximum;
            
            private global::System.Data.DataColumn columnParcelRate;
            
            private global::System.Data.DataColumn columnAcreRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADetailsDataTable() {
                this.TableName = "GetMADetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMADetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMADetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADTypeIDColumn {
                get {
                    return this.columnMADTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumChargeColumn {
                get {
                    return this.columnMinimumCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumAcresColumn {
                get {
                    return this.columnMaximumAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOwnerAssessedColumn {
                get {
                    return this.columnIsOwnerAssessed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseAcresColumn {
                get {
                    return this.columnBaseAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseRateColumn {
                get {
                    return this.columnBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevyRateColumn {
                get {
                    return this.columnLevyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteBaseColumn {
                get {
                    return this.columnSiteBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteRateColumn {
                get {
                    return this.columnSiteRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryBaseColumn {
                get {
                    return this.columnDryBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryRateColumn {
                get {
                    return this.columnDryRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedBaseColumn {
                get {
                    return this.columnIrrigatedBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedRateColumn {
                get {
                    return this.columnIrrigatedRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberBaseColumn {
                get {
                    return this.columnTimberBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberRateColumn {
                get {
                    return this.columnTimberRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherBaseColumn {
                get {
                    return this.columnOtherBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherRateColumn {
                get {
                    return this.columnOtherRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountyFeeColumn {
                get {
                    return this.columnCountyFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxLotSizeColumn {
                get {
                    return this.columnMaxLotSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPAFeeColumn {
                get {
                    return this.columnFPAFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFFeeColumn {
                get {
                    return this.columnLCFFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPARateColumn {
                get {
                    return this.columnFPARate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFRateColumn {
                get {
                    return this.columnLCFRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFlatFeeColumn {
                get {
                    return this.columnTotalFlatFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAcreRateColumn {
                get {
                    return this.columnTotalAcreRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResidentialRateColumn {
                get {
                    return this.columnResidentialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommercialRateColumn {
                get {
                    return this.columnCommercialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConservationBaseFeeColumn {
                get {
                    return this.columnConservationBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LakeRateColumn {
                get {
                    return this.columnLakeRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinSiteAcresColumn {
                get {
                    return this.columnMinSiteAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinDryAcresColumn {
                get {
                    return this.columnMinDryAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinIrrigatedAcresColumn {
                get {
                    return this.columnMinIrrigatedAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinTimberAcresColumn {
                get {
                    return this.columnMinTimberAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinOtherAcresColumn {
                get {
                    return this.columnMinOtherAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerAcreColumn {
                get {
                    return this.columnPerAcre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerParcelColumn {
                get {
                    return this.columnPerParcel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketRateColumn {
                get {
                    return this.columnMarketRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumColumn {
                get {
                    return this.columnMinimum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumColumn {
                get {
                    return this.columnMaximum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelRateColumn {
                get {
                    return this.columnParcelRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcreRateColumn {
                get {
                    return this.columnAcreRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADetailsRow this[int index] {
                get {
                    return ((GetMADetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetMADetailsRowChangeEventHandler GetMADetailsRowChanging;
            
            public event GetMADetailsRowChangeEventHandler GetMADetailsRowChanged;
            
            public event GetMADetailsRowChangeEventHandler GetMADetailsRowDeleting;
            
            public event GetMADetailsRowChangeEventHandler GetMADetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMADetailsRow(GetMADetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADetailsRow AddGetMADetailsRow(
                        int MADistrictID, 
                        int MADTypeID, 
                        int RollYear, 
                        string DistrictNumber, 
                        string Description, 
                        decimal MinimumCharge, 
                        decimal MaximumAcres, 
                        bool IsOwnerAssessed, 
                        decimal BaseFee, 
                        int BaseAcres, 
                        decimal BaseRate, 
                        decimal LevyRate, 
                        decimal SiteBase, 
                        decimal SiteRate, 
                        decimal DryBase, 
                        decimal DryRate, 
                        decimal IrrigatedBase, 
                        decimal IrrigatedRate, 
                        decimal TimberBase, 
                        decimal TimberRate, 
                        decimal OtherBase, 
                        decimal OtherRate, 
                        decimal Rate, 
                        decimal CountyFee, 
                        decimal MaxLotSize, 
                        decimal FPAFee, 
                        decimal LCFFee, 
                        decimal FPARate, 
                        decimal LCFRate, 
                        decimal TotalFlatFee, 
                        decimal TotalAcreRate, 
                        decimal ResidentialRate, 
                        decimal CommercialRate, 
                        decimal ConservationBaseFee, 
                        decimal LakeRate, 
                        int MinSiteAcres, 
                        int MinDryAcres, 
                        int MinIrrigatedAcres, 
                        int MinTimberAcres, 
                        int MinOtherAcres, 
                        decimal PerAcre, 
                        decimal PerParcel, 
                        decimal MarketRate, 
                        decimal Minimum, 
                        decimal Maximum, 
                        decimal ParcelRate, 
                        decimal AcreRate) {
                GetMADetailsRow rowGetMADetailsRow = ((GetMADetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        MADTypeID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        MinimumCharge,
                        MaximumAcres,
                        IsOwnerAssessed,
                        BaseFee,
                        BaseAcres,
                        BaseRate,
                        LevyRate,
                        SiteBase,
                        SiteRate,
                        DryBase,
                        DryRate,
                        IrrigatedBase,
                        IrrigatedRate,
                        TimberBase,
                        TimberRate,
                        OtherBase,
                        OtherRate,
                        Rate,
                        CountyFee,
                        MaxLotSize,
                        FPAFee,
                        LCFFee,
                        FPARate,
                        LCFRate,
                        TotalFlatFee,
                        TotalAcreRate,
                        ResidentialRate,
                        CommercialRate,
                        ConservationBaseFee,
                        LakeRate,
                        MinSiteAcres,
                        MinDryAcres,
                        MinIrrigatedAcres,
                        MinTimberAcres,
                        MinOtherAcres,
                        PerAcre,
                        PerParcel,
                        MarketRate,
                        Minimum,
                        Maximum,
                        ParcelRate,
                        AcreRate};
                rowGetMADetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMADetailsRow);
                return rowGetMADetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMADetailsDataTable cln = ((GetMADetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMADetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnMADTypeID = base.Columns["MADTypeID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnMinimumCharge = base.Columns["MinimumCharge"];
                this.columnMaximumAcres = base.Columns["MaximumAcres"];
                this.columnIsOwnerAssessed = base.Columns["IsOwnerAssessed"];
                this.columnBaseFee = base.Columns["BaseFee"];
                this.columnBaseAcres = base.Columns["BaseAcres"];
                this.columnBaseRate = base.Columns["BaseRate"];
                this.columnLevyRate = base.Columns["LevyRate"];
                this.columnSiteBase = base.Columns["SiteBase"];
                this.columnSiteRate = base.Columns["SiteRate"];
                this.columnDryBase = base.Columns["DryBase"];
                this.columnDryRate = base.Columns["DryRate"];
                this.columnIrrigatedBase = base.Columns["IrrigatedBase"];
                this.columnIrrigatedRate = base.Columns["IrrigatedRate"];
                this.columnTimberBase = base.Columns["TimberBase"];
                this.columnTimberRate = base.Columns["TimberRate"];
                this.columnOtherBase = base.Columns["OtherBase"];
                this.columnOtherRate = base.Columns["OtherRate"];
                this.columnRate = base.Columns["Rate"];
                this.columnCountyFee = base.Columns["CountyFee"];
                this.columnMaxLotSize = base.Columns["MaxLotSize"];
                this.columnFPAFee = base.Columns["FPAFee"];
                this.columnLCFFee = base.Columns["LCFFee"];
                this.columnFPARate = base.Columns["FPARate"];
                this.columnLCFRate = base.Columns["LCFRate"];
                this.columnTotalFlatFee = base.Columns["TotalFlatFee"];
                this.columnTotalAcreRate = base.Columns["TotalAcreRate"];
                this.columnResidentialRate = base.Columns["ResidentialRate"];
                this.columnCommercialRate = base.Columns["CommercialRate"];
                this.columnConservationBaseFee = base.Columns["ConservationBaseFee"];
                this.columnLakeRate = base.Columns["LakeRate"];
                this.columnMinSiteAcres = base.Columns["MinSiteAcres"];
                this.columnMinDryAcres = base.Columns["MinDryAcres"];
                this.columnMinIrrigatedAcres = base.Columns["MinIrrigatedAcres"];
                this.columnMinTimberAcres = base.Columns["MinTimberAcres"];
                this.columnMinOtherAcres = base.Columns["MinOtherAcres"];
                this.columnPerAcre = base.Columns["PerAcre"];
                this.columnPerParcel = base.Columns["PerParcel"];
                this.columnMarketRate = base.Columns["MarketRate"];
                this.columnMinimum = base.Columns["Minimum"];
                this.columnMaximum = base.Columns["Maximum"];
                this.columnParcelRate = base.Columns["ParcelRate"];
                this.columnAcreRate = base.Columns["AcreRate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnMADTypeID = new global::System.Data.DataColumn("MADTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADTypeID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMinimumCharge = new global::System.Data.DataColumn("MinimumCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumCharge);
                this.columnMaximumAcres = new global::System.Data.DataColumn("MaximumAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumAcres);
                this.columnIsOwnerAssessed = new global::System.Data.DataColumn("IsOwnerAssessed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOwnerAssessed);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnBaseAcres = new global::System.Data.DataColumn("BaseAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAcres);
                this.columnBaseRate = new global::System.Data.DataColumn("BaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseRate);
                this.columnLevyRate = new global::System.Data.DataColumn("LevyRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevyRate);
                this.columnSiteBase = new global::System.Data.DataColumn("SiteBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteBase);
                this.columnSiteRate = new global::System.Data.DataColumn("SiteRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteRate);
                this.columnDryBase = new global::System.Data.DataColumn("DryBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryBase);
                this.columnDryRate = new global::System.Data.DataColumn("DryRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryRate);
                this.columnIrrigatedBase = new global::System.Data.DataColumn("IrrigatedBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedBase);
                this.columnIrrigatedRate = new global::System.Data.DataColumn("IrrigatedRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedRate);
                this.columnTimberBase = new global::System.Data.DataColumn("TimberBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberBase);
                this.columnTimberRate = new global::System.Data.DataColumn("TimberRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberRate);
                this.columnOtherBase = new global::System.Data.DataColumn("OtherBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherBase);
                this.columnOtherRate = new global::System.Data.DataColumn("OtherRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherRate);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnCountyFee = new global::System.Data.DataColumn("CountyFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountyFee);
                this.columnMaxLotSize = new global::System.Data.DataColumn("MaxLotSize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxLotSize);
                this.columnFPAFee = new global::System.Data.DataColumn("FPAFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPAFee);
                this.columnLCFFee = new global::System.Data.DataColumn("LCFFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFFee);
                this.columnFPARate = new global::System.Data.DataColumn("FPARate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPARate);
                this.columnLCFRate = new global::System.Data.DataColumn("LCFRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFRate);
                this.columnTotalFlatFee = new global::System.Data.DataColumn("TotalFlatFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFlatFee);
                this.columnTotalAcreRate = new global::System.Data.DataColumn("TotalAcreRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAcreRate);
                this.columnResidentialRate = new global::System.Data.DataColumn("ResidentialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResidentialRate);
                this.columnCommercialRate = new global::System.Data.DataColumn("CommercialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommercialRate);
                this.columnConservationBaseFee = new global::System.Data.DataColumn("ConservationBaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConservationBaseFee);
                this.columnLakeRate = new global::System.Data.DataColumn("LakeRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLakeRate);
                this.columnMinSiteAcres = new global::System.Data.DataColumn("MinSiteAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinSiteAcres);
                this.columnMinDryAcres = new global::System.Data.DataColumn("MinDryAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinDryAcres);
                this.columnMinIrrigatedAcres = new global::System.Data.DataColumn("MinIrrigatedAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinIrrigatedAcres);
                this.columnMinTimberAcres = new global::System.Data.DataColumn("MinTimberAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinTimberAcres);
                this.columnMinOtherAcres = new global::System.Data.DataColumn("MinOtherAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinOtherAcres);
                this.columnPerAcre = new global::System.Data.DataColumn("PerAcre", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerAcre);
                this.columnPerParcel = new global::System.Data.DataColumn("PerParcel", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerParcel);
                this.columnMarketRate = new global::System.Data.DataColumn("MarketRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketRate);
                this.columnMinimum = new global::System.Data.DataColumn("Minimum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimum);
                this.columnMaximum = new global::System.Data.DataColumn("Maximum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximum);
                this.columnParcelRate = new global::System.Data.DataColumn("ParcelRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelRate);
                this.columnAcreRate = new global::System.Data.DataColumn("AcreRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcreRate);
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADetailsRow NewGetMADetailsRow() {
                return ((GetMADetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMADetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMADetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMADetailsRowChanged != null)) {
                    this.GetMADetailsRowChanged(this, new GetMADetailsRowChangeEvent(((GetMADetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMADetailsRowChanging != null)) {
                    this.GetMADetailsRowChanging(this, new GetMADetailsRowChangeEvent(((GetMADetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMADetailsRowDeleted != null)) {
                    this.GetMADetailsRowDeleted(this, new GetMADetailsRowChangeEvent(((GetMADetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMADetailsRowDeleting != null)) {
                    this.GetMADetailsRowDeleting(this, new GetMADetailsRowChangeEvent(((GetMADetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMADetailsRow(GetMADetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F22000MiscAssessmentData ds = new F22000MiscAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMADetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveMiscAssessmentDataTable : global::System.Data.TypedTableBase<SaveMiscAssessmentRow> {
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnMADTypeID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDistrictNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMinimumCharge;
            
            private global::System.Data.DataColumn columnMaximumAcres;
            
            private global::System.Data.DataColumn columnIsOwnerAssessed;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            private global::System.Data.DataColumn columnBaseAcres;
            
            private global::System.Data.DataColumn columnBaseRate;
            
            private global::System.Data.DataColumn columnLevyRate;
            
            private global::System.Data.DataColumn columnSiteBase;
            
            private global::System.Data.DataColumn columnSiteRate;
            
            private global::System.Data.DataColumn columnDryBase;
            
            private global::System.Data.DataColumn columnDryRate;
            
            private global::System.Data.DataColumn columnIrrigatedBase;
            
            private global::System.Data.DataColumn columnIrrigatedRate;
            
            private global::System.Data.DataColumn columnTimberBase;
            
            private global::System.Data.DataColumn columnTimberRate;
            
            private global::System.Data.DataColumn columnOtherBase;
            
            private global::System.Data.DataColumn columnOtherRate;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnCountyFee;
            
            private global::System.Data.DataColumn columnMaxLotSize;
            
            private global::System.Data.DataColumn columnFPAFee;
            
            private global::System.Data.DataColumn columnLCFFee;
            
            private global::System.Data.DataColumn columnFPARate;
            
            private global::System.Data.DataColumn columnLCFRate;
            
            private global::System.Data.DataColumn columnTotalFlatFee;
            
            private global::System.Data.DataColumn columnTotalAcreRate;
            
            private global::System.Data.DataColumn columnResidentialRate;
            
            private global::System.Data.DataColumn columnCommercialRate;
            
            private global::System.Data.DataColumn columnConservationBaseFee;
            
            private global::System.Data.DataColumn columnLakeRate;
            
            private global::System.Data.DataColumn columnMinSiteAcres;
            
            private global::System.Data.DataColumn columnMinDryAcres;
            
            private global::System.Data.DataColumn columnMinIrrigatedAcres;
            
            private global::System.Data.DataColumn columnMinTimberAcres;
            
            private global::System.Data.DataColumn columnMinOtherAcres;
            
            private global::System.Data.DataColumn columnPerAcre;
            
            private global::System.Data.DataColumn columnPerParcel;
            
            private global::System.Data.DataColumn columnMarketRate;
            
            private global::System.Data.DataColumn columnMinimum;
            
            private global::System.Data.DataColumn columnMaximum;
            
            private global::System.Data.DataColumn columnParcelRate;
            
            private global::System.Data.DataColumn columnAcreRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMiscAssessmentDataTable() {
                this.TableName = "SaveMiscAssessment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMiscAssessmentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveMiscAssessmentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADTypeIDColumn {
                get {
                    return this.columnMADTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNumberColumn {
                get {
                    return this.columnDistrictNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumChargeColumn {
                get {
                    return this.columnMinimumCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumAcresColumn {
                get {
                    return this.columnMaximumAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOwnerAssessedColumn {
                get {
                    return this.columnIsOwnerAssessed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseAcresColumn {
                get {
                    return this.columnBaseAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseRateColumn {
                get {
                    return this.columnBaseRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevyRateColumn {
                get {
                    return this.columnLevyRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteBaseColumn {
                get {
                    return this.columnSiteBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteRateColumn {
                get {
                    return this.columnSiteRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryBaseColumn {
                get {
                    return this.columnDryBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryRateColumn {
                get {
                    return this.columnDryRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedBaseColumn {
                get {
                    return this.columnIrrigatedBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedRateColumn {
                get {
                    return this.columnIrrigatedRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberBaseColumn {
                get {
                    return this.columnTimberBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberRateColumn {
                get {
                    return this.columnTimberRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherBaseColumn {
                get {
                    return this.columnOtherBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherRateColumn {
                get {
                    return this.columnOtherRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountyFeeColumn {
                get {
                    return this.columnCountyFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxLotSizeColumn {
                get {
                    return this.columnMaxLotSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPAFeeColumn {
                get {
                    return this.columnFPAFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFFeeColumn {
                get {
                    return this.columnLCFFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPARateColumn {
                get {
                    return this.columnFPARate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFRateColumn {
                get {
                    return this.columnLCFRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFlatFeeColumn {
                get {
                    return this.columnTotalFlatFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAcreRateColumn {
                get {
                    return this.columnTotalAcreRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResidentialRateColumn {
                get {
                    return this.columnResidentialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommercialRateColumn {
                get {
                    return this.columnCommercialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConservationBaseFeeColumn {
                get {
                    return this.columnConservationBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LakeRateColumn {
                get {
                    return this.columnLakeRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinSiteAcresColumn {
                get {
                    return this.columnMinSiteAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinDryAcresColumn {
                get {
                    return this.columnMinDryAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinIrrigatedAcresColumn {
                get {
                    return this.columnMinIrrigatedAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinTimberAcresColumn {
                get {
                    return this.columnMinTimberAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinOtherAcresColumn {
                get {
                    return this.columnMinOtherAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerAcreColumn {
                get {
                    return this.columnPerAcre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerParcelColumn {
                get {
                    return this.columnPerParcel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarketRateColumn {
                get {
                    return this.columnMarketRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumColumn {
                get {
                    return this.columnMinimum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumColumn {
                get {
                    return this.columnMaximum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelRateColumn {
                get {
                    return this.columnParcelRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcreRateColumn {
                get {
                    return this.columnAcreRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMiscAssessmentRow this[int index] {
                get {
                    return ((SaveMiscAssessmentRow)(this.Rows[index]));
                }
            }
            
            public event SaveMiscAssessmentRowChangeEventHandler SaveMiscAssessmentRowChanging;
            
            public event SaveMiscAssessmentRowChangeEventHandler SaveMiscAssessmentRowChanged;
            
            public event SaveMiscAssessmentRowChangeEventHandler SaveMiscAssessmentRowDeleting;
            
            public event SaveMiscAssessmentRowChangeEventHandler SaveMiscAssessmentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveMiscAssessmentRow(SaveMiscAssessmentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMiscAssessmentRow AddSaveMiscAssessmentRow(
                        int MADistrictID, 
                        int MADTypeID, 
                        int RollYear, 
                        string DistrictNumber, 
                        string Description, 
                        decimal MinimumCharge, 
                        decimal MaximumAcres, 
                        bool IsOwnerAssessed, 
                        decimal BaseFee, 
                        int BaseAcres, 
                        decimal BaseRate, 
                        decimal LevyRate, 
                        decimal SiteBase, 
                        decimal SiteRate, 
                        decimal DryBase, 
                        decimal DryRate, 
                        decimal IrrigatedBase, 
                        decimal IrrigatedRate, 
                        decimal TimberBase, 
                        decimal TimberRate, 
                        decimal OtherBase, 
                        decimal OtherRate, 
                        decimal Rate, 
                        decimal CountyFee, 
                        decimal MaxLotSize, 
                        decimal FPAFee, 
                        decimal LCFFee, 
                        decimal FPARate, 
                        decimal LCFRate, 
                        decimal TotalFlatFee, 
                        decimal TotalAcreRate, 
                        decimal ResidentialRate, 
                        decimal CommercialRate, 
                        decimal ConservationBaseFee, 
                        decimal LakeRate, 
                        int MinSiteAcres, 
                        int MinDryAcres, 
                        int MinIrrigatedAcres, 
                        int MinTimberAcres, 
                        int MinOtherAcres, 
                        decimal PerAcre, 
                        decimal PerParcel, 
                        decimal MarketRate, 
                        decimal Minimum, 
                        decimal Maximum, 
                        decimal ParcelRate, 
                        decimal AcreRate) {
                SaveMiscAssessmentRow rowSaveMiscAssessmentRow = ((SaveMiscAssessmentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MADistrictID,
                        MADTypeID,
                        RollYear,
                        DistrictNumber,
                        Description,
                        MinimumCharge,
                        MaximumAcres,
                        IsOwnerAssessed,
                        BaseFee,
                        BaseAcres,
                        BaseRate,
                        LevyRate,
                        SiteBase,
                        SiteRate,
                        DryBase,
                        DryRate,
                        IrrigatedBase,
                        IrrigatedRate,
                        TimberBase,
                        TimberRate,
                        OtherBase,
                        OtherRate,
                        Rate,
                        CountyFee,
                        MaxLotSize,
                        FPAFee,
                        LCFFee,
                        FPARate,
                        LCFRate,
                        TotalFlatFee,
                        TotalAcreRate,
                        ResidentialRate,
                        CommercialRate,
                        ConservationBaseFee,
                        LakeRate,
                        MinSiteAcres,
                        MinDryAcres,
                        MinIrrigatedAcres,
                        MinTimberAcres,
                        MinOtherAcres,
                        PerAcre,
                        PerParcel,
                        MarketRate,
                        Minimum,
                        Maximum,
                        ParcelRate,
                        AcreRate};
                rowSaveMiscAssessmentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveMiscAssessmentRow);
                return rowSaveMiscAssessmentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveMiscAssessmentDataTable cln = ((SaveMiscAssessmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveMiscAssessmentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnMADTypeID = base.Columns["MADTypeID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDistrictNumber = base.Columns["DistrictNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnMinimumCharge = base.Columns["MinimumCharge"];
                this.columnMaximumAcres = base.Columns["MaximumAcres"];
                this.columnIsOwnerAssessed = base.Columns["IsOwnerAssessed"];
                this.columnBaseFee = base.Columns["BaseFee"];
                this.columnBaseAcres = base.Columns["BaseAcres"];
                this.columnBaseRate = base.Columns["BaseRate"];
                this.columnLevyRate = base.Columns["LevyRate"];
                this.columnSiteBase = base.Columns["SiteBase"];
                this.columnSiteRate = base.Columns["SiteRate"];
                this.columnDryBase = base.Columns["DryBase"];
                this.columnDryRate = base.Columns["DryRate"];
                this.columnIrrigatedBase = base.Columns["IrrigatedBase"];
                this.columnIrrigatedRate = base.Columns["IrrigatedRate"];
                this.columnTimberBase = base.Columns["TimberBase"];
                this.columnTimberRate = base.Columns["TimberRate"];
                this.columnOtherBase = base.Columns["OtherBase"];
                this.columnOtherRate = base.Columns["OtherRate"];
                this.columnRate = base.Columns["Rate"];
                this.columnCountyFee = base.Columns["CountyFee"];
                this.columnMaxLotSize = base.Columns["MaxLotSize"];
                this.columnFPAFee = base.Columns["FPAFee"];
                this.columnLCFFee = base.Columns["LCFFee"];
                this.columnFPARate = base.Columns["FPARate"];
                this.columnLCFRate = base.Columns["LCFRate"];
                this.columnTotalFlatFee = base.Columns["TotalFlatFee"];
                this.columnTotalAcreRate = base.Columns["TotalAcreRate"];
                this.columnResidentialRate = base.Columns["ResidentialRate"];
                this.columnCommercialRate = base.Columns["CommercialRate"];
                this.columnConservationBaseFee = base.Columns["ConservationBaseFee"];
                this.columnLakeRate = base.Columns["LakeRate"];
                this.columnMinSiteAcres = base.Columns["MinSiteAcres"];
                this.columnMinDryAcres = base.Columns["MinDryAcres"];
                this.columnMinIrrigatedAcres = base.Columns["MinIrrigatedAcres"];
                this.columnMinTimberAcres = base.Columns["MinTimberAcres"];
                this.columnMinOtherAcres = base.Columns["MinOtherAcres"];
                this.columnPerAcre = base.Columns["PerAcre"];
                this.columnPerParcel = base.Columns["PerParcel"];
                this.columnMarketRate = base.Columns["MarketRate"];
                this.columnMinimum = base.Columns["Minimum"];
                this.columnMaximum = base.Columns["Maximum"];
                this.columnParcelRate = base.Columns["ParcelRate"];
                this.columnAcreRate = base.Columns["AcreRate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnMADTypeID = new global::System.Data.DataColumn("MADTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADTypeID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDistrictNumber = new global::System.Data.DataColumn("DistrictNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMinimumCharge = new global::System.Data.DataColumn("MinimumCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumCharge);
                this.columnMaximumAcres = new global::System.Data.DataColumn("MaximumAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumAcres);
                this.columnIsOwnerAssessed = new global::System.Data.DataColumn("IsOwnerAssessed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOwnerAssessed);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnBaseAcres = new global::System.Data.DataColumn("BaseAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAcres);
                this.columnBaseRate = new global::System.Data.DataColumn("BaseRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseRate);
                this.columnLevyRate = new global::System.Data.DataColumn("LevyRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevyRate);
                this.columnSiteBase = new global::System.Data.DataColumn("SiteBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteBase);
                this.columnSiteRate = new global::System.Data.DataColumn("SiteRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteRate);
                this.columnDryBase = new global::System.Data.DataColumn("DryBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryBase);
                this.columnDryRate = new global::System.Data.DataColumn("DryRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryRate);
                this.columnIrrigatedBase = new global::System.Data.DataColumn("IrrigatedBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedBase);
                this.columnIrrigatedRate = new global::System.Data.DataColumn("IrrigatedRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedRate);
                this.columnTimberBase = new global::System.Data.DataColumn("TimberBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberBase);
                this.columnTimberRate = new global::System.Data.DataColumn("TimberRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberRate);
                this.columnOtherBase = new global::System.Data.DataColumn("OtherBase", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherBase);
                this.columnOtherRate = new global::System.Data.DataColumn("OtherRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherRate);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnCountyFee = new global::System.Data.DataColumn("CountyFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountyFee);
                this.columnMaxLotSize = new global::System.Data.DataColumn("MaxLotSize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxLotSize);
                this.columnFPAFee = new global::System.Data.DataColumn("FPAFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPAFee);
                this.columnLCFFee = new global::System.Data.DataColumn("LCFFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFFee);
                this.columnFPARate = new global::System.Data.DataColumn("FPARate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPARate);
                this.columnLCFRate = new global::System.Data.DataColumn("LCFRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFRate);
                this.columnTotalFlatFee = new global::System.Data.DataColumn("TotalFlatFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFlatFee);
                this.columnTotalAcreRate = new global::System.Data.DataColumn("TotalAcreRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAcreRate);
                this.columnResidentialRate = new global::System.Data.DataColumn("ResidentialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResidentialRate);
                this.columnCommercialRate = new global::System.Data.DataColumn("CommercialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommercialRate);
                this.columnConservationBaseFee = new global::System.Data.DataColumn("ConservationBaseFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConservationBaseFee);
                this.columnLakeRate = new global::System.Data.DataColumn("LakeRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLakeRate);
                this.columnMinSiteAcres = new global::System.Data.DataColumn("MinSiteAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinSiteAcres);
                this.columnMinDryAcres = new global::System.Data.DataColumn("MinDryAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinDryAcres);
                this.columnMinIrrigatedAcres = new global::System.Data.DataColumn("MinIrrigatedAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinIrrigatedAcres);
                this.columnMinTimberAcres = new global::System.Data.DataColumn("MinTimberAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinTimberAcres);
                this.columnMinOtherAcres = new global::System.Data.DataColumn("MinOtherAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinOtherAcres);
                this.columnPerAcre = new global::System.Data.DataColumn("PerAcre", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerAcre);
                this.columnPerParcel = new global::System.Data.DataColumn("PerParcel", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerParcel);
                this.columnMarketRate = new global::System.Data.DataColumn("MarketRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarketRate);
                this.columnMinimum = new global::System.Data.DataColumn("Minimum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimum);
                this.columnMaximum = new global::System.Data.DataColumn("Maximum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximum);
                this.columnParcelRate = new global::System.Data.DataColumn("ParcelRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelRate);
                this.columnAcreRate = new global::System.Data.DataColumn("AcreRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcreRate);
                this.columnDistrictNumber.MaxLength = 50;
                this.columnDescription.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMiscAssessmentRow NewSaveMiscAssessmentRow() {
                return ((SaveMiscAssessmentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveMiscAssessmentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveMiscAssessmentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveMiscAssessmentRowChanged != null)) {
                    this.SaveMiscAssessmentRowChanged(this, new SaveMiscAssessmentRowChangeEvent(((SaveMiscAssessmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveMiscAssessmentRowChanging != null)) {
                    this.SaveMiscAssessmentRowChanging(this, new SaveMiscAssessmentRowChangeEvent(((SaveMiscAssessmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveMiscAssessmentRowDeleted != null)) {
                    this.SaveMiscAssessmentRowDeleted(this, new SaveMiscAssessmentRowChangeEvent(((SaveMiscAssessmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveMiscAssessmentRowDeleting != null)) {
                    this.SaveMiscAssessmentRowDeleting(this, new SaveMiscAssessmentRowChangeEvent(((SaveMiscAssessmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveMiscAssessmentRow(SaveMiscAssessmentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F22000MiscAssessmentData ds = new F22000MiscAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveMiscAssessmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AccountRequiredTableDataTable : global::System.Data.TypedTableBase<AccountRequiredTableRow> {
            
            private global::System.Data.DataColumn columnIsAccountRequired;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRequiredTableDataTable() {
                this.TableName = "AccountRequiredTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountRequiredTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AccountRequiredTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAccountRequiredColumn {
                get {
                    return this.columnIsAccountRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRequiredTableRow this[int index] {
                get {
                    return ((AccountRequiredTableRow)(this.Rows[index]));
                }
            }
            
            public event AccountRequiredTableRowChangeEventHandler AccountRequiredTableRowChanging;
            
            public event AccountRequiredTableRowChangeEventHandler AccountRequiredTableRowChanged;
            
            public event AccountRequiredTableRowChangeEventHandler AccountRequiredTableRowDeleting;
            
            public event AccountRequiredTableRowChangeEventHandler AccountRequiredTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAccountRequiredTableRow(AccountRequiredTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRequiredTableRow AddAccountRequiredTableRow(bool IsAccountRequired) {
                AccountRequiredTableRow rowAccountRequiredTableRow = ((AccountRequiredTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsAccountRequired};
                rowAccountRequiredTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAccountRequiredTableRow);
                return rowAccountRequiredTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AccountRequiredTableDataTable cln = ((AccountRequiredTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AccountRequiredTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsAccountRequired = base.Columns["IsAccountRequired"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsAccountRequired = new global::System.Data.DataColumn("IsAccountRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAccountRequired);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRequiredTableRow NewAccountRequiredTableRow() {
                return ((AccountRequiredTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AccountRequiredTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AccountRequiredTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountRequiredTableRowChanged != null)) {
                    this.AccountRequiredTableRowChanged(this, new AccountRequiredTableRowChangeEvent(((AccountRequiredTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountRequiredTableRowChanging != null)) {
                    this.AccountRequiredTableRowChanging(this, new AccountRequiredTableRowChangeEvent(((AccountRequiredTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountRequiredTableRowDeleted != null)) {
                    this.AccountRequiredTableRowDeleted(this, new AccountRequiredTableRowChangeEvent(((AccountRequiredTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountRequiredTableRowDeleting != null)) {
                    this.AccountRequiredTableRowDeleting(this, new AccountRequiredTableRowChangeEvent(((AccountRequiredTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAccountRequiredTableRow(AccountRequiredTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F22000MiscAssessmentData ds = new F22000MiscAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AccountRequiredTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMADistributionItemRow : global::System.Data.DataRow {
            
            private ListMADistributionItemDataTable tableListMADistributionItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMADistributionItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMADistributionItem = ((ListMADistributionItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistItemID {
                get {
                    try {
                        return ((int)(this[this.tableListMADistributionItem.MADistItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistItemID\' in table \'ListMADistributionItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMADistributionItem.MADistItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    return ((int)(this[this.tableListMADistributionItem.MADistrictIDColumn]));
                }
                set {
                    this[this.tableListMADistributionItem.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ItemTypeID {
                get {
                    return ((byte)(this[this.tableListMADistributionItem.ItemTypeIDColumn]));
                }
                set {
                    this[this.tableListMADistributionItem.ItemTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistributionType {
                get {
                    try {
                        return ((string)(this[this.tableListMADistributionItem.DistributionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistributionType\' in table \'ListMADistributionItem\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListMADistributionItem.DistributionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableListMADistributionItem.RateColumn]));
                }
                set {
                    this[this.tableListMADistributionItem.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AccountID {
                get {
                    return ((int)(this[this.tableListMADistributionItem.AccountIDColumn]));
                }
                set {
                    this[this.tableListMADistributionItem.AccountIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableListMADistributionItem.AccountNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountName\' in table \'ListMADistributionItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMADistributionItem.AccountNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableListMADistributionItem.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'ListMADistributionItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMADistributionItem.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistItemIDNull() {
                return this.IsNull(this.tableListMADistributionItem.MADistItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistItemIDNull() {
                this[this.tableListMADistributionItem.MADistItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributionTypeNull() {
                return this.IsNull(this.tableListMADistributionItem.DistributionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributionTypeNull() {
                this[this.tableListMADistributionItem.DistributionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableListMADistributionItem.AccountNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNameNull() {
                this[this.tableListMADistributionItem.AccountNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableListMADistributionItem.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableListMADistributionItem.IsActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMADetailsRow : global::System.Data.DataRow {
            
            private GetMADetailsDataTable tableGetMADetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMADetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMADetails = ((GetMADetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tableGetMADetails.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetMADetails.MADTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADTypeID\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MADTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableGetMADetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    if (this.IsDistrictNumberNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetMADetails.DistrictNumberColumn]));
                    }
                }
                set {
                    this[this.tableGetMADetails.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetMADetails.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableGetMADetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumCharge {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.MinimumChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimumCharge\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MinimumChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaximumAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.MaximumAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumAcres\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MaximumAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerAssessed {
                get {
                    try {
                        return ((bool)(this[this.tableGetMADetails.IsOwnerAssessedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOwnerAssessed\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.IsOwnerAssessedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.BaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFee\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseAcres {
                get {
                    try {
                        return ((int)(this[this.tableGetMADetails.BaseAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseAcres\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.BaseAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.BaseRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.BaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LevyRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.LevyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevyRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.LevyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteBase {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.SiteBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteBase\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.SiteBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.SiteRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.SiteRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryBase {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.DryBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryBase\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.DryBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.DryRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.DryRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedBase {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.IrrigatedBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedBase\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.IrrigatedBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.IrrigatedRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.IrrigatedRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberBase {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.TimberBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberBase\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.TimberBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.TimberRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.TimberRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherBase {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.OtherBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherBase\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.OtherBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.OtherRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.OtherRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CountyFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.CountyFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountyFee\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.CountyFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxLotSize {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.MaxLotSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxLotSize\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MaxLotSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPAFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.FPAFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPAFee\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.FPAFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.LCFFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFFee\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.LCFFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPARate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.FPARateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPARate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.FPARateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.LCFRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.LCFRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalFlatFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.TotalFlatFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFlatFee\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.TotalFlatFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAcreRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.TotalAcreRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAcreRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.TotalAcreRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResidentialRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.ResidentialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResidentialRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.ResidentialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommercialRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.CommercialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommercialRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.CommercialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ConservationBaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.ConservationBaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConservationBaseFee\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.ConservationBaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LakeRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.LakeRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LakeRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.LakeRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinSiteAcres {
                get {
                    try {
                        return ((int)(this[this.tableGetMADetails.MinSiteAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinSiteAcres\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MinSiteAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinDryAcres {
                get {
                    try {
                        return ((int)(this[this.tableGetMADetails.MinDryAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinDryAcres\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MinDryAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinIrrigatedAcres {
                get {
                    try {
                        return ((int)(this[this.tableGetMADetails.MinIrrigatedAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinIrrigatedAcres\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MinIrrigatedAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinTimberAcres {
                get {
                    try {
                        return ((int)(this[this.tableGetMADetails.MinTimberAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinTimberAcres\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MinTimberAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinOtherAcres {
                get {
                    try {
                        return ((int)(this[this.tableGetMADetails.MinOtherAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinOtherAcres\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MinOtherAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerAcre {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.PerAcreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerAcre\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.PerAcreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerParcel {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.PerParcelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerParcel\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.PerParcelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MarketRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.MarketRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MarketRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MarketRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Minimum {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.MinimumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Minimum\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MinimumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Maximum {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.MaximumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Maximum\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.MaximumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ParcelRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.ParcelRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.ParcelRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AcreRate {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMADetails.AcreRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcreRate\' in table \'GetMADetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMADetails.AcreRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tableGetMADetails.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tableGetMADetails.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADTypeIDNull() {
                return this.IsNull(this.tableGetMADetails.MADTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADTypeIDNull() {
                this[this.tableGetMADetails.MADTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetMADetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetMADetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tableGetMADetails.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tableGetMADetails.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetMADetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetMADetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumChargeNull() {
                return this.IsNull(this.tableGetMADetails.MinimumChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumChargeNull() {
                this[this.tableGetMADetails.MinimumChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumAcresNull() {
                return this.IsNull(this.tableGetMADetails.MaximumAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumAcresNull() {
                this[this.tableGetMADetails.MaximumAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOwnerAssessedNull() {
                return this.IsNull(this.tableGetMADetails.IsOwnerAssessedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOwnerAssessedNull() {
                this[this.tableGetMADetails.IsOwnerAssessedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tableGetMADetails.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tableGetMADetails.BaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAcresNull() {
                return this.IsNull(this.tableGetMADetails.BaseAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAcresNull() {
                this[this.tableGetMADetails.BaseAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseRateNull() {
                return this.IsNull(this.tableGetMADetails.BaseRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseRateNull() {
                this[this.tableGetMADetails.BaseRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevyRateNull() {
                return this.IsNull(this.tableGetMADetails.LevyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevyRateNull() {
                this[this.tableGetMADetails.LevyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteBaseNull() {
                return this.IsNull(this.tableGetMADetails.SiteBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteBaseNull() {
                this[this.tableGetMADetails.SiteBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteRateNull() {
                return this.IsNull(this.tableGetMADetails.SiteRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteRateNull() {
                this[this.tableGetMADetails.SiteRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryBaseNull() {
                return this.IsNull(this.tableGetMADetails.DryBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryBaseNull() {
                this[this.tableGetMADetails.DryBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryRateNull() {
                return this.IsNull(this.tableGetMADetails.DryRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryRateNull() {
                this[this.tableGetMADetails.DryRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedBaseNull() {
                return this.IsNull(this.tableGetMADetails.IrrigatedBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedBaseNull() {
                this[this.tableGetMADetails.IrrigatedBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedRateNull() {
                return this.IsNull(this.tableGetMADetails.IrrigatedRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedRateNull() {
                this[this.tableGetMADetails.IrrigatedRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberBaseNull() {
                return this.IsNull(this.tableGetMADetails.TimberBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberBaseNull() {
                this[this.tableGetMADetails.TimberBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberRateNull() {
                return this.IsNull(this.tableGetMADetails.TimberRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberRateNull() {
                this[this.tableGetMADetails.TimberRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherBaseNull() {
                return this.IsNull(this.tableGetMADetails.OtherBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherBaseNull() {
                this[this.tableGetMADetails.OtherBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherRateNull() {
                return this.IsNull(this.tableGetMADetails.OtherRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherRateNull() {
                this[this.tableGetMADetails.OtherRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableGetMADetails.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableGetMADetails.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountyFeeNull() {
                return this.IsNull(this.tableGetMADetails.CountyFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountyFeeNull() {
                this[this.tableGetMADetails.CountyFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxLotSizeNull() {
                return this.IsNull(this.tableGetMADetails.MaxLotSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxLotSizeNull() {
                this[this.tableGetMADetails.MaxLotSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPAFeeNull() {
                return this.IsNull(this.tableGetMADetails.FPAFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPAFeeNull() {
                this[this.tableGetMADetails.FPAFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFFeeNull() {
                return this.IsNull(this.tableGetMADetails.LCFFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFFeeNull() {
                this[this.tableGetMADetails.LCFFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPARateNull() {
                return this.IsNull(this.tableGetMADetails.FPARateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPARateNull() {
                this[this.tableGetMADetails.FPARateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFRateNull() {
                return this.IsNull(this.tableGetMADetails.LCFRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFRateNull() {
                this[this.tableGetMADetails.LCFRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFlatFeeNull() {
                return this.IsNull(this.tableGetMADetails.TotalFlatFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFlatFeeNull() {
                this[this.tableGetMADetails.TotalFlatFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAcreRateNull() {
                return this.IsNull(this.tableGetMADetails.TotalAcreRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAcreRateNull() {
                this[this.tableGetMADetails.TotalAcreRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResidentialRateNull() {
                return this.IsNull(this.tableGetMADetails.ResidentialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResidentialRateNull() {
                this[this.tableGetMADetails.ResidentialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommercialRateNull() {
                return this.IsNull(this.tableGetMADetails.CommercialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommercialRateNull() {
                this[this.tableGetMADetails.CommercialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConservationBaseFeeNull() {
                return this.IsNull(this.tableGetMADetails.ConservationBaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConservationBaseFeeNull() {
                this[this.tableGetMADetails.ConservationBaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLakeRateNull() {
                return this.IsNull(this.tableGetMADetails.LakeRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLakeRateNull() {
                this[this.tableGetMADetails.LakeRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinSiteAcresNull() {
                return this.IsNull(this.tableGetMADetails.MinSiteAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinSiteAcresNull() {
                this[this.tableGetMADetails.MinSiteAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinDryAcresNull() {
                return this.IsNull(this.tableGetMADetails.MinDryAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinDryAcresNull() {
                this[this.tableGetMADetails.MinDryAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinIrrigatedAcresNull() {
                return this.IsNull(this.tableGetMADetails.MinIrrigatedAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinIrrigatedAcresNull() {
                this[this.tableGetMADetails.MinIrrigatedAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinTimberAcresNull() {
                return this.IsNull(this.tableGetMADetails.MinTimberAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinTimberAcresNull() {
                this[this.tableGetMADetails.MinTimberAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinOtherAcresNull() {
                return this.IsNull(this.tableGetMADetails.MinOtherAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinOtherAcresNull() {
                this[this.tableGetMADetails.MinOtherAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerAcreNull() {
                return this.IsNull(this.tableGetMADetails.PerAcreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerAcreNull() {
                this[this.tableGetMADetails.PerAcreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerParcelNull() {
                return this.IsNull(this.tableGetMADetails.PerParcelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerParcelNull() {
                this[this.tableGetMADetails.PerParcelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketRateNull() {
                return this.IsNull(this.tableGetMADetails.MarketRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketRateNull() {
                this[this.tableGetMADetails.MarketRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumNull() {
                return this.IsNull(this.tableGetMADetails.MinimumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumNull() {
                this[this.tableGetMADetails.MinimumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumNull() {
                return this.IsNull(this.tableGetMADetails.MaximumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumNull() {
                this[this.tableGetMADetails.MaximumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelRateNull() {
                return this.IsNull(this.tableGetMADetails.ParcelRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelRateNull() {
                this[this.tableGetMADetails.ParcelRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcreRateNull() {
                return this.IsNull(this.tableGetMADetails.AcreRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcreRateNull() {
                this[this.tableGetMADetails.AcreRateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveMiscAssessmentRow : global::System.Data.DataRow {
            
            private SaveMiscAssessmentDataTable tableSaveMiscAssessment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMiscAssessmentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveMiscAssessment = ((SaveMiscAssessmentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tableSaveMiscAssessment.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADTypeID {
                get {
                    try {
                        return ((int)(this[this.tableSaveMiscAssessment.MADTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADTypeID\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MADTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableSaveMiscAssessment.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictNumber {
                get {
                    try {
                        return ((string)(this[this.tableSaveMiscAssessment.DistrictNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictNumber\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.DistrictNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSaveMiscAssessment.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumCharge {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.MinimumChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimumCharge\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MinimumChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaximumAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.MaximumAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaximumAcres\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MaximumAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerAssessed {
                get {
                    try {
                        return ((bool)(this[this.tableSaveMiscAssessment.IsOwnerAssessedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOwnerAssessed\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.IsOwnerAssessedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.BaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseFee\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseAcres {
                get {
                    try {
                        return ((int)(this[this.tableSaveMiscAssessment.BaseAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseAcres\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.BaseAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.BaseRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.BaseRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LevyRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.LevyRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevyRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.LevyRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteBase {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.SiteBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteBase\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.SiteBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.SiteRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.SiteRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryBase {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.DryBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryBase\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.DryBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.DryRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.DryRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedBase {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.IrrigatedBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedBase\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.IrrigatedBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.IrrigatedRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.IrrigatedRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberBase {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.TimberBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberBase\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.TimberBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.TimberRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.TimberRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherBase {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.OtherBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherBase\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.OtherBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.OtherRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.OtherRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CountyFee {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.CountyFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountyFee\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.CountyFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxLotSize {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.MaxLotSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxLotSize\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MaxLotSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPAFee {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.FPAFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPAFee\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.FPAFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFFee {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.LCFFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFFee\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.LCFFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPARate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.FPARateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPARate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.FPARateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.LCFRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.LCFRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalFlatFee {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.TotalFlatFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFlatFee\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.TotalFlatFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAcreRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.TotalAcreRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAcreRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.TotalAcreRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResidentialRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.ResidentialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResidentialRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.ResidentialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommercialRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.CommercialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommercialRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.CommercialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ConservationBaseFee {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.ConservationBaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConservationBaseFee\' in table \'SaveMiscAssessment\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.ConservationBaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LakeRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.LakeRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LakeRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.LakeRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinSiteAcres {
                get {
                    try {
                        return ((int)(this[this.tableSaveMiscAssessment.MinSiteAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinSiteAcres\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MinSiteAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinDryAcres {
                get {
                    try {
                        return ((int)(this[this.tableSaveMiscAssessment.MinDryAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinDryAcres\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MinDryAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinIrrigatedAcres {
                get {
                    try {
                        return ((int)(this[this.tableSaveMiscAssessment.MinIrrigatedAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinIrrigatedAcres\' in table \'SaveMiscAssessment\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MinIrrigatedAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinTimberAcres {
                get {
                    try {
                        return ((int)(this[this.tableSaveMiscAssessment.MinTimberAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinTimberAcres\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MinTimberAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinOtherAcres {
                get {
                    try {
                        return ((int)(this[this.tableSaveMiscAssessment.MinOtherAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinOtherAcres\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MinOtherAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerAcre {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.PerAcreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerAcre\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.PerAcreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerParcel {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.PerParcelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerParcel\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.PerParcelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MarketRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.MarketRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MarketRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MarketRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Minimum {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.MinimumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Minimum\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MinimumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Maximum {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.MaximumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Maximum\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.MaximumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ParcelRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.ParcelRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.ParcelRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AcreRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMiscAssessment.AcreRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcreRate\' in table \'SaveMiscAssessment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMiscAssessment.AcreRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tableSaveMiscAssessment.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADTypeIDNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MADTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADTypeIDNull() {
                this[this.tableSaveMiscAssessment.MADTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableSaveMiscAssessment.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableSaveMiscAssessment.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNumberNull() {
                return this.IsNull(this.tableSaveMiscAssessment.DistrictNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNumberNull() {
                this[this.tableSaveMiscAssessment.DistrictNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSaveMiscAssessment.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSaveMiscAssessment.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumChargeNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MinimumChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumChargeNull() {
                this[this.tableSaveMiscAssessment.MinimumChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumAcresNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MaximumAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumAcresNull() {
                this[this.tableSaveMiscAssessment.MaximumAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOwnerAssessedNull() {
                return this.IsNull(this.tableSaveMiscAssessment.IsOwnerAssessedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOwnerAssessedNull() {
                this[this.tableSaveMiscAssessment.IsOwnerAssessedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tableSaveMiscAssessment.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tableSaveMiscAssessment.BaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAcresNull() {
                return this.IsNull(this.tableSaveMiscAssessment.BaseAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAcresNull() {
                this[this.tableSaveMiscAssessment.BaseAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.BaseRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseRateNull() {
                this[this.tableSaveMiscAssessment.BaseRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevyRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.LevyRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevyRateNull() {
                this[this.tableSaveMiscAssessment.LevyRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteBaseNull() {
                return this.IsNull(this.tableSaveMiscAssessment.SiteBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteBaseNull() {
                this[this.tableSaveMiscAssessment.SiteBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.SiteRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteRateNull() {
                this[this.tableSaveMiscAssessment.SiteRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryBaseNull() {
                return this.IsNull(this.tableSaveMiscAssessment.DryBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryBaseNull() {
                this[this.tableSaveMiscAssessment.DryBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.DryRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryRateNull() {
                this[this.tableSaveMiscAssessment.DryRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedBaseNull() {
                return this.IsNull(this.tableSaveMiscAssessment.IrrigatedBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedBaseNull() {
                this[this.tableSaveMiscAssessment.IrrigatedBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.IrrigatedRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedRateNull() {
                this[this.tableSaveMiscAssessment.IrrigatedRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberBaseNull() {
                return this.IsNull(this.tableSaveMiscAssessment.TimberBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberBaseNull() {
                this[this.tableSaveMiscAssessment.TimberBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.TimberRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberRateNull() {
                this[this.tableSaveMiscAssessment.TimberRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherBaseNull() {
                return this.IsNull(this.tableSaveMiscAssessment.OtherBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherBaseNull() {
                this[this.tableSaveMiscAssessment.OtherBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.OtherRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherRateNull() {
                this[this.tableSaveMiscAssessment.OtherRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableSaveMiscAssessment.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountyFeeNull() {
                return this.IsNull(this.tableSaveMiscAssessment.CountyFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountyFeeNull() {
                this[this.tableSaveMiscAssessment.CountyFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxLotSizeNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MaxLotSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxLotSizeNull() {
                this[this.tableSaveMiscAssessment.MaxLotSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPAFeeNull() {
                return this.IsNull(this.tableSaveMiscAssessment.FPAFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPAFeeNull() {
                this[this.tableSaveMiscAssessment.FPAFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFFeeNull() {
                return this.IsNull(this.tableSaveMiscAssessment.LCFFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFFeeNull() {
                this[this.tableSaveMiscAssessment.LCFFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPARateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.FPARateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPARateNull() {
                this[this.tableSaveMiscAssessment.FPARateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.LCFRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFRateNull() {
                this[this.tableSaveMiscAssessment.LCFRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFlatFeeNull() {
                return this.IsNull(this.tableSaveMiscAssessment.TotalFlatFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFlatFeeNull() {
                this[this.tableSaveMiscAssessment.TotalFlatFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAcreRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.TotalAcreRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAcreRateNull() {
                this[this.tableSaveMiscAssessment.TotalAcreRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResidentialRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.ResidentialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResidentialRateNull() {
                this[this.tableSaveMiscAssessment.ResidentialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommercialRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.CommercialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommercialRateNull() {
                this[this.tableSaveMiscAssessment.CommercialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConservationBaseFeeNull() {
                return this.IsNull(this.tableSaveMiscAssessment.ConservationBaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConservationBaseFeeNull() {
                this[this.tableSaveMiscAssessment.ConservationBaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLakeRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.LakeRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLakeRateNull() {
                this[this.tableSaveMiscAssessment.LakeRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinSiteAcresNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MinSiteAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinSiteAcresNull() {
                this[this.tableSaveMiscAssessment.MinSiteAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinDryAcresNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MinDryAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinDryAcresNull() {
                this[this.tableSaveMiscAssessment.MinDryAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinIrrigatedAcresNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MinIrrigatedAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinIrrigatedAcresNull() {
                this[this.tableSaveMiscAssessment.MinIrrigatedAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinTimberAcresNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MinTimberAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinTimberAcresNull() {
                this[this.tableSaveMiscAssessment.MinTimberAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinOtherAcresNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MinOtherAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinOtherAcresNull() {
                this[this.tableSaveMiscAssessment.MinOtherAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerAcreNull() {
                return this.IsNull(this.tableSaveMiscAssessment.PerAcreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerAcreNull() {
                this[this.tableSaveMiscAssessment.PerAcreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerParcelNull() {
                return this.IsNull(this.tableSaveMiscAssessment.PerParcelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerParcelNull() {
                this[this.tableSaveMiscAssessment.PerParcelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarketRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MarketRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarketRateNull() {
                this[this.tableSaveMiscAssessment.MarketRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MinimumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumNull() {
                this[this.tableSaveMiscAssessment.MinimumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaximumNull() {
                return this.IsNull(this.tableSaveMiscAssessment.MaximumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaximumNull() {
                this[this.tableSaveMiscAssessment.MaximumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.ParcelRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelRateNull() {
                this[this.tableSaveMiscAssessment.ParcelRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcreRateNull() {
                return this.IsNull(this.tableSaveMiscAssessment.AcreRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcreRateNull() {
                this[this.tableSaveMiscAssessment.AcreRateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AccountRequiredTableRow : global::System.Data.DataRow {
            
            private AccountRequiredTableDataTable tableAccountRequiredTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountRequiredTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountRequiredTable = ((AccountRequiredTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountRequired {
                get {
                    try {
                        return ((bool)(this[this.tableAccountRequiredTable.IsAccountRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAccountRequired\' in table \'AccountRequiredTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableAccountRequiredTable.IsAccountRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAccountRequiredNull() {
                return this.IsNull(this.tableAccountRequiredTable.IsAccountRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAccountRequiredNull() {
                this[this.tableAccountRequiredTable.IsAccountRequiredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMADistributionItemRowChangeEvent : global::System.EventArgs {
            
            private ListMADistributionItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADistributionItemRowChangeEvent(ListMADistributionItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMADistributionItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMADetailsRowChangeEvent : global::System.EventArgs {
            
            private GetMADetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADetailsRowChangeEvent(GetMADetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMADetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveMiscAssessmentRowChangeEvent : global::System.EventArgs {
            
            private SaveMiscAssessmentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMiscAssessmentRowChangeEvent(SaveMiscAssessmentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMiscAssessmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AccountRequiredTableRowChangeEvent : global::System.EventArgs {
            
            private AccountRequiredTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRequiredTableRowChangeEvent(AccountRequiredTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRequiredTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591