//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F11011ExciseStatementData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F11011ExciseStatementData : global::System.Data.DataSet {
        
        private GetExciseStatementDataTable tableGetExciseStatement;
        
        private SaveExciseReceiptDataTable tableSaveExciseReceipt;
        
        private GetExciseReceiptDataTable tableGetExciseReceipt;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F11011ExciseStatementData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F11011ExciseStatementData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetExciseStatement"] != null)) {
                    base.Tables.Add(new GetExciseStatementDataTable(ds.Tables["GetExciseStatement"]));
                }
                if ((ds.Tables["SaveExciseReceipt"] != null)) {
                    base.Tables.Add(new SaveExciseReceiptDataTable(ds.Tables["SaveExciseReceipt"]));
                }
                if ((ds.Tables["GetExciseReceipt"] != null)) {
                    base.Tables.Add(new GetExciseReceiptDataTable(ds.Tables["GetExciseReceipt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetExciseStatementDataTable GetExciseStatement {
            get {
                return this.tableGetExciseStatement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveExciseReceiptDataTable SaveExciseReceipt {
            get {
                return this.tableSaveExciseReceipt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetExciseReceiptDataTable GetExciseReceipt {
            get {
                return this.tableGetExciseReceipt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F11011ExciseStatementData cln = ((F11011ExciseStatementData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetExciseStatement"] != null)) {
                    base.Tables.Add(new GetExciseStatementDataTable(ds.Tables["GetExciseStatement"]));
                }
                if ((ds.Tables["SaveExciseReceipt"] != null)) {
                    base.Tables.Add(new SaveExciseReceiptDataTable(ds.Tables["SaveExciseReceipt"]));
                }
                if ((ds.Tables["GetExciseReceipt"] != null)) {
                    base.Tables.Add(new GetExciseReceiptDataTable(ds.Tables["GetExciseReceipt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetExciseStatement = ((GetExciseStatementDataTable)(base.Tables["GetExciseStatement"]));
            if ((initTable == true)) {
                if ((this.tableGetExciseStatement != null)) {
                    this.tableGetExciseStatement.InitVars();
                }
            }
            this.tableSaveExciseReceipt = ((SaveExciseReceiptDataTable)(base.Tables["SaveExciseReceipt"]));
            if ((initTable == true)) {
                if ((this.tableSaveExciseReceipt != null)) {
                    this.tableSaveExciseReceipt.InitVars();
                }
            }
            this.tableGetExciseReceipt = ((GetExciseReceiptDataTable)(base.Tables["GetExciseReceipt"]));
            if ((initTable == true)) {
                if ((this.tableGetExciseReceipt != null)) {
                    this.tableGetExciseReceipt.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F11011ExciseStatementData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F11011ExciseStatementData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetExciseStatement = new GetExciseStatementDataTable();
            base.Tables.Add(this.tableGetExciseStatement);
            this.tableSaveExciseReceipt = new SaveExciseReceiptDataTable();
            base.Tables.Add(this.tableSaveExciseReceipt);
            this.tableGetExciseReceipt = new GetExciseReceiptDataTable();
            base.Tables.Add(this.tableGetExciseReceipt);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetExciseStatement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveExciseReceipt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetExciseReceipt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F11011ExciseStatementData ds = new F11011ExciseStatementData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetExciseStatementRowChangeEventHandler(object sender, GetExciseStatementRowChangeEvent e);
        
        public delegate void SaveExciseReceiptRowChangeEventHandler(object sender, SaveExciseReceiptRowChangeEvent e);
        
        public delegate void GetExciseReceiptRowChangeEventHandler(object sender, GetExciseReceiptRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetExciseStatementDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnSaleDate;
            
            private global::System.Data.DataColumn columnFormDate;
            
            private global::System.Data.DataColumn columnPaymentDate;
            
            private global::System.Data.DataColumn columnMobileHome;
            
            private global::System.Data.DataColumn columnReceiptNumber;
            
            private global::System.Data.DataColumn columnReceiptID;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnTaxableSalePrice;
            
            private global::System.Data.DataColumn columnTaxCode;
            
            private global::System.Data.DataColumn columnGrantor;
            
            private global::System.Data.DataColumn columnGrantorOwnerID;
            
            private global::System.Data.DataColumn columnGrantee;
            
            private global::System.Data.DataColumn columnGranteeOwnerID;
            
            private global::System.Data.DataColumn columnPPaymentID;
            
            private global::System.Data.DataColumn columnReceiptReport;
            
            private global::System.Data.DataColumn columnExciseRateID;
            
            private global::System.Data.DataColumn columnIsEditable;
            
            private global::System.Data.DataColumn columnReceiptBy;
            
            private global::System.Data.DataColumn columnPostID;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseStatementDataTable() {
                this.TableName = "GetExciseStatement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExciseStatementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetExciseStatementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleDateColumn {
                get {
                    return this.columnSaleDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormDateColumn {
                get {
                    return this.columnFormDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileHomeColumn {
                get {
                    return this.columnMobileHome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptNumberColumn {
                get {
                    return this.columnReceiptNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptIDColumn {
                get {
                    return this.columnReceiptID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableSalePriceColumn {
                get {
                    return this.columnTaxableSalePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxCodeColumn {
                get {
                    return this.columnTaxCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantorColumn {
                get {
                    return this.columnGrantor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantorOwnerIDColumn {
                get {
                    return this.columnGrantorOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteeColumn {
                get {
                    return this.columnGrantee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteeOwnerIDColumn {
                get {
                    return this.columnGranteeOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PPaymentIDColumn {
                get {
                    return this.columnPPaymentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptReportColumn {
                get {
                    return this.columnReceiptReport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseRateIDColumn {
                get {
                    return this.columnExciseRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEditableColumn {
                get {
                    return this.columnIsEditable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptByColumn {
                get {
                    return this.columnReceiptBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostIDColumn {
                get {
                    return this.columnPostID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseStatementRow this[int index] {
                get {
                    return ((GetExciseStatementRow)(this.Rows[index]));
                }
            }
            
            public event GetExciseStatementRowChangeEventHandler GetExciseStatementRowChanging;
            
            public event GetExciseStatementRowChangeEventHandler GetExciseStatementRowChanged;
            
            public event GetExciseStatementRowChangeEventHandler GetExciseStatementRowDeleting;
            
            public event GetExciseStatementRowChangeEventHandler GetExciseStatementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetExciseStatementRow(GetExciseStatementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseStatementRow AddGetExciseStatementRow(
                        int StatementID, 
                        string StatementNumber, 
                        string ParcelNumber, 
                        string SaleDate, 
                        string FormDate, 
                        string PaymentDate, 
                        string MobileHome, 
                        string ReceiptNumber, 
                        int ReceiptID, 
                        string District, 
                        decimal TaxableSalePrice, 
                        string TaxCode, 
                        string Grantor, 
                        int GrantorOwnerID, 
                        string Grantee, 
                        int GranteeOwnerID, 
                        int PPaymentID, 
                        int ReceiptReport, 
                        int ExciseRateID, 
                        bool IsEditable, 
                        string ReceiptBy, 
                        int PostID, 
                        string OwnerName) {
                GetExciseStatementRow rowGetExciseStatementRow = ((GetExciseStatementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        StatementNumber,
                        ParcelNumber,
                        SaleDate,
                        FormDate,
                        PaymentDate,
                        MobileHome,
                        ReceiptNumber,
                        ReceiptID,
                        District,
                        TaxableSalePrice,
                        TaxCode,
                        Grantor,
                        GrantorOwnerID,
                        Grantee,
                        GranteeOwnerID,
                        PPaymentID,
                        ReceiptReport,
                        ExciseRateID,
                        IsEditable,
                        ReceiptBy,
                        PostID,
                        OwnerName};
                rowGetExciseStatementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetExciseStatementRow);
                return rowGetExciseStatementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetExciseStatementDataTable cln = ((GetExciseStatementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetExciseStatementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnSaleDate = base.Columns["SaleDate"];
                this.columnFormDate = base.Columns["FormDate"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnMobileHome = base.Columns["MobileHome"];
                this.columnReceiptNumber = base.Columns["ReceiptNumber"];
                this.columnReceiptID = base.Columns["ReceiptID"];
                this.columnDistrict = base.Columns["District"];
                this.columnTaxableSalePrice = base.Columns["TaxableSalePrice"];
                this.columnTaxCode = base.Columns["TaxCode"];
                this.columnGrantor = base.Columns["Grantor"];
                this.columnGrantorOwnerID = base.Columns["GrantorOwnerID"];
                this.columnGrantee = base.Columns["Grantee"];
                this.columnGranteeOwnerID = base.Columns["GranteeOwnerID"];
                this.columnPPaymentID = base.Columns["PPaymentID"];
                this.columnReceiptReport = base.Columns["ReceiptReport"];
                this.columnExciseRateID = base.Columns["ExciseRateID"];
                this.columnIsEditable = base.Columns["IsEditable"];
                this.columnReceiptBy = base.Columns["ReceiptBy"];
                this.columnPostID = base.Columns["PostID"];
                this.columnOwnerName = base.Columns["OwnerName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnSaleDate = new global::System.Data.DataColumn("SaleDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleDate);
                this.columnFormDate = new global::System.Data.DataColumn("FormDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormDate);
                this.columnPaymentDate = new global::System.Data.DataColumn("PaymentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnMobileHome = new global::System.Data.DataColumn("MobileHome", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileHome);
                this.columnReceiptNumber = new global::System.Data.DataColumn("ReceiptNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptNumber);
                this.columnReceiptID = new global::System.Data.DataColumn("ReceiptID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptID);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnTaxableSalePrice = new global::System.Data.DataColumn("TaxableSalePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxableSalePrice);
                this.columnTaxCode = new global::System.Data.DataColumn("TaxCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCode);
                this.columnGrantor = new global::System.Data.DataColumn("Grantor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantor);
                this.columnGrantorOwnerID = new global::System.Data.DataColumn("GrantorOwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantorOwnerID);
                this.columnGrantee = new global::System.Data.DataColumn("Grantee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantee);
                this.columnGranteeOwnerID = new global::System.Data.DataColumn("GranteeOwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranteeOwnerID);
                this.columnPPaymentID = new global::System.Data.DataColumn("PPaymentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPPaymentID);
                this.columnReceiptReport = new global::System.Data.DataColumn("ReceiptReport", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptReport);
                this.columnExciseRateID = new global::System.Data.DataColumn("ExciseRateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseRateID);
                this.columnIsEditable = new global::System.Data.DataColumn("IsEditable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEditable);
                this.columnReceiptBy = new global::System.Data.DataColumn("ReceiptBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptBy);
                this.columnPostID = new global::System.Data.DataColumn("PostID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostID);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnDistrict.ReadOnly = true;
                this.columnTaxCode.ReadOnly = true;
                this.columnGrantor.MaxLength = 350;
                this.columnGrantee.MaxLength = 350;
                this.columnPPaymentID.ReadOnly = true;
                this.columnReceiptBy.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseStatementRow NewGetExciseStatementRow() {
                return ((GetExciseStatementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetExciseStatementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetExciseStatementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetExciseStatementRowChanged != null)) {
                    this.GetExciseStatementRowChanged(this, new GetExciseStatementRowChangeEvent(((GetExciseStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetExciseStatementRowChanging != null)) {
                    this.GetExciseStatementRowChanging(this, new GetExciseStatementRowChangeEvent(((GetExciseStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetExciseStatementRowDeleted != null)) {
                    this.GetExciseStatementRowDeleted(this, new GetExciseStatementRowChangeEvent(((GetExciseStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetExciseStatementRowDeleting != null)) {
                    this.GetExciseStatementRowDeleting(this, new GetExciseStatementRowChangeEvent(((GetExciseStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetExciseStatementRow(GetExciseStatementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F11011ExciseStatementData ds = new F11011ExciseStatementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetExciseStatementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveExciseReceiptDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnReceiptDate;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnPostID;
            
            private global::System.Data.DataColumn columnPostTypeID;
            
            private global::System.Data.DataColumn columnInterestDate;
            
            private global::System.Data.DataColumn columnPPaymentID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseReceiptDataTable() {
                this.TableName = "SaveExciseReceipt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveExciseReceiptDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveExciseReceiptDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptDateColumn {
                get {
                    return this.columnReceiptDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostIDColumn {
                get {
                    return this.columnPostID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostTypeIDColumn {
                get {
                    return this.columnPostTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestDateColumn {
                get {
                    return this.columnInterestDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PPaymentIDColumn {
                get {
                    return this.columnPPaymentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseReceiptRow this[int index] {
                get {
                    return ((SaveExciseReceiptRow)(this.Rows[index]));
                }
            }
            
            public event SaveExciseReceiptRowChangeEventHandler SaveExciseReceiptRowChanging;
            
            public event SaveExciseReceiptRowChangeEventHandler SaveExciseReceiptRowChanged;
            
            public event SaveExciseReceiptRowChangeEventHandler SaveExciseReceiptRowDeleting;
            
            public event SaveExciseReceiptRowChangeEventHandler SaveExciseReceiptRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveExciseReceiptRow(SaveExciseReceiptRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseReceiptRow AddSaveExciseReceiptRow(int StatementID, string ReceiptDate, int UserID, int PostID, int PostTypeID, string InterestDate, int PPaymentID) {
                SaveExciseReceiptRow rowSaveExciseReceiptRow = ((SaveExciseReceiptRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        ReceiptDate,
                        UserID,
                        PostID,
                        PostTypeID,
                        InterestDate,
                        PPaymentID};
                rowSaveExciseReceiptRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveExciseReceiptRow);
                return rowSaveExciseReceiptRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveExciseReceiptDataTable cln = ((SaveExciseReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveExciseReceiptDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnReceiptDate = base.Columns["ReceiptDate"];
                this.columnUserID = base.Columns["UserID"];
                this.columnPostID = base.Columns["PostID"];
                this.columnPostTypeID = base.Columns["PostTypeID"];
                this.columnInterestDate = base.Columns["InterestDate"];
                this.columnPPaymentID = base.Columns["PPaymentID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnReceiptDate = new global::System.Data.DataColumn("ReceiptDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDate);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnPostID = new global::System.Data.DataColumn("PostID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostID);
                this.columnPostTypeID = new global::System.Data.DataColumn("PostTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostTypeID);
                this.columnInterestDate = new global::System.Data.DataColumn("InterestDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestDate);
                this.columnPPaymentID = new global::System.Data.DataColumn("PPaymentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPPaymentID);
                this.columnStatementID.AllowDBNull = false;
                this.columnPPaymentID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseReceiptRow NewSaveExciseReceiptRow() {
                return ((SaveExciseReceiptRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveExciseReceiptRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveExciseReceiptRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveExciseReceiptRowChanged != null)) {
                    this.SaveExciseReceiptRowChanged(this, new SaveExciseReceiptRowChangeEvent(((SaveExciseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveExciseReceiptRowChanging != null)) {
                    this.SaveExciseReceiptRowChanging(this, new SaveExciseReceiptRowChangeEvent(((SaveExciseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveExciseReceiptRowDeleted != null)) {
                    this.SaveExciseReceiptRowDeleted(this, new SaveExciseReceiptRowChangeEvent(((SaveExciseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveExciseReceiptRowDeleting != null)) {
                    this.SaveExciseReceiptRowDeleting(this, new SaveExciseReceiptRowChangeEvent(((SaveExciseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveExciseReceiptRow(SaveExciseReceiptRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F11011ExciseStatementData ds = new F11011ExciseStatementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveExciseReceiptDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetExciseReceiptDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnItem;
            
            private global::System.Data.DataColumn columnStateRate;
            
            private global::System.Data.DataColumn columnStateAmount;
            
            private global::System.Data.DataColumn columnLocalRate;
            
            private global::System.Data.DataColumn columnLocalAmount;
            
            private global::System.Data.DataColumn columnFeeType;
            
            private global::System.Data.DataColumn columnFeeAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseReceiptDataTable() {
                this.TableName = "GetExciseReceipt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExciseReceiptDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetExciseReceiptDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemColumn {
                get {
                    return this.columnItem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateRateColumn {
                get {
                    return this.columnStateRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateAmountColumn {
                get {
                    return this.columnStateAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalRateColumn {
                get {
                    return this.columnLocalRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalAmountColumn {
                get {
                    return this.columnLocalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeTypeColumn {
                get {
                    return this.columnFeeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeAmountColumn {
                get {
                    return this.columnFeeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseReceiptRow this[int index] {
                get {
                    return ((GetExciseReceiptRow)(this.Rows[index]));
                }
            }
            
            public event GetExciseReceiptRowChangeEventHandler GetExciseReceiptRowChanging;
            
            public event GetExciseReceiptRowChangeEventHandler GetExciseReceiptRowChanged;
            
            public event GetExciseReceiptRowChangeEventHandler GetExciseReceiptRowDeleting;
            
            public event GetExciseReceiptRowChangeEventHandler GetExciseReceiptRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetExciseReceiptRow(GetExciseReceiptRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseReceiptRow AddGetExciseReceiptRow(string Item, float StateRate, decimal StateAmount, float LocalRate, decimal LocalAmount, string FeeType, decimal FeeAmount) {
                GetExciseReceiptRow rowGetExciseReceiptRow = ((GetExciseReceiptRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Item,
                        StateRate,
                        StateAmount,
                        LocalRate,
                        LocalAmount,
                        FeeType,
                        FeeAmount};
                rowGetExciseReceiptRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetExciseReceiptRow);
                return rowGetExciseReceiptRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetExciseReceiptDataTable cln = ((GetExciseReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetExciseReceiptDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItem = base.Columns["Item"];
                this.columnStateRate = base.Columns["StateRate"];
                this.columnStateAmount = base.Columns["StateAmount"];
                this.columnLocalRate = base.Columns["LocalRate"];
                this.columnLocalAmount = base.Columns["LocalAmount"];
                this.columnFeeType = base.Columns["FeeType"];
                this.columnFeeAmount = base.Columns["FeeAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItem = new global::System.Data.DataColumn("Item", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Item");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ItemColumn");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnItem");
                this.columnItem.ExtendedProperties.Add("Generator_UserColumnName", "Item");
                base.Columns.Add(this.columnItem);
                this.columnStateRate = new global::System.Data.DataColumn("StateRate", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateRate);
                this.columnStateAmount = new global::System.Data.DataColumn("StateAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateAmount);
                this.columnLocalRate = new global::System.Data.DataColumn("LocalRate", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalRate);
                this.columnLocalAmount = new global::System.Data.DataColumn("LocalAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalAmount);
                this.columnFeeType = new global::System.Data.DataColumn("FeeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeeType);
                this.columnFeeAmount = new global::System.Data.DataColumn("FeeAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeeAmount);
                this.columnItem.MaxLength = 10;
                this.columnFeeType.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseReceiptRow NewGetExciseReceiptRow() {
                return ((GetExciseReceiptRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetExciseReceiptRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetExciseReceiptRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetExciseReceiptRowChanged != null)) {
                    this.GetExciseReceiptRowChanged(this, new GetExciseReceiptRowChangeEvent(((GetExciseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetExciseReceiptRowChanging != null)) {
                    this.GetExciseReceiptRowChanging(this, new GetExciseReceiptRowChangeEvent(((GetExciseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetExciseReceiptRowDeleted != null)) {
                    this.GetExciseReceiptRowDeleted(this, new GetExciseReceiptRowChangeEvent(((GetExciseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetExciseReceiptRowDeleting != null)) {
                    this.GetExciseReceiptRowDeleting(this, new GetExciseReceiptRowChangeEvent(((GetExciseReceiptRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetExciseReceiptRow(GetExciseReceiptRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F11011ExciseStatementData ds = new F11011ExciseStatementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetExciseReceiptDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetExciseStatementRow : global::System.Data.DataRow {
            
            private GetExciseStatementDataTable tableGetExciseStatement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExciseStatementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetExciseStatement = ((GetExciseStatementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableGetExciseStatement.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.StatementNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementNumber\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SaleDate {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.SaleDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleDate\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.SaleDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormDate {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.FormDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormDate\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.FormDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentDate {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.PaymentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentDate\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.PaymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MobileHome {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.MobileHomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MobileHome\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.MobileHomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.ReceiptNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptNumber\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.ReceiptNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptID {
                get {
                    try {
                        return ((int)(this[this.tableGetExciseStatement.ReceiptIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptID\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.ReceiptIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxableSalePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableGetExciseStatement.TaxableSalePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxableSalePrice\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.TaxableSalePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxCode {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.TaxCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxCode\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.TaxCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grantor {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.GrantorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grantor\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.GrantorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GrantorOwnerID {
                get {
                    try {
                        return ((int)(this[this.tableGetExciseStatement.GrantorOwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrantorOwnerID\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.GrantorOwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grantee {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.GranteeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grantee\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.GranteeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GranteeOwnerID {
                get {
                    try {
                        return ((int)(this[this.tableGetExciseStatement.GranteeOwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GranteeOwnerID\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.GranteeOwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PPaymentID {
                get {
                    try {
                        return ((int)(this[this.tableGetExciseStatement.PPaymentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PPaymentID\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.PPaymentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptReport {
                get {
                    try {
                        return ((int)(this[this.tableGetExciseStatement.ReceiptReportColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptReport\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.ReceiptReportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExciseRateID {
                get {
                    try {
                        return ((int)(this[this.tableGetExciseStatement.ExciseRateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseRateID\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.ExciseRateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEditable {
                get {
                    try {
                        return ((bool)(this[this.tableGetExciseStatement.IsEditableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEditable\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.IsEditableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptBy {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.ReceiptByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptBy\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.ReceiptByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PostID {
                get {
                    try {
                        return ((int)(this[this.tableGetExciseStatement.PostIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostID\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.PostIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseStatement.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'GetExciseStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseStatement.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableGetExciseStatement.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableGetExciseStatement.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableGetExciseStatement.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableGetExciseStatement.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableGetExciseStatement.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableGetExciseStatement.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleDateNull() {
                return this.IsNull(this.tableGetExciseStatement.SaleDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleDateNull() {
                this[this.tableGetExciseStatement.SaleDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormDateNull() {
                return this.IsNull(this.tableGetExciseStatement.FormDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormDateNull() {
                this[this.tableGetExciseStatement.FormDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentDateNull() {
                return this.IsNull(this.tableGetExciseStatement.PaymentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentDateNull() {
                this[this.tableGetExciseStatement.PaymentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileHomeNull() {
                return this.IsNull(this.tableGetExciseStatement.MobileHomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileHomeNull() {
                this[this.tableGetExciseStatement.MobileHomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptNumberNull() {
                return this.IsNull(this.tableGetExciseStatement.ReceiptNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptNumberNull() {
                this[this.tableGetExciseStatement.ReceiptNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptIDNull() {
                return this.IsNull(this.tableGetExciseStatement.ReceiptIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptIDNull() {
                this[this.tableGetExciseStatement.ReceiptIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableGetExciseStatement.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableGetExciseStatement.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxableSalePriceNull() {
                return this.IsNull(this.tableGetExciseStatement.TaxableSalePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxableSalePriceNull() {
                this[this.tableGetExciseStatement.TaxableSalePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCodeNull() {
                return this.IsNull(this.tableGetExciseStatement.TaxCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCodeNull() {
                this[this.tableGetExciseStatement.TaxCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantorNull() {
                return this.IsNull(this.tableGetExciseStatement.GrantorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantorNull() {
                this[this.tableGetExciseStatement.GrantorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantorOwnerIDNull() {
                return this.IsNull(this.tableGetExciseStatement.GrantorOwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantorOwnerIDNull() {
                this[this.tableGetExciseStatement.GrantorOwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteeNull() {
                return this.IsNull(this.tableGetExciseStatement.GranteeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteeNull() {
                this[this.tableGetExciseStatement.GranteeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteeOwnerIDNull() {
                return this.IsNull(this.tableGetExciseStatement.GranteeOwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteeOwnerIDNull() {
                this[this.tableGetExciseStatement.GranteeOwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPPaymentIDNull() {
                return this.IsNull(this.tableGetExciseStatement.PPaymentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPPaymentIDNull() {
                this[this.tableGetExciseStatement.PPaymentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptReportNull() {
                return this.IsNull(this.tableGetExciseStatement.ReceiptReportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptReportNull() {
                this[this.tableGetExciseStatement.ReceiptReportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseRateIDNull() {
                return this.IsNull(this.tableGetExciseStatement.ExciseRateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseRateIDNull() {
                this[this.tableGetExciseStatement.ExciseRateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEditableNull() {
                return this.IsNull(this.tableGetExciseStatement.IsEditableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEditableNull() {
                this[this.tableGetExciseStatement.IsEditableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptByNull() {
                return this.IsNull(this.tableGetExciseStatement.ReceiptByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptByNull() {
                this[this.tableGetExciseStatement.ReceiptByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostIDNull() {
                return this.IsNull(this.tableGetExciseStatement.PostIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostIDNull() {
                this[this.tableGetExciseStatement.PostIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableGetExciseStatement.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableGetExciseStatement.OwnerNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveExciseReceiptRow : global::System.Data.DataRow {
            
            private SaveExciseReceiptDataTable tableSaveExciseReceipt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveExciseReceiptRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveExciseReceipt = ((SaveExciseReceiptDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableSaveExciseReceipt.StatementIDColumn]));
                }
                set {
                    this[this.tableSaveExciseReceipt.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptDate {
                get {
                    try {
                        return ((string)(this[this.tableSaveExciseReceipt.ReceiptDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptDate\' in table \'SaveExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseReceipt.ReceiptDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseReceipt.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'SaveExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseReceipt.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PostID {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseReceipt.PostIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostID\' in table \'SaveExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseReceipt.PostIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PostTypeID {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseReceipt.PostTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostTypeID\' in table \'SaveExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseReceipt.PostTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InterestDate {
                get {
                    try {
                        return ((string)(this[this.tableSaveExciseReceipt.InterestDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestDate\' in table \'SaveExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseReceipt.InterestDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PPaymentID {
                get {
                    try {
                        return ((int)(this[this.tableSaveExciseReceipt.PPaymentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PPaymentID\' in table \'SaveExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveExciseReceipt.PPaymentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptDateNull() {
                return this.IsNull(this.tableSaveExciseReceipt.ReceiptDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptDateNull() {
                this[this.tableSaveExciseReceipt.ReceiptDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableSaveExciseReceipt.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableSaveExciseReceipt.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostIDNull() {
                return this.IsNull(this.tableSaveExciseReceipt.PostIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostIDNull() {
                this[this.tableSaveExciseReceipt.PostIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostTypeIDNull() {
                return this.IsNull(this.tableSaveExciseReceipt.PostTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostTypeIDNull() {
                this[this.tableSaveExciseReceipt.PostTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterestDateNull() {
                return this.IsNull(this.tableSaveExciseReceipt.InterestDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterestDateNull() {
                this[this.tableSaveExciseReceipt.InterestDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPPaymentIDNull() {
                return this.IsNull(this.tableSaveExciseReceipt.PPaymentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPPaymentIDNull() {
                this[this.tableSaveExciseReceipt.PPaymentIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetExciseReceiptRow : global::System.Data.DataRow {
            
            private GetExciseReceiptDataTable tableGetExciseReceipt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetExciseReceiptRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetExciseReceipt = ((GetExciseReceiptDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Item {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseReceipt.ItemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Item\' in table \'GetExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseReceipt.ItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float StateRate {
                get {
                    try {
                        return ((float)(this[this.tableGetExciseReceipt.StateRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateRate\' in table \'GetExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseReceipt.StateRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StateAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableGetExciseReceipt.StateAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateAmount\' in table \'GetExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseReceipt.StateAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float LocalRate {
                get {
                    try {
                        return ((float)(this[this.tableGetExciseReceipt.LocalRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalRate\' in table \'GetExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseReceipt.LocalRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LocalAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableGetExciseReceipt.LocalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalAmount\' in table \'GetExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseReceipt.LocalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeeType {
                get {
                    try {
                        return ((string)(this[this.tableGetExciseReceipt.FeeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeeType\' in table \'GetExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseReceipt.FeeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FeeAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableGetExciseReceipt.FeeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeeAmount\' in table \'GetExciseReceipt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetExciseReceipt.FeeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNull() {
                return this.IsNull(this.tableGetExciseReceipt.ItemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNull() {
                this[this.tableGetExciseReceipt.ItemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateRateNull() {
                return this.IsNull(this.tableGetExciseReceipt.StateRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateRateNull() {
                this[this.tableGetExciseReceipt.StateRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateAmountNull() {
                return this.IsNull(this.tableGetExciseReceipt.StateAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateAmountNull() {
                this[this.tableGetExciseReceipt.StateAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalRateNull() {
                return this.IsNull(this.tableGetExciseReceipt.LocalRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalRateNull() {
                this[this.tableGetExciseReceipt.LocalRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalAmountNull() {
                return this.IsNull(this.tableGetExciseReceipt.LocalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalAmountNull() {
                this[this.tableGetExciseReceipt.LocalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeTypeNull() {
                return this.IsNull(this.tableGetExciseReceipt.FeeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeTypeNull() {
                this[this.tableGetExciseReceipt.FeeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeAmountNull() {
                return this.IsNull(this.tableGetExciseReceipt.FeeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeAmountNull() {
                this[this.tableGetExciseReceipt.FeeAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetExciseStatementRowChangeEvent : global::System.EventArgs {
            
            private GetExciseStatementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseStatementRowChangeEvent(GetExciseStatementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseStatementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveExciseReceiptRowChangeEvent : global::System.EventArgs {
            
            private SaveExciseReceiptRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseReceiptRowChangeEvent(SaveExciseReceiptRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveExciseReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetExciseReceiptRowChangeEvent : global::System.EventArgs {
            
            private GetExciseReceiptRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseReceiptRowChangeEvent(GetExciseReceiptRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetExciseReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591