//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F25000ParcelHeaderData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F25000ParcelHeaderData : global::System.Data.DataSet {
        
        private updateParcelDetailsDataTableDataTable tableupdateParcelDetailsDataTable;
        
        private f25000ParcelHeaderDataTable tablef25000ParcelHeader;
        
        private f25000ListParcelImprovementDataTable tablef25000ListParcelImprovement;
        
        private f25000ListParcelLandTypesDataTable tablef25000ListParcelLandTypes;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F25000ParcelHeaderData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F25000ParcelHeaderData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["updateParcelDetailsDataTable"] != null)) {
                    base.Tables.Add(new updateParcelDetailsDataTableDataTable(ds.Tables["updateParcelDetailsDataTable"]));
                }
                if ((ds.Tables["f25000ParcelHeader"] != null)) {
                    base.Tables.Add(new f25000ParcelHeaderDataTable(ds.Tables["f25000ParcelHeader"]));
                }
                if ((ds.Tables["f25000ListParcelImprovement"] != null)) {
                    base.Tables.Add(new f25000ListParcelImprovementDataTable(ds.Tables["f25000ListParcelImprovement"]));
                }
                if ((ds.Tables["f25000ListParcelLandTypes"] != null)) {
                    base.Tables.Add(new f25000ListParcelLandTypesDataTable(ds.Tables["f25000ListParcelLandTypes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public updateParcelDetailsDataTableDataTable updateParcelDetailsDataTable {
            get {
                return this.tableupdateParcelDetailsDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f25000ParcelHeaderDataTable f25000ParcelHeader {
            get {
                return this.tablef25000ParcelHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f25000ListParcelImprovementDataTable f25000ListParcelImprovement {
            get {
                return this.tablef25000ListParcelImprovement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f25000ListParcelLandTypesDataTable f25000ListParcelLandTypes {
            get {
                return this.tablef25000ListParcelLandTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F25000ParcelHeaderData cln = ((F25000ParcelHeaderData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["updateParcelDetailsDataTable"] != null)) {
                    base.Tables.Add(new updateParcelDetailsDataTableDataTable(ds.Tables["updateParcelDetailsDataTable"]));
                }
                if ((ds.Tables["f25000ParcelHeader"] != null)) {
                    base.Tables.Add(new f25000ParcelHeaderDataTable(ds.Tables["f25000ParcelHeader"]));
                }
                if ((ds.Tables["f25000ListParcelImprovement"] != null)) {
                    base.Tables.Add(new f25000ListParcelImprovementDataTable(ds.Tables["f25000ListParcelImprovement"]));
                }
                if ((ds.Tables["f25000ListParcelLandTypes"] != null)) {
                    base.Tables.Add(new f25000ListParcelLandTypesDataTable(ds.Tables["f25000ListParcelLandTypes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableupdateParcelDetailsDataTable = ((updateParcelDetailsDataTableDataTable)(base.Tables["updateParcelDetailsDataTable"]));
            if ((initTable == true)) {
                if ((this.tableupdateParcelDetailsDataTable != null)) {
                    this.tableupdateParcelDetailsDataTable.InitVars();
                }
            }
            this.tablef25000ParcelHeader = ((f25000ParcelHeaderDataTable)(base.Tables["f25000ParcelHeader"]));
            if ((initTable == true)) {
                if ((this.tablef25000ParcelHeader != null)) {
                    this.tablef25000ParcelHeader.InitVars();
                }
            }
            this.tablef25000ListParcelImprovement = ((f25000ListParcelImprovementDataTable)(base.Tables["f25000ListParcelImprovement"]));
            if ((initTable == true)) {
                if ((this.tablef25000ListParcelImprovement != null)) {
                    this.tablef25000ListParcelImprovement.InitVars();
                }
            }
            this.tablef25000ListParcelLandTypes = ((f25000ListParcelLandTypesDataTable)(base.Tables["f25000ListParcelLandTypes"]));
            if ((initTable == true)) {
                if ((this.tablef25000ListParcelLandTypes != null)) {
                    this.tablef25000ListParcelLandTypes.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F25000ParcelHeaderData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F25000ParcelHeaderData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableupdateParcelDetailsDataTable = new updateParcelDetailsDataTableDataTable();
            base.Tables.Add(this.tableupdateParcelDetailsDataTable);
            this.tablef25000ParcelHeader = new f25000ParcelHeaderDataTable();
            base.Tables.Add(this.tablef25000ParcelHeader);
            this.tablef25000ListParcelImprovement = new f25000ListParcelImprovementDataTable();
            base.Tables.Add(this.tablef25000ListParcelImprovement);
            this.tablef25000ListParcelLandTypes = new f25000ListParcelLandTypesDataTable();
            base.Tables.Add(this.tablef25000ListParcelLandTypes);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeupdateParcelDetailsDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef25000ParcelHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef25000ListParcelImprovement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef25000ListParcelLandTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F25000ParcelHeaderData ds = new F25000ParcelHeaderData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void updateParcelDetailsDataTableRowChangeEventHandler(object sender, updateParcelDetailsDataTableRowChangeEvent e);
        
        public delegate void f25000ParcelHeaderRowChangeEventHandler(object sender, f25000ParcelHeaderRowChangeEvent e);
        
        public delegate void f25000ListParcelImprovementRowChangeEventHandler(object sender, f25000ListParcelImprovementRowChangeEvent e);
        
        public delegate void f25000ListParcelLandTypesRowChangeEventHandler(object sender, f25000ListParcelLandTypesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class updateParcelDetailsDataTableDataTable : global::System.Data.TypedTableBase<updateParcelDetailsDataTableRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnTaxDistrictID;
            
            private global::System.Data.DataColumn columnStateCode;
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnImprovementID;
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnMID1;
            
            private global::System.Data.DataColumn columnMID2;
            
            private global::System.Data.DataColumn columnMID3;
            
            private global::System.Data.DataColumn columnMID4;
            
            private global::System.Data.DataColumn columnMID5;
            
            private global::System.Data.DataColumn columnMID6;
            
            private global::System.Data.DataColumn columnMID7;
            
            private global::System.Data.DataColumn columnMID8;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelDetailsDataTableDataTable() {
                this.TableName = "updateParcelDetailsDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal updateParcelDetailsDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected updateParcelDetailsDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxDistrictIDColumn {
                get {
                    return this.columnTaxDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateCodeColumn {
                get {
                    return this.columnStateCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementIDColumn {
                get {
                    return this.columnImprovementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID1Column {
                get {
                    return this.columnMID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID2Column {
                get {
                    return this.columnMID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID3Column {
                get {
                    return this.columnMID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID4Column {
                get {
                    return this.columnMID4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID5Column {
                get {
                    return this.columnMID5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID6Column {
                get {
                    return this.columnMID6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID7Column {
                get {
                    return this.columnMID7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID8Column {
                get {
                    return this.columnMID8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelDetailsDataTableRow this[int index] {
                get {
                    return ((updateParcelDetailsDataTableRow)(this.Rows[index]));
                }
            }
            
            public event updateParcelDetailsDataTableRowChangeEventHandler updateParcelDetailsDataTableRowChanging;
            
            public event updateParcelDetailsDataTableRowChangeEventHandler updateParcelDetailsDataTableRowChanged;
            
            public event updateParcelDetailsDataTableRowChangeEventHandler updateParcelDetailsDataTableRowDeleting;
            
            public event updateParcelDetailsDataTableRowChangeEventHandler updateParcelDetailsDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddupdateParcelDetailsDataTableRow(updateParcelDetailsDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelDetailsDataTableRow AddupdateParcelDetailsDataTableRow(string ParcelID, string TaxDistrictID, string StateCode, string NBHDID, int ImprovementID, int LandTypeID, string MID1, string MID2, string MID3, string MID4, string MID5, string MID6, string MID7, string MID8) {
                updateParcelDetailsDataTableRow rowupdateParcelDetailsDataTableRow = ((updateParcelDetailsDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        TaxDistrictID,
                        StateCode,
                        NBHDID,
                        ImprovementID,
                        LandTypeID,
                        MID1,
                        MID2,
                        MID3,
                        MID4,
                        MID5,
                        MID6,
                        MID7,
                        MID8};
                rowupdateParcelDetailsDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowupdateParcelDetailsDataTableRow);
                return rowupdateParcelDetailsDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                updateParcelDetailsDataTableDataTable cln = ((updateParcelDetailsDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new updateParcelDetailsDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnTaxDistrictID = base.Columns["TaxDistrictID"];
                this.columnStateCode = base.Columns["StateCode"];
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnImprovementID = base.Columns["ImprovementID"];
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnMID1 = base.Columns["MID1"];
                this.columnMID2 = base.Columns["MID2"];
                this.columnMID3 = base.Columns["MID3"];
                this.columnMID4 = base.Columns["MID4"];
                this.columnMID5 = base.Columns["MID5"];
                this.columnMID6 = base.Columns["MID6"];
                this.columnMID7 = base.Columns["MID7"];
                this.columnMID8 = base.Columns["MID8"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnTaxDistrictID = new global::System.Data.DataColumn("TaxDistrictID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxDistrictID);
                this.columnStateCode = new global::System.Data.DataColumn("StateCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateCode);
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnImprovementID = new global::System.Data.DataColumn("ImprovementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementID);
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnMID1 = new global::System.Data.DataColumn("MID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID1);
                this.columnMID2 = new global::System.Data.DataColumn("MID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID2);
                this.columnMID3 = new global::System.Data.DataColumn("MID3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID3);
                this.columnMID4 = new global::System.Data.DataColumn("MID4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID4);
                this.columnMID5 = new global::System.Data.DataColumn("MID5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID5);
                this.columnMID6 = new global::System.Data.DataColumn("MID6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID6);
                this.columnMID7 = new global::System.Data.DataColumn("MID7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID7);
                this.columnMID8 = new global::System.Data.DataColumn("MID8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID8);
                this.columnStateCode.MaxLength = 50;
                this.columnMID1.MaxLength = 50;
                this.columnMID2.MaxLength = 50;
                this.columnMID3.MaxLength = 50;
                this.columnMID4.MaxLength = 50;
                this.columnMID5.MaxLength = 50;
                this.columnMID6.MaxLength = 50;
                this.columnMID7.MaxLength = 50;
                this.columnMID8.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelDetailsDataTableRow NewupdateParcelDetailsDataTableRow() {
                return ((updateParcelDetailsDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new updateParcelDetailsDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(updateParcelDetailsDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.updateParcelDetailsDataTableRowChanged != null)) {
                    this.updateParcelDetailsDataTableRowChanged(this, new updateParcelDetailsDataTableRowChangeEvent(((updateParcelDetailsDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.updateParcelDetailsDataTableRowChanging != null)) {
                    this.updateParcelDetailsDataTableRowChanging(this, new updateParcelDetailsDataTableRowChangeEvent(((updateParcelDetailsDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.updateParcelDetailsDataTableRowDeleted != null)) {
                    this.updateParcelDetailsDataTableRowDeleted(this, new updateParcelDetailsDataTableRowChangeEvent(((updateParcelDetailsDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.updateParcelDetailsDataTableRowDeleting != null)) {
                    this.updateParcelDetailsDataTableRowDeleting(this, new updateParcelDetailsDataTableRowChangeEvent(((updateParcelDetailsDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveupdateParcelDetailsDataTableRow(updateParcelDetailsDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25000ParcelHeaderData ds = new F25000ParcelHeaderData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "updateParcelDetailsDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f25000ParcelHeaderDataTable : global::System.Data.TypedTableBase<f25000ParcelHeaderRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnParcelTypeID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnRetired;
            
            private global::System.Data.DataColumn columnExempt;
            
            private global::System.Data.DataColumn columnLockAdminBy;
            
            private global::System.Data.DataColumn columnLockAppraisalBy;
            
            private global::System.Data.DataColumn columnLockValueBy;
            
            private global::System.Data.DataColumn columnEvents;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnPrimaryOwner;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnDOR;
            
            private global::System.Data.DataColumn columnMID1;
            
            private global::System.Data.DataColumn columnMID2;
            
            private global::System.Data.DataColumn columnMID3;
            
            private global::System.Data.DataColumn columnMID4;
            
            private global::System.Data.DataColumn columnMID5;
            
            private global::System.Data.DataColumn columnLabel;
            
            private global::System.Data.DataColumn columnLabe2;
            
            private global::System.Data.DataColumn columnLabe3;
            
            private global::System.Data.DataColumn columnLabe4;
            
            private global::System.Data.DataColumn columnLabe5;
            
            private global::System.Data.DataColumn columnMask1;
            
            private global::System.Data.DataColumn columnMask2;
            
            private global::System.Data.DataColumn columnMask3;
            
            private global::System.Data.DataColumn columnMask4;
            
            private global::System.Data.DataColumn columnMask5;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnNeighborhoodGroup;
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            private global::System.Data.DataColumn columnAssessmentTypeID;
            
            private global::System.Data.DataColumn columnAssessmentType;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            private global::System.Data.DataColumn columnImprovementID;
            
            private global::System.Data.DataColumn columnImprovement;
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnLabe6;
            
            private global::System.Data.DataColumn columnLabe7;
            
            private global::System.Data.DataColumn columnLabe8;
            
            private global::System.Data.DataColumn columnMask6;
            
            private global::System.Data.DataColumn columnMask7;
            
            private global::System.Data.DataColumn columnMask8;
            
            private global::System.Data.DataColumn columnMID6;
            
            private global::System.Data.DataColumn columnMID7;
            
            private global::System.Data.DataColumn columnMID8;
            
            private global::System.Data.DataColumn columnUserWarning;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ParcelHeaderDataTable() {
                this.TableName = "f25000ParcelHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25000ParcelHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f25000ParcelHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeIDColumn {
                get {
                    return this.columnParcelTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RetiredColumn {
                get {
                    return this.columnRetired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptColumn {
                get {
                    return this.columnExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockAdminByColumn {
                get {
                    return this.columnLockAdminBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockAppraisalByColumn {
                get {
                    return this.columnLockAppraisalBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockValueByColumn {
                get {
                    return this.columnLockValueBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventsColumn {
                get {
                    return this.columnEvents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryOwnerColumn {
                get {
                    return this.columnPrimaryOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DORColumn {
                get {
                    return this.columnDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID1Column {
                get {
                    return this.columnMID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID2Column {
                get {
                    return this.columnMID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID3Column {
                get {
                    return this.columnMID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID4Column {
                get {
                    return this.columnMID4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID5Column {
                get {
                    return this.columnMID5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe2Column {
                get {
                    return this.columnLabe2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe3Column {
                get {
                    return this.columnLabe3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe4Column {
                get {
                    return this.columnLabe4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe5Column {
                get {
                    return this.columnLabe5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask1Column {
                get {
                    return this.columnMask1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask2Column {
                get {
                    return this.columnMask2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask3Column {
                get {
                    return this.columnMask3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask4Column {
                get {
                    return this.columnMask4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask5Column {
                get {
                    return this.columnMask5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NeighborhoodGroupColumn {
                get {
                    return this.columnNeighborhoodGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeIDColumn {
                get {
                    return this.columnAssessmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeColumn {
                get {
                    return this.columnAssessmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementIDColumn {
                get {
                    return this.columnImprovementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementColumn {
                get {
                    return this.columnImprovement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe6Column {
                get {
                    return this.columnLabe6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe7Column {
                get {
                    return this.columnLabe7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe8Column {
                get {
                    return this.columnLabe8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask6Column {
                get {
                    return this.columnMask6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask7Column {
                get {
                    return this.columnMask7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask8Column {
                get {
                    return this.columnMask8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID6Column {
                get {
                    return this.columnMID6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID7Column {
                get {
                    return this.columnMID7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID8Column {
                get {
                    return this.columnMID8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserWarningColumn {
                get {
                    return this.columnUserWarning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ParcelHeaderRow this[int index] {
                get {
                    return ((f25000ParcelHeaderRow)(this.Rows[index]));
                }
            }
            
            public event f25000ParcelHeaderRowChangeEventHandler f25000ParcelHeaderRowChanging;
            
            public event f25000ParcelHeaderRowChangeEventHandler f25000ParcelHeaderRowChanged;
            
            public event f25000ParcelHeaderRowChangeEventHandler f25000ParcelHeaderRowDeleting;
            
            public event f25000ParcelHeaderRowChangeEventHandler f25000ParcelHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf25000ParcelHeaderRow(f25000ParcelHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ParcelHeaderRow Addf25000ParcelHeaderRow(
                        int ParcelID, 
                        string ParcelNumber, 
                        short RollYear, 
                        byte ParcelTypeID, 
                        string Type, 
                        string Retired, 
                        string Exempt, 
                        int LockAdminBy, 
                        int LockAppraisalBy, 
                        int LockValueBy, 
                        string Events, 
                        int EventID, 
                        string Description, 
                        string PrimaryOwner, 
                        string Situs, 
                        string Legal, 
                        string DOR, 
                        string MID1, 
                        string MID2, 
                        string MID3, 
                        string MID4, 
                        string MID5, 
                        string Label, 
                        string Labe2, 
                        string Labe3, 
                        string Labe4, 
                        string Labe5, 
                        string Mask1, 
                        string Mask2, 
                        string Mask3, 
                        string Mask4, 
                        string Mask5, 
                        string District, 
                        string NeighborhoodGroup, 
                        int NBHDID, 
                        int DistrictID, 
                        short AssessmentTypeID, 
                        string AssessmentType, 
                        int OwnerID, 
                        string PhoneNumber, 
                        int ImprovementID, 
                        string Improvement, 
                        int LandTypeID, 
                        string LandType, 
                        string Labe6, 
                        string Labe7, 
                        string Labe8, 
                        string Mask6, 
                        string Mask7, 
                        string Mask8, 
                        string MID6, 
                        string MID7, 
                        string MID8, 
                        string UserWarning) {
                f25000ParcelHeaderRow rowf25000ParcelHeaderRow = ((f25000ParcelHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        ParcelNumber,
                        RollYear,
                        ParcelTypeID,
                        Type,
                        Retired,
                        Exempt,
                        LockAdminBy,
                        LockAppraisalBy,
                        LockValueBy,
                        Events,
                        EventID,
                        Description,
                        PrimaryOwner,
                        Situs,
                        Legal,
                        DOR,
                        MID1,
                        MID2,
                        MID3,
                        MID4,
                        MID5,
                        Label,
                        Labe2,
                        Labe3,
                        Labe4,
                        Labe5,
                        Mask1,
                        Mask2,
                        Mask3,
                        Mask4,
                        Mask5,
                        District,
                        NeighborhoodGroup,
                        NBHDID,
                        DistrictID,
                        AssessmentTypeID,
                        AssessmentType,
                        OwnerID,
                        PhoneNumber,
                        ImprovementID,
                        Improvement,
                        LandTypeID,
                        LandType,
                        Labe6,
                        Labe7,
                        Labe8,
                        Mask6,
                        Mask7,
                        Mask8,
                        MID6,
                        MID7,
                        MID8,
                        UserWarning};
                rowf25000ParcelHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf25000ParcelHeaderRow);
                return rowf25000ParcelHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f25000ParcelHeaderDataTable cln = ((f25000ParcelHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f25000ParcelHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnParcelTypeID = base.Columns["ParcelTypeID"];
                this.columnType = base.Columns["Type"];
                this.columnRetired = base.Columns["Retired"];
                this.columnExempt = base.Columns["Exempt"];
                this.columnLockAdminBy = base.Columns["LockAdminBy"];
                this.columnLockAppraisalBy = base.Columns["LockAppraisalBy"];
                this.columnLockValueBy = base.Columns["LockValueBy"];
                this.columnEvents = base.Columns["Events"];
                this.columnEventID = base.Columns["EventID"];
                this.columnDescription = base.Columns["Description"];
                this.columnPrimaryOwner = base.Columns["PrimaryOwner"];
                this.columnSitus = base.Columns["Situs"];
                this.columnLegal = base.Columns["Legal"];
                this.columnDOR = base.Columns["DOR"];
                this.columnMID1 = base.Columns["MID1"];
                this.columnMID2 = base.Columns["MID2"];
                this.columnMID3 = base.Columns["MID3"];
                this.columnMID4 = base.Columns["MID4"];
                this.columnMID5 = base.Columns["MID5"];
                this.columnLabel = base.Columns["Label"];
                this.columnLabe2 = base.Columns["Labe2"];
                this.columnLabe3 = base.Columns["Labe3"];
                this.columnLabe4 = base.Columns["Labe4"];
                this.columnLabe5 = base.Columns["Labe5"];
                this.columnMask1 = base.Columns["Mask1"];
                this.columnMask2 = base.Columns["Mask2"];
                this.columnMask3 = base.Columns["Mask3"];
                this.columnMask4 = base.Columns["Mask4"];
                this.columnMask5 = base.Columns["Mask5"];
                this.columnDistrict = base.Columns["District"];
                this.columnNeighborhoodGroup = base.Columns["NeighborhoodGroup"];
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnDistrictID = base.Columns["DistrictID"];
                this.columnAssessmentTypeID = base.Columns["AssessmentTypeID"];
                this.columnAssessmentType = base.Columns["AssessmentType"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
                this.columnImprovementID = base.Columns["ImprovementID"];
                this.columnImprovement = base.Columns["Improvement"];
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnLabe6 = base.Columns["Labe6"];
                this.columnLabe7 = base.Columns["Labe7"];
                this.columnLabe8 = base.Columns["Labe8"];
                this.columnMask6 = base.Columns["Mask6"];
                this.columnMask7 = base.Columns["Mask7"];
                this.columnMask8 = base.Columns["Mask8"];
                this.columnMID6 = base.Columns["MID6"];
                this.columnMID7 = base.Columns["MID7"];
                this.columnMID8 = base.Columns["MID8"];
                this.columnUserWarning = base.Columns["UserWarning"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnParcelTypeID = new global::System.Data.DataColumn("ParcelTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelTypeID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnRetired = new global::System.Data.DataColumn("Retired", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetired);
                this.columnExempt = new global::System.Data.DataColumn("Exempt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExempt);
                this.columnLockAdminBy = new global::System.Data.DataColumn("LockAdminBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockAdminBy);
                this.columnLockAppraisalBy = new global::System.Data.DataColumn("LockAppraisalBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockAppraisalBy);
                this.columnLockValueBy = new global::System.Data.DataColumn("LockValueBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockValueBy);
                this.columnEvents = new global::System.Data.DataColumn("Events", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvents);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnPrimaryOwner = new global::System.Data.DataColumn("PrimaryOwner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryOwner);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnDOR = new global::System.Data.DataColumn("DOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOR);
                this.columnMID1 = new global::System.Data.DataColumn("MID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID1);
                this.columnMID2 = new global::System.Data.DataColumn("MID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID2);
                this.columnMID3 = new global::System.Data.DataColumn("MID3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID3);
                this.columnMID4 = new global::System.Data.DataColumn("MID4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID4);
                this.columnMID5 = new global::System.Data.DataColumn("MID5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID5);
                this.columnLabel = new global::System.Data.DataColumn("Label", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabel);
                this.columnLabe2 = new global::System.Data.DataColumn("Labe2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe2);
                this.columnLabe3 = new global::System.Data.DataColumn("Labe3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe3);
                this.columnLabe4 = new global::System.Data.DataColumn("Labe4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe4);
                this.columnLabe5 = new global::System.Data.DataColumn("Labe5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe5);
                this.columnMask1 = new global::System.Data.DataColumn("Mask1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask1);
                this.columnMask2 = new global::System.Data.DataColumn("Mask2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask2);
                this.columnMask3 = new global::System.Data.DataColumn("Mask3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask3);
                this.columnMask4 = new global::System.Data.DataColumn("Mask4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask4);
                this.columnMask5 = new global::System.Data.DataColumn("Mask5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask5);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnNeighborhoodGroup = new global::System.Data.DataColumn("NeighborhoodGroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNeighborhoodGroup);
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnAssessmentTypeID = new global::System.Data.DataColumn("AssessmentTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentTypeID);
                this.columnAssessmentType = new global::System.Data.DataColumn("AssessmentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentType);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnImprovementID = new global::System.Data.DataColumn("ImprovementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementID);
                this.columnImprovement = new global::System.Data.DataColumn("Improvement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovement);
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnLabe6 = new global::System.Data.DataColumn("Labe6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe6);
                this.columnLabe7 = new global::System.Data.DataColumn("Labe7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe7);
                this.columnLabe8 = new global::System.Data.DataColumn("Labe8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe8);
                this.columnMask6 = new global::System.Data.DataColumn("Mask6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask6);
                this.columnMask7 = new global::System.Data.DataColumn("Mask7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask7);
                this.columnMask8 = new global::System.Data.DataColumn("Mask8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask8);
                this.columnMID6 = new global::System.Data.DataColumn("MID6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID6);
                this.columnMID7 = new global::System.Data.DataColumn("MID7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID7);
                this.columnMID8 = new global::System.Data.DataColumn("MID8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID8);
                this.columnUserWarning = new global::System.Data.DataColumn("UserWarning", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserWarning);
                this.columnParcelID.ReadOnly = true;
                this.columnParcelNumber.MaxLength = 50;
                this.columnType.MaxLength = 50;
                this.columnRetired.ReadOnly = true;
                this.columnRetired.MaxLength = 7;
                this.columnExempt.ReadOnly = true;
                this.columnExempt.MaxLength = 6;
                this.columnEvents.ReadOnly = true;
                this.columnEvents.MaxLength = 6;
                this.columnEventID.ReadOnly = true;
                this.columnDescription.MaxLength = 50;
                this.columnPrimaryOwner.ReadOnly = true;
                this.columnPrimaryOwner.MaxLength = 101;
                this.columnSitus.ReadOnly = true;
                this.columnSitus.MaxLength = 500;
                this.columnLegal.ReadOnly = true;
                this.columnLegal.MaxLength = 5000;
                this.columnDOR.MaxLength = 50;
                this.columnMID1.MaxLength = 50;
                this.columnMID2.MaxLength = 50;
                this.columnMID3.MaxLength = 50;
                this.columnMID4.MaxLength = 50;
                this.columnMID5.MaxLength = 50;
                this.columnLabel.ReadOnly = true;
                this.columnLabel.MaxLength = 1000;
                this.columnLabe2.ReadOnly = true;
                this.columnLabe2.MaxLength = 1000;
                this.columnLabe3.ReadOnly = true;
                this.columnLabe3.MaxLength = 1000;
                this.columnLabe4.ReadOnly = true;
                this.columnLabe4.MaxLength = 1000;
                this.columnLabe5.ReadOnly = true;
                this.columnLabe5.MaxLength = 1000;
                this.columnMask1.ReadOnly = true;
                this.columnMask1.MaxLength = 1000;
                this.columnMask2.ReadOnly = true;
                this.columnMask2.MaxLength = 1000;
                this.columnMask3.ReadOnly = true;
                this.columnMask3.MaxLength = 1000;
                this.columnMask4.ReadOnly = true;
                this.columnMask4.MaxLength = 1000;
                this.columnMask5.ReadOnly = true;
                this.columnMask5.MaxLength = 1000;
                this.columnDistrict.ReadOnly = true;
                this.columnDistrict.MaxLength = 103;
                this.columnNeighborhoodGroup.ReadOnly = true;
                this.columnNeighborhoodGroup.MaxLength = 63;
                this.columnNBHDID.ReadOnly = true;
                this.columnDistrictID.ReadOnly = true;
                this.columnAssessmentType.MaxLength = 50;
                this.columnOwnerID.ReadOnly = true;
                this.columnPhoneNumber.MaxLength = 50;
                this.columnImprovement.MaxLength = 50;
                this.columnLandType.MaxLength = 50;
                this.columnLabe6.ReadOnly = true;
                this.columnLabe6.MaxLength = 1000;
                this.columnLabe7.ReadOnly = true;
                this.columnLabe7.MaxLength = 1000;
                this.columnLabe8.ReadOnly = true;
                this.columnLabe8.MaxLength = 1000;
                this.columnMask6.ReadOnly = true;
                this.columnMask6.MaxLength = 1000;
                this.columnMask7.ReadOnly = true;
                this.columnMask7.MaxLength = 1000;
                this.columnMask8.ReadOnly = true;
                this.columnMask8.MaxLength = 1000;
                this.columnMID6.ReadOnly = true;
                this.columnMID6.MaxLength = 50;
                this.columnMID7.ReadOnly = true;
                this.columnMID7.MaxLength = 50;
                this.columnMID8.ReadOnly = true;
                this.columnMID8.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ParcelHeaderRow Newf25000ParcelHeaderRow() {
                return ((f25000ParcelHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f25000ParcelHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f25000ParcelHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f25000ParcelHeaderRowChanged != null)) {
                    this.f25000ParcelHeaderRowChanged(this, new f25000ParcelHeaderRowChangeEvent(((f25000ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f25000ParcelHeaderRowChanging != null)) {
                    this.f25000ParcelHeaderRowChanging(this, new f25000ParcelHeaderRowChangeEvent(((f25000ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f25000ParcelHeaderRowDeleted != null)) {
                    this.f25000ParcelHeaderRowDeleted(this, new f25000ParcelHeaderRowChangeEvent(((f25000ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f25000ParcelHeaderRowDeleting != null)) {
                    this.f25000ParcelHeaderRowDeleting(this, new f25000ParcelHeaderRowChangeEvent(((f25000ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef25000ParcelHeaderRow(f25000ParcelHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25000ParcelHeaderData ds = new F25000ParcelHeaderData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f25000ParcelHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f25000ListParcelImprovementDataTable : global::System.Data.TypedTableBase<f25000ListParcelImprovementRow> {
            
            private global::System.Data.DataColumn columnImprovementID;
            
            private global::System.Data.DataColumn columnImprovement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelImprovementDataTable() {
                this.TableName = "f25000ListParcelImprovement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25000ListParcelImprovementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f25000ListParcelImprovementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementIDColumn {
                get {
                    return this.columnImprovementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementColumn {
                get {
                    return this.columnImprovement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelImprovementRow this[int index] {
                get {
                    return ((f25000ListParcelImprovementRow)(this.Rows[index]));
                }
            }
            
            public event f25000ListParcelImprovementRowChangeEventHandler f25000ListParcelImprovementRowChanging;
            
            public event f25000ListParcelImprovementRowChangeEventHandler f25000ListParcelImprovementRowChanged;
            
            public event f25000ListParcelImprovementRowChangeEventHandler f25000ListParcelImprovementRowDeleting;
            
            public event f25000ListParcelImprovementRowChangeEventHandler f25000ListParcelImprovementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf25000ListParcelImprovementRow(f25000ListParcelImprovementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelImprovementRow Addf25000ListParcelImprovementRow(int ImprovementID, string Improvement) {
                f25000ListParcelImprovementRow rowf25000ListParcelImprovementRow = ((f25000ListParcelImprovementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImprovementID,
                        Improvement};
                rowf25000ListParcelImprovementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf25000ListParcelImprovementRow);
                return rowf25000ListParcelImprovementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f25000ListParcelImprovementDataTable cln = ((f25000ListParcelImprovementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f25000ListParcelImprovementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImprovementID = base.Columns["ImprovementID"];
                this.columnImprovement = base.Columns["Improvement"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImprovementID = new global::System.Data.DataColumn("ImprovementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementID);
                this.columnImprovement = new global::System.Data.DataColumn("Improvement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovement);
                this.columnImprovementID.ReadOnly = true;
                this.columnImprovement.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelImprovementRow Newf25000ListParcelImprovementRow() {
                return ((f25000ListParcelImprovementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f25000ListParcelImprovementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f25000ListParcelImprovementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f25000ListParcelImprovementRowChanged != null)) {
                    this.f25000ListParcelImprovementRowChanged(this, new f25000ListParcelImprovementRowChangeEvent(((f25000ListParcelImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f25000ListParcelImprovementRowChanging != null)) {
                    this.f25000ListParcelImprovementRowChanging(this, new f25000ListParcelImprovementRowChangeEvent(((f25000ListParcelImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f25000ListParcelImprovementRowDeleted != null)) {
                    this.f25000ListParcelImprovementRowDeleted(this, new f25000ListParcelImprovementRowChangeEvent(((f25000ListParcelImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f25000ListParcelImprovementRowDeleting != null)) {
                    this.f25000ListParcelImprovementRowDeleting(this, new f25000ListParcelImprovementRowChangeEvent(((f25000ListParcelImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef25000ListParcelImprovementRow(f25000ListParcelImprovementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25000ParcelHeaderData ds = new F25000ParcelHeaderData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f25000ListParcelImprovementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f25000ListParcelLandTypesDataTable : global::System.Data.TypedTableBase<f25000ListParcelLandTypesRow> {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelLandTypesDataTable() {
                this.TableName = "f25000ListParcelLandTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25000ListParcelLandTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f25000ListParcelLandTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelLandTypesRow this[int index] {
                get {
                    return ((f25000ListParcelLandTypesRow)(this.Rows[index]));
                }
            }
            
            public event f25000ListParcelLandTypesRowChangeEventHandler f25000ListParcelLandTypesRowChanging;
            
            public event f25000ListParcelLandTypesRowChangeEventHandler f25000ListParcelLandTypesRowChanged;
            
            public event f25000ListParcelLandTypesRowChangeEventHandler f25000ListParcelLandTypesRowDeleting;
            
            public event f25000ListParcelLandTypesRowChangeEventHandler f25000ListParcelLandTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf25000ListParcelLandTypesRow(f25000ListParcelLandTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelLandTypesRow Addf25000ListParcelLandTypesRow(int LandTypeID, string LandType) {
                f25000ListParcelLandTypesRow rowf25000ListParcelLandTypesRow = ((f25000ListParcelLandTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType};
                rowf25000ListParcelLandTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf25000ListParcelLandTypesRow);
                return rowf25000ListParcelLandTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f25000ListParcelLandTypesDataTable cln = ((f25000ListParcelLandTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f25000ListParcelLandTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnLandTypeID.ReadOnly = true;
                this.columnLandType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelLandTypesRow Newf25000ListParcelLandTypesRow() {
                return ((f25000ListParcelLandTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f25000ListParcelLandTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f25000ListParcelLandTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f25000ListParcelLandTypesRowChanged != null)) {
                    this.f25000ListParcelLandTypesRowChanged(this, new f25000ListParcelLandTypesRowChangeEvent(((f25000ListParcelLandTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f25000ListParcelLandTypesRowChanging != null)) {
                    this.f25000ListParcelLandTypesRowChanging(this, new f25000ListParcelLandTypesRowChangeEvent(((f25000ListParcelLandTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f25000ListParcelLandTypesRowDeleted != null)) {
                    this.f25000ListParcelLandTypesRowDeleted(this, new f25000ListParcelLandTypesRowChangeEvent(((f25000ListParcelLandTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f25000ListParcelLandTypesRowDeleting != null)) {
                    this.f25000ListParcelLandTypesRowDeleting(this, new f25000ListParcelLandTypesRowChangeEvent(((f25000ListParcelLandTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef25000ListParcelLandTypesRow(f25000ListParcelLandTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25000ParcelHeaderData ds = new F25000ParcelHeaderData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f25000ListParcelLandTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class updateParcelDetailsDataTableRow : global::System.Data.DataRow {
            
            private updateParcelDetailsDataTableDataTable tableupdateParcelDetailsDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal updateParcelDetailsDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableupdateParcelDetailsDataTable = ((updateParcelDetailsDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelID {
                get {
                    if (this.IsParcelIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.ParcelIDColumn]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxDistrictID {
                get {
                    if (this.IsTaxDistrictIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.TaxDistrictIDColumn]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.TaxDistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateCode {
                get {
                    if (this.IsStateCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.StateCodeColumn]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.StateCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NBHDID {
                get {
                    if (this.IsNBHDIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.NBHDIDColumn]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImprovementID {
                get {
                    try {
                        return ((int)(this[this.tableupdateParcelDetailsDataTable.ImprovementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementID\' in table \'updateParcelDetailsDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.ImprovementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableupdateParcelDetailsDataTable.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'updateParcelDetailsDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID1 {
                get {
                    if (this.IsMID1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.MID1Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.MID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID2 {
                get {
                    if (this.IsMID2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.MID2Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.MID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID3 {
                get {
                    if (this.IsMID3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.MID3Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.MID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID4 {
                get {
                    if (this.IsMID4Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.MID4Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.MID4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID5 {
                get {
                    if (this.IsMID5Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.MID5Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.MID5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID6 {
                get {
                    if (this.IsMID6Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.MID6Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.MID6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID7 {
                get {
                    if (this.IsMID7Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.MID7Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.MID7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID8 {
                get {
                    if (this.IsMID8Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelDetailsDataTable.MID8Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelDetailsDataTable.MID8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableupdateParcelDetailsDataTable.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxDistrictIDNull() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.TaxDistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxDistrictIDNull() {
                this[this.tableupdateParcelDetailsDataTable.TaxDistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateCodeNull() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.StateCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateCodeNull() {
                this[this.tableupdateParcelDetailsDataTable.StateCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tableupdateParcelDetailsDataTable.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementIDNull() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.ImprovementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementIDNull() {
                this[this.tableupdateParcelDetailsDataTable.ImprovementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableupdateParcelDetailsDataTable.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID1Null() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.MID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID1Null() {
                this[this.tableupdateParcelDetailsDataTable.MID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID2Null() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.MID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID2Null() {
                this[this.tableupdateParcelDetailsDataTable.MID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID3Null() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.MID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID3Null() {
                this[this.tableupdateParcelDetailsDataTable.MID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID4Null() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.MID4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID4Null() {
                this[this.tableupdateParcelDetailsDataTable.MID4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID5Null() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.MID5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID5Null() {
                this[this.tableupdateParcelDetailsDataTable.MID5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID6Null() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.MID6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID6Null() {
                this[this.tableupdateParcelDetailsDataTable.MID6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID7Null() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.MID7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID7Null() {
                this[this.tableupdateParcelDetailsDataTable.MID7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID8Null() {
                return this.IsNull(this.tableupdateParcelDetailsDataTable.MID8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID8Null() {
                this[this.tableupdateParcelDetailsDataTable.MID8Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f25000ParcelHeaderRow : global::System.Data.DataRow {
            
            private f25000ParcelHeaderDataTable tablef25000ParcelHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25000ParcelHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef25000ParcelHeader = ((f25000ParcelHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    if (this.IsParcelNumberNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.ParcelNumberColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tablef25000ParcelHeader.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ParcelTypeID {
                get {
                    try {
                        return ((byte)(this[this.tablef25000ParcelHeader.ParcelTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelTypeID\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.ParcelTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    if (this.IsTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.TypeColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Retired {
                get {
                    if (this.IsRetiredNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.RetiredColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.RetiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exempt {
                get {
                    if (this.IsExemptNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.ExemptColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.ExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LockAdminBy {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.LockAdminByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LockAdminBy\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.LockAdminByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LockAppraisalBy {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.LockAppraisalByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LockAppraisalBy\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.LockAppraisalByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LockValueBy {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.LockValueByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LockValueBy\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.LockValueByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Events {
                get {
                    if (this.IsEventsNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.EventsColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.EventsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryOwner {
                get {
                    if (this.IsPrimaryOwnerNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.PrimaryOwnerColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.PrimaryOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    if (this.IsSitusNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.SitusColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    if (this.IsLegalNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.LegalColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOR {
                get {
                    if (this.IsDORNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.DORColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.DORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID1 {
                get {
                    if (this.IsMID1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.MID1Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.MID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID2 {
                get {
                    if (this.IsMID2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.MID2Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.MID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID3 {
                get {
                    if (this.IsMID3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.MID3Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.MID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID4 {
                get {
                    if (this.IsMID4Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.MID4Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.MID4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID5 {
                get {
                    if (this.IsMID5Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.MID5Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.MID5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    if (this.IsLabelNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.LabelColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe2 {
                get {
                    if (this.IsLabe2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Labe2Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Labe2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe3 {
                get {
                    if (this.IsLabe3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Labe3Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Labe3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe4 {
                get {
                    if (this.IsLabe4Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Labe4Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Labe4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe5 {
                get {
                    if (this.IsLabe5Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Labe5Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Labe5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask1 {
                get {
                    if (this.IsMask1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Mask1Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Mask1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask2 {
                get {
                    if (this.IsMask2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Mask2Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Mask2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask3 {
                get {
                    if (this.IsMask3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Mask3Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Mask3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask4 {
                get {
                    if (this.IsMask4Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Mask4Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Mask4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask5 {
                get {
                    if (this.IsMask5Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Mask5Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Mask5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    if (this.IsDistrictNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.DistrictColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NeighborhoodGroup {
                get {
                    if (this.IsNeighborhoodGroupNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.NeighborhoodGroupColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.NeighborhoodGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NBHDID {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.NBHDIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDID\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.DistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictID\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AssessmentTypeID {
                get {
                    try {
                        return ((short)(this[this.tablef25000ParcelHeader.AssessmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentTypeID\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.AssessmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessmentType {
                get {
                    if (this.IsAssessmentTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.AssessmentTypeColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.AssessmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    if (this.IsPhoneNumberNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.PhoneNumberColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImprovementID {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.ImprovementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementID\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.ImprovementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Improvement {
                get {
                    if (this.IsImprovementNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.ImprovementColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.ImprovementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tablef25000ParcelHeader.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    if (this.IsLandTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.LandTypeColumn]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe6 {
                get {
                    if (this.IsLabe6Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Labe6Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Labe6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe7 {
                get {
                    if (this.IsLabe7Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Labe7Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Labe7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe8 {
                get {
                    if (this.IsLabe8Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Labe8Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Labe8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask6 {
                get {
                    if (this.IsMask6Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Mask6Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Mask6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask7 {
                get {
                    if (this.IsMask7Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Mask7Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Mask7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask8 {
                get {
                    if (this.IsMask8Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.Mask8Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.Mask8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID6 {
                get {
                    if (this.IsMID6Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.MID6Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.MID6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID7 {
                get {
                    if (this.IsMID7Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.MID7Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.MID7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID8 {
                get {
                    if (this.IsMID8Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablef25000ParcelHeader.MID8Column]));
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.MID8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserWarning {
                get {
                    try {
                        return ((string)(this[this.tablef25000ParcelHeader.UserWarningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserWarning\' in table \'f25000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ParcelHeader.UserWarningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tablef25000ParcelHeader.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tablef25000ParcelHeader.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tablef25000ParcelHeader.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tablef25000ParcelHeader.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tablef25000ParcelHeader.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tablef25000ParcelHeader.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelTypeIDNull() {
                return this.IsNull(this.tablef25000ParcelHeader.ParcelTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelTypeIDNull() {
                this[this.tablef25000ParcelHeader.ParcelTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tablef25000ParcelHeader.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tablef25000ParcelHeader.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetiredNull() {
                return this.IsNull(this.tablef25000ParcelHeader.RetiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetiredNull() {
                this[this.tablef25000ParcelHeader.RetiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptNull() {
                return this.IsNull(this.tablef25000ParcelHeader.ExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptNull() {
                this[this.tablef25000ParcelHeader.ExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockAdminByNull() {
                return this.IsNull(this.tablef25000ParcelHeader.LockAdminByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockAdminByNull() {
                this[this.tablef25000ParcelHeader.LockAdminByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockAppraisalByNull() {
                return this.IsNull(this.tablef25000ParcelHeader.LockAppraisalByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockAppraisalByNull() {
                this[this.tablef25000ParcelHeader.LockAppraisalByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockValueByNull() {
                return this.IsNull(this.tablef25000ParcelHeader.LockValueByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockValueByNull() {
                this[this.tablef25000ParcelHeader.LockValueByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventsNull() {
                return this.IsNull(this.tablef25000ParcelHeader.EventsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventsNull() {
                this[this.tablef25000ParcelHeader.EventsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tablef25000ParcelHeader.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tablef25000ParcelHeader.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablef25000ParcelHeader.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablef25000ParcelHeader.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryOwnerNull() {
                return this.IsNull(this.tablef25000ParcelHeader.PrimaryOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryOwnerNull() {
                this[this.tablef25000ParcelHeader.PrimaryOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tablef25000ParcelHeader.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tablef25000ParcelHeader.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tablef25000ParcelHeader.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tablef25000ParcelHeader.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDORNull() {
                return this.IsNull(this.tablef25000ParcelHeader.DORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDORNull() {
                this[this.tablef25000ParcelHeader.DORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID1Null() {
                return this.IsNull(this.tablef25000ParcelHeader.MID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID1Null() {
                this[this.tablef25000ParcelHeader.MID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID2Null() {
                return this.IsNull(this.tablef25000ParcelHeader.MID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID2Null() {
                this[this.tablef25000ParcelHeader.MID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID3Null() {
                return this.IsNull(this.tablef25000ParcelHeader.MID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID3Null() {
                this[this.tablef25000ParcelHeader.MID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID4Null() {
                return this.IsNull(this.tablef25000ParcelHeader.MID4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID4Null() {
                this[this.tablef25000ParcelHeader.MID4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID5Null() {
                return this.IsNull(this.tablef25000ParcelHeader.MID5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID5Null() {
                this[this.tablef25000ParcelHeader.MID5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelNull() {
                return this.IsNull(this.tablef25000ParcelHeader.LabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelNull() {
                this[this.tablef25000ParcelHeader.LabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe2Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Labe2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe2Null() {
                this[this.tablef25000ParcelHeader.Labe2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe3Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Labe3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe3Null() {
                this[this.tablef25000ParcelHeader.Labe3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe4Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Labe4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe4Null() {
                this[this.tablef25000ParcelHeader.Labe4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe5Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Labe5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe5Null() {
                this[this.tablef25000ParcelHeader.Labe5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask1Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Mask1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask1Null() {
                this[this.tablef25000ParcelHeader.Mask1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask2Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Mask2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask2Null() {
                this[this.tablef25000ParcelHeader.Mask2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask3Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Mask3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask3Null() {
                this[this.tablef25000ParcelHeader.Mask3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask4Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Mask4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask4Null() {
                this[this.tablef25000ParcelHeader.Mask4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask5Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Mask5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask5Null() {
                this[this.tablef25000ParcelHeader.Mask5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tablef25000ParcelHeader.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tablef25000ParcelHeader.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNeighborhoodGroupNull() {
                return this.IsNull(this.tablef25000ParcelHeader.NeighborhoodGroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNeighborhoodGroupNull() {
                this[this.tablef25000ParcelHeader.NeighborhoodGroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tablef25000ParcelHeader.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tablef25000ParcelHeader.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictIDNull() {
                return this.IsNull(this.tablef25000ParcelHeader.DistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictIDNull() {
                this[this.tablef25000ParcelHeader.DistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeIDNull() {
                return this.IsNull(this.tablef25000ParcelHeader.AssessmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeIDNull() {
                this[this.tablef25000ParcelHeader.AssessmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeNull() {
                return this.IsNull(this.tablef25000ParcelHeader.AssessmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeNull() {
                this[this.tablef25000ParcelHeader.AssessmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tablef25000ParcelHeader.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tablef25000ParcelHeader.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNumberNull() {
                return this.IsNull(this.tablef25000ParcelHeader.PhoneNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNumberNull() {
                this[this.tablef25000ParcelHeader.PhoneNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementIDNull() {
                return this.IsNull(this.tablef25000ParcelHeader.ImprovementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementIDNull() {
                this[this.tablef25000ParcelHeader.ImprovementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementNull() {
                return this.IsNull(this.tablef25000ParcelHeader.ImprovementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementNull() {
                this[this.tablef25000ParcelHeader.ImprovementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tablef25000ParcelHeader.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tablef25000ParcelHeader.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tablef25000ParcelHeader.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tablef25000ParcelHeader.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe6Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Labe6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe6Null() {
                this[this.tablef25000ParcelHeader.Labe6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe7Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Labe7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe7Null() {
                this[this.tablef25000ParcelHeader.Labe7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe8Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Labe8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe8Null() {
                this[this.tablef25000ParcelHeader.Labe8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask6Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Mask6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask6Null() {
                this[this.tablef25000ParcelHeader.Mask6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask7Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Mask7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask7Null() {
                this[this.tablef25000ParcelHeader.Mask7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask8Null() {
                return this.IsNull(this.tablef25000ParcelHeader.Mask8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask8Null() {
                this[this.tablef25000ParcelHeader.Mask8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID6Null() {
                return this.IsNull(this.tablef25000ParcelHeader.MID6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID6Null() {
                this[this.tablef25000ParcelHeader.MID6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID7Null() {
                return this.IsNull(this.tablef25000ParcelHeader.MID7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID7Null() {
                this[this.tablef25000ParcelHeader.MID7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID8Null() {
                return this.IsNull(this.tablef25000ParcelHeader.MID8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID8Null() {
                this[this.tablef25000ParcelHeader.MID8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserWarningNull() {
                return this.IsNull(this.tablef25000ParcelHeader.UserWarningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserWarningNull() {
                this[this.tablef25000ParcelHeader.UserWarningColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f25000ListParcelImprovementRow : global::System.Data.DataRow {
            
            private f25000ListParcelImprovementDataTable tablef25000ListParcelImprovement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25000ListParcelImprovementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef25000ListParcelImprovement = ((f25000ListParcelImprovementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImprovementID {
                get {
                    try {
                        return ((int)(this[this.tablef25000ListParcelImprovement.ImprovementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementID\' in table \'f25000ListParcelImprovement\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablef25000ListParcelImprovement.ImprovementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Improvement {
                get {
                    try {
                        return ((string)(this[this.tablef25000ListParcelImprovement.ImprovementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Improvement\' in table \'f25000ListParcelImprovement\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablef25000ListParcelImprovement.ImprovementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementIDNull() {
                return this.IsNull(this.tablef25000ListParcelImprovement.ImprovementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementIDNull() {
                this[this.tablef25000ListParcelImprovement.ImprovementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementNull() {
                return this.IsNull(this.tablef25000ListParcelImprovement.ImprovementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementNull() {
                this[this.tablef25000ListParcelImprovement.ImprovementColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f25000ListParcelLandTypesRow : global::System.Data.DataRow {
            
            private f25000ListParcelLandTypesDataTable tablef25000ListParcelLandTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25000ListParcelLandTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef25000ListParcelLandTypes = ((f25000ListParcelLandTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tablef25000ListParcelLandTypes.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'f25000ListParcelLandTypes\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef25000ListParcelLandTypes.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tablef25000ListParcelLandTypes.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'f25000ListParcelLandTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25000ListParcelLandTypes.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tablef25000ListParcelLandTypes.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tablef25000ListParcelLandTypes.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tablef25000ListParcelLandTypes.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tablef25000ListParcelLandTypes.LandTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class updateParcelDetailsDataTableRowChangeEvent : global::System.EventArgs {
            
            private updateParcelDetailsDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelDetailsDataTableRowChangeEvent(updateParcelDetailsDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelDetailsDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f25000ParcelHeaderRowChangeEvent : global::System.EventArgs {
            
            private f25000ParcelHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ParcelHeaderRowChangeEvent(f25000ParcelHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ParcelHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f25000ListParcelImprovementRowChangeEvent : global::System.EventArgs {
            
            private f25000ListParcelImprovementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelImprovementRowChangeEvent(f25000ListParcelImprovementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelImprovementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f25000ListParcelLandTypesRowChangeEvent : global::System.EventArgs {
            
            private f25000ListParcelLandTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelLandTypesRowChangeEvent(f25000ListParcelLandTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25000ListParcelLandTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591