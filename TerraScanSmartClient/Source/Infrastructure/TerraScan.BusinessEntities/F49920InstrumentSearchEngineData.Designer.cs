//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F49920InstrumentSearchEngineData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F49920InstrumentSearchEngineData : global::System.Data.DataSet {
        
        private ListInstrumentDataTable tableListInstrument;
        
        private ListInstrumentLoadItemsDataTable tableListInstrumentLoadItems;
        
        private InstrumentLoadItemsDataTable tableInstrumentLoadItems;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F49920InstrumentSearchEngineData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F49920InstrumentSearchEngineData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListInstrument"] != null)) {
                    base.Tables.Add(new ListInstrumentDataTable(ds.Tables["ListInstrument"]));
                }
                if ((ds.Tables["ListInstrumentLoadItems"] != null)) {
                    base.Tables.Add(new ListInstrumentLoadItemsDataTable(ds.Tables["ListInstrumentLoadItems"]));
                }
                if ((ds.Tables["InstrumentLoadItems"] != null)) {
                    base.Tables.Add(new InstrumentLoadItemsDataTable(ds.Tables["InstrumentLoadItems"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListInstrumentDataTable ListInstrument {
            get {
                return this.tableListInstrument;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListInstrumentLoadItemsDataTable ListInstrumentLoadItems {
            get {
                return this.tableListInstrumentLoadItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InstrumentLoadItemsDataTable InstrumentLoadItems {
            get {
                return this.tableInstrumentLoadItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F49920InstrumentSearchEngineData cln = ((F49920InstrumentSearchEngineData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListInstrument"] != null)) {
                    base.Tables.Add(new ListInstrumentDataTable(ds.Tables["ListInstrument"]));
                }
                if ((ds.Tables["ListInstrumentLoadItems"] != null)) {
                    base.Tables.Add(new ListInstrumentLoadItemsDataTable(ds.Tables["ListInstrumentLoadItems"]));
                }
                if ((ds.Tables["InstrumentLoadItems"] != null)) {
                    base.Tables.Add(new InstrumentLoadItemsDataTable(ds.Tables["InstrumentLoadItems"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListInstrument = ((ListInstrumentDataTable)(base.Tables["ListInstrument"]));
            if ((initTable == true)) {
                if ((this.tableListInstrument != null)) {
                    this.tableListInstrument.InitVars();
                }
            }
            this.tableListInstrumentLoadItems = ((ListInstrumentLoadItemsDataTable)(base.Tables["ListInstrumentLoadItems"]));
            if ((initTable == true)) {
                if ((this.tableListInstrumentLoadItems != null)) {
                    this.tableListInstrumentLoadItems.InitVars();
                }
            }
            this.tableInstrumentLoadItems = ((InstrumentLoadItemsDataTable)(base.Tables["InstrumentLoadItems"]));
            if ((initTable == true)) {
                if ((this.tableInstrumentLoadItems != null)) {
                    this.tableInstrumentLoadItems.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F49920InstrumentSearchEngineData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F49920InstrumentSearchEngineData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListInstrument = new ListInstrumentDataTable();
            base.Tables.Add(this.tableListInstrument);
            this.tableListInstrumentLoadItems = new ListInstrumentLoadItemsDataTable();
            base.Tables.Add(this.tableListInstrumentLoadItems);
            this.tableInstrumentLoadItems = new InstrumentLoadItemsDataTable();
            base.Tables.Add(this.tableInstrumentLoadItems);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListInstrument() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListInstrumentLoadItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInstrumentLoadItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F49920InstrumentSearchEngineData ds = new F49920InstrumentSearchEngineData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListInstrumentRowChangeEventHandler(object sender, ListInstrumentRowChangeEvent e);
        
        public delegate void ListInstrumentLoadItemsRowChangeEventHandler(object sender, ListInstrumentLoadItemsRowChangeEvent e);
        
        public delegate void InstrumentLoadItemsRowChangeEventHandler(object sender, InstrumentLoadItemsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListInstrumentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInstID;
            
            private global::System.Data.DataColumn columnInstNum;
            
            private global::System.Data.DataColumn columnGrantor;
            
            private global::System.Data.DataColumn columnGrantee;
            
            private global::System.Data.DataColumn columnITypeID;
            
            private global::System.Data.DataColumn columnInstrumentType;
            
            private global::System.Data.DataColumn columnSubName;
            
            private global::System.Data.DataColumn columnFileDate;
            
            private global::System.Data.DataColumn columnSubID;
            
            private global::System.Data.DataColumn columnSubName1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentDataTable() {
                this.TableName = "ListInstrument";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInstrumentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListInstrumentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstIDColumn {
                get {
                    return this.columnInstID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstNumColumn {
                get {
                    return this.columnInstNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantorColumn {
                get {
                    return this.columnGrantor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteeColumn {
                get {
                    return this.columnGrantee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITypeIDColumn {
                get {
                    return this.columnITypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstrumentTypeColumn {
                get {
                    return this.columnInstrumentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubNameColumn {
                get {
                    return this.columnSubName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDateColumn {
                get {
                    return this.columnFileDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubIDColumn {
                get {
                    return this.columnSubID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubName1Column {
                get {
                    return this.columnSubName1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentRow this[int index] {
                get {
                    return ((ListInstrumentRow)(this.Rows[index]));
                }
            }
            
            public event ListInstrumentRowChangeEventHandler ListInstrumentRowChanging;
            
            public event ListInstrumentRowChangeEventHandler ListInstrumentRowChanged;
            
            public event ListInstrumentRowChangeEventHandler ListInstrumentRowDeleting;
            
            public event ListInstrumentRowChangeEventHandler ListInstrumentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListInstrumentRow(ListInstrumentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentRow AddListInstrumentRow(int InstID, string InstNum, string Grantor, string Grantee, int ITypeID, string InstrumentType, string SubName, string FileDate, int SubID, string SubName1) {
                ListInstrumentRow rowListInstrumentRow = ((ListInstrumentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InstID,
                        InstNum,
                        Grantor,
                        Grantee,
                        ITypeID,
                        InstrumentType,
                        SubName,
                        FileDate,
                        SubID,
                        SubName1};
                rowListInstrumentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListInstrumentRow);
                return rowListInstrumentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListInstrumentDataTable cln = ((ListInstrumentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListInstrumentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInstID = base.Columns["InstID"];
                this.columnInstNum = base.Columns["InstNum"];
                this.columnGrantor = base.Columns["Grantor"];
                this.columnGrantee = base.Columns["Grantee"];
                this.columnITypeID = base.Columns["ITypeID"];
                this.columnInstrumentType = base.Columns["InstrumentType"];
                this.columnSubName = base.Columns["SubName"];
                this.columnFileDate = base.Columns["FileDate"];
                this.columnSubID = base.Columns["SubID"];
                this.columnSubName1 = base.Columns["SubName1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInstID = new global::System.Data.DataColumn("InstID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstID);
                this.columnInstNum = new global::System.Data.DataColumn("InstNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstNum);
                this.columnGrantor = new global::System.Data.DataColumn("Grantor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantor);
                this.columnGrantee = new global::System.Data.DataColumn("Grantee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantee);
                this.columnITypeID = new global::System.Data.DataColumn("ITypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITypeID);
                this.columnInstrumentType = new global::System.Data.DataColumn("InstrumentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrumentType);
                this.columnSubName = new global::System.Data.DataColumn("SubName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubName);
                this.columnFileDate = new global::System.Data.DataColumn("FileDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDate);
                this.columnSubID = new global::System.Data.DataColumn("SubID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubID);
                this.columnSubName1 = new global::System.Data.DataColumn("SubName1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubName1);
                this.columnInstID.AllowDBNull = false;
                this.columnInstNum.AllowDBNull = false;
                this.columnInstNum.MaxLength = 50;
                this.columnGrantor.MaxLength = 80;
                this.columnGrantee.MaxLength = 80;
                this.columnITypeID.AllowDBNull = false;
                this.columnInstrumentType.AllowDBNull = false;
                this.columnInstrumentType.MaxLength = 50;
                this.columnSubName.MaxLength = 80;
                this.columnFileDate.AllowDBNull = false;
                this.columnSubName1.MaxLength = 80;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentRow NewListInstrumentRow() {
                return ((ListInstrumentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListInstrumentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListInstrumentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListInstrumentRowChanged != null)) {
                    this.ListInstrumentRowChanged(this, new ListInstrumentRowChangeEvent(((ListInstrumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListInstrumentRowChanging != null)) {
                    this.ListInstrumentRowChanging(this, new ListInstrumentRowChangeEvent(((ListInstrumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListInstrumentRowDeleted != null)) {
                    this.ListInstrumentRowDeleted(this, new ListInstrumentRowChangeEvent(((ListInstrumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListInstrumentRowDeleting != null)) {
                    this.ListInstrumentRowDeleting(this, new ListInstrumentRowChangeEvent(((ListInstrumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListInstrumentRow(ListInstrumentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49920InstrumentSearchEngineData ds = new F49920InstrumentSearchEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListInstrumentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListInstrumentLoadItemsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnITypeID;
            
            private global::System.Data.DataColumn columnInstrumentType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentLoadItemsDataTable() {
                this.TableName = "ListInstrumentLoadItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInstrumentLoadItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListInstrumentLoadItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITypeIDColumn {
                get {
                    return this.columnITypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstrumentTypeColumn {
                get {
                    return this.columnInstrumentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentLoadItemsRow this[int index] {
                get {
                    return ((ListInstrumentLoadItemsRow)(this.Rows[index]));
                }
            }
            
            public event ListInstrumentLoadItemsRowChangeEventHandler ListInstrumentLoadItemsRowChanging;
            
            public event ListInstrumentLoadItemsRowChangeEventHandler ListInstrumentLoadItemsRowChanged;
            
            public event ListInstrumentLoadItemsRowChangeEventHandler ListInstrumentLoadItemsRowDeleting;
            
            public event ListInstrumentLoadItemsRowChangeEventHandler ListInstrumentLoadItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListInstrumentLoadItemsRow(ListInstrumentLoadItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentLoadItemsRow AddListInstrumentLoadItemsRow(string InstrumentType) {
                ListInstrumentLoadItemsRow rowListInstrumentLoadItemsRow = ((ListInstrumentLoadItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        InstrumentType};
                rowListInstrumentLoadItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListInstrumentLoadItemsRow);
                return rowListInstrumentLoadItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListInstrumentLoadItemsDataTable cln = ((ListInstrumentLoadItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListInstrumentLoadItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnITypeID = base.Columns["ITypeID"];
                this.columnInstrumentType = base.Columns["InstrumentType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnITypeID = new global::System.Data.DataColumn("ITypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITypeID);
                this.columnInstrumentType = new global::System.Data.DataColumn("InstrumentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrumentType);
                this.columnITypeID.AutoIncrement = true;
                this.columnITypeID.AllowDBNull = false;
                this.columnITypeID.ReadOnly = true;
                this.columnInstrumentType.AllowDBNull = false;
                this.columnInstrumentType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentLoadItemsRow NewListInstrumentLoadItemsRow() {
                return ((ListInstrumentLoadItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListInstrumentLoadItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListInstrumentLoadItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListInstrumentLoadItemsRowChanged != null)) {
                    this.ListInstrumentLoadItemsRowChanged(this, new ListInstrumentLoadItemsRowChangeEvent(((ListInstrumentLoadItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListInstrumentLoadItemsRowChanging != null)) {
                    this.ListInstrumentLoadItemsRowChanging(this, new ListInstrumentLoadItemsRowChangeEvent(((ListInstrumentLoadItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListInstrumentLoadItemsRowDeleted != null)) {
                    this.ListInstrumentLoadItemsRowDeleted(this, new ListInstrumentLoadItemsRowChangeEvent(((ListInstrumentLoadItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListInstrumentLoadItemsRowDeleting != null)) {
                    this.ListInstrumentLoadItemsRowDeleting(this, new ListInstrumentLoadItemsRowChangeEvent(((ListInstrumentLoadItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListInstrumentLoadItemsRow(ListInstrumentLoadItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49920InstrumentSearchEngineData ds = new F49920InstrumentSearchEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListInstrumentLoadItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InstrumentLoadItemsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubID;
            
            private global::System.Data.DataColumn columnSubName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstrumentLoadItemsDataTable() {
                this.TableName = "InstrumentLoadItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InstrumentLoadItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InstrumentLoadItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubIDColumn {
                get {
                    return this.columnSubID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubNameColumn {
                get {
                    return this.columnSubName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstrumentLoadItemsRow this[int index] {
                get {
                    return ((InstrumentLoadItemsRow)(this.Rows[index]));
                }
            }
            
            public event InstrumentLoadItemsRowChangeEventHandler InstrumentLoadItemsRowChanging;
            
            public event InstrumentLoadItemsRowChangeEventHandler InstrumentLoadItemsRowChanged;
            
            public event InstrumentLoadItemsRowChangeEventHandler InstrumentLoadItemsRowDeleting;
            
            public event InstrumentLoadItemsRowChangeEventHandler InstrumentLoadItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInstrumentLoadItemsRow(InstrumentLoadItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstrumentLoadItemsRow AddInstrumentLoadItemsRow(string SubName) {
                InstrumentLoadItemsRow rowInstrumentLoadItemsRow = ((InstrumentLoadItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SubName};
                rowInstrumentLoadItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInstrumentLoadItemsRow);
                return rowInstrumentLoadItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InstrumentLoadItemsDataTable cln = ((InstrumentLoadItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InstrumentLoadItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubID = base.Columns["SubID"];
                this.columnSubName = base.Columns["SubName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubID = new global::System.Data.DataColumn("SubID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubID);
                this.columnSubName = new global::System.Data.DataColumn("SubName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubName);
                this.columnSubID.AutoIncrement = true;
                this.columnSubID.AllowDBNull = false;
                this.columnSubID.ReadOnly = true;
                this.columnSubName.AllowDBNull = false;
                this.columnSubName.MaxLength = 80;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstrumentLoadItemsRow NewInstrumentLoadItemsRow() {
                return ((InstrumentLoadItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InstrumentLoadItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InstrumentLoadItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InstrumentLoadItemsRowChanged != null)) {
                    this.InstrumentLoadItemsRowChanged(this, new InstrumentLoadItemsRowChangeEvent(((InstrumentLoadItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InstrumentLoadItemsRowChanging != null)) {
                    this.InstrumentLoadItemsRowChanging(this, new InstrumentLoadItemsRowChangeEvent(((InstrumentLoadItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InstrumentLoadItemsRowDeleted != null)) {
                    this.InstrumentLoadItemsRowDeleted(this, new InstrumentLoadItemsRowChangeEvent(((InstrumentLoadItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InstrumentLoadItemsRowDeleting != null)) {
                    this.InstrumentLoadItemsRowDeleting(this, new InstrumentLoadItemsRowChangeEvent(((InstrumentLoadItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInstrumentLoadItemsRow(InstrumentLoadItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F49920InstrumentSearchEngineData ds = new F49920InstrumentSearchEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InstrumentLoadItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListInstrumentRow : global::System.Data.DataRow {
            
            private ListInstrumentDataTable tableListInstrument;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInstrumentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListInstrument = ((ListInstrumentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InstID {
                get {
                    return ((int)(this[this.tableListInstrument.InstIDColumn]));
                }
                set {
                    this[this.tableListInstrument.InstIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstNum {
                get {
                    return ((string)(this[this.tableListInstrument.InstNumColumn]));
                }
                set {
                    this[this.tableListInstrument.InstNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grantor {
                get {
                    try {
                        return ((string)(this[this.tableListInstrument.GrantorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grantor\' in table \'ListInstrument\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInstrument.GrantorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grantee {
                get {
                    try {
                        return ((string)(this[this.tableListInstrument.GranteeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grantee\' in table \'ListInstrument\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInstrument.GranteeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ITypeID {
                get {
                    return ((int)(this[this.tableListInstrument.ITypeIDColumn]));
                }
                set {
                    this[this.tableListInstrument.ITypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstrumentType {
                get {
                    return ((string)(this[this.tableListInstrument.InstrumentTypeColumn]));
                }
                set {
                    this[this.tableListInstrument.InstrumentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubName {
                get {
                    try {
                        return ((string)(this[this.tableListInstrument.SubNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubName\' in table \'ListInstrument\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInstrument.SubNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileDate {
                get {
                    return ((string)(this[this.tableListInstrument.FileDateColumn]));
                }
                set {
                    this[this.tableListInstrument.FileDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubID {
                get {
                    try {
                        return ((int)(this[this.tableListInstrument.SubIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubID\' in table \'ListInstrument\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInstrument.SubIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubName1 {
                get {
                    try {
                        return ((string)(this[this.tableListInstrument.SubName1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubName1\' in table \'ListInstrument\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInstrument.SubName1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantorNull() {
                return this.IsNull(this.tableListInstrument.GrantorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantorNull() {
                this[this.tableListInstrument.GrantorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteeNull() {
                return this.IsNull(this.tableListInstrument.GranteeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteeNull() {
                this[this.tableListInstrument.GranteeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubNameNull() {
                return this.IsNull(this.tableListInstrument.SubNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubNameNull() {
                this[this.tableListInstrument.SubNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubIDNull() {
                return this.IsNull(this.tableListInstrument.SubIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubIDNull() {
                this[this.tableListInstrument.SubIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubName1Null() {
                return this.IsNull(this.tableListInstrument.SubName1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubName1Null() {
                this[this.tableListInstrument.SubName1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListInstrumentLoadItemsRow : global::System.Data.DataRow {
            
            private ListInstrumentLoadItemsDataTable tableListInstrumentLoadItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInstrumentLoadItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListInstrumentLoadItems = ((ListInstrumentLoadItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ITypeID {
                get {
                    return ((int)(this[this.tableListInstrumentLoadItems.ITypeIDColumn]));
                }
                set {
                    this[this.tableListInstrumentLoadItems.ITypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstrumentType {
                get {
                    return ((string)(this[this.tableListInstrumentLoadItems.InstrumentTypeColumn]));
                }
                set {
                    this[this.tableListInstrumentLoadItems.InstrumentTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InstrumentLoadItemsRow : global::System.Data.DataRow {
            
            private InstrumentLoadItemsDataTable tableInstrumentLoadItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InstrumentLoadItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInstrumentLoadItems = ((InstrumentLoadItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubID {
                get {
                    return ((int)(this[this.tableInstrumentLoadItems.SubIDColumn]));
                }
                set {
                    this[this.tableInstrumentLoadItems.SubIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubName {
                get {
                    return ((string)(this[this.tableInstrumentLoadItems.SubNameColumn]));
                }
                set {
                    this[this.tableInstrumentLoadItems.SubNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListInstrumentRowChangeEvent : global::System.EventArgs {
            
            private ListInstrumentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentRowChangeEvent(ListInstrumentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListInstrumentLoadItemsRowChangeEvent : global::System.EventArgs {
            
            private ListInstrumentLoadItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentLoadItemsRowChangeEvent(ListInstrumentLoadItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInstrumentLoadItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InstrumentLoadItemsRowChangeEvent : global::System.EventArgs {
            
            private InstrumentLoadItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstrumentLoadItemsRowChangeEvent(InstrumentLoadItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InstrumentLoadItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591