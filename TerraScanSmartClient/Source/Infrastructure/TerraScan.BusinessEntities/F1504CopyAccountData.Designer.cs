//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F1504CopyAccountData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F1504CopyAccountData : global::System.Data.DataSet {
        
        private F1504_ListSubFundDataTable tableF1504_ListSubFund;
        
        private F1504_GetAccountDetailDataTable tableF1504_GetAccountDetail;
        
        private F1504_SaveCopyAccountDataTable tableF1504_SaveCopyAccount;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F1504CopyAccountData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F1504CopyAccountData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["F1504_ListSubFund"] != null)) {
                    base.Tables.Add(new F1504_ListSubFundDataTable(ds.Tables["F1504_ListSubFund"]));
                }
                if ((ds.Tables["F1504_GetAccountDetail"] != null)) {
                    base.Tables.Add(new F1504_GetAccountDetailDataTable(ds.Tables["F1504_GetAccountDetail"]));
                }
                if ((ds.Tables["F1504_SaveCopyAccount"] != null)) {
                    base.Tables.Add(new F1504_SaveCopyAccountDataTable(ds.Tables["F1504_SaveCopyAccount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F1504_ListSubFundDataTable F1504_ListSubFund {
            get {
                return this.tableF1504_ListSubFund;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F1504_GetAccountDetailDataTable F1504_GetAccountDetail {
            get {
                return this.tableF1504_GetAccountDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F1504_SaveCopyAccountDataTable F1504_SaveCopyAccount {
            get {
                return this.tableF1504_SaveCopyAccount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F1504CopyAccountData cln = ((F1504CopyAccountData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["F1504_ListSubFund"] != null)) {
                    base.Tables.Add(new F1504_ListSubFundDataTable(ds.Tables["F1504_ListSubFund"]));
                }
                if ((ds.Tables["F1504_GetAccountDetail"] != null)) {
                    base.Tables.Add(new F1504_GetAccountDetailDataTable(ds.Tables["F1504_GetAccountDetail"]));
                }
                if ((ds.Tables["F1504_SaveCopyAccount"] != null)) {
                    base.Tables.Add(new F1504_SaveCopyAccountDataTable(ds.Tables["F1504_SaveCopyAccount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableF1504_ListSubFund = ((F1504_ListSubFundDataTable)(base.Tables["F1504_ListSubFund"]));
            if ((initTable == true)) {
                if ((this.tableF1504_ListSubFund != null)) {
                    this.tableF1504_ListSubFund.InitVars();
                }
            }
            this.tableF1504_GetAccountDetail = ((F1504_GetAccountDetailDataTable)(base.Tables["F1504_GetAccountDetail"]));
            if ((initTable == true)) {
                if ((this.tableF1504_GetAccountDetail != null)) {
                    this.tableF1504_GetAccountDetail.InitVars();
                }
            }
            this.tableF1504_SaveCopyAccount = ((F1504_SaveCopyAccountDataTable)(base.Tables["F1504_SaveCopyAccount"]));
            if ((initTable == true)) {
                if ((this.tableF1504_SaveCopyAccount != null)) {
                    this.tableF1504_SaveCopyAccount.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F1504CopyAccountData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F1504CopyAccountData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableF1504_ListSubFund = new F1504_ListSubFundDataTable();
            base.Tables.Add(this.tableF1504_ListSubFund);
            this.tableF1504_GetAccountDetail = new F1504_GetAccountDetailDataTable();
            base.Tables.Add(this.tableF1504_GetAccountDetail);
            this.tableF1504_SaveCopyAccount = new F1504_SaveCopyAccountDataTable();
            base.Tables.Add(this.tableF1504_SaveCopyAccount);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF1504_ListSubFund() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF1504_GetAccountDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF1504_SaveCopyAccount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F1504CopyAccountData ds = new F1504CopyAccountData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void F1504_ListSubFundRowChangeEventHandler(object sender, F1504_ListSubFundRowChangeEvent e);
        
        public delegate void F1504_GetAccountDetailRowChangeEventHandler(object sender, F1504_GetAccountDetailRowChangeEvent e);
        
        public delegate void F1504_SaveCopyAccountRowChangeEventHandler(object sender, F1504_SaveCopyAccountRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F1504_ListSubFundDataTable : global::System.Data.TypedTableBase<F1504_ListSubFundRow> {
            
            private global::System.Data.DataColumn columnSubFund;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_ListSubFundDataTable() {
                this.TableName = "F1504_ListSubFund";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F1504_ListSubFundDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F1504_ListSubFundDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_ListSubFundRow this[int index] {
                get {
                    return ((F1504_ListSubFundRow)(this.Rows[index]));
                }
            }
            
            public event F1504_ListSubFundRowChangeEventHandler F1504_ListSubFundRowChanging;
            
            public event F1504_ListSubFundRowChangeEventHandler F1504_ListSubFundRowChanged;
            
            public event F1504_ListSubFundRowChangeEventHandler F1504_ListSubFundRowDeleting;
            
            public event F1504_ListSubFundRowChangeEventHandler F1504_ListSubFundRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF1504_ListSubFundRow(F1504_ListSubFundRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_ListSubFundRow AddF1504_ListSubFundRow(string SubFund) {
                F1504_ListSubFundRow rowF1504_ListSubFundRow = ((F1504_ListSubFundRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubFund};
                rowF1504_ListSubFundRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF1504_ListSubFundRow);
                return rowF1504_ListSubFundRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F1504_ListSubFundDataTable cln = ((F1504_ListSubFundDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F1504_ListSubFundDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubFund = base.Columns["SubFund"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnSubFund.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_ListSubFundRow NewF1504_ListSubFundRow() {
                return ((F1504_ListSubFundRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F1504_ListSubFundRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F1504_ListSubFundRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F1504_ListSubFundRowChanged != null)) {
                    this.F1504_ListSubFundRowChanged(this, new F1504_ListSubFundRowChangeEvent(((F1504_ListSubFundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F1504_ListSubFundRowChanging != null)) {
                    this.F1504_ListSubFundRowChanging(this, new F1504_ListSubFundRowChangeEvent(((F1504_ListSubFundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F1504_ListSubFundRowDeleted != null)) {
                    this.F1504_ListSubFundRowDeleted(this, new F1504_ListSubFundRowChangeEvent(((F1504_ListSubFundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F1504_ListSubFundRowDeleting != null)) {
                    this.F1504_ListSubFundRowDeleting(this, new F1504_ListSubFundRowChangeEvent(((F1504_ListSubFundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF1504_ListSubFundRow(F1504_ListSubFundRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1504CopyAccountData ds = new F1504CopyAccountData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F1504_ListSubFundDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F1504_GetAccountDetailDataTable : global::System.Data.TypedTableBase<F1504_GetAccountDetailRow> {
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnSubFund;
            
            private global::System.Data.DataColumn columnAcctDesc;
            
            private global::System.Data.DataColumn columnFunctionID;
            
            private global::System.Data.DataColumn columnBarID;
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnLineID;
            
            private global::System.Data.DataColumn columnFunctionFlag;
            
            private global::System.Data.DataColumn columnBarsFlag;
            
            private global::System.Data.DataColumn columnObjectFlag;
            
            private global::System.Data.DataColumn columnLineFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_GetAccountDetailDataTable() {
                this.TableName = "F1504_GetAccountDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F1504_GetAccountDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F1504_GetAccountDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcctDescColumn {
                get {
                    return this.columnAcctDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionIDColumn {
                get {
                    return this.columnFunctionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarIDColumn {
                get {
                    return this.columnBarID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionFlagColumn {
                get {
                    return this.columnFunctionFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarsFlagColumn {
                get {
                    return this.columnBarsFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectFlagColumn {
                get {
                    return this.columnObjectFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineFlagColumn {
                get {
                    return this.columnLineFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_GetAccountDetailRow this[int index] {
                get {
                    return ((F1504_GetAccountDetailRow)(this.Rows[index]));
                }
            }
            
            public event F1504_GetAccountDetailRowChangeEventHandler F1504_GetAccountDetailRowChanging;
            
            public event F1504_GetAccountDetailRowChangeEventHandler F1504_GetAccountDetailRowChanged;
            
            public event F1504_GetAccountDetailRowChangeEventHandler F1504_GetAccountDetailRowDeleting;
            
            public event F1504_GetAccountDetailRowChangeEventHandler F1504_GetAccountDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF1504_GetAccountDetailRow(F1504_GetAccountDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_GetAccountDetailRow AddF1504_GetAccountDetailRow(int RollYear, string SubFundID, string SubFund, string AcctDesc, string FunctionID, string BarID, string ObjectID, string LineID, string FunctionFlag, string BarsFlag, string ObjectFlag, string LineFlag) {
                F1504_GetAccountDetailRow rowF1504_GetAccountDetailRow = ((F1504_GetAccountDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RollYear,
                        SubFundID,
                        SubFund,
                        AcctDesc,
                        FunctionID,
                        BarID,
                        ObjectID,
                        LineID,
                        FunctionFlag,
                        BarsFlag,
                        ObjectFlag,
                        LineFlag};
                rowF1504_GetAccountDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF1504_GetAccountDetailRow);
                return rowF1504_GetAccountDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F1504_GetAccountDetailDataTable cln = ((F1504_GetAccountDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F1504_GetAccountDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRollYear = base.Columns["RollYear"];
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnSubFund = base.Columns["SubFund"];
                this.columnAcctDesc = base.Columns["AcctDesc"];
                this.columnFunctionID = base.Columns["FunctionID"];
                this.columnBarID = base.Columns["BarID"];
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnLineID = base.Columns["LineID"];
                this.columnFunctionFlag = base.Columns["FunctionFlag"];
                this.columnBarsFlag = base.Columns["BarsFlag"];
                this.columnObjectFlag = base.Columns["ObjectFlag"];
                this.columnLineFlag = base.Columns["LineFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnAcctDesc = new global::System.Data.DataColumn("AcctDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcctDesc);
                this.columnFunctionID = new global::System.Data.DataColumn("FunctionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunctionID);
                this.columnBarID = new global::System.Data.DataColumn("BarID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarID);
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnLineID = new global::System.Data.DataColumn("LineID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnFunctionFlag = new global::System.Data.DataColumn("FunctionFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunctionFlag);
                this.columnBarsFlag = new global::System.Data.DataColumn("BarsFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarsFlag);
                this.columnObjectFlag = new global::System.Data.DataColumn("ObjectFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectFlag);
                this.columnLineFlag = new global::System.Data.DataColumn("LineFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineFlag);
                this.columnSubFundID.ReadOnly = true;
                this.columnSubFund.MaxLength = 50;
                this.columnAcctDesc.MaxLength = 100;
                this.columnFunctionID.MaxLength = 50;
                this.columnBarID.MaxLength = 50;
                this.columnObjectID.MaxLength = 50;
                this.columnLineID.MaxLength = 50;
                this.columnFunctionFlag.ReadOnly = true;
                this.columnFunctionFlag.MaxLength = 1000;
                this.columnBarsFlag.ReadOnly = true;
                this.columnBarsFlag.MaxLength = 1000;
                this.columnObjectFlag.ReadOnly = true;
                this.columnObjectFlag.MaxLength = 1000;
                this.columnLineFlag.ReadOnly = true;
                this.columnLineFlag.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_GetAccountDetailRow NewF1504_GetAccountDetailRow() {
                return ((F1504_GetAccountDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F1504_GetAccountDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F1504_GetAccountDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F1504_GetAccountDetailRowChanged != null)) {
                    this.F1504_GetAccountDetailRowChanged(this, new F1504_GetAccountDetailRowChangeEvent(((F1504_GetAccountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F1504_GetAccountDetailRowChanging != null)) {
                    this.F1504_GetAccountDetailRowChanging(this, new F1504_GetAccountDetailRowChangeEvent(((F1504_GetAccountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F1504_GetAccountDetailRowDeleted != null)) {
                    this.F1504_GetAccountDetailRowDeleted(this, new F1504_GetAccountDetailRowChangeEvent(((F1504_GetAccountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F1504_GetAccountDetailRowDeleting != null)) {
                    this.F1504_GetAccountDetailRowDeleting(this, new F1504_GetAccountDetailRowChangeEvent(((F1504_GetAccountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF1504_GetAccountDetailRow(F1504_GetAccountDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1504CopyAccountData ds = new F1504CopyAccountData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F1504_GetAccountDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F1504_SaveCopyAccountDataTable : global::System.Data.TypedTableBase<F1504_SaveCopyAccountRow> {
            
            private global::System.Data.DataColumn columnKeyID;
            
            private global::System.Data.DataColumn columnIsShowMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_SaveCopyAccountDataTable() {
                this.TableName = "F1504_SaveCopyAccount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F1504_SaveCopyAccountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F1504_SaveCopyAccountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsShowMessageColumn {
                get {
                    return this.columnIsShowMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_SaveCopyAccountRow this[int index] {
                get {
                    return ((F1504_SaveCopyAccountRow)(this.Rows[index]));
                }
            }
            
            public event F1504_SaveCopyAccountRowChangeEventHandler F1504_SaveCopyAccountRowChanging;
            
            public event F1504_SaveCopyAccountRowChangeEventHandler F1504_SaveCopyAccountRowChanged;
            
            public event F1504_SaveCopyAccountRowChangeEventHandler F1504_SaveCopyAccountRowDeleting;
            
            public event F1504_SaveCopyAccountRowChangeEventHandler F1504_SaveCopyAccountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF1504_SaveCopyAccountRow(F1504_SaveCopyAccountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_SaveCopyAccountRow AddF1504_SaveCopyAccountRow(string KeyID, bool IsShowMessage) {
                F1504_SaveCopyAccountRow rowF1504_SaveCopyAccountRow = ((F1504_SaveCopyAccountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyID,
                        IsShowMessage};
                rowF1504_SaveCopyAccountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF1504_SaveCopyAccountRow);
                return rowF1504_SaveCopyAccountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F1504_SaveCopyAccountDataTable cln = ((F1504_SaveCopyAccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F1504_SaveCopyAccountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
                this.columnIsShowMessage = base.Columns["IsShowMessage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnIsShowMessage = new global::System.Data.DataColumn("IsShowMessage", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsShowMessage);
                this.columnKeyID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_SaveCopyAccountRow NewF1504_SaveCopyAccountRow() {
                return ((F1504_SaveCopyAccountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F1504_SaveCopyAccountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F1504_SaveCopyAccountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F1504_SaveCopyAccountRowChanged != null)) {
                    this.F1504_SaveCopyAccountRowChanged(this, new F1504_SaveCopyAccountRowChangeEvent(((F1504_SaveCopyAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F1504_SaveCopyAccountRowChanging != null)) {
                    this.F1504_SaveCopyAccountRowChanging(this, new F1504_SaveCopyAccountRowChangeEvent(((F1504_SaveCopyAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F1504_SaveCopyAccountRowDeleted != null)) {
                    this.F1504_SaveCopyAccountRowDeleted(this, new F1504_SaveCopyAccountRowChangeEvent(((F1504_SaveCopyAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F1504_SaveCopyAccountRowDeleting != null)) {
                    this.F1504_SaveCopyAccountRowDeleting(this, new F1504_SaveCopyAccountRowChangeEvent(((F1504_SaveCopyAccountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF1504_SaveCopyAccountRow(F1504_SaveCopyAccountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1504CopyAccountData ds = new F1504CopyAccountData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F1504_SaveCopyAccountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F1504_ListSubFundRow : global::System.Data.DataRow {
            
            private F1504_ListSubFundDataTable tableF1504_ListSubFund;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F1504_ListSubFundRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF1504_ListSubFund = ((F1504_ListSubFundDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableF1504_ListSubFund.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'F1504_ListSubFund\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_ListSubFund.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableF1504_ListSubFund.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableF1504_ListSubFund.SubFundColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F1504_GetAccountDetailRow : global::System.Data.DataRow {
            
            private F1504_GetAccountDetailDataTable tableF1504_GetAccountDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F1504_GetAccountDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF1504_GetAccountDetail = ((F1504_GetAccountDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableF1504_GetAccountDetail.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFundID {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AcctDesc {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.AcctDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcctDesc\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.AcctDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FunctionID {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.FunctionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FunctionID\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.FunctionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarID {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.BarIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarID\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.BarIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectID {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineID {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.LineIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineID\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.LineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FunctionFlag {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.FunctionFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FunctionFlag\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.FunctionFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarsFlag {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.BarsFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarsFlag\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.BarsFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectFlag {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.ObjectFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectFlag\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.ObjectFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineFlag {
                get {
                    try {
                        return ((string)(this[this.tableF1504_GetAccountDetail.LineFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineFlag\' in table \'F1504_GetAccountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_GetAccountDetail.LineFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableF1504_GetAccountDetail.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tableF1504_GetAccountDetail.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableF1504_GetAccountDetail.SubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcctDescNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.AcctDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcctDescNull() {
                this[this.tableF1504_GetAccountDetail.AcctDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunctionIDNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.FunctionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunctionIDNull() {
                this[this.tableF1504_GetAccountDetail.FunctionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarIDNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.BarIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarIDNull() {
                this[this.tableF1504_GetAccountDetail.BarIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableF1504_GetAccountDetail.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineIDNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.LineIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineIDNull() {
                this[this.tableF1504_GetAccountDetail.LineIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunctionFlagNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.FunctionFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunctionFlagNull() {
                this[this.tableF1504_GetAccountDetail.FunctionFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarsFlagNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.BarsFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarsFlagNull() {
                this[this.tableF1504_GetAccountDetail.BarsFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectFlagNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.ObjectFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectFlagNull() {
                this[this.tableF1504_GetAccountDetail.ObjectFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineFlagNull() {
                return this.IsNull(this.tableF1504_GetAccountDetail.LineFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineFlagNull() {
                this[this.tableF1504_GetAccountDetail.LineFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F1504_SaveCopyAccountRow : global::System.Data.DataRow {
            
            private F1504_SaveCopyAccountDataTable tableF1504_SaveCopyAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F1504_SaveCopyAccountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF1504_SaveCopyAccount = ((F1504_SaveCopyAccountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyID {
                get {
                    try {
                        return ((string)(this[this.tableF1504_SaveCopyAccount.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'F1504_SaveCopyAccount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_SaveCopyAccount.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShowMessage {
                get {
                    try {
                        return ((bool)(this[this.tableF1504_SaveCopyAccount.IsShowMessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsShowMessage\' in table \'F1504_SaveCopyAccount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF1504_SaveCopyAccount.IsShowMessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableF1504_SaveCopyAccount.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableF1504_SaveCopyAccount.KeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsShowMessageNull() {
                return this.IsNull(this.tableF1504_SaveCopyAccount.IsShowMessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsShowMessageNull() {
                this[this.tableF1504_SaveCopyAccount.IsShowMessageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F1504_ListSubFundRowChangeEvent : global::System.EventArgs {
            
            private F1504_ListSubFundRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_ListSubFundRowChangeEvent(F1504_ListSubFundRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_ListSubFundRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F1504_GetAccountDetailRowChangeEvent : global::System.EventArgs {
            
            private F1504_GetAccountDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_GetAccountDetailRowChangeEvent(F1504_GetAccountDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_GetAccountDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F1504_SaveCopyAccountRowChangeEvent : global::System.EventArgs {
            
            private F1504_SaveCopyAccountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_SaveCopyAccountRowChangeEvent(F1504_SaveCopyAccountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F1504_SaveCopyAccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591