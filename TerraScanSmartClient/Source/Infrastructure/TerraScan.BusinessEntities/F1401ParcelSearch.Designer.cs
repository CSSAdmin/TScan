//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F1401ParcelSearch")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F1401ParcelSearch : global::System.Data.DataSet {
        
        private ParcelTypeDataTableDataTable tableParcelTypeDataTable;
        
        private ParcelLabelDataTableDataTable tableParcelLabelDataTable;
        
        private ParcelSearchDataTableDataTable tableParcelSearchDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F1401ParcelSearch() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F1401ParcelSearch(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ParcelTypeDataTable"] != null)) {
                    base.Tables.Add(new ParcelTypeDataTableDataTable(ds.Tables["ParcelTypeDataTable"]));
                }
                if ((ds.Tables["ParcelLabelDataTable"] != null)) {
                    base.Tables.Add(new ParcelLabelDataTableDataTable(ds.Tables["ParcelLabelDataTable"]));
                }
                if ((ds.Tables["ParcelSearchDataTable"] != null)) {
                    base.Tables.Add(new ParcelSearchDataTableDataTable(ds.Tables["ParcelSearchDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParcelTypeDataTableDataTable ParcelTypeDataTable {
            get {
                return this.tableParcelTypeDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParcelLabelDataTableDataTable ParcelLabelDataTable {
            get {
                return this.tableParcelLabelDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParcelSearchDataTableDataTable ParcelSearchDataTable {
            get {
                return this.tableParcelSearchDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F1401ParcelSearch cln = ((F1401ParcelSearch)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ParcelTypeDataTable"] != null)) {
                    base.Tables.Add(new ParcelTypeDataTableDataTable(ds.Tables["ParcelTypeDataTable"]));
                }
                if ((ds.Tables["ParcelLabelDataTable"] != null)) {
                    base.Tables.Add(new ParcelLabelDataTableDataTable(ds.Tables["ParcelLabelDataTable"]));
                }
                if ((ds.Tables["ParcelSearchDataTable"] != null)) {
                    base.Tables.Add(new ParcelSearchDataTableDataTable(ds.Tables["ParcelSearchDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableParcelTypeDataTable = ((ParcelTypeDataTableDataTable)(base.Tables["ParcelTypeDataTable"]));
            if ((initTable == true)) {
                if ((this.tableParcelTypeDataTable != null)) {
                    this.tableParcelTypeDataTable.InitVars();
                }
            }
            this.tableParcelLabelDataTable = ((ParcelLabelDataTableDataTable)(base.Tables["ParcelLabelDataTable"]));
            if ((initTable == true)) {
                if ((this.tableParcelLabelDataTable != null)) {
                    this.tableParcelLabelDataTable.InitVars();
                }
            }
            this.tableParcelSearchDataTable = ((ParcelSearchDataTableDataTable)(base.Tables["ParcelSearchDataTable"]));
            if ((initTable == true)) {
                if ((this.tableParcelSearchDataTable != null)) {
                    this.tableParcelSearchDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F1401ParcelSearch";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F1401ParcelSearch.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableParcelTypeDataTable = new ParcelTypeDataTableDataTable();
            base.Tables.Add(this.tableParcelTypeDataTable);
            this.tableParcelLabelDataTable = new ParcelLabelDataTableDataTable();
            base.Tables.Add(this.tableParcelLabelDataTable);
            this.tableParcelSearchDataTable = new ParcelSearchDataTableDataTable();
            base.Tables.Add(this.tableParcelSearchDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParcelTypeDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParcelLabelDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParcelSearchDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F1401ParcelSearch ds = new F1401ParcelSearch();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ParcelTypeDataTableRowChangeEventHandler(object sender, ParcelTypeDataTableRowChangeEvent e);
        
        public delegate void ParcelLabelDataTableRowChangeEventHandler(object sender, ParcelLabelDataTableRowChangeEvent e);
        
        public delegate void ParcelSearchDataTableRowChangeEventHandler(object sender, ParcelSearchDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParcelTypeDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnParcelTypeID;
            
            private global::System.Data.DataColumn columnParcelType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelTypeDataTableDataTable() {
                this.TableName = "ParcelTypeDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelTypeDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParcelTypeDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeIDColumn {
                get {
                    return this.columnParcelTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeColumn {
                get {
                    return this.columnParcelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelTypeDataTableRow this[int index] {
                get {
                    return ((ParcelTypeDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ParcelTypeDataTableRowChangeEventHandler ParcelTypeDataTableRowChanging;
            
            public event ParcelTypeDataTableRowChangeEventHandler ParcelTypeDataTableRowChanged;
            
            public event ParcelTypeDataTableRowChangeEventHandler ParcelTypeDataTableRowDeleting;
            
            public event ParcelTypeDataTableRowChangeEventHandler ParcelTypeDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParcelTypeDataTableRow(ParcelTypeDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelTypeDataTableRow AddParcelTypeDataTableRow(string ParcelType) {
                ParcelTypeDataTableRow rowParcelTypeDataTableRow = ((ParcelTypeDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelType};
                rowParcelTypeDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParcelTypeDataTableRow);
                return rowParcelTypeDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParcelTypeDataTableDataTable cln = ((ParcelTypeDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParcelTypeDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelTypeID = base.Columns["ParcelTypeID"];
                this.columnParcelType = base.Columns["ParcelType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelTypeID = new global::System.Data.DataColumn("ParcelTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelTypeID);
                this.columnParcelType = new global::System.Data.DataColumn("ParcelType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelType);
                this.columnParcelTypeID.AutoIncrement = true;
                this.columnParcelTypeID.ReadOnly = true;
                this.columnParcelType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelTypeDataTableRow NewParcelTypeDataTableRow() {
                return ((ParcelTypeDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParcelTypeDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParcelTypeDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParcelTypeDataTableRowChanged != null)) {
                    this.ParcelTypeDataTableRowChanged(this, new ParcelTypeDataTableRowChangeEvent(((ParcelTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParcelTypeDataTableRowChanging != null)) {
                    this.ParcelTypeDataTableRowChanging(this, new ParcelTypeDataTableRowChangeEvent(((ParcelTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParcelTypeDataTableRowDeleted != null)) {
                    this.ParcelTypeDataTableRowDeleted(this, new ParcelTypeDataTableRowChangeEvent(((ParcelTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParcelTypeDataTableRowDeleting != null)) {
                    this.ParcelTypeDataTableRowDeleting(this, new ParcelTypeDataTableRowChangeEvent(((ParcelTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParcelTypeDataTableRow(ParcelTypeDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1401ParcelSearch ds = new F1401ParcelSearch();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParcelTypeDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParcelLabelDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID1;
            
            private global::System.Data.DataColumn columnID2;
            
            private global::System.Data.DataColumn columnID3;
            
            private global::System.Data.DataColumn columnID4;
            
            private global::System.Data.DataColumn columnID5;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelLabelDataTableDataTable() {
                this.TableName = "ParcelLabelDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelLabelDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParcelLabelDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID1Column {
                get {
                    return this.columnID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID2Column {
                get {
                    return this.columnID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID3Column {
                get {
                    return this.columnID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID4Column {
                get {
                    return this.columnID4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID5Column {
                get {
                    return this.columnID5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelLabelDataTableRow this[int index] {
                get {
                    return ((ParcelLabelDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ParcelLabelDataTableRowChangeEventHandler ParcelLabelDataTableRowChanging;
            
            public event ParcelLabelDataTableRowChangeEventHandler ParcelLabelDataTableRowChanged;
            
            public event ParcelLabelDataTableRowChangeEventHandler ParcelLabelDataTableRowDeleting;
            
            public event ParcelLabelDataTableRowChangeEventHandler ParcelLabelDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParcelLabelDataTableRow(ParcelLabelDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelLabelDataTableRow AddParcelLabelDataTableRow(string ID1, string ID2, string ID3, string ID4, string ID5) {
                ParcelLabelDataTableRow rowParcelLabelDataTableRow = ((ParcelLabelDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID1,
                        ID2,
                        ID3,
                        ID4,
                        ID5};
                rowParcelLabelDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParcelLabelDataTableRow);
                return rowParcelLabelDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParcelLabelDataTableDataTable cln = ((ParcelLabelDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParcelLabelDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID1 = base.Columns["ID1"];
                this.columnID2 = base.Columns["ID2"];
                this.columnID3 = base.Columns["ID3"];
                this.columnID4 = base.Columns["ID4"];
                this.columnID5 = base.Columns["ID5"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID1 = new global::System.Data.DataColumn("ID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID1);
                this.columnID2 = new global::System.Data.DataColumn("ID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID2);
                this.columnID3 = new global::System.Data.DataColumn("ID3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID3);
                this.columnID4 = new global::System.Data.DataColumn("ID4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID4);
                this.columnID5 = new global::System.Data.DataColumn("ID5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID5);
                this.columnID1.ReadOnly = true;
                this.columnID1.MaxLength = 1000;
                this.columnID2.ReadOnly = true;
                this.columnID2.MaxLength = 1000;
                this.columnID3.ReadOnly = true;
                this.columnID3.MaxLength = 1000;
                this.columnID4.ReadOnly = true;
                this.columnID4.MaxLength = 1000;
                this.columnID5.ReadOnly = true;
                this.columnID5.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelLabelDataTableRow NewParcelLabelDataTableRow() {
                return ((ParcelLabelDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParcelLabelDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParcelLabelDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParcelLabelDataTableRowChanged != null)) {
                    this.ParcelLabelDataTableRowChanged(this, new ParcelLabelDataTableRowChangeEvent(((ParcelLabelDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParcelLabelDataTableRowChanging != null)) {
                    this.ParcelLabelDataTableRowChanging(this, new ParcelLabelDataTableRowChangeEvent(((ParcelLabelDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParcelLabelDataTableRowDeleted != null)) {
                    this.ParcelLabelDataTableRowDeleted(this, new ParcelLabelDataTableRowChangeEvent(((ParcelLabelDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParcelLabelDataTableRowDeleting != null)) {
                    this.ParcelLabelDataTableRowDeleting(this, new ParcelLabelDataTableRowChangeEvent(((ParcelLabelDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParcelLabelDataTableRow(ParcelLabelDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1401ParcelSearch ds = new F1401ParcelSearch();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParcelLabelDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParcelSearchDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnParcelTypeID;
            
            private global::System.Data.DataColumn columnParcelType;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnNeighborhood;
            
            private global::System.Data.DataColumn columnStateCode;
            
            private global::System.Data.DataColumn columnID1;
            
            private global::System.Data.DataColumn columnID2;
            
            private global::System.Data.DataColumn columnID3;
            
            private global::System.Data.DataColumn columnID4;
            
            private global::System.Data.DataColumn columnID5;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSearchDataTableDataTable() {
                this.TableName = "ParcelSearchDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelSearchDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParcelSearchDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeIDColumn {
                get {
                    return this.columnParcelTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeColumn {
                get {
                    return this.columnParcelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NeighborhoodColumn {
                get {
                    return this.columnNeighborhood;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateCodeColumn {
                get {
                    return this.columnStateCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID1Column {
                get {
                    return this.columnID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID2Column {
                get {
                    return this.columnID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID3Column {
                get {
                    return this.columnID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID4Column {
                get {
                    return this.columnID4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID5Column {
                get {
                    return this.columnID5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSearchDataTableRow this[int index] {
                get {
                    return ((ParcelSearchDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ParcelSearchDataTableRowChangeEventHandler ParcelSearchDataTableRowChanging;
            
            public event ParcelSearchDataTableRowChangeEventHandler ParcelSearchDataTableRowChanged;
            
            public event ParcelSearchDataTableRowChangeEventHandler ParcelSearchDataTableRowDeleting;
            
            public event ParcelSearchDataTableRowChangeEventHandler ParcelSearchDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParcelSearchDataTableRow(ParcelSearchDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSearchDataTableRow AddParcelSearchDataTableRow(
                        string ParcelNumber, 
                        string StatementNumber, 
                        string OwnerName, 
                        short RollYear, 
                        byte ParcelTypeID, 
                        string ParcelType, 
                        string Situs, 
                        string Legal, 
                        string District, 
                        string Neighborhood, 
                        string StateCode, 
                        string ID1, 
                        string ID2, 
                        string ID3, 
                        string ID4, 
                        string ID5) {
                ParcelSearchDataTableRow rowParcelSearchDataTableRow = ((ParcelSearchDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelNumber,
                        StatementNumber,
                        null,
                        OwnerName,
                        RollYear,
                        ParcelTypeID,
                        ParcelType,
                        Situs,
                        Legal,
                        District,
                        Neighborhood,
                        StateCode,
                        ID1,
                        ID2,
                        ID3,
                        ID4,
                        ID5};
                rowParcelSearchDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParcelSearchDataTableRow);
                return rowParcelSearchDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParcelSearchDataTableDataTable cln = ((ParcelSearchDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParcelSearchDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnParcelTypeID = base.Columns["ParcelTypeID"];
                this.columnParcelType = base.Columns["ParcelType"];
                this.columnSitus = base.Columns["Situs"];
                this.columnLegal = base.Columns["Legal"];
                this.columnDistrict = base.Columns["District"];
                this.columnNeighborhood = base.Columns["Neighborhood"];
                this.columnStateCode = base.Columns["StateCode"];
                this.columnID1 = base.Columns["ID1"];
                this.columnID2 = base.Columns["ID2"];
                this.columnID3 = base.Columns["ID3"];
                this.columnID4 = base.Columns["ID4"];
                this.columnID5 = base.Columns["ID5"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnParcelTypeID = new global::System.Data.DataColumn("ParcelTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelTypeID);
                this.columnParcelType = new global::System.Data.DataColumn("ParcelType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelType);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnNeighborhood = new global::System.Data.DataColumn("Neighborhood", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNeighborhood);
                this.columnStateCode = new global::System.Data.DataColumn("StateCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateCode);
                this.columnID1 = new global::System.Data.DataColumn("ID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID1);
                this.columnID2 = new global::System.Data.DataColumn("ID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID2);
                this.columnID3 = new global::System.Data.DataColumn("ID3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID3);
                this.columnID4 = new global::System.Data.DataColumn("ID4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID4);
                this.columnID5 = new global::System.Data.DataColumn("ID5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID5);
                this.columnParcelID.AutoIncrement = true;
                this.columnParcelID.ReadOnly = true;
                this.columnParcelNumber.MaxLength = 50;
                this.columnStatementNumber.MaxLength = 50;
                this.columnOwnerID.AutoIncrement = true;
                this.columnOwnerID.ReadOnly = true;
                this.columnOwnerName.ReadOnly = true;
                this.columnOwnerName.MaxLength = 102;
                this.columnParcelType.MaxLength = 50;
                this.columnSitus.ReadOnly = true;
                this.columnSitus.MaxLength = 400;
                this.columnLegal.ReadOnly = true;
                this.columnLegal.MaxLength = 5000;
                this.columnDistrict.ReadOnly = true;
                this.columnDistrict.MaxLength = 103;
                this.columnNeighborhood.ReadOnly = true;
                this.columnNeighborhood.MaxLength = 103;
                this.columnStateCode.MaxLength = 50;
                this.columnID1.MaxLength = 50;
                this.columnID2.MaxLength = 50;
                this.columnID3.MaxLength = 50;
                this.columnID4.MaxLength = 50;
                this.columnID5.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSearchDataTableRow NewParcelSearchDataTableRow() {
                return ((ParcelSearchDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParcelSearchDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParcelSearchDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParcelSearchDataTableRowChanged != null)) {
                    this.ParcelSearchDataTableRowChanged(this, new ParcelSearchDataTableRowChangeEvent(((ParcelSearchDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParcelSearchDataTableRowChanging != null)) {
                    this.ParcelSearchDataTableRowChanging(this, new ParcelSearchDataTableRowChangeEvent(((ParcelSearchDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParcelSearchDataTableRowDeleted != null)) {
                    this.ParcelSearchDataTableRowDeleted(this, new ParcelSearchDataTableRowChangeEvent(((ParcelSearchDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParcelSearchDataTableRowDeleting != null)) {
                    this.ParcelSearchDataTableRowDeleting(this, new ParcelSearchDataTableRowChangeEvent(((ParcelSearchDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParcelSearchDataTableRow(ParcelSearchDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1401ParcelSearch ds = new F1401ParcelSearch();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParcelSearchDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParcelTypeDataTableRow : global::System.Data.DataRow {
            
            private ParcelTypeDataTableDataTable tableParcelTypeDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelTypeDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParcelTypeDataTable = ((ParcelTypeDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelTypeID {
                get {
                    try {
                        return ((int)(this[this.tableParcelTypeDataTable.ParcelTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelTypeID\' in table \'ParcelTypeDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelTypeDataTable.ParcelTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelType {
                get {
                    try {
                        return ((string)(this[this.tableParcelTypeDataTable.ParcelTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelType\' in table \'ParcelTypeDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelTypeDataTable.ParcelTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelTypeIDNull() {
                return this.IsNull(this.tableParcelTypeDataTable.ParcelTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelTypeIDNull() {
                this[this.tableParcelTypeDataTable.ParcelTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelTypeNull() {
                return this.IsNull(this.tableParcelTypeDataTable.ParcelTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelTypeNull() {
                this[this.tableParcelTypeDataTable.ParcelTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParcelLabelDataTableRow : global::System.Data.DataRow {
            
            private ParcelLabelDataTableDataTable tableParcelLabelDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelLabelDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParcelLabelDataTable = ((ParcelLabelDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID1 {
                get {
                    try {
                        return ((string)(this[this.tableParcelLabelDataTable.ID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID1\' in table \'ParcelLabelDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelLabelDataTable.ID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID2 {
                get {
                    try {
                        return ((string)(this[this.tableParcelLabelDataTable.ID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID2\' in table \'ParcelLabelDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelLabelDataTable.ID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID3 {
                get {
                    try {
                        return ((string)(this[this.tableParcelLabelDataTable.ID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID3\' in table \'ParcelLabelDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelLabelDataTable.ID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID4 {
                get {
                    try {
                        return ((string)(this[this.tableParcelLabelDataTable.ID4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID4\' in table \'ParcelLabelDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelLabelDataTable.ID4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID5 {
                get {
                    try {
                        return ((string)(this[this.tableParcelLabelDataTable.ID5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID5\' in table \'ParcelLabelDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelLabelDataTable.ID5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID1Null() {
                return this.IsNull(this.tableParcelLabelDataTable.ID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID1Null() {
                this[this.tableParcelLabelDataTable.ID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID2Null() {
                return this.IsNull(this.tableParcelLabelDataTable.ID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID2Null() {
                this[this.tableParcelLabelDataTable.ID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID3Null() {
                return this.IsNull(this.tableParcelLabelDataTable.ID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID3Null() {
                this[this.tableParcelLabelDataTable.ID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID4Null() {
                return this.IsNull(this.tableParcelLabelDataTable.ID4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID4Null() {
                this[this.tableParcelLabelDataTable.ID4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID5Null() {
                return this.IsNull(this.tableParcelLabelDataTable.ID5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID5Null() {
                this[this.tableParcelLabelDataTable.ID5Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParcelSearchDataTableRow : global::System.Data.DataRow {
            
            private ParcelSearchDataTableDataTable tableParcelSearchDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelSearchDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParcelSearchDataTable = ((ParcelSearchDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableParcelSearchDataTable.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.StatementNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementNumber\' in table \'ParcelSearchDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableParcelSearchDataTable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableParcelSearchDataTable.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ParcelTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableParcelSearchDataTable.ParcelTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelTypeID\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.ParcelTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelType {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.ParcelTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelType\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.ParcelTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Neighborhood {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.NeighborhoodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Neighborhood\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.NeighborhoodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateCode {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.StateCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateCode\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.StateCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID1 {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.ID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID1\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.ID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID2 {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.ID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID2\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.ID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID3 {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.ID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID3\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.ID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID4 {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.ID4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID4\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.ID4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID5 {
                get {
                    try {
                        return ((string)(this[this.tableParcelSearchDataTable.ID5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID5\' in table \'ParcelSearchDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSearchDataTable.ID5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableParcelSearchDataTable.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableParcelSearchDataTable.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableParcelSearchDataTable.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableParcelSearchDataTable.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableParcelSearchDataTable.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableParcelSearchDataTable.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableParcelSearchDataTable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableParcelSearchDataTable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableParcelSearchDataTable.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableParcelSearchDataTable.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableParcelSearchDataTable.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableParcelSearchDataTable.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelTypeIDNull() {
                return this.IsNull(this.tableParcelSearchDataTable.ParcelTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelTypeIDNull() {
                this[this.tableParcelSearchDataTable.ParcelTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelTypeNull() {
                return this.IsNull(this.tableParcelSearchDataTable.ParcelTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelTypeNull() {
                this[this.tableParcelSearchDataTable.ParcelTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableParcelSearchDataTable.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableParcelSearchDataTable.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableParcelSearchDataTable.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableParcelSearchDataTable.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableParcelSearchDataTable.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableParcelSearchDataTable.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNeighborhoodNull() {
                return this.IsNull(this.tableParcelSearchDataTable.NeighborhoodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNeighborhoodNull() {
                this[this.tableParcelSearchDataTable.NeighborhoodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateCodeNull() {
                return this.IsNull(this.tableParcelSearchDataTable.StateCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateCodeNull() {
                this[this.tableParcelSearchDataTable.StateCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID1Null() {
                return this.IsNull(this.tableParcelSearchDataTable.ID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID1Null() {
                this[this.tableParcelSearchDataTable.ID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID2Null() {
                return this.IsNull(this.tableParcelSearchDataTable.ID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID2Null() {
                this[this.tableParcelSearchDataTable.ID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID3Null() {
                return this.IsNull(this.tableParcelSearchDataTable.ID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID3Null() {
                this[this.tableParcelSearchDataTable.ID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID4Null() {
                return this.IsNull(this.tableParcelSearchDataTable.ID4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID4Null() {
                this[this.tableParcelSearchDataTable.ID4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID5Null() {
                return this.IsNull(this.tableParcelSearchDataTable.ID5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID5Null() {
                this[this.tableParcelSearchDataTable.ID5Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParcelTypeDataTableRowChangeEvent : global::System.EventArgs {
            
            private ParcelTypeDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelTypeDataTableRowChangeEvent(ParcelTypeDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelTypeDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParcelLabelDataTableRowChangeEvent : global::System.EventArgs {
            
            private ParcelLabelDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelLabelDataTableRowChangeEvent(ParcelLabelDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelLabelDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParcelSearchDataTableRowChangeEvent : global::System.EventArgs {
            
            private ParcelSearchDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSearchDataTableRowChangeEvent(ParcelSearchDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSearchDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591