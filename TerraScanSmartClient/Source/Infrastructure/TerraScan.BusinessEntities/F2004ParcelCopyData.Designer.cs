//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F2004ParcelCopyData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F2004ParcelCopyData : global::System.Data.DataSet {
        
        private f2004ListParcelTypeDataTable tablef2004ListParcelType;
        
        private createNewParcelCopyDataTableDataTable tablecreateNewParcelCopyDataTable;
        
        private getParcelAttachmentTableDataTable tablegetParcelAttachmentTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F2004ParcelCopyData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F2004ParcelCopyData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["f2004ListParcelType"] != null)) {
                    base.Tables.Add(new f2004ListParcelTypeDataTable(ds.Tables["f2004ListParcelType"]));
                }
                if ((ds.Tables["createNewParcelCopyDataTable"] != null)) {
                    base.Tables.Add(new createNewParcelCopyDataTableDataTable(ds.Tables["createNewParcelCopyDataTable"]));
                }
                if ((ds.Tables["getParcelAttachmentTable"] != null)) {
                    base.Tables.Add(new getParcelAttachmentTableDataTable(ds.Tables["getParcelAttachmentTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f2004ListParcelTypeDataTable f2004ListParcelType {
            get {
                return this.tablef2004ListParcelType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public createNewParcelCopyDataTableDataTable createNewParcelCopyDataTable {
            get {
                return this.tablecreateNewParcelCopyDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public getParcelAttachmentTableDataTable getParcelAttachmentTable {
            get {
                return this.tablegetParcelAttachmentTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F2004ParcelCopyData cln = ((F2004ParcelCopyData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["f2004ListParcelType"] != null)) {
                    base.Tables.Add(new f2004ListParcelTypeDataTable(ds.Tables["f2004ListParcelType"]));
                }
                if ((ds.Tables["createNewParcelCopyDataTable"] != null)) {
                    base.Tables.Add(new createNewParcelCopyDataTableDataTable(ds.Tables["createNewParcelCopyDataTable"]));
                }
                if ((ds.Tables["getParcelAttachmentTable"] != null)) {
                    base.Tables.Add(new getParcelAttachmentTableDataTable(ds.Tables["getParcelAttachmentTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablef2004ListParcelType = ((f2004ListParcelTypeDataTable)(base.Tables["f2004ListParcelType"]));
            if ((initTable == true)) {
                if ((this.tablef2004ListParcelType != null)) {
                    this.tablef2004ListParcelType.InitVars();
                }
            }
            this.tablecreateNewParcelCopyDataTable = ((createNewParcelCopyDataTableDataTable)(base.Tables["createNewParcelCopyDataTable"]));
            if ((initTable == true)) {
                if ((this.tablecreateNewParcelCopyDataTable != null)) {
                    this.tablecreateNewParcelCopyDataTable.InitVars();
                }
            }
            this.tablegetParcelAttachmentTable = ((getParcelAttachmentTableDataTable)(base.Tables["getParcelAttachmentTable"]));
            if ((initTable == true)) {
                if ((this.tablegetParcelAttachmentTable != null)) {
                    this.tablegetParcelAttachmentTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F2004ParcelCopyData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F2004ParcelCopyData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablef2004ListParcelType = new f2004ListParcelTypeDataTable();
            base.Tables.Add(this.tablef2004ListParcelType);
            this.tablecreateNewParcelCopyDataTable = new createNewParcelCopyDataTableDataTable();
            base.Tables.Add(this.tablecreateNewParcelCopyDataTable);
            this.tablegetParcelAttachmentTable = new getParcelAttachmentTableDataTable();
            base.Tables.Add(this.tablegetParcelAttachmentTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef2004ListParcelType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecreateNewParcelCopyDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegetParcelAttachmentTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F2004ParcelCopyData ds = new F2004ParcelCopyData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void f2004ListParcelTypeRowChangeEventHandler(object sender, f2004ListParcelTypeRowChangeEvent e);
        
        public delegate void createNewParcelCopyDataTableRowChangeEventHandler(object sender, createNewParcelCopyDataTableRowChangeEvent e);
        
        public delegate void getParcelAttachmentTableRowChangeEventHandler(object sender, getParcelAttachmentTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f2004ListParcelTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnParcelTypeID;
            
            private global::System.Data.DataColumn columnParcelType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2004ListParcelTypeDataTable() {
                this.TableName = "f2004ListParcelType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f2004ListParcelTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f2004ListParcelTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeIDColumn {
                get {
                    return this.columnParcelTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeColumn {
                get {
                    return this.columnParcelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2004ListParcelTypeRow this[int index] {
                get {
                    return ((f2004ListParcelTypeRow)(this.Rows[index]));
                }
            }
            
            public event f2004ListParcelTypeRowChangeEventHandler f2004ListParcelTypeRowChanging;
            
            public event f2004ListParcelTypeRowChangeEventHandler f2004ListParcelTypeRowChanged;
            
            public event f2004ListParcelTypeRowChangeEventHandler f2004ListParcelTypeRowDeleting;
            
            public event f2004ListParcelTypeRowChangeEventHandler f2004ListParcelTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf2004ListParcelTypeRow(f2004ListParcelTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2004ListParcelTypeRow Addf2004ListParcelTypeRow(string ParcelType) {
                f2004ListParcelTypeRow rowf2004ListParcelTypeRow = ((f2004ListParcelTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelType};
                rowf2004ListParcelTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf2004ListParcelTypeRow);
                return rowf2004ListParcelTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2004ListParcelTypeRow FindByParcelTypeID(int ParcelTypeID) {
                return ((f2004ListParcelTypeRow)(this.Rows.Find(new object[] {
                            ParcelTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f2004ListParcelTypeDataTable cln = ((f2004ListParcelTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f2004ListParcelTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelTypeID = base.Columns["ParcelTypeID"];
                this.columnParcelType = base.Columns["ParcelType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelTypeID = new global::System.Data.DataColumn("ParcelTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelTypeID);
                this.columnParcelType = new global::System.Data.DataColumn("ParcelType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnParcelTypeID}, true));
                this.columnParcelTypeID.AutoIncrement = true;
                this.columnParcelTypeID.AllowDBNull = false;
                this.columnParcelTypeID.ReadOnly = true;
                this.columnParcelTypeID.Unique = true;
                this.columnParcelType.AllowDBNull = false;
                this.columnParcelType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2004ListParcelTypeRow Newf2004ListParcelTypeRow() {
                return ((f2004ListParcelTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f2004ListParcelTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f2004ListParcelTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f2004ListParcelTypeRowChanged != null)) {
                    this.f2004ListParcelTypeRowChanged(this, new f2004ListParcelTypeRowChangeEvent(((f2004ListParcelTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f2004ListParcelTypeRowChanging != null)) {
                    this.f2004ListParcelTypeRowChanging(this, new f2004ListParcelTypeRowChangeEvent(((f2004ListParcelTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f2004ListParcelTypeRowDeleted != null)) {
                    this.f2004ListParcelTypeRowDeleted(this, new f2004ListParcelTypeRowChangeEvent(((f2004ListParcelTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f2004ListParcelTypeRowDeleting != null)) {
                    this.f2004ListParcelTypeRowDeleting(this, new f2004ListParcelTypeRowChangeEvent(((f2004ListParcelTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef2004ListParcelTypeRow(f2004ListParcelTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2004ParcelCopyData ds = new F2004ParcelCopyData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f2004ListParcelTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class createNewParcelCopyDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModuleID;
            
            private global::System.Data.DataColumn columnInsertedBy;
            
            private global::System.Data.DataColumn columnInsertedDate;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnAssessmentTypeID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createNewParcelCopyDataTableDataTable() {
                this.TableName = "createNewParcelCopyDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal createNewParcelCopyDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected createNewParcelCopyDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIDColumn {
                get {
                    return this.columnModuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedByColumn {
                get {
                    return this.columnInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsertedDateColumn {
                get {
                    return this.columnInsertedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeIDColumn {
                get {
                    return this.columnAssessmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createNewParcelCopyDataTableRow this[int index] {
                get {
                    return ((createNewParcelCopyDataTableRow)(this.Rows[index]));
                }
            }
            
            public event createNewParcelCopyDataTableRowChangeEventHandler createNewParcelCopyDataTableRowChanging;
            
            public event createNewParcelCopyDataTableRowChangeEventHandler createNewParcelCopyDataTableRowChanged;
            
            public event createNewParcelCopyDataTableRowChangeEventHandler createNewParcelCopyDataTableRowDeleting;
            
            public event createNewParcelCopyDataTableRowChangeEventHandler createNewParcelCopyDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcreateNewParcelCopyDataTableRow(createNewParcelCopyDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createNewParcelCopyDataTableRow AddcreateNewParcelCopyDataTableRow(string ModuleID, int InsertedBy, string InsertedDate, string IsDeleted, string ParcelNumber, short AssessmentTypeID, string RollYear) {
                createNewParcelCopyDataTableRow rowcreateNewParcelCopyDataTableRow = ((createNewParcelCopyDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModuleID,
                        InsertedBy,
                        InsertedDate,
                        IsDeleted,
                        ParcelNumber,
                        AssessmentTypeID,
                        RollYear};
                rowcreateNewParcelCopyDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcreateNewParcelCopyDataTableRow);
                return rowcreateNewParcelCopyDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                createNewParcelCopyDataTableDataTable cln = ((createNewParcelCopyDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new createNewParcelCopyDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnInsertedBy = base.Columns["InsertedBy"];
                this.columnInsertedDate = base.Columns["InsertedDate"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnAssessmentTypeID = base.Columns["AssessmentTypeID"];
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModuleID = new global::System.Data.DataColumn("ModuleID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnInsertedBy = new global::System.Data.DataColumn("InsertedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedBy);
                this.columnInsertedDate = new global::System.Data.DataColumn("InsertedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsertedDate);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnAssessmentTypeID = new global::System.Data.DataColumn("AssessmentTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentTypeID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnModuleID.MaxLength = 50;
                this.columnInsertedDate.MaxLength = 50;
                this.columnIsDeleted.MaxLength = 10;
                this.columnParcelNumber.MaxLength = 50;
                this.columnRollYear.MaxLength = 4;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createNewParcelCopyDataTableRow NewcreateNewParcelCopyDataTableRow() {
                return ((createNewParcelCopyDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new createNewParcelCopyDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(createNewParcelCopyDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.createNewParcelCopyDataTableRowChanged != null)) {
                    this.createNewParcelCopyDataTableRowChanged(this, new createNewParcelCopyDataTableRowChangeEvent(((createNewParcelCopyDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.createNewParcelCopyDataTableRowChanging != null)) {
                    this.createNewParcelCopyDataTableRowChanging(this, new createNewParcelCopyDataTableRowChangeEvent(((createNewParcelCopyDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.createNewParcelCopyDataTableRowDeleted != null)) {
                    this.createNewParcelCopyDataTableRowDeleted(this, new createNewParcelCopyDataTableRowChangeEvent(((createNewParcelCopyDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.createNewParcelCopyDataTableRowDeleting != null)) {
                    this.createNewParcelCopyDataTableRowDeleting(this, new createNewParcelCopyDataTableRowChangeEvent(((createNewParcelCopyDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecreateNewParcelCopyDataTableRow(createNewParcelCopyDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2004ParcelCopyData ds = new F2004ParcelCopyData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "createNewParcelCopyDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class getParcelAttachmentTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnExtension;
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnColumn1;
            
            private global::System.Data.DataColumn columnFileTypeID;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnIsPrimary;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnIsPublic;
            
            private global::System.Data.DataColumn columnIsRoll;
            
            private global::System.Data.DataColumn columnColumn2;
            
            private global::System.Data.DataColumn columnColumn3;
            
            private global::System.Data.DataColumn columnColumn4;
            
            private global::System.Data.DataColumn columnKeyID;
            
            private global::System.Data.DataColumn columnLinkType;
            
            private global::System.Data.DataColumn columnAURL;
            
            private global::System.Data.DataColumn columnPFileID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getParcelAttachmentTableDataTable() {
                this.TableName = "getParcelAttachmentTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal getParcelAttachmentTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected getParcelAttachmentTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column1Column {
                get {
                    return this.columnColumn1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileTypeIDColumn {
                get {
                    return this.columnFileTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrimaryColumn {
                get {
                    return this.columnIsPrimary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPublicColumn {
                get {
                    return this.columnIsPublic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRollColumn {
                get {
                    return this.columnIsRoll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column2Column {
                get {
                    return this.columnColumn2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column3Column {
                get {
                    return this.columnColumn3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column4Column {
                get {
                    return this.columnColumn4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTypeColumn {
                get {
                    return this.columnLinkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AURLColumn {
                get {
                    return this.columnAURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFileIDColumn {
                get {
                    return this.columnPFileID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getParcelAttachmentTableRow this[int index] {
                get {
                    return ((getParcelAttachmentTableRow)(this.Rows[index]));
                }
            }
            
            public event getParcelAttachmentTableRowChangeEventHandler getParcelAttachmentTableRowChanging;
            
            public event getParcelAttachmentTableRowChangeEventHandler getParcelAttachmentTableRowChanged;
            
            public event getParcelAttachmentTableRowChangeEventHandler getParcelAttachmentTableRowDeleting;
            
            public event getParcelAttachmentTableRowChangeEventHandler getParcelAttachmentTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddgetParcelAttachmentTableRow(getParcelAttachmentTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getParcelAttachmentTableRow AddgetParcelAttachmentTableRow(
                        string Extension, 
                        int Form, 
                        int Column1, 
                        short FileTypeID, 
                        string Source, 
                        bool IsPrimary, 
                        string Description, 
                        System.DateTime EventDate, 
                        int UserID, 
                        bool IsPublic, 
                        bool IsRoll, 
                        int Column2, 
                        int Column3, 
                        int Column4, 
                        int KeyID, 
                        int LinkType, 
                        string AURL, 
                        int PFileID) {
                getParcelAttachmentTableRow rowgetParcelAttachmentTableRow = ((getParcelAttachmentTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Extension,
                        Form,
                        Column1,
                        FileTypeID,
                        Source,
                        IsPrimary,
                        Description,
                        EventDate,
                        UserID,
                        IsPublic,
                        IsRoll,
                        Column2,
                        Column3,
                        Column4,
                        KeyID,
                        LinkType,
                        AURL,
                        PFileID};
                rowgetParcelAttachmentTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowgetParcelAttachmentTableRow);
                return rowgetParcelAttachmentTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                getParcelAttachmentTableDataTable cln = ((getParcelAttachmentTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new getParcelAttachmentTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExtension = base.Columns["Extension"];
                this.columnForm = base.Columns["Form"];
                this.columnColumn1 = base.Columns["Column1"];
                this.columnFileTypeID = base.Columns["FileTypeID"];
                this.columnSource = base.Columns["Source"];
                this.columnIsPrimary = base.Columns["IsPrimary"];
                this.columnDescription = base.Columns["Description"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnUserID = base.Columns["UserID"];
                this.columnIsPublic = base.Columns["IsPublic"];
                this.columnIsRoll = base.Columns["IsRoll"];
                this.columnColumn2 = base.Columns["Column2"];
                this.columnColumn3 = base.Columns["Column3"];
                this.columnColumn4 = base.Columns["Column4"];
                this.columnKeyID = base.Columns["KeyID"];
                this.columnLinkType = base.Columns["LinkType"];
                this.columnAURL = base.Columns["AURL"];
                this.columnPFileID = base.Columns["PFileID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExtension = new global::System.Data.DataColumn("Extension", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtension);
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnColumn1 = new global::System.Data.DataColumn("Column1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn1);
                this.columnFileTypeID = new global::System.Data.DataColumn("FileTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileTypeID);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnIsPrimary = new global::System.Data.DataColumn("IsPrimary", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrimary);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnIsPublic = new global::System.Data.DataColumn("IsPublic", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPublic);
                this.columnIsRoll = new global::System.Data.DataColumn("IsRoll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRoll);
                this.columnColumn2 = new global::System.Data.DataColumn("Column2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn2);
                this.columnColumn3 = new global::System.Data.DataColumn("Column3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn3);
                this.columnColumn4 = new global::System.Data.DataColumn("Column4", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn4);
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnLinkType = new global::System.Data.DataColumn("LinkType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkType);
                this.columnAURL = new global::System.Data.DataColumn("AURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAURL);
                this.columnPFileID = new global::System.Data.DataColumn("PFileID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPFileID);
                this.columnExtension.MaxLength = 5;
                this.columnForm.AllowDBNull = false;
                this.columnColumn1.ReadOnly = true;
                this.columnSource.MaxLength = 500;
                this.columnIsPrimary.AllowDBNull = false;
                this.columnDescription.MaxLength = 500;
                this.columnUserID.AllowDBNull = false;
                this.columnIsPublic.AllowDBNull = false;
                this.columnIsRoll.AllowDBNull = false;
                this.columnColumn2.ReadOnly = true;
                this.columnColumn3.ReadOnly = true;
                this.columnColumn4.ReadOnly = true;
                this.columnAURL.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getParcelAttachmentTableRow NewgetParcelAttachmentTableRow() {
                return ((getParcelAttachmentTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new getParcelAttachmentTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(getParcelAttachmentTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.getParcelAttachmentTableRowChanged != null)) {
                    this.getParcelAttachmentTableRowChanged(this, new getParcelAttachmentTableRowChangeEvent(((getParcelAttachmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.getParcelAttachmentTableRowChanging != null)) {
                    this.getParcelAttachmentTableRowChanging(this, new getParcelAttachmentTableRowChangeEvent(((getParcelAttachmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.getParcelAttachmentTableRowDeleted != null)) {
                    this.getParcelAttachmentTableRowDeleted(this, new getParcelAttachmentTableRowChangeEvent(((getParcelAttachmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.getParcelAttachmentTableRowDeleting != null)) {
                    this.getParcelAttachmentTableRowDeleting(this, new getParcelAttachmentTableRowChangeEvent(((getParcelAttachmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovegetParcelAttachmentTableRow(getParcelAttachmentTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2004ParcelCopyData ds = new F2004ParcelCopyData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "getParcelAttachmentTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f2004ListParcelTypeRow : global::System.Data.DataRow {
            
            private f2004ListParcelTypeDataTable tablef2004ListParcelType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f2004ListParcelTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef2004ListParcelType = ((f2004ListParcelTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelTypeID {
                get {
                    return ((int)(this[this.tablef2004ListParcelType.ParcelTypeIDColumn]));
                }
                set {
                    this[this.tablef2004ListParcelType.ParcelTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelType {
                get {
                    return ((string)(this[this.tablef2004ListParcelType.ParcelTypeColumn]));
                }
                set {
                    this[this.tablef2004ListParcelType.ParcelTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class createNewParcelCopyDataTableRow : global::System.Data.DataRow {
            
            private createNewParcelCopyDataTableDataTable tablecreateNewParcelCopyDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal createNewParcelCopyDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecreateNewParcelCopyDataTable = ((createNewParcelCopyDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModuleID {
                get {
                    try {
                        return ((string)(this[this.tablecreateNewParcelCopyDataTable.ModuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleID\' in table \'createNewParcelCopyDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablecreateNewParcelCopyDataTable.ModuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsertedBy {
                get {
                    try {
                        return ((int)(this[this.tablecreateNewParcelCopyDataTable.InsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedBy\' in table \'createNewParcelCopyDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablecreateNewParcelCopyDataTable.InsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsertedDate {
                get {
                    try {
                        return ((string)(this[this.tablecreateNewParcelCopyDataTable.InsertedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsertedDate\' in table \'createNewParcelCopyDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablecreateNewParcelCopyDataTable.InsertedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsDeleted {
                get {
                    try {
                        return ((string)(this[this.tablecreateNewParcelCopyDataTable.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'createNewParcelCopyDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablecreateNewParcelCopyDataTable.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    if (this.IsParcelNumberNull()) {
                        return "";
                    }
                    else {
                        return ((string)(this[this.tablecreateNewParcelCopyDataTable.ParcelNumberColumn]));
                    }
                }
                set {
                    this[this.tablecreateNewParcelCopyDataTable.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AssessmentTypeID {
                get {
                    try {
                        return ((short)(this[this.tablecreateNewParcelCopyDataTable.AssessmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentTypeID\' in table \'createNewParcelCopyDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablecreateNewParcelCopyDataTable.AssessmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollYear {
                get {
                    if (this.IsRollYearNull()) {
                        return "";
                    }
                    else {
                        return ((string)(this[this.tablecreateNewParcelCopyDataTable.RollYearColumn]));
                    }
                }
                set {
                    this[this.tablecreateNewParcelCopyDataTable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIDNull() {
                return this.IsNull(this.tablecreateNewParcelCopyDataTable.ModuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIDNull() {
                this[this.tablecreateNewParcelCopyDataTable.ModuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedByNull() {
                return this.IsNull(this.tablecreateNewParcelCopyDataTable.InsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedByNull() {
                this[this.tablecreateNewParcelCopyDataTable.InsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsertedDateNull() {
                return this.IsNull(this.tablecreateNewParcelCopyDataTable.InsertedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsertedDateNull() {
                this[this.tablecreateNewParcelCopyDataTable.InsertedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tablecreateNewParcelCopyDataTable.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tablecreateNewParcelCopyDataTable.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tablecreateNewParcelCopyDataTable.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tablecreateNewParcelCopyDataTable.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeIDNull() {
                return this.IsNull(this.tablecreateNewParcelCopyDataTable.AssessmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeIDNull() {
                this[this.tablecreateNewParcelCopyDataTable.AssessmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tablecreateNewParcelCopyDataTable.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tablecreateNewParcelCopyDataTable.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class getParcelAttachmentTableRow : global::System.Data.DataRow {
            
            private getParcelAttachmentTableDataTable tablegetParcelAttachmentTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal getParcelAttachmentTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegetParcelAttachmentTable = ((getParcelAttachmentTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tablegetParcelAttachmentTable.ExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Extension\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.ExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    return ((int)(this[this.tablegetParcelAttachmentTable.FormColumn]));
                }
                set {
                    this[this.tablegetParcelAttachmentTable.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Column1 {
                get {
                    try {
                        return ((int)(this[this.tablegetParcelAttachmentTable.Column1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column1\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.Column1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short FileTypeID {
                get {
                    try {
                        return ((short)(this[this.tablegetParcelAttachmentTable.FileTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileTypeID\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.FileTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tablegetParcelAttachmentTable.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimary {
                get {
                    return ((bool)(this[this.tablegetParcelAttachmentTable.IsPrimaryColumn]));
                }
                set {
                    this[this.tablegetParcelAttachmentTable.IsPrimaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablegetParcelAttachmentTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'getParcelAttachmentTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablegetParcelAttachmentTable.EventDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDate\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tablegetParcelAttachmentTable.UserIDColumn]));
                }
                set {
                    this[this.tablegetParcelAttachmentTable.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPublic {
                get {
                    return ((bool)(this[this.tablegetParcelAttachmentTable.IsPublicColumn]));
                }
                set {
                    this[this.tablegetParcelAttachmentTable.IsPublicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoll {
                get {
                    return ((bool)(this[this.tablegetParcelAttachmentTable.IsRollColumn]));
                }
                set {
                    this[this.tablegetParcelAttachmentTable.IsRollColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Column2 {
                get {
                    try {
                        return ((int)(this[this.tablegetParcelAttachmentTable.Column2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column2\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.Column2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Column3 {
                get {
                    try {
                        return ((int)(this[this.tablegetParcelAttachmentTable.Column3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column3\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.Column3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Column4 {
                get {
                    try {
                        return ((int)(this[this.tablegetParcelAttachmentTable.Column4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column4\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.Column4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tablegetParcelAttachmentTable.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkType {
                get {
                    try {
                        return ((int)(this[this.tablegetParcelAttachmentTable.LinkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkType\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.LinkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AURL {
                get {
                    try {
                        return ((string)(this[this.tablegetParcelAttachmentTable.AURLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AURL\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.AURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PFileID {
                get {
                    try {
                        return ((int)(this[this.tablegetParcelAttachmentTable.PFileIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PFileID\' in table \'getParcelAttachmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetParcelAttachmentTable.PFileIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtensionNull() {
                return this.IsNull(this.tablegetParcelAttachmentTable.ExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtensionNull() {
                this[this.tablegetParcelAttachmentTable.ExtensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn1Null() {
                return this.IsNull(this.tablegetParcelAttachmentTable.Column1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn1Null() {
                this[this.tablegetParcelAttachmentTable.Column1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileTypeIDNull() {
                return this.IsNull(this.tablegetParcelAttachmentTable.FileTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileTypeIDNull() {
                this[this.tablegetParcelAttachmentTable.FileTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tablegetParcelAttachmentTable.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tablegetParcelAttachmentTable.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablegetParcelAttachmentTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablegetParcelAttachmentTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDateNull() {
                return this.IsNull(this.tablegetParcelAttachmentTable.EventDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDateNull() {
                this[this.tablegetParcelAttachmentTable.EventDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn2Null() {
                return this.IsNull(this.tablegetParcelAttachmentTable.Column2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn2Null() {
                this[this.tablegetParcelAttachmentTable.Column2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn3Null() {
                return this.IsNull(this.tablegetParcelAttachmentTable.Column3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn3Null() {
                this[this.tablegetParcelAttachmentTable.Column3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn4Null() {
                return this.IsNull(this.tablegetParcelAttachmentTable.Column4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn4Null() {
                this[this.tablegetParcelAttachmentTable.Column4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tablegetParcelAttachmentTable.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tablegetParcelAttachmentTable.KeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkTypeNull() {
                return this.IsNull(this.tablegetParcelAttachmentTable.LinkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkTypeNull() {
                this[this.tablegetParcelAttachmentTable.LinkTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAURLNull() {
                return this.IsNull(this.tablegetParcelAttachmentTable.AURLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAURLNull() {
                this[this.tablegetParcelAttachmentTable.AURLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFileIDNull() {
                return this.IsNull(this.tablegetParcelAttachmentTable.PFileIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFileIDNull() {
                this[this.tablegetParcelAttachmentTable.PFileIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f2004ListParcelTypeRowChangeEvent : global::System.EventArgs {
            
            private f2004ListParcelTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2004ListParcelTypeRowChangeEvent(f2004ListParcelTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2004ListParcelTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class createNewParcelCopyDataTableRowChangeEvent : global::System.EventArgs {
            
            private createNewParcelCopyDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createNewParcelCopyDataTableRowChangeEvent(createNewParcelCopyDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public createNewParcelCopyDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class getParcelAttachmentTableRowChangeEvent : global::System.EventArgs {
            
            private getParcelAttachmentTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getParcelAttachmentTableRowChangeEvent(getParcelAttachmentTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getParcelAttachmentTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591