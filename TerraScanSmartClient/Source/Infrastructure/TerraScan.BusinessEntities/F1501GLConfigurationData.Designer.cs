//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F1501GLConfigurationData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F1501GLConfigurationData : global::System.Data.DataSet {
        
        private ListGLConfigRollYearDataTable tableListGLConfigRollYear;
        
        private ListGLConfigDetailDataTable tableListGLConfigDetail;
        
        private GetGLConfigDetailDataTable tableGetGLConfigDetail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F1501GLConfigurationData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F1501GLConfigurationData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListGLConfigRollYear"] != null)) {
                    base.Tables.Add(new ListGLConfigRollYearDataTable(ds.Tables["ListGLConfigRollYear"]));
                }
                if ((ds.Tables["ListGLConfigDetail"] != null)) {
                    base.Tables.Add(new ListGLConfigDetailDataTable(ds.Tables["ListGLConfigDetail"]));
                }
                if ((ds.Tables["GetGLConfigDetail"] != null)) {
                    base.Tables.Add(new GetGLConfigDetailDataTable(ds.Tables["GetGLConfigDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListGLConfigRollYearDataTable ListGLConfigRollYear {
            get {
                return this.tableListGLConfigRollYear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListGLConfigDetailDataTable ListGLConfigDetail {
            get {
                return this.tableListGLConfigDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetGLConfigDetailDataTable GetGLConfigDetail {
            get {
                return this.tableGetGLConfigDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F1501GLConfigurationData cln = ((F1501GLConfigurationData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListGLConfigRollYear"] != null)) {
                    base.Tables.Add(new ListGLConfigRollYearDataTable(ds.Tables["ListGLConfigRollYear"]));
                }
                if ((ds.Tables["ListGLConfigDetail"] != null)) {
                    base.Tables.Add(new ListGLConfigDetailDataTable(ds.Tables["ListGLConfigDetail"]));
                }
                if ((ds.Tables["GetGLConfigDetail"] != null)) {
                    base.Tables.Add(new GetGLConfigDetailDataTable(ds.Tables["GetGLConfigDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListGLConfigRollYear = ((ListGLConfigRollYearDataTable)(base.Tables["ListGLConfigRollYear"]));
            if ((initTable == true)) {
                if ((this.tableListGLConfigRollYear != null)) {
                    this.tableListGLConfigRollYear.InitVars();
                }
            }
            this.tableListGLConfigDetail = ((ListGLConfigDetailDataTable)(base.Tables["ListGLConfigDetail"]));
            if ((initTable == true)) {
                if ((this.tableListGLConfigDetail != null)) {
                    this.tableListGLConfigDetail.InitVars();
                }
            }
            this.tableGetGLConfigDetail = ((GetGLConfigDetailDataTable)(base.Tables["GetGLConfigDetail"]));
            if ((initTable == true)) {
                if ((this.tableGetGLConfigDetail != null)) {
                    this.tableGetGLConfigDetail.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F1501GLConfigurationData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F1501GLConfigurationData.xsd";
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListGLConfigRollYear = new ListGLConfigRollYearDataTable();
            base.Tables.Add(this.tableListGLConfigRollYear);
            this.tableListGLConfigDetail = new ListGLConfigDetailDataTable();
            base.Tables.Add(this.tableListGLConfigDetail);
            this.tableGetGLConfigDetail = new GetGLConfigDetailDataTable();
            base.Tables.Add(this.tableGetGLConfigDetail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListGLConfigRollYear() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListGLConfigDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetGLConfigDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F1501GLConfigurationData ds = new F1501GLConfigurationData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListGLConfigRollYearRowChangeEventHandler(object sender, ListGLConfigRollYearRowChangeEvent e);
        
        public delegate void ListGLConfigDetailRowChangeEventHandler(object sender, ListGLConfigDetailRowChangeEvent e);
        
        public delegate void GetGLConfigDetailRowChangeEventHandler(object sender, GetGLConfigDetailRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListGLConfigRollYearDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigRollYearDataTable() {
                this.TableName = "ListGLConfigRollYear";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGLConfigRollYearDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListGLConfigRollYearDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigRollYearRow this[int index] {
                get {
                    return ((ListGLConfigRollYearRow)(this.Rows[index]));
                }
            }
            
            public event ListGLConfigRollYearRowChangeEventHandler ListGLConfigRollYearRowChanging;
            
            public event ListGLConfigRollYearRowChangeEventHandler ListGLConfigRollYearRowChanged;
            
            public event ListGLConfigRollYearRowChangeEventHandler ListGLConfigRollYearRowDeleting;
            
            public event ListGLConfigRollYearRowChangeEventHandler ListGLConfigRollYearRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListGLConfigRollYearRow(ListGLConfigRollYearRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigRollYearRow AddListGLConfigRollYearRow(short RollYear) {
                ListGLConfigRollYearRow rowListGLConfigRollYearRow = ((ListGLConfigRollYearRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RollYear};
                rowListGLConfigRollYearRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListGLConfigRollYearRow);
                return rowListGLConfigRollYearRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListGLConfigRollYearDataTable cln = ((ListGLConfigRollYearDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListGLConfigRollYearDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigRollYearRow NewListGLConfigRollYearRow() {
                return ((ListGLConfigRollYearRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListGLConfigRollYearRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListGLConfigRollYearRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListGLConfigRollYearRowChanged != null)) {
                    this.ListGLConfigRollYearRowChanged(this, new ListGLConfigRollYearRowChangeEvent(((ListGLConfigRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListGLConfigRollYearRowChanging != null)) {
                    this.ListGLConfigRollYearRowChanging(this, new ListGLConfigRollYearRowChangeEvent(((ListGLConfigRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListGLConfigRollYearRowDeleted != null)) {
                    this.ListGLConfigRollYearRowDeleted(this, new ListGLConfigRollYearRowChangeEvent(((ListGLConfigRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListGLConfigRollYearRowDeleting != null)) {
                    this.ListGLConfigRollYearRowDeleting(this, new ListGLConfigRollYearRowChangeEvent(((ListGLConfigRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListGLConfigRollYearRow(ListGLConfigRollYearRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1501GLConfigurationData ds = new F1501GLConfigurationData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListGLConfigRollYearDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListGLConfigDetailDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGLConfigID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnFunctionID;
            
            private global::System.Data.DataColumn columnBarID;
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnLineID;
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnSubFund;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigDetailDataTable() {
                this.TableName = "ListGLConfigDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGLConfigDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListGLConfigDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GLConfigIDColumn {
                get {
                    return this.columnGLConfigID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionIDColumn {
                get {
                    return this.columnFunctionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarIDColumn {
                get {
                    return this.columnBarID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigDetailRow this[int index] {
                get {
                    return ((ListGLConfigDetailRow)(this.Rows[index]));
                }
            }
            
            public event ListGLConfigDetailRowChangeEventHandler ListGLConfigDetailRowChanging;
            
            public event ListGLConfigDetailRowChangeEventHandler ListGLConfigDetailRowChanged;
            
            public event ListGLConfigDetailRowChangeEventHandler ListGLConfigDetailRowDeleting;
            
            public event ListGLConfigDetailRowChangeEventHandler ListGLConfigDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListGLConfigDetailRow(ListGLConfigDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigDetailRow AddListGLConfigDetailRow(int GLConfigID, string Description, string FunctionID, string BarID, string ObjectID, string LineID, int SubFundID, string SubFund) {
                ListGLConfigDetailRow rowListGLConfigDetailRow = ((ListGLConfigDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GLConfigID,
                        Description,
                        FunctionID,
                        BarID,
                        ObjectID,
                        LineID,
                        SubFundID,
                        SubFund};
                rowListGLConfigDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListGLConfigDetailRow);
                return rowListGLConfigDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListGLConfigDetailDataTable cln = ((ListGLConfigDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListGLConfigDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGLConfigID = base.Columns["GLConfigID"];
                this.columnDescription = base.Columns["Description"];
                this.columnFunctionID = base.Columns["FunctionID"];
                this.columnBarID = base.Columns["BarID"];
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnLineID = base.Columns["LineID"];
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnSubFund = base.Columns["SubFund"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGLConfigID = new global::System.Data.DataColumn("GLConfigID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGLConfigID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnFunctionID = new global::System.Data.DataColumn("FunctionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunctionID);
                this.columnBarID = new global::System.Data.DataColumn("BarID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarID);
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnLineID = new global::System.Data.DataColumn("LineID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnGLConfigID.ReadOnly = true;
                this.columnSubFundID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigDetailRow NewListGLConfigDetailRow() {
                return ((ListGLConfigDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListGLConfigDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListGLConfigDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListGLConfigDetailRowChanged != null)) {
                    this.ListGLConfigDetailRowChanged(this, new ListGLConfigDetailRowChangeEvent(((ListGLConfigDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListGLConfigDetailRowChanging != null)) {
                    this.ListGLConfigDetailRowChanging(this, new ListGLConfigDetailRowChangeEvent(((ListGLConfigDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListGLConfigDetailRowDeleted != null)) {
                    this.ListGLConfigDetailRowDeleted(this, new ListGLConfigDetailRowChangeEvent(((ListGLConfigDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListGLConfigDetailRowDeleting != null)) {
                    this.ListGLConfigDetailRowDeleting(this, new ListGLConfigDetailRowChangeEvent(((ListGLConfigDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListGLConfigDetailRow(ListGLConfigDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1501GLConfigurationData ds = new F1501GLConfigurationData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListGLConfigDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetGLConfigDetailDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConfigID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnConfigDesc;
            
            private global::System.Data.DataColumn columnIsCash;
            
            private global::System.Data.DataColumn columnSubFund;
            
            private global::System.Data.DataColumn columnSubFundDesc;
            
            private global::System.Data.DataColumn columnFunctionID;
            
            private global::System.Data.DataColumn columnFunctionDesc;
            
            private global::System.Data.DataColumn columnSemiAnnualCode;
            
            private global::System.Data.DataColumn columnBarID;
            
            private global::System.Data.DataColumn columnBarsDesc;
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnObjectDesc;
            
            private global::System.Data.DataColumn columnLineID;
            
            private global::System.Data.DataColumn columnLineDesc;
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnFunctionFlag;
            
            private global::System.Data.DataColumn columnBarsFlag;
            
            private global::System.Data.DataColumn columnObjectFlag;
            
            private global::System.Data.DataColumn columnConfigFlag;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGLConfigDetailDataTable() {
                this.TableName = "GetGLConfigDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetGLConfigDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetGLConfigDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfigIDColumn {
                get {
                    return this.columnConfigID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfigDescColumn {
                get {
                    return this.columnConfigDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCashColumn {
                get {
                    return this.columnIsCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundDescColumn {
                get {
                    return this.columnSubFundDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionIDColumn {
                get {
                    return this.columnFunctionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionDescColumn {
                get {
                    return this.columnFunctionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SemiAnnualCodeColumn {
                get {
                    return this.columnSemiAnnualCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarIDColumn {
                get {
                    return this.columnBarID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarsDescColumn {
                get {
                    return this.columnBarsDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectDescColumn {
                get {
                    return this.columnObjectDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineDescColumn {
                get {
                    return this.columnLineDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionFlagColumn {
                get {
                    return this.columnFunctionFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarsFlagColumn {
                get {
                    return this.columnBarsFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectFlagColumn {
                get {
                    return this.columnObjectFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfigFlagColumn {
                get {
                    return this.columnConfigFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGLConfigDetailRow this[int index] {
                get {
                    return ((GetGLConfigDetailRow)(this.Rows[index]));
                }
            }
            
            public event GetGLConfigDetailRowChangeEventHandler GetGLConfigDetailRowChanging;
            
            public event GetGLConfigDetailRowChangeEventHandler GetGLConfigDetailRowChanged;
            
            public event GetGLConfigDetailRowChangeEventHandler GetGLConfigDetailRowDeleting;
            
            public event GetGLConfigDetailRowChangeEventHandler GetGLConfigDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetGLConfigDetailRow(GetGLConfigDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGLConfigDetailRow AddGetGLConfigDetailRow(
                        int ConfigID, 
                        short RollYear, 
                        string ConfigDesc, 
                        bool IsCash, 
                        string SubFund, 
                        string SubFundDesc, 
                        string FunctionID, 
                        string FunctionDesc, 
                        byte SemiAnnualCode, 
                        string BarID, 
                        string BarsDesc, 
                        string ObjectID, 
                        string ObjectDesc, 
                        string LineID, 
                        string LineDesc, 
                        int SubFundID, 
                        string FunctionFlag, 
                        string BarsFlag, 
                        string ObjectFlag, 
                        string ConfigFlag, 
                        int DistrictID) {
                GetGLConfigDetailRow rowGetGLConfigDetailRow = ((GetGLConfigDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConfigID,
                        RollYear,
                        ConfigDesc,
                        IsCash,
                        SubFund,
                        SubFundDesc,
                        FunctionID,
                        FunctionDesc,
                        SemiAnnualCode,
                        BarID,
                        BarsDesc,
                        ObjectID,
                        ObjectDesc,
                        LineID,
                        LineDesc,
                        SubFundID,
                        FunctionFlag,
                        BarsFlag,
                        ObjectFlag,
                        ConfigFlag,
                        DistrictID};
                rowGetGLConfigDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetGLConfigDetailRow);
                return rowGetGLConfigDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetGLConfigDetailDataTable cln = ((GetGLConfigDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetGLConfigDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConfigID = base.Columns["ConfigID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnConfigDesc = base.Columns["ConfigDesc"];
                this.columnIsCash = base.Columns["IsCash"];
                this.columnSubFund = base.Columns["SubFund"];
                this.columnSubFundDesc = base.Columns["SubFundDesc"];
                this.columnFunctionID = base.Columns["FunctionID"];
                this.columnFunctionDesc = base.Columns["FunctionDesc"];
                this.columnSemiAnnualCode = base.Columns["SemiAnnualCode"];
                this.columnBarID = base.Columns["BarID"];
                this.columnBarsDesc = base.Columns["BarsDesc"];
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnObjectDesc = base.Columns["ObjectDesc"];
                this.columnLineID = base.Columns["LineID"];
                this.columnLineDesc = base.Columns["LineDesc"];
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnFunctionFlag = base.Columns["FunctionFlag"];
                this.columnBarsFlag = base.Columns["BarsFlag"];
                this.columnObjectFlag = base.Columns["ObjectFlag"];
                this.columnConfigFlag = base.Columns["ConfigFlag"];
                this.columnDistrictID = base.Columns["DistrictID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConfigID = new global::System.Data.DataColumn("ConfigID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnConfigDesc = new global::System.Data.DataColumn("ConfigDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigDesc);
                this.columnIsCash = new global::System.Data.DataColumn("IsCash", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCash);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnSubFundDesc = new global::System.Data.DataColumn("SubFundDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundDesc);
                this.columnFunctionID = new global::System.Data.DataColumn("FunctionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunctionID);
                this.columnFunctionDesc = new global::System.Data.DataColumn("FunctionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunctionDesc);
                this.columnSemiAnnualCode = new global::System.Data.DataColumn("SemiAnnualCode", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSemiAnnualCode);
                this.columnBarID = new global::System.Data.DataColumn("BarID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarID);
                this.columnBarsDesc = new global::System.Data.DataColumn("BarsDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarsDesc);
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnObjectDesc = new global::System.Data.DataColumn("ObjectDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectDesc);
                this.columnLineID = new global::System.Data.DataColumn("LineID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnLineDesc = new global::System.Data.DataColumn("LineDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineDesc);
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnFunctionFlag = new global::System.Data.DataColumn("FunctionFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunctionFlag);
                this.columnBarsFlag = new global::System.Data.DataColumn("BarsFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarsFlag);
                this.columnObjectFlag = new global::System.Data.DataColumn("ObjectFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectFlag);
                this.columnConfigFlag = new global::System.Data.DataColumn("ConfigFlag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigFlag);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnConfigID.ReadOnly = true;
                this.columnSubFundID.ReadOnly = true;
                this.columnFunctionFlag.ReadOnly = true;
                this.columnBarsFlag.ReadOnly = true;
                this.columnObjectFlag.ReadOnly = true;
                this.columnConfigFlag.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGLConfigDetailRow NewGetGLConfigDetailRow() {
                return ((GetGLConfigDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetGLConfigDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetGLConfigDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetGLConfigDetailRowChanged != null)) {
                    this.GetGLConfigDetailRowChanged(this, new GetGLConfigDetailRowChangeEvent(((GetGLConfigDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetGLConfigDetailRowChanging != null)) {
                    this.GetGLConfigDetailRowChanging(this, new GetGLConfigDetailRowChangeEvent(((GetGLConfigDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetGLConfigDetailRowDeleted != null)) {
                    this.GetGLConfigDetailRowDeleted(this, new GetGLConfigDetailRowChangeEvent(((GetGLConfigDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetGLConfigDetailRowDeleting != null)) {
                    this.GetGLConfigDetailRowDeleting(this, new GetGLConfigDetailRowChangeEvent(((GetGLConfigDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetGLConfigDetailRow(GetGLConfigDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1501GLConfigurationData ds = new F1501GLConfigurationData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetGLConfigDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListGLConfigRollYearRow : global::System.Data.DataRow {
            
            private ListGLConfigRollYearDataTable tableListGLConfigRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGLConfigRollYearRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListGLConfigRollYear = ((ListGLConfigRollYearDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListGLConfigRollYear.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListGLConfigRollYear\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGLConfigRollYear.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListGLConfigRollYear.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListGLConfigRollYear.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListGLConfigDetailRow : global::System.Data.DataRow {
            
            private ListGLConfigDetailDataTable tableListGLConfigDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGLConfigDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListGLConfigDetail = ((ListGLConfigDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GLConfigID {
                get {
                    try {
                        return ((int)(this[this.tableListGLConfigDetail.GLConfigIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GLConfigID\' in table \'ListGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGLConfigDetail.GLConfigIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListGLConfigDetail.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGLConfigDetail.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FunctionID {
                get {
                    try {
                        return ((string)(this[this.tableListGLConfigDetail.FunctionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FunctionID\' in table \'ListGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGLConfigDetail.FunctionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarID {
                get {
                    try {
                        return ((string)(this[this.tableListGLConfigDetail.BarIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarID\' in table \'ListGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGLConfigDetail.BarIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectID {
                get {
                    try {
                        return ((string)(this[this.tableListGLConfigDetail.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'ListGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGLConfigDetail.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineID {
                get {
                    try {
                        return ((string)(this[this.tableListGLConfigDetail.LineIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineID\' in table \'ListGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGLConfigDetail.LineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    try {
                        return ((int)(this[this.tableListGLConfigDetail.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'ListGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGLConfigDetail.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableListGLConfigDetail.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'ListGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGLConfigDetail.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGLConfigIDNull() {
                return this.IsNull(this.tableListGLConfigDetail.GLConfigIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGLConfigIDNull() {
                this[this.tableListGLConfigDetail.GLConfigIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListGLConfigDetail.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListGLConfigDetail.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunctionIDNull() {
                return this.IsNull(this.tableListGLConfigDetail.FunctionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunctionIDNull() {
                this[this.tableListGLConfigDetail.FunctionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarIDNull() {
                return this.IsNull(this.tableListGLConfigDetail.BarIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarIDNull() {
                this[this.tableListGLConfigDetail.BarIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableListGLConfigDetail.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableListGLConfigDetail.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineIDNull() {
                return this.IsNull(this.tableListGLConfigDetail.LineIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineIDNull() {
                this[this.tableListGLConfigDetail.LineIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tableListGLConfigDetail.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tableListGLConfigDetail.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableListGLConfigDetail.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableListGLConfigDetail.SubFundColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetGLConfigDetailRow : global::System.Data.DataRow {
            
            private GetGLConfigDetailDataTable tableGetGLConfigDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetGLConfigDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetGLConfigDetail = ((GetGLConfigDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConfigID {
                get {
                    try {
                        return ((int)(this[this.tableGetGLConfigDetail.ConfigIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfigID\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.ConfigIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableGetGLConfigDetail.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfigDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.ConfigDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfigDesc\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.ConfigDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCash {
                get {
                    try {
                        return ((bool)(this[this.tableGetGLConfigDetail.IsCashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCash\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.IsCashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFundDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.SubFundDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundDesc\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.SubFundDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FunctionID {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.FunctionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FunctionID\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.FunctionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FunctionDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.FunctionDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FunctionDesc\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.FunctionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SemiAnnualCode {
                get {
                    try {
                        return ((byte)(this[this.tableGetGLConfigDetail.SemiAnnualCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SemiAnnualCode\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.SemiAnnualCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarID {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.BarIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarID\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.BarIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarsDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.BarsDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarsDesc\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.BarsDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectID {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.ObjectDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectDesc\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.ObjectDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineID {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.LineIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineID\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.LineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.LineDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineDesc\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.LineDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    try {
                        return ((int)(this[this.tableGetGLConfigDetail.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FunctionFlag {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.FunctionFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FunctionFlag\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.FunctionFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarsFlag {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.BarsFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarsFlag\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.BarsFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectFlag {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.ObjectFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectFlag\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.ObjectFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfigFlag {
                get {
                    try {
                        return ((string)(this[this.tableGetGLConfigDetail.ConfigFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfigFlag\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.ConfigFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    try {
                        return ((int)(this[this.tableGetGLConfigDetail.DistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictID\' in table \'GetGLConfigDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGLConfigDetail.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfigIDNull() {
                return this.IsNull(this.tableGetGLConfigDetail.ConfigIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfigIDNull() {
                this[this.tableGetGLConfigDetail.ConfigIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetGLConfigDetail.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetGLConfigDetail.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfigDescNull() {
                return this.IsNull(this.tableGetGLConfigDetail.ConfigDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfigDescNull() {
                this[this.tableGetGLConfigDetail.ConfigDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCashNull() {
                return this.IsNull(this.tableGetGLConfigDetail.IsCashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCashNull() {
                this[this.tableGetGLConfigDetail.IsCashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableGetGLConfigDetail.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableGetGLConfigDetail.SubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundDescNull() {
                return this.IsNull(this.tableGetGLConfigDetail.SubFundDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundDescNull() {
                this[this.tableGetGLConfigDetail.SubFundDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunctionIDNull() {
                return this.IsNull(this.tableGetGLConfigDetail.FunctionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunctionIDNull() {
                this[this.tableGetGLConfigDetail.FunctionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunctionDescNull() {
                return this.IsNull(this.tableGetGLConfigDetail.FunctionDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunctionDescNull() {
                this[this.tableGetGLConfigDetail.FunctionDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSemiAnnualCodeNull() {
                return this.IsNull(this.tableGetGLConfigDetail.SemiAnnualCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSemiAnnualCodeNull() {
                this[this.tableGetGLConfigDetail.SemiAnnualCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarIDNull() {
                return this.IsNull(this.tableGetGLConfigDetail.BarIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarIDNull() {
                this[this.tableGetGLConfigDetail.BarIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarsDescNull() {
                return this.IsNull(this.tableGetGLConfigDetail.BarsDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarsDescNull() {
                this[this.tableGetGLConfigDetail.BarsDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableGetGLConfigDetail.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableGetGLConfigDetail.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectDescNull() {
                return this.IsNull(this.tableGetGLConfigDetail.ObjectDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectDescNull() {
                this[this.tableGetGLConfigDetail.ObjectDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineIDNull() {
                return this.IsNull(this.tableGetGLConfigDetail.LineIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineIDNull() {
                this[this.tableGetGLConfigDetail.LineIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineDescNull() {
                return this.IsNull(this.tableGetGLConfigDetail.LineDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineDescNull() {
                this[this.tableGetGLConfigDetail.LineDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tableGetGLConfigDetail.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tableGetGLConfigDetail.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunctionFlagNull() {
                return this.IsNull(this.tableGetGLConfigDetail.FunctionFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunctionFlagNull() {
                this[this.tableGetGLConfigDetail.FunctionFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarsFlagNull() {
                return this.IsNull(this.tableGetGLConfigDetail.BarsFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarsFlagNull() {
                this[this.tableGetGLConfigDetail.BarsFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectFlagNull() {
                return this.IsNull(this.tableGetGLConfigDetail.ObjectFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectFlagNull() {
                this[this.tableGetGLConfigDetail.ObjectFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfigFlagNull() {
                return this.IsNull(this.tableGetGLConfigDetail.ConfigFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfigFlagNull() {
                this[this.tableGetGLConfigDetail.ConfigFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictIDNull() {
                return this.IsNull(this.tableGetGLConfigDetail.DistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictIDNull() {
                this[this.tableGetGLConfigDetail.DistrictIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListGLConfigRollYearRowChangeEvent : global::System.EventArgs {
            
            private ListGLConfigRollYearRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigRollYearRowChangeEvent(ListGLConfigRollYearRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigRollYearRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListGLConfigDetailRowChangeEvent : global::System.EventArgs {
            
            private ListGLConfigDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigDetailRowChangeEvent(ListGLConfigDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGLConfigDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetGLConfigDetailRowChangeEvent : global::System.EventArgs {
            
            private GetGLConfigDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGLConfigDetailRowChangeEvent(GetGLConfigDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGLConfigDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591