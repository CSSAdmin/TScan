//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F84123SanitaryPipePropertiesData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F84123SanitaryPipePropertiesData : global::System.Data.DataSet {
        
        private GetSanitaryPipePropertiesDataTable tableGetSanitaryPipeProperties;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F84123SanitaryPipePropertiesData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F84123SanitaryPipePropertiesData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetSanitaryPipeProperties"] != null)) {
                    base.Tables.Add(new GetSanitaryPipePropertiesDataTable(ds.Tables["GetSanitaryPipeProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSanitaryPipePropertiesDataTable GetSanitaryPipeProperties {
            get {
                return this.tableGetSanitaryPipeProperties;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F84123SanitaryPipePropertiesData cln = ((F84123SanitaryPipePropertiesData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetSanitaryPipeProperties"] != null)) {
                    base.Tables.Add(new GetSanitaryPipePropertiesDataTable(ds.Tables["GetSanitaryPipeProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetSanitaryPipeProperties = ((GetSanitaryPipePropertiesDataTable)(base.Tables["GetSanitaryPipeProperties"]));
            if ((initTable == true)) {
                if ((this.tableGetSanitaryPipeProperties != null)) {
                    this.tableGetSanitaryPipeProperties.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F84123SanitaryPipePropertiesData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F84123SanitaryPipePropertiesData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetSanitaryPipeProperties = new GetSanitaryPipePropertiesDataTable();
            base.Tables.Add(this.tableGetSanitaryPipeProperties);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSanitaryPipeProperties() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F84123SanitaryPipePropertiesData ds = new F84123SanitaryPipePropertiesData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetSanitaryPipePropertiesRowChangeEventHandler(object sender, GetSanitaryPipePropertiesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSanitaryPipePropertiesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFeatureID;
            
            private global::System.Data.DataColumn columnCID;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            private global::System.Data.DataColumn columnIsEnabled;
            
            private global::System.Data.DataColumn columnIsPrivate;
            
            private global::System.Data.DataColumn columnIsForced;
            
            private global::System.Data.DataColumn columnLifecycleStatusID;
            
            private global::System.Data.DataColumn columnPipeTypeID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnAccessTypeID;
            
            private global::System.Data.DataColumn columnSurfaceCoverID;
            
            private global::System.Data.DataColumn columnDownDepth;
            
            private global::System.Data.DataColumn columnDownElevation;
            
            private global::System.Data.DataColumn columnUpDepth;
            
            private global::System.Data.DataColumn columnUpElevation;
            
            private global::System.Data.DataColumn columnSlope;
            
            private global::System.Data.DataColumn columnDiameter;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryPipePropertiesDataTable() {
                this.TableName = "GetSanitaryPipeProperties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSanitaryPipePropertiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSanitaryPipePropertiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIDColumn {
                get {
                    return this.columnCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEnabledColumn {
                get {
                    return this.columnIsEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrivateColumn {
                get {
                    return this.columnIsPrivate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsForcedColumn {
                get {
                    return this.columnIsForced;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LifecycleStatusIDColumn {
                get {
                    return this.columnLifecycleStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeTypeIDColumn {
                get {
                    return this.columnPipeTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeIDColumn {
                get {
                    return this.columnAccessTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurfaceCoverIDColumn {
                get {
                    return this.columnSurfaceCoverID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownDepthColumn {
                get {
                    return this.columnDownDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownElevationColumn {
                get {
                    return this.columnDownElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpDepthColumn {
                get {
                    return this.columnUpDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpElevationColumn {
                get {
                    return this.columnUpElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SlopeColumn {
                get {
                    return this.columnSlope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiameterColumn {
                get {
                    return this.columnDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryPipePropertiesRow this[int index] {
                get {
                    return ((GetSanitaryPipePropertiesRow)(this.Rows[index]));
                }
            }
            
            public event GetSanitaryPipePropertiesRowChangeEventHandler GetSanitaryPipePropertiesRowChanging;
            
            public event GetSanitaryPipePropertiesRowChangeEventHandler GetSanitaryPipePropertiesRowChanged;
            
            public event GetSanitaryPipePropertiesRowChangeEventHandler GetSanitaryPipePropertiesRowDeleting;
            
            public event GetSanitaryPipePropertiesRowChangeEventHandler GetSanitaryPipePropertiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSanitaryPipePropertiesRow(GetSanitaryPipePropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryPipePropertiesRow AddGetSanitaryPipePropertiesRow(
                        string CID, 
                        int FeatureClassID, 
                        bool IsEnabled, 
                        bool IsPrivate, 
                        bool IsForced, 
                        int LifecycleStatusID, 
                        int PipeTypeID, 
                        int MaterialID, 
                        int AccessTypeID, 
                        int SurfaceCoverID, 
                        decimal DownDepth, 
                        decimal DownElevation, 
                        decimal UpDepth, 
                        decimal UpElevation, 
                        decimal Slope, 
                        decimal Diameter, 
                        decimal Length, 
                        string Comment) {
                GetSanitaryPipePropertiesRow rowGetSanitaryPipePropertiesRow = ((GetSanitaryPipePropertiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CID,
                        FeatureClassID,
                        IsEnabled,
                        IsPrivate,
                        IsForced,
                        LifecycleStatusID,
                        PipeTypeID,
                        MaterialID,
                        AccessTypeID,
                        SurfaceCoverID,
                        DownDepth,
                        DownElevation,
                        UpDepth,
                        UpElevation,
                        Slope,
                        Diameter,
                        Length,
                        Comment};
                rowGetSanitaryPipePropertiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSanitaryPipePropertiesRow);
                return rowGetSanitaryPipePropertiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSanitaryPipePropertiesDataTable cln = ((GetSanitaryPipePropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSanitaryPipePropertiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeatureID = base.Columns["FeatureID"];
                this.columnCID = base.Columns["CID"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnIsEnabled = base.Columns["IsEnabled"];
                this.columnIsPrivate = base.Columns["IsPrivate"];
                this.columnIsForced = base.Columns["IsForced"];
                this.columnLifecycleStatusID = base.Columns["LifecycleStatusID"];
                this.columnPipeTypeID = base.Columns["PipeTypeID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnAccessTypeID = base.Columns["AccessTypeID"];
                this.columnSurfaceCoverID = base.Columns["SurfaceCoverID"];
                this.columnDownDepth = base.Columns["DownDepth"];
                this.columnDownElevation = base.Columns["DownElevation"];
                this.columnUpDepth = base.Columns["UpDepth"];
                this.columnUpElevation = base.Columns["UpElevation"];
                this.columnSlope = base.Columns["Slope"];
                this.columnDiameter = base.Columns["Diameter"];
                this.columnLength = base.Columns["Length"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeatureID = new global::System.Data.DataColumn("FeatureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureID);
                this.columnCID = new global::System.Data.DataColumn("CID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCID);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnIsEnabled = new global::System.Data.DataColumn("IsEnabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEnabled);
                this.columnIsPrivate = new global::System.Data.DataColumn("IsPrivate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrivate);
                this.columnIsForced = new global::System.Data.DataColumn("IsForced", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsForced);
                this.columnLifecycleStatusID = new global::System.Data.DataColumn("LifecycleStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLifecycleStatusID);
                this.columnPipeTypeID = new global::System.Data.DataColumn("PipeTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeTypeID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnAccessTypeID = new global::System.Data.DataColumn("AccessTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessTypeID);
                this.columnSurfaceCoverID = new global::System.Data.DataColumn("SurfaceCoverID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurfaceCoverID);
                this.columnDownDepth = new global::System.Data.DataColumn("DownDepth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownDepth);
                this.columnDownElevation = new global::System.Data.DataColumn("DownElevation", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownElevation);
                this.columnUpDepth = new global::System.Data.DataColumn("UpDepth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpDepth);
                this.columnUpElevation = new global::System.Data.DataColumn("UpElevation", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpElevation);
                this.columnSlope = new global::System.Data.DataColumn("Slope", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSlope);
                this.columnDiameter = new global::System.Data.DataColumn("Diameter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiameter);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnFeatureID.AutoIncrement = true;
                this.columnFeatureID.ReadOnly = true;
                this.columnCID.ReadOnly = true;
                this.columnCID.MaxLength = 15;
                this.columnFeatureClassID.ReadOnly = true;
                this.columnLifecycleStatusID.ReadOnly = true;
                this.columnPipeTypeID.ReadOnly = true;
                this.columnMaterialID.ReadOnly = true;
                this.columnAccessTypeID.ReadOnly = true;
                this.columnSurfaceCoverID.ReadOnly = true;
                this.columnComment.ReadOnly = true;
                this.columnComment.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryPipePropertiesRow NewGetSanitaryPipePropertiesRow() {
                return ((GetSanitaryPipePropertiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSanitaryPipePropertiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSanitaryPipePropertiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSanitaryPipePropertiesRowChanged != null)) {
                    this.GetSanitaryPipePropertiesRowChanged(this, new GetSanitaryPipePropertiesRowChangeEvent(((GetSanitaryPipePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSanitaryPipePropertiesRowChanging != null)) {
                    this.GetSanitaryPipePropertiesRowChanging(this, new GetSanitaryPipePropertiesRowChangeEvent(((GetSanitaryPipePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSanitaryPipePropertiesRowDeleted != null)) {
                    this.GetSanitaryPipePropertiesRowDeleted(this, new GetSanitaryPipePropertiesRowChangeEvent(((GetSanitaryPipePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSanitaryPipePropertiesRowDeleting != null)) {
                    this.GetSanitaryPipePropertiesRowDeleting(this, new GetSanitaryPipePropertiesRowChangeEvent(((GetSanitaryPipePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSanitaryPipePropertiesRow(GetSanitaryPipePropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F84123SanitaryPipePropertiesData ds = new F84123SanitaryPipePropertiesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSanitaryPipePropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSanitaryPipePropertiesRow : global::System.Data.DataRow {
            
            private GetSanitaryPipePropertiesDataTable tableGetSanitaryPipeProperties;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSanitaryPipePropertiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSanitaryPipeProperties = ((GetSanitaryPipePropertiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryPipeProperties.FeatureIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureID\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.FeatureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CID {
                get {
                    try {
                        return ((string)(this[this.tableGetSanitaryPipeProperties.CIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CID\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.CIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryPipeProperties.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'GetSanitaryPipeProperties\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableGetSanitaryPipeProperties.IsEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEnabled\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.IsEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrivate {
                get {
                    try {
                        return ((bool)(this[this.tableGetSanitaryPipeProperties.IsPrivateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrivate\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.IsPrivateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForced {
                get {
                    try {
                        return ((bool)(this[this.tableGetSanitaryPipeProperties.IsForcedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsForced\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.IsForcedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LifecycleStatusID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryPipeProperties.LifecycleStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LifecycleStatusID\' in table \'GetSanitaryPipeProperties\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.LifecycleStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PipeTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryPipeProperties.PipeTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeTypeID\' in table \'GetSanitaryPipeProperties\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.PipeTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryPipeProperties.MaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'GetSanitaryPipeProperties\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AccessTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryPipeProperties.AccessTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessTypeID\' in table \'GetSanitaryPipeProperties\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.AccessTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurfaceCoverID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryPipeProperties.SurfaceCoverIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurfaceCoverID\' in table \'GetSanitaryPipeProperties\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.SurfaceCoverIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DownDepth {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryPipeProperties.DownDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownDepth\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.DownDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DownElevation {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryPipeProperties.DownElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownElevation\' in table \'GetSanitaryPipeProperties\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.DownElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UpDepth {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryPipeProperties.UpDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpDepth\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.UpDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UpElevation {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryPipeProperties.UpElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UpElevation\' in table \'GetSanitaryPipeProperties\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.UpElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Slope {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryPipeProperties.SlopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Slope\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.SlopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Diameter {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryPipeProperties.DiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Diameter\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.DiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Length {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryPipeProperties.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableGetSanitaryPipeProperties.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'GetSanitaryPipeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryPipeProperties.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureIDNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.FeatureIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureIDNull() {
                this[this.tableGetSanitaryPipeProperties.FeatureIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.CIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDNull() {
                this[this.tableGetSanitaryPipeProperties.CIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableGetSanitaryPipeProperties.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEnabledNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.IsEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEnabledNull() {
                this[this.tableGetSanitaryPipeProperties.IsEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrivateNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.IsPrivateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrivateNull() {
                this[this.tableGetSanitaryPipeProperties.IsPrivateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsForcedNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.IsForcedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsForcedNull() {
                this[this.tableGetSanitaryPipeProperties.IsForcedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLifecycleStatusIDNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.LifecycleStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLifecycleStatusIDNull() {
                this[this.tableGetSanitaryPipeProperties.LifecycleStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeTypeIDNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.PipeTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeTypeIDNull() {
                this[this.tableGetSanitaryPipeProperties.PipeTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.MaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableGetSanitaryPipeProperties.MaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeIDNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.AccessTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeIDNull() {
                this[this.tableGetSanitaryPipeProperties.AccessTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurfaceCoverIDNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.SurfaceCoverIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurfaceCoverIDNull() {
                this[this.tableGetSanitaryPipeProperties.SurfaceCoverIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownDepthNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.DownDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownDepthNull() {
                this[this.tableGetSanitaryPipeProperties.DownDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownElevationNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.DownElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownElevationNull() {
                this[this.tableGetSanitaryPipeProperties.DownElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpDepthNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.UpDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpDepthNull() {
                this[this.tableGetSanitaryPipeProperties.UpDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpElevationNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.UpElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpElevationNull() {
                this[this.tableGetSanitaryPipeProperties.UpElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSlopeNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.SlopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSlopeNull() {
                this[this.tableGetSanitaryPipeProperties.SlopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiameterNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.DiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiameterNull() {
                this[this.tableGetSanitaryPipeProperties.DiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableGetSanitaryPipeProperties.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableGetSanitaryPipeProperties.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableGetSanitaryPipeProperties.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSanitaryPipePropertiesRowChangeEvent : global::System.EventArgs {
            
            private GetSanitaryPipePropertiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryPipePropertiesRowChangeEvent(GetSanitaryPipePropertiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryPipePropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591