//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F9001QueryingFieldsData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F9001QueryingFieldsData : global::System.Data.DataSet {
        
        private ExciseTaxRateQueryingFieldsDataTable tableExciseTaxRateQueryingFields;
        
        private ExciseAffidvtQueryingFieldsDataTable tableExciseAffidvtQueryingFields;
        
        private RealEstateQueryingFieldsDataTable tableRealEstateQueryingFields;
        
        private ExciseTaxStatementQueryingFieldsDataTable tableExciseTaxStatementQueryingFields;
        
        private CheckDetailQueryingFieldsDataTable tableCheckDetailQueryingFields;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F9001QueryingFieldsData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F9001QueryingFieldsData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ExciseTaxRateQueryingFields"] != null)) {
                    base.Tables.Add(new ExciseTaxRateQueryingFieldsDataTable(ds.Tables["ExciseTaxRateQueryingFields"]));
                }
                if ((ds.Tables["ExciseAffidvtQueryingFields"] != null)) {
                    base.Tables.Add(new ExciseAffidvtQueryingFieldsDataTable(ds.Tables["ExciseAffidvtQueryingFields"]));
                }
                if ((ds.Tables["RealEstateQueryingFields"] != null)) {
                    base.Tables.Add(new RealEstateQueryingFieldsDataTable(ds.Tables["RealEstateQueryingFields"]));
                }
                if ((ds.Tables["ExciseTaxStatementQueryingFields"] != null)) {
                    base.Tables.Add(new ExciseTaxStatementQueryingFieldsDataTable(ds.Tables["ExciseTaxStatementQueryingFields"]));
                }
                if ((ds.Tables["CheckDetailQueryingFields"] != null)) {
                    base.Tables.Add(new CheckDetailQueryingFieldsDataTable(ds.Tables["CheckDetailQueryingFields"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExciseTaxRateQueryingFieldsDataTable ExciseTaxRateQueryingFields {
            get {
                return this.tableExciseTaxRateQueryingFields;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExciseAffidvtQueryingFieldsDataTable ExciseAffidvtQueryingFields {
            get {
                return this.tableExciseAffidvtQueryingFields;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RealEstateQueryingFieldsDataTable RealEstateQueryingFields {
            get {
                return this.tableRealEstateQueryingFields;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExciseTaxStatementQueryingFieldsDataTable ExciseTaxStatementQueryingFields {
            get {
                return this.tableExciseTaxStatementQueryingFields;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CheckDetailQueryingFieldsDataTable CheckDetailQueryingFields {
            get {
                return this.tableCheckDetailQueryingFields;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F9001QueryingFieldsData cln = ((F9001QueryingFieldsData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ExciseTaxRateQueryingFields"] != null)) {
                    base.Tables.Add(new ExciseTaxRateQueryingFieldsDataTable(ds.Tables["ExciseTaxRateQueryingFields"]));
                }
                if ((ds.Tables["ExciseAffidvtQueryingFields"] != null)) {
                    base.Tables.Add(new ExciseAffidvtQueryingFieldsDataTable(ds.Tables["ExciseAffidvtQueryingFields"]));
                }
                if ((ds.Tables["RealEstateQueryingFields"] != null)) {
                    base.Tables.Add(new RealEstateQueryingFieldsDataTable(ds.Tables["RealEstateQueryingFields"]));
                }
                if ((ds.Tables["ExciseTaxStatementQueryingFields"] != null)) {
                    base.Tables.Add(new ExciseTaxStatementQueryingFieldsDataTable(ds.Tables["ExciseTaxStatementQueryingFields"]));
                }
                if ((ds.Tables["CheckDetailQueryingFields"] != null)) {
                    base.Tables.Add(new CheckDetailQueryingFieldsDataTable(ds.Tables["CheckDetailQueryingFields"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableExciseTaxRateQueryingFields = ((ExciseTaxRateQueryingFieldsDataTable)(base.Tables["ExciseTaxRateQueryingFields"]));
            if ((initTable == true)) {
                if ((this.tableExciseTaxRateQueryingFields != null)) {
                    this.tableExciseTaxRateQueryingFields.InitVars();
                }
            }
            this.tableExciseAffidvtQueryingFields = ((ExciseAffidvtQueryingFieldsDataTable)(base.Tables["ExciseAffidvtQueryingFields"]));
            if ((initTable == true)) {
                if ((this.tableExciseAffidvtQueryingFields != null)) {
                    this.tableExciseAffidvtQueryingFields.InitVars();
                }
            }
            this.tableRealEstateQueryingFields = ((RealEstateQueryingFieldsDataTable)(base.Tables["RealEstateQueryingFields"]));
            if ((initTable == true)) {
                if ((this.tableRealEstateQueryingFields != null)) {
                    this.tableRealEstateQueryingFields.InitVars();
                }
            }
            this.tableExciseTaxStatementQueryingFields = ((ExciseTaxStatementQueryingFieldsDataTable)(base.Tables["ExciseTaxStatementQueryingFields"]));
            if ((initTable == true)) {
                if ((this.tableExciseTaxStatementQueryingFields != null)) {
                    this.tableExciseTaxStatementQueryingFields.InitVars();
                }
            }
            this.tableCheckDetailQueryingFields = ((CheckDetailQueryingFieldsDataTable)(base.Tables["CheckDetailQueryingFields"]));
            if ((initTable == true)) {
                if ((this.tableCheckDetailQueryingFields != null)) {
                    this.tableCheckDetailQueryingFields.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F9001QueryingFieldsData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F9001QueryingFieldsData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableExciseTaxRateQueryingFields = new ExciseTaxRateQueryingFieldsDataTable();
            base.Tables.Add(this.tableExciseTaxRateQueryingFields);
            this.tableExciseAffidvtQueryingFields = new ExciseAffidvtQueryingFieldsDataTable();
            base.Tables.Add(this.tableExciseAffidvtQueryingFields);
            this.tableRealEstateQueryingFields = new RealEstateQueryingFieldsDataTable();
            base.Tables.Add(this.tableRealEstateQueryingFields);
            this.tableExciseTaxStatementQueryingFields = new ExciseTaxStatementQueryingFieldsDataTable();
            base.Tables.Add(this.tableExciseTaxStatementQueryingFields);
            this.tableCheckDetailQueryingFields = new CheckDetailQueryingFieldsDataTable();
            base.Tables.Add(this.tableCheckDetailQueryingFields);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExciseTaxRateQueryingFields() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExciseAffidvtQueryingFields() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRealEstateQueryingFields() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExciseTaxStatementQueryingFields() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCheckDetailQueryingFields() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F9001QueryingFieldsData ds = new F9001QueryingFieldsData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ExciseTaxRateQueryingFieldsRowChangeEventHandler(object sender, ExciseTaxRateQueryingFieldsRowChangeEvent e);
        
        public delegate void ExciseAffidvtQueryingFieldsRowChangeEventHandler(object sender, ExciseAffidvtQueryingFieldsRowChangeEvent e);
        
        public delegate void RealEstateQueryingFieldsRowChangeEventHandler(object sender, RealEstateQueryingFieldsRowChangeEvent e);
        
        public delegate void ExciseTaxStatementQueryingFieldsRowChangeEventHandler(object sender, ExciseTaxStatementQueryingFieldsRowChangeEvent e);
        
        public delegate void CheckDetailQueryingFieldsRowChangeEventHandler(object sender, CheckDetailQueryingFieldsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExciseTaxRateQueryingFieldsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRATEDISTRICTID;
            
            private global::System.Data.DataColumn columnADMINFEES;
            
            private global::System.Data.DataColumn columnTRANSACTIONFEES;
            
            private global::System.Data.DataColumn columnTECHFEES;
            
            private global::System.Data.DataColumn columnYEAR;
            
            private global::System.Data.DataColumn columnLOCALRATE;
            
            private global::System.Data.DataColumn columnLOCALIS;
            
            private global::System.Data.DataColumn columnTOTALTAXRATE;
            
            private global::System.Data.DataColumn columnTAXDISTRICT;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxRateQueryingFieldsDataTable() {
                this.TableName = "ExciseTaxRateQueryingFields";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseTaxRateQueryingFieldsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExciseTaxRateQueryingFieldsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RATEDISTRICTIDColumn {
                get {
                    return this.columnRATEDISTRICTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADMINFEESColumn {
                get {
                    return this.columnADMINFEES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRANSACTIONFEESColumn {
                get {
                    return this.columnTRANSACTIONFEES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TECHFEESColumn {
                get {
                    return this.columnTECHFEES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YEARColumn {
                get {
                    return this.columnYEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCALRATEColumn {
                get {
                    return this.columnLOCALRATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCALISColumn {
                get {
                    return this.columnLOCALIS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTALTAXRATEColumn {
                get {
                    return this.columnTOTALTAXRATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TAXDISTRICTColumn {
                get {
                    return this.columnTAXDISTRICT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxRateQueryingFieldsRow this[int index] {
                get {
                    return ((ExciseTaxRateQueryingFieldsRow)(this.Rows[index]));
                }
            }
            
            public event ExciseTaxRateQueryingFieldsRowChangeEventHandler ExciseTaxRateQueryingFieldsRowChanging;
            
            public event ExciseTaxRateQueryingFieldsRowChangeEventHandler ExciseTaxRateQueryingFieldsRowChanged;
            
            public event ExciseTaxRateQueryingFieldsRowChangeEventHandler ExciseTaxRateQueryingFieldsRowDeleting;
            
            public event ExciseTaxRateQueryingFieldsRowChangeEventHandler ExciseTaxRateQueryingFieldsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExciseTaxRateQueryingFieldsRow(ExciseTaxRateQueryingFieldsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxRateQueryingFieldsRow AddExciseTaxRateQueryingFieldsRow(int RATEDISTRICTID, decimal ADMINFEES, decimal TRANSACTIONFEES, decimal TECHFEES, int YEAR, decimal LOCALRATE, string LOCALIS, decimal TOTALTAXRATE, string TAXDISTRICT, string DESCRIPTION) {
                ExciseTaxRateQueryingFieldsRow rowExciseTaxRateQueryingFieldsRow = ((ExciseTaxRateQueryingFieldsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RATEDISTRICTID,
                        ADMINFEES,
                        TRANSACTIONFEES,
                        TECHFEES,
                        YEAR,
                        LOCALRATE,
                        LOCALIS,
                        TOTALTAXRATE,
                        TAXDISTRICT,
                        DESCRIPTION};
                rowExciseTaxRateQueryingFieldsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExciseTaxRateQueryingFieldsRow);
                return rowExciseTaxRateQueryingFieldsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExciseTaxRateQueryingFieldsDataTable cln = ((ExciseTaxRateQueryingFieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExciseTaxRateQueryingFieldsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRATEDISTRICTID = base.Columns["RATEDISTRICTID"];
                this.columnADMINFEES = base.Columns["ADMINFEES"];
                this.columnTRANSACTIONFEES = base.Columns["TRANSACTIONFEES"];
                this.columnTECHFEES = base.Columns["TECHFEES"];
                this.columnYEAR = base.Columns["YEAR"];
                this.columnLOCALRATE = base.Columns["LOCALRATE"];
                this.columnLOCALIS = base.Columns["LOCALIS"];
                this.columnTOTALTAXRATE = base.Columns["TOTALTAXRATE"];
                this.columnTAXDISTRICT = base.Columns["TAXDISTRICT"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRATEDISTRICTID = new global::System.Data.DataColumn("RATEDISTRICTID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRATEDISTRICTID);
                this.columnADMINFEES = new global::System.Data.DataColumn("ADMINFEES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMINFEES);
                this.columnTRANSACTIONFEES = new global::System.Data.DataColumn("TRANSACTIONFEES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSACTIONFEES);
                this.columnTECHFEES = new global::System.Data.DataColumn("TECHFEES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTECHFEES);
                this.columnYEAR = new global::System.Data.DataColumn("YEAR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYEAR);
                this.columnLOCALRATE = new global::System.Data.DataColumn("LOCALRATE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCALRATE);
                this.columnLOCALIS = new global::System.Data.DataColumn("LOCALIS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCALIS);
                this.columnTOTALTAXRATE = new global::System.Data.DataColumn("TOTALTAXRATE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTALTAXRATE);
                this.columnTAXDISTRICT = new global::System.Data.DataColumn("TAXDISTRICT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXDISTRICT);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnTOTALTAXRATE.ReadOnly = true;
                this.columnTAXDISTRICT.ReadOnly = true;
                this.columnDESCRIPTION.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxRateQueryingFieldsRow NewExciseTaxRateQueryingFieldsRow() {
                return ((ExciseTaxRateQueryingFieldsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExciseTaxRateQueryingFieldsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExciseTaxRateQueryingFieldsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExciseTaxRateQueryingFieldsRowChanged != null)) {
                    this.ExciseTaxRateQueryingFieldsRowChanged(this, new ExciseTaxRateQueryingFieldsRowChangeEvent(((ExciseTaxRateQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExciseTaxRateQueryingFieldsRowChanging != null)) {
                    this.ExciseTaxRateQueryingFieldsRowChanging(this, new ExciseTaxRateQueryingFieldsRowChangeEvent(((ExciseTaxRateQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExciseTaxRateQueryingFieldsRowDeleted != null)) {
                    this.ExciseTaxRateQueryingFieldsRowDeleted(this, new ExciseTaxRateQueryingFieldsRowChangeEvent(((ExciseTaxRateQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExciseTaxRateQueryingFieldsRowDeleting != null)) {
                    this.ExciseTaxRateQueryingFieldsRowDeleting(this, new ExciseTaxRateQueryingFieldsRowChangeEvent(((ExciseTaxRateQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExciseTaxRateQueryingFieldsRow(ExciseTaxRateQueryingFieldsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9001QueryingFieldsData ds = new F9001QueryingFieldsData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExciseTaxRateQueryingFieldsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExciseAffidvtQueryingFieldsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnPaymentDate;
            
            private global::System.Data.DataColumn columnFormDate;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnSubmittedDate;
            
            private global::System.Data.DataColumn columnFromWEB;
            
            private global::System.Data.DataColumn columnTotalDebt;
            
            private global::System.Data.DataColumn columnLocationCode;
            
            private global::System.Data.DataColumn columnTaxCode;
            
            private global::System.Data.DataColumn columnMobileHome;
            
            private global::System.Data.DataColumn columnReceiptNumber;
            
            private global::System.Data.DataColumn columnNoteToDOR;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            private global::System.Data.DataColumn columnIndividualType;
            
            private global::System.Data.DataColumn columnOwner;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZipCode;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnPersonalProp;
            
            private global::System.Data.DataColumn columnAssessedValue;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnPartialSale;
            
            private global::System.Data.DataColumn columnSegregated;
            
            private global::System.Data.DataColumn columnStreetAddress;
            
            private global::System.Data.DataColumn columnLocationOfSale;
            
            private global::System.Data.DataColumn columnNameOfLocation;
            
            private global::System.Data.DataColumn columnUseCode;
            
            private global::System.Data.DataColumn columnExemptRegNumber;
            
            private global::System.Data.DataColumn columnForestLand;
            
            private global::System.Data.DataColumn columnOpenSpace;
            
            private global::System.Data.DataColumn columnHistoric;
            
            private global::System.Data.DataColumn columnContinuance;
            
            private global::System.Data.DataColumn columnPersonalPropertyDescription;
            
            private global::System.Data.DataColumn columnExemptionCode;
            
            private global::System.Data.DataColumn columnExemptionDescription;
            
            private global::System.Data.DataColumn columnDocumentType;
            
            private global::System.Data.DataColumn columnDocumentDate;
            
            private global::System.Data.DataColumn columnGrossSellingPrice;
            
            private global::System.Data.DataColumn columnPersonalPropertyAmount;
            
            private global::System.Data.DataColumn columnRealPropertyExemptAmount;
            
            private global::System.Data.DataColumn columnTaxableSalePrice;
            
            private global::System.Data.DataColumn columnExciseTaxState;
            
            private global::System.Data.DataColumn columnExciseTaxLocal;
            
            private global::System.Data.DataColumn columnDelinquentInterestState;
            
            private global::System.Data.DataColumn columnDelinquentInterestLocal;
            
            private global::System.Data.DataColumn columnDelinquentPenalty;
            
            private global::System.Data.DataColumn columnTechnologyFee;
            
            private global::System.Data.DataColumn columnTransactionFee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseAffidvtQueryingFieldsDataTable() {
                this.TableName = "ExciseAffidvtQueryingFields";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseAffidvtQueryingFieldsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExciseAffidvtQueryingFieldsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormDateColumn {
                get {
                    return this.columnFormDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubmittedDateColumn {
                get {
                    return this.columnSubmittedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromWEBColumn {
                get {
                    return this.columnFromWEB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebtColumn {
                get {
                    return this.columnTotalDebt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationCodeColumn {
                get {
                    return this.columnLocationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxCodeColumn {
                get {
                    return this.columnTaxCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileHomeColumn {
                get {
                    return this.columnMobileHome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptNumberColumn {
                get {
                    return this.columnReceiptNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteToDORColumn {
                get {
                    return this.columnNoteToDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeColumn {
                get {
                    return this.columnIndividualType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerColumn {
                get {
                    return this.columnOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalPropColumn {
                get {
                    return this.columnPersonalProp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessedValueColumn {
                get {
                    return this.columnAssessedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartialSaleColumn {
                get {
                    return this.columnPartialSale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SegregatedColumn {
                get {
                    return this.columnSegregated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetAddressColumn {
                get {
                    return this.columnStreetAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationOfSaleColumn {
                get {
                    return this.columnLocationOfSale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameOfLocationColumn {
                get {
                    return this.columnNameOfLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCodeColumn {
                get {
                    return this.columnUseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptRegNumberColumn {
                get {
                    return this.columnExemptRegNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForestLandColumn {
                get {
                    return this.columnForestLand;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpenSpaceColumn {
                get {
                    return this.columnOpenSpace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HistoricColumn {
                get {
                    return this.columnHistoric;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContinuanceColumn {
                get {
                    return this.columnContinuance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalPropertyDescriptionColumn {
                get {
                    return this.columnPersonalPropertyDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionCodeColumn {
                get {
                    return this.columnExemptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionDescriptionColumn {
                get {
                    return this.columnExemptionDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentTypeColumn {
                get {
                    return this.columnDocumentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDateColumn {
                get {
                    return this.columnDocumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossSellingPriceColumn {
                get {
                    return this.columnGrossSellingPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalPropertyAmountColumn {
                get {
                    return this.columnPersonalPropertyAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealPropertyExemptAmountColumn {
                get {
                    return this.columnRealPropertyExemptAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableSalePriceColumn {
                get {
                    return this.columnTaxableSalePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseTaxStateColumn {
                get {
                    return this.columnExciseTaxState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseTaxLocalColumn {
                get {
                    return this.columnExciseTaxLocal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentInterestStateColumn {
                get {
                    return this.columnDelinquentInterestState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentInterestLocalColumn {
                get {
                    return this.columnDelinquentInterestLocal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentPenaltyColumn {
                get {
                    return this.columnDelinquentPenalty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechnologyFeeColumn {
                get {
                    return this.columnTechnologyFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionFeeColumn {
                get {
                    return this.columnTransactionFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseAffidvtQueryingFieldsRow this[int index] {
                get {
                    return ((ExciseAffidvtQueryingFieldsRow)(this.Rows[index]));
                }
            }
            
            public event ExciseAffidvtQueryingFieldsRowChangeEventHandler ExciseAffidvtQueryingFieldsRowChanging;
            
            public event ExciseAffidvtQueryingFieldsRowChangeEventHandler ExciseAffidvtQueryingFieldsRowChanged;
            
            public event ExciseAffidvtQueryingFieldsRowChangeEventHandler ExciseAffidvtQueryingFieldsRowDeleting;
            
            public event ExciseAffidvtQueryingFieldsRowChangeEventHandler ExciseAffidvtQueryingFieldsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExciseAffidvtQueryingFieldsRow(ExciseAffidvtQueryingFieldsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseAffidvtQueryingFieldsRow AddExciseAffidvtQueryingFieldsRow(
                        int StatementID, 
                        string PaymentDate, 
                        string FormDate, 
                        string District, 
                        string SubmittedDate, 
                        string FromWEB, 
                        decimal TotalDebt, 
                        int LocationCode, 
                        string TaxCode, 
                        string MobileHome, 
                        string ReceiptNumber, 
                        string NoteToDOR, 
                        string Name, 
                        string PhoneNumber, 
                        string IndividualType, 
                        decimal Owner, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        string State, 
                        string ZipCode, 
                        string Country, 
                        string ParcelNumber, 
                        string PersonalProp, 
                        decimal AssessedValue, 
                        string Legal, 
                        string PartialSale, 
                        string Segregated, 
                        string StreetAddress, 
                        string LocationOfSale, 
                        string NameOfLocation, 
                        string UseCode, 
                        string ExemptRegNumber, 
                        string ForestLand, 
                        string OpenSpace, 
                        string Historic, 
                        string Continuance, 
                        string PersonalPropertyDescription, 
                        string ExemptionCode, 
                        string ExemptionDescription, 
                        string DocumentType, 
                        string DocumentDate, 
                        decimal GrossSellingPrice, 
                        decimal PersonalPropertyAmount, 
                        decimal RealPropertyExemptAmount, 
                        decimal TaxableSalePrice, 
                        decimal ExciseTaxState, 
                        decimal ExciseTaxLocal, 
                        decimal DelinquentInterestState, 
                        decimal DelinquentInterestLocal, 
                        decimal DelinquentPenalty, 
                        decimal TechnologyFee, 
                        decimal TransactionFee) {
                ExciseAffidvtQueryingFieldsRow rowExciseAffidvtQueryingFieldsRow = ((ExciseAffidvtQueryingFieldsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        PaymentDate,
                        FormDate,
                        District,
                        SubmittedDate,
                        FromWEB,
                        TotalDebt,
                        LocationCode,
                        TaxCode,
                        MobileHome,
                        ReceiptNumber,
                        NoteToDOR,
                        Name,
                        PhoneNumber,
                        IndividualType,
                        Owner,
                        Address1,
                        Address2,
                        City,
                        State,
                        ZipCode,
                        Country,
                        ParcelNumber,
                        PersonalProp,
                        AssessedValue,
                        Legal,
                        PartialSale,
                        Segregated,
                        StreetAddress,
                        LocationOfSale,
                        NameOfLocation,
                        UseCode,
                        ExemptRegNumber,
                        ForestLand,
                        OpenSpace,
                        Historic,
                        Continuance,
                        PersonalPropertyDescription,
                        ExemptionCode,
                        ExemptionDescription,
                        DocumentType,
                        DocumentDate,
                        GrossSellingPrice,
                        PersonalPropertyAmount,
                        RealPropertyExemptAmount,
                        TaxableSalePrice,
                        ExciseTaxState,
                        ExciseTaxLocal,
                        DelinquentInterestState,
                        DelinquentInterestLocal,
                        DelinquentPenalty,
                        TechnologyFee,
                        TransactionFee};
                rowExciseAffidvtQueryingFieldsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExciseAffidvtQueryingFieldsRow);
                return rowExciseAffidvtQueryingFieldsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExciseAffidvtQueryingFieldsDataTable cln = ((ExciseAffidvtQueryingFieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExciseAffidvtQueryingFieldsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnFormDate = base.Columns["FormDate"];
                this.columnDistrict = base.Columns["District"];
                this.columnSubmittedDate = base.Columns["SubmittedDate"];
                this.columnFromWEB = base.Columns["FromWEB"];
                this.columnTotalDebt = base.Columns["TotalDebt"];
                this.columnLocationCode = base.Columns["LocationCode"];
                this.columnTaxCode = base.Columns["TaxCode"];
                this.columnMobileHome = base.Columns["MobileHome"];
                this.columnReceiptNumber = base.Columns["ReceiptNumber"];
                this.columnNoteToDOR = base.Columns["NoteToDOR"];
                this.columnName = base.Columns["Name"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
                this.columnIndividualType = base.Columns["IndividualType"];
                this.columnOwner = base.Columns["Owner"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnCountry = base.Columns["Country"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnPersonalProp = base.Columns["PersonalProp"];
                this.columnAssessedValue = base.Columns["AssessedValue"];
                this.columnLegal = base.Columns["Legal"];
                this.columnPartialSale = base.Columns["PartialSale"];
                this.columnSegregated = base.Columns["Segregated"];
                this.columnStreetAddress = base.Columns["StreetAddress"];
                this.columnLocationOfSale = base.Columns["LocationOfSale"];
                this.columnNameOfLocation = base.Columns["NameOfLocation"];
                this.columnUseCode = base.Columns["UseCode"];
                this.columnExemptRegNumber = base.Columns["ExemptRegNumber"];
                this.columnForestLand = base.Columns["ForestLand"];
                this.columnOpenSpace = base.Columns["OpenSpace"];
                this.columnHistoric = base.Columns["Historic"];
                this.columnContinuance = base.Columns["Continuance"];
                this.columnPersonalPropertyDescription = base.Columns["PersonalPropertyDescription"];
                this.columnExemptionCode = base.Columns["ExemptionCode"];
                this.columnExemptionDescription = base.Columns["ExemptionDescription"];
                this.columnDocumentType = base.Columns["DocumentType"];
                this.columnDocumentDate = base.Columns["DocumentDate"];
                this.columnGrossSellingPrice = base.Columns["GrossSellingPrice"];
                this.columnPersonalPropertyAmount = base.Columns["PersonalPropertyAmount"];
                this.columnRealPropertyExemptAmount = base.Columns["RealPropertyExemptAmount"];
                this.columnTaxableSalePrice = base.Columns["TaxableSalePrice"];
                this.columnExciseTaxState = base.Columns["ExciseTaxState"];
                this.columnExciseTaxLocal = base.Columns["ExciseTaxLocal"];
                this.columnDelinquentInterestState = base.Columns["DelinquentInterestState"];
                this.columnDelinquentInterestLocal = base.Columns["DelinquentInterestLocal"];
                this.columnDelinquentPenalty = base.Columns["DelinquentPenalty"];
                this.columnTechnologyFee = base.Columns["TechnologyFee"];
                this.columnTransactionFee = base.Columns["TransactionFee"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnPaymentDate = new global::System.Data.DataColumn("PaymentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnFormDate = new global::System.Data.DataColumn("FormDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormDate);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnSubmittedDate = new global::System.Data.DataColumn("SubmittedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubmittedDate);
                this.columnFromWEB = new global::System.Data.DataColumn("FromWEB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromWEB);
                this.columnTotalDebt = new global::System.Data.DataColumn("TotalDebt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt);
                this.columnLocationCode = new global::System.Data.DataColumn("LocationCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationCode);
                this.columnTaxCode = new global::System.Data.DataColumn("TaxCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCode);
                this.columnMobileHome = new global::System.Data.DataColumn("MobileHome", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileHome);
                this.columnReceiptNumber = new global::System.Data.DataColumn("ReceiptNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptNumber);
                this.columnNoteToDOR = new global::System.Data.DataColumn("NoteToDOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoteToDOR);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnIndividualType = new global::System.Data.DataColumn("IndividualType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualType);
                this.columnOwner = new global::System.Data.DataColumn("Owner", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwner);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZipCode = new global::System.Data.DataColumn("ZipCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnPersonalProp = new global::System.Data.DataColumn("PersonalProp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalProp);
                this.columnAssessedValue = new global::System.Data.DataColumn("AssessedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessedValue);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnPartialSale = new global::System.Data.DataColumn("PartialSale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartialSale);
                this.columnSegregated = new global::System.Data.DataColumn("Segregated", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSegregated);
                this.columnStreetAddress = new global::System.Data.DataColumn("StreetAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreetAddress);
                this.columnLocationOfSale = new global::System.Data.DataColumn("LocationOfSale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationOfSale);
                this.columnNameOfLocation = new global::System.Data.DataColumn("NameOfLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameOfLocation);
                this.columnUseCode = new global::System.Data.DataColumn("UseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode);
                this.columnExemptRegNumber = new global::System.Data.DataColumn("ExemptRegNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptRegNumber);
                this.columnForestLand = new global::System.Data.DataColumn("ForestLand", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForestLand);
                this.columnOpenSpace = new global::System.Data.DataColumn("OpenSpace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenSpace);
                this.columnHistoric = new global::System.Data.DataColumn("Historic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHistoric);
                this.columnContinuance = new global::System.Data.DataColumn("Continuance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContinuance);
                this.columnPersonalPropertyDescription = new global::System.Data.DataColumn("PersonalPropertyDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalPropertyDescription);
                this.columnExemptionCode = new global::System.Data.DataColumn("ExemptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionCode);
                this.columnExemptionDescription = new global::System.Data.DataColumn("ExemptionDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionDescription);
                this.columnDocumentType = new global::System.Data.DataColumn("DocumentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentType);
                this.columnDocumentDate = new global::System.Data.DataColumn("DocumentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDate);
                this.columnGrossSellingPrice = new global::System.Data.DataColumn("GrossSellingPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossSellingPrice);
                this.columnPersonalPropertyAmount = new global::System.Data.DataColumn("PersonalPropertyAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalPropertyAmount);
                this.columnRealPropertyExemptAmount = new global::System.Data.DataColumn("RealPropertyExemptAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealPropertyExemptAmount);
                this.columnTaxableSalePrice = new global::System.Data.DataColumn("TaxableSalePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxableSalePrice);
                this.columnExciseTaxState = new global::System.Data.DataColumn("ExciseTaxState", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseTaxState);
                this.columnExciseTaxLocal = new global::System.Data.DataColumn("ExciseTaxLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseTaxLocal);
                this.columnDelinquentInterestState = new global::System.Data.DataColumn("DelinquentInterestState", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentInterestState);
                this.columnDelinquentInterestLocal = new global::System.Data.DataColumn("DelinquentInterestLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentInterestLocal);
                this.columnDelinquentPenalty = new global::System.Data.DataColumn("DelinquentPenalty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentPenalty);
                this.columnTechnologyFee = new global::System.Data.DataColumn("TechnologyFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechnologyFee);
                this.columnTransactionFee = new global::System.Data.DataColumn("TransactionFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionFee);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseAffidvtQueryingFieldsRow NewExciseAffidvtQueryingFieldsRow() {
                return ((ExciseAffidvtQueryingFieldsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExciseAffidvtQueryingFieldsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExciseAffidvtQueryingFieldsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExciseAffidvtQueryingFieldsRowChanged != null)) {
                    this.ExciseAffidvtQueryingFieldsRowChanged(this, new ExciseAffidvtQueryingFieldsRowChangeEvent(((ExciseAffidvtQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExciseAffidvtQueryingFieldsRowChanging != null)) {
                    this.ExciseAffidvtQueryingFieldsRowChanging(this, new ExciseAffidvtQueryingFieldsRowChangeEvent(((ExciseAffidvtQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExciseAffidvtQueryingFieldsRowDeleted != null)) {
                    this.ExciseAffidvtQueryingFieldsRowDeleted(this, new ExciseAffidvtQueryingFieldsRowChangeEvent(((ExciseAffidvtQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExciseAffidvtQueryingFieldsRowDeleting != null)) {
                    this.ExciseAffidvtQueryingFieldsRowDeleting(this, new ExciseAffidvtQueryingFieldsRowChangeEvent(((ExciseAffidvtQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExciseAffidvtQueryingFieldsRow(ExciseAffidvtQueryingFieldsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9001QueryingFieldsData ds = new F9001QueryingFieldsData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExciseAffidvtQueryingFieldsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RealEstateQueryingFieldsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSTATEMENTID;
            
            private global::System.Data.DataColumn columnSTATEMENTNUMBER;
            
            private global::System.Data.DataColumn columnROLLYEAR;
            
            private global::System.Data.DataColumn columnLEVYYEAR;
            
            private global::System.Data.DataColumn columnDISTRICT;
            
            private global::System.Data.DataColumn columnTOTALVALUE;
            
            private global::System.Data.DataColumn columnORIGINALTAX;
            
            private global::System.Data.DataColumn columnSITUS;
            
            private global::System.Data.DataColumn columnTOTALEXEMPTIONS;
            
            private global::System.Data.DataColumn columnTOTALDEDUCTIONS;
            
            private global::System.Data.DataColumn columnLEGAL;
            
            private global::System.Data.DataColumn columnTAXABLEVALUE;
            
            private global::System.Data.DataColumn columnTAXBILLED;
            
            private global::System.Data.DataColumn columnOWNERNAME;
            
            private global::System.Data.DataColumn columnMAPNUMBER;
            
            private global::System.Data.DataColumn columnPARCELID;
            
            private global::System.Data.DataColumn columnPARCELNUMBER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealEstateQueryingFieldsDataTable() {
                this.TableName = "RealEstateQueryingFields";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RealEstateQueryingFieldsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RealEstateQueryingFieldsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEMENTIDColumn {
                get {
                    return this.columnSTATEMENTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEMENTNUMBERColumn {
                get {
                    return this.columnSTATEMENTNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROLLYEARColumn {
                get {
                    return this.columnROLLYEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LEVYYEARColumn {
                get {
                    return this.columnLEVYYEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTRICTColumn {
                get {
                    return this.columnDISTRICT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTALVALUEColumn {
                get {
                    return this.columnTOTALVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORIGINALTAXColumn {
                get {
                    return this.columnORIGINALTAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SITUSColumn {
                get {
                    return this.columnSITUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTALEXEMPTIONSColumn {
                get {
                    return this.columnTOTALEXEMPTIONS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTALDEDUCTIONSColumn {
                get {
                    return this.columnTOTALDEDUCTIONS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LEGALColumn {
                get {
                    return this.columnLEGAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TAXABLEVALUEColumn {
                get {
                    return this.columnTAXABLEVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TAXBILLEDColumn {
                get {
                    return this.columnTAXBILLED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNERNAMEColumn {
                get {
                    return this.columnOWNERNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPNUMBERColumn {
                get {
                    return this.columnMAPNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARCELIDColumn {
                get {
                    return this.columnPARCELID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARCELNUMBERColumn {
                get {
                    return this.columnPARCELNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealEstateQueryingFieldsRow this[int index] {
                get {
                    return ((RealEstateQueryingFieldsRow)(this.Rows[index]));
                }
            }
            
            public event RealEstateQueryingFieldsRowChangeEventHandler RealEstateQueryingFieldsRowChanging;
            
            public event RealEstateQueryingFieldsRowChangeEventHandler RealEstateQueryingFieldsRowChanged;
            
            public event RealEstateQueryingFieldsRowChangeEventHandler RealEstateQueryingFieldsRowDeleting;
            
            public event RealEstateQueryingFieldsRowChangeEventHandler RealEstateQueryingFieldsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRealEstateQueryingFieldsRow(RealEstateQueryingFieldsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealEstateQueryingFieldsRow AddRealEstateQueryingFieldsRow(
                        int STATEMENTID, 
                        string STATEMENTNUMBER, 
                        short ROLLYEAR, 
                        short LEVYYEAR, 
                        int DISTRICT, 
                        decimal TOTALVALUE, 
                        decimal ORIGINALTAX, 
                        string SITUS, 
                        decimal TOTALEXEMPTIONS, 
                        decimal TOTALDEDUCTIONS, 
                        string LEGAL, 
                        decimal TAXABLEVALUE, 
                        decimal TAXBILLED, 
                        string OWNERNAME, 
                        string MAPNUMBER, 
                        int PARCELID, 
                        string PARCELNUMBER) {
                RealEstateQueryingFieldsRow rowRealEstateQueryingFieldsRow = ((RealEstateQueryingFieldsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        STATEMENTID,
                        STATEMENTNUMBER,
                        ROLLYEAR,
                        LEVYYEAR,
                        DISTRICT,
                        TOTALVALUE,
                        ORIGINALTAX,
                        SITUS,
                        TOTALEXEMPTIONS,
                        TOTALDEDUCTIONS,
                        LEGAL,
                        TAXABLEVALUE,
                        TAXBILLED,
                        OWNERNAME,
                        MAPNUMBER,
                        PARCELID,
                        PARCELNUMBER};
                rowRealEstateQueryingFieldsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRealEstateQueryingFieldsRow);
                return rowRealEstateQueryingFieldsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RealEstateQueryingFieldsDataTable cln = ((RealEstateQueryingFieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RealEstateQueryingFieldsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTATEMENTID = base.Columns["STATEMENTID"];
                this.columnSTATEMENTNUMBER = base.Columns["STATEMENTNUMBER"];
                this.columnROLLYEAR = base.Columns["ROLLYEAR"];
                this.columnLEVYYEAR = base.Columns["LEVYYEAR"];
                this.columnDISTRICT = base.Columns["DISTRICT"];
                this.columnTOTALVALUE = base.Columns["TOTALVALUE"];
                this.columnORIGINALTAX = base.Columns["ORIGINALTAX"];
                this.columnSITUS = base.Columns["SITUS"];
                this.columnTOTALEXEMPTIONS = base.Columns["TOTALEXEMPTIONS"];
                this.columnTOTALDEDUCTIONS = base.Columns["TOTALDEDUCTIONS"];
                this.columnLEGAL = base.Columns["LEGAL"];
                this.columnTAXABLEVALUE = base.Columns["TAXABLEVALUE"];
                this.columnTAXBILLED = base.Columns["TAXBILLED"];
                this.columnOWNERNAME = base.Columns["OWNERNAME"];
                this.columnMAPNUMBER = base.Columns["MAPNUMBER"];
                this.columnPARCELID = base.Columns["PARCELID"];
                this.columnPARCELNUMBER = base.Columns["PARCELNUMBER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTATEMENTID = new global::System.Data.DataColumn("STATEMENTID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATEMENTID);
                this.columnSTATEMENTNUMBER = new global::System.Data.DataColumn("STATEMENTNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATEMENTNUMBER);
                this.columnROLLYEAR = new global::System.Data.DataColumn("ROLLYEAR", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROLLYEAR);
                this.columnLEVYYEAR = new global::System.Data.DataColumn("LEVYYEAR", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLEVYYEAR);
                this.columnDISTRICT = new global::System.Data.DataColumn("DISTRICT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTRICT);
                this.columnTOTALVALUE = new global::System.Data.DataColumn("TOTALVALUE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTALVALUE);
                this.columnORIGINALTAX = new global::System.Data.DataColumn("ORIGINALTAX", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORIGINALTAX);
                this.columnSITUS = new global::System.Data.DataColumn("SITUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITUS);
                this.columnTOTALEXEMPTIONS = new global::System.Data.DataColumn("TOTALEXEMPTIONS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTALEXEMPTIONS);
                this.columnTOTALDEDUCTIONS = new global::System.Data.DataColumn("TOTALDEDUCTIONS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTALDEDUCTIONS);
                this.columnLEGAL = new global::System.Data.DataColumn("LEGAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLEGAL);
                this.columnTAXABLEVALUE = new global::System.Data.DataColumn("TAXABLEVALUE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXABLEVALUE);
                this.columnTAXBILLED = new global::System.Data.DataColumn("TAXBILLED", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXBILLED);
                this.columnOWNERNAME = new global::System.Data.DataColumn("OWNERNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNERNAME);
                this.columnMAPNUMBER = new global::System.Data.DataColumn("MAPNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPNUMBER);
                this.columnPARCELID = new global::System.Data.DataColumn("PARCELID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARCELID);
                this.columnPARCELNUMBER = new global::System.Data.DataColumn("PARCELNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARCELNUMBER);
                this.columnSTATEMENTNUMBER.MaxLength = 20;
                this.columnTOTALVALUE.ReadOnly = true;
                this.columnORIGINALTAX.ReadOnly = true;
                this.columnSITUS.MaxLength = 50;
                this.columnTOTALEXEMPTIONS.ReadOnly = true;
                this.columnTOTALDEDUCTIONS.ReadOnly = true;
                this.columnLEGAL.MaxLength = 200;
                this.columnTAXABLEVALUE.ReadOnly = true;
                this.columnTAXBILLED.ReadOnly = true;
                this.columnOWNERNAME.ReadOnly = true;
                this.columnOWNERNAME.MaxLength = 52;
                this.columnMAPNUMBER.MaxLength = 30;
                this.columnPARCELNUMBER.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealEstateQueryingFieldsRow NewRealEstateQueryingFieldsRow() {
                return ((RealEstateQueryingFieldsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RealEstateQueryingFieldsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RealEstateQueryingFieldsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RealEstateQueryingFieldsRowChanged != null)) {
                    this.RealEstateQueryingFieldsRowChanged(this, new RealEstateQueryingFieldsRowChangeEvent(((RealEstateQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RealEstateQueryingFieldsRowChanging != null)) {
                    this.RealEstateQueryingFieldsRowChanging(this, new RealEstateQueryingFieldsRowChangeEvent(((RealEstateQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RealEstateQueryingFieldsRowDeleted != null)) {
                    this.RealEstateQueryingFieldsRowDeleted(this, new RealEstateQueryingFieldsRowChangeEvent(((RealEstateQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RealEstateQueryingFieldsRowDeleting != null)) {
                    this.RealEstateQueryingFieldsRowDeleting(this, new RealEstateQueryingFieldsRowChangeEvent(((RealEstateQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRealEstateQueryingFieldsRow(RealEstateQueryingFieldsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9001QueryingFieldsData ds = new F9001QueryingFieldsData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RealEstateQueryingFieldsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExciseTaxStatementQueryingFieldsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSTATEMENTID;
            
            private global::System.Data.DataColumn columnPARCELNUMBER;
            
            private global::System.Data.DataColumn columnSALEDATE;
            
            private global::System.Data.DataColumn columnPAYMENTDATE;
            
            private global::System.Data.DataColumn columnFORMDATE;
            
            private global::System.Data.DataColumn columnMOBILEHOME;
            
            private global::System.Data.DataColumn columnRECEIPTNUMBER;
            
            private global::System.Data.DataColumn columnDISTRICT;
            
            private global::System.Data.DataColumn columnSALEAMOUNT;
            
            private global::System.Data.DataColumn columnTAXCODE;
            
            private global::System.Data.DataColumn columnGRANTOR;
            
            private global::System.Data.DataColumn columnGRANTEE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxStatementQueryingFieldsDataTable() {
                this.TableName = "ExciseTaxStatementQueryingFields";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseTaxStatementQueryingFieldsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExciseTaxStatementQueryingFieldsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEMENTIDColumn {
                get {
                    return this.columnSTATEMENTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARCELNUMBERColumn {
                get {
                    return this.columnPARCELNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SALEDATEColumn {
                get {
                    return this.columnSALEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAYMENTDATEColumn {
                get {
                    return this.columnPAYMENTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FORMDATEColumn {
                get {
                    return this.columnFORMDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOBILEHOMEColumn {
                get {
                    return this.columnMOBILEHOME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RECEIPTNUMBERColumn {
                get {
                    return this.columnRECEIPTNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTRICTColumn {
                get {
                    return this.columnDISTRICT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SALEAMOUNTColumn {
                get {
                    return this.columnSALEAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TAXCODEColumn {
                get {
                    return this.columnTAXCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRANTORColumn {
                get {
                    return this.columnGRANTOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRANTEEColumn {
                get {
                    return this.columnGRANTEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxStatementQueryingFieldsRow this[int index] {
                get {
                    return ((ExciseTaxStatementQueryingFieldsRow)(this.Rows[index]));
                }
            }
            
            public event ExciseTaxStatementQueryingFieldsRowChangeEventHandler ExciseTaxStatementQueryingFieldsRowChanging;
            
            public event ExciseTaxStatementQueryingFieldsRowChangeEventHandler ExciseTaxStatementQueryingFieldsRowChanged;
            
            public event ExciseTaxStatementQueryingFieldsRowChangeEventHandler ExciseTaxStatementQueryingFieldsRowDeleting;
            
            public event ExciseTaxStatementQueryingFieldsRowChangeEventHandler ExciseTaxStatementQueryingFieldsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExciseTaxStatementQueryingFieldsRow(ExciseTaxStatementQueryingFieldsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxStatementQueryingFieldsRow AddExciseTaxStatementQueryingFieldsRow(int STATEMENTID, string PARCELNUMBER, string SALEDATE, string PAYMENTDATE, string FORMDATE, string MOBILEHOME, string RECEIPTNUMBER, string DISTRICT, decimal SALEAMOUNT, string TAXCODE, string GRANTOR, string GRANTEE) {
                ExciseTaxStatementQueryingFieldsRow rowExciseTaxStatementQueryingFieldsRow = ((ExciseTaxStatementQueryingFieldsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        STATEMENTID,
                        PARCELNUMBER,
                        SALEDATE,
                        PAYMENTDATE,
                        FORMDATE,
                        MOBILEHOME,
                        RECEIPTNUMBER,
                        DISTRICT,
                        SALEAMOUNT,
                        TAXCODE,
                        GRANTOR,
                        GRANTEE};
                rowExciseTaxStatementQueryingFieldsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExciseTaxStatementQueryingFieldsRow);
                return rowExciseTaxStatementQueryingFieldsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExciseTaxStatementQueryingFieldsDataTable cln = ((ExciseTaxStatementQueryingFieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExciseTaxStatementQueryingFieldsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTATEMENTID = base.Columns["STATEMENTID"];
                this.columnPARCELNUMBER = base.Columns["PARCELNUMBER"];
                this.columnSALEDATE = base.Columns["SALEDATE"];
                this.columnPAYMENTDATE = base.Columns["PAYMENTDATE"];
                this.columnFORMDATE = base.Columns["FORMDATE"];
                this.columnMOBILEHOME = base.Columns["MOBILEHOME"];
                this.columnRECEIPTNUMBER = base.Columns["RECEIPTNUMBER"];
                this.columnDISTRICT = base.Columns["DISTRICT"];
                this.columnSALEAMOUNT = base.Columns["SALEAMOUNT"];
                this.columnTAXCODE = base.Columns["TAXCODE"];
                this.columnGRANTOR = base.Columns["GRANTOR"];
                this.columnGRANTEE = base.Columns["GRANTEE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTATEMENTID = new global::System.Data.DataColumn("STATEMENTID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATEMENTID);
                this.columnPARCELNUMBER = new global::System.Data.DataColumn("PARCELNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARCELNUMBER);
                this.columnSALEDATE = new global::System.Data.DataColumn("SALEDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSALEDATE);
                this.columnPAYMENTDATE = new global::System.Data.DataColumn("PAYMENTDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYMENTDATE);
                this.columnFORMDATE = new global::System.Data.DataColumn("FORMDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFORMDATE);
                this.columnMOBILEHOME = new global::System.Data.DataColumn("MOBILEHOME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOBILEHOME);
                this.columnRECEIPTNUMBER = new global::System.Data.DataColumn("RECEIPTNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECEIPTNUMBER);
                this.columnDISTRICT = new global::System.Data.DataColumn("DISTRICT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTRICT);
                this.columnSALEAMOUNT = new global::System.Data.DataColumn("SALEAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSALEAMOUNT);
                this.columnTAXCODE = new global::System.Data.DataColumn("TAXCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXCODE);
                this.columnGRANTOR = new global::System.Data.DataColumn("GRANTOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRANTOR);
                this.columnGRANTEE = new global::System.Data.DataColumn("GRANTEE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRANTEE);
                this.columnPARCELNUMBER.MaxLength = 20;
                this.columnPAYMENTDATE.MaxLength = 20;
                this.columnDISTRICT.ReadOnly = true;
                this.columnSALEAMOUNT.ReadOnly = true;
                this.columnTAXCODE.MaxLength = 50;
                this.columnGRANTOR.ReadOnly = true;
                this.columnGRANTEE.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxStatementQueryingFieldsRow NewExciseTaxStatementQueryingFieldsRow() {
                return ((ExciseTaxStatementQueryingFieldsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExciseTaxStatementQueryingFieldsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExciseTaxStatementQueryingFieldsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExciseTaxStatementQueryingFieldsRowChanged != null)) {
                    this.ExciseTaxStatementQueryingFieldsRowChanged(this, new ExciseTaxStatementQueryingFieldsRowChangeEvent(((ExciseTaxStatementQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExciseTaxStatementQueryingFieldsRowChanging != null)) {
                    this.ExciseTaxStatementQueryingFieldsRowChanging(this, new ExciseTaxStatementQueryingFieldsRowChangeEvent(((ExciseTaxStatementQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExciseTaxStatementQueryingFieldsRowDeleted != null)) {
                    this.ExciseTaxStatementQueryingFieldsRowDeleted(this, new ExciseTaxStatementQueryingFieldsRowChangeEvent(((ExciseTaxStatementQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExciseTaxStatementQueryingFieldsRowDeleting != null)) {
                    this.ExciseTaxStatementQueryingFieldsRowDeleting(this, new ExciseTaxStatementQueryingFieldsRowChangeEvent(((ExciseTaxStatementQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExciseTaxStatementQueryingFieldsRow(ExciseTaxStatementQueryingFieldsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9001QueryingFieldsData ds = new F9001QueryingFieldsData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExciseTaxStatementQueryingFieldsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CheckDetailQueryingFieldsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPAYABLETO;
            
            private global::System.Data.DataColumn columnCHECKNUMBER;
            
            private global::System.Data.DataColumn columnCHECKDATE;
            
            private global::System.Data.DataColumn columnAMOUNT;
            
            private global::System.Data.DataColumn columnMEMO;
            
            private global::System.Data.DataColumn columnFROMACCOUNT;
            
            private global::System.Data.DataColumn columnAGENCY;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnUSERNAME;
            
            private global::System.Data.DataColumn columnPRINTEDBY;
            
            private global::System.Data.DataColumn columnPRINTEDDATE;
            
            private global::System.Data.DataColumn columnMAILEDBY;
            
            private global::System.Data.DataColumn columnMAILEDDATE;
            
            private global::System.Data.DataColumn columnCLEAREDBY;
            
            private global::System.Data.DataColumn columnCLEAREDDATE;
            
            private global::System.Data.DataColumn columnVOIDBY;
            
            private global::System.Data.DataColumn columnVOIDDATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckDetailQueryingFieldsDataTable() {
                this.TableName = "CheckDetailQueryingFields";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckDetailQueryingFieldsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CheckDetailQueryingFieldsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAYABLETOColumn {
                get {
                    return this.columnPAYABLETO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHECKNUMBERColumn {
                get {
                    return this.columnCHECKNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHECKDATEColumn {
                get {
                    return this.columnCHECKDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMOUNTColumn {
                get {
                    return this.columnAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEMOColumn {
                get {
                    return this.columnMEMO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FROMACCOUNTColumn {
                get {
                    return this.columnFROMACCOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AGENCYColumn {
                get {
                    return this.columnAGENCY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USERNAMEColumn {
                get {
                    return this.columnUSERNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRINTEDBYColumn {
                get {
                    return this.columnPRINTEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRINTEDDATEColumn {
                get {
                    return this.columnPRINTEDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAILEDBYColumn {
                get {
                    return this.columnMAILEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAILEDDATEColumn {
                get {
                    return this.columnMAILEDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLEAREDBYColumn {
                get {
                    return this.columnCLEAREDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLEAREDDATEColumn {
                get {
                    return this.columnCLEAREDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VOIDBYColumn {
                get {
                    return this.columnVOIDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VOIDDATEColumn {
                get {
                    return this.columnVOIDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckDetailQueryingFieldsRow this[int index] {
                get {
                    return ((CheckDetailQueryingFieldsRow)(this.Rows[index]));
                }
            }
            
            public event CheckDetailQueryingFieldsRowChangeEventHandler CheckDetailQueryingFieldsRowChanging;
            
            public event CheckDetailQueryingFieldsRowChangeEventHandler CheckDetailQueryingFieldsRowChanged;
            
            public event CheckDetailQueryingFieldsRowChangeEventHandler CheckDetailQueryingFieldsRowDeleting;
            
            public event CheckDetailQueryingFieldsRowChangeEventHandler CheckDetailQueryingFieldsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCheckDetailQueryingFieldsRow(CheckDetailQueryingFieldsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckDetailQueryingFieldsRow AddCheckDetailQueryingFieldsRow(
                        string PAYABLETO, 
                        string CHECKNUMBER, 
                        string CHECKDATE, 
                        decimal AMOUNT, 
                        string MEMO, 
                        string FROMACCOUNT, 
                        string AGENCY, 
                        string TYPE, 
                        string USERNAME, 
                        string PRINTEDBY, 
                        string PRINTEDDATE, 
                        string MAILEDBY, 
                        string MAILEDDATE, 
                        string CLEAREDBY, 
                        string CLEAREDDATE, 
                        string VOIDBY, 
                        string VOIDDATE) {
                CheckDetailQueryingFieldsRow rowCheckDetailQueryingFieldsRow = ((CheckDetailQueryingFieldsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PAYABLETO,
                        CHECKNUMBER,
                        CHECKDATE,
                        AMOUNT,
                        MEMO,
                        FROMACCOUNT,
                        AGENCY,
                        TYPE,
                        USERNAME,
                        PRINTEDBY,
                        PRINTEDDATE,
                        MAILEDBY,
                        MAILEDDATE,
                        CLEAREDBY,
                        CLEAREDDATE,
                        VOIDBY,
                        VOIDDATE};
                rowCheckDetailQueryingFieldsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCheckDetailQueryingFieldsRow);
                return rowCheckDetailQueryingFieldsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CheckDetailQueryingFieldsDataTable cln = ((CheckDetailQueryingFieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CheckDetailQueryingFieldsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPAYABLETO = base.Columns["PAYABLETO"];
                this.columnCHECKNUMBER = base.Columns["CHECKNUMBER"];
                this.columnCHECKDATE = base.Columns["CHECKDATE"];
                this.columnAMOUNT = base.Columns["AMOUNT"];
                this.columnMEMO = base.Columns["MEMO"];
                this.columnFROMACCOUNT = base.Columns["FROMACCOUNT"];
                this.columnAGENCY = base.Columns["AGENCY"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnUSERNAME = base.Columns["USERNAME"];
                this.columnPRINTEDBY = base.Columns["PRINTEDBY"];
                this.columnPRINTEDDATE = base.Columns["PRINTEDDATE"];
                this.columnMAILEDBY = base.Columns["MAILEDBY"];
                this.columnMAILEDDATE = base.Columns["MAILEDDATE"];
                this.columnCLEAREDBY = base.Columns["CLEAREDBY"];
                this.columnCLEAREDDATE = base.Columns["CLEAREDDATE"];
                this.columnVOIDBY = base.Columns["VOIDBY"];
                this.columnVOIDDATE = base.Columns["VOIDDATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPAYABLETO = new global::System.Data.DataColumn("PAYABLETO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYABLETO);
                this.columnCHECKNUMBER = new global::System.Data.DataColumn("CHECKNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHECKNUMBER);
                this.columnCHECKDATE = new global::System.Data.DataColumn("CHECKDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHECKDATE);
                this.columnAMOUNT = new global::System.Data.DataColumn("AMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMOUNT);
                this.columnMEMO = new global::System.Data.DataColumn("MEMO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEMO);
                this.columnFROMACCOUNT = new global::System.Data.DataColumn("FROMACCOUNT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFROMACCOUNT);
                this.columnAGENCY = new global::System.Data.DataColumn("AGENCY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAGENCY);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnUSERNAME = new global::System.Data.DataColumn("USERNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSERNAME);
                this.columnPRINTEDBY = new global::System.Data.DataColumn("PRINTEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRINTEDBY);
                this.columnPRINTEDDATE = new global::System.Data.DataColumn("PRINTEDDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRINTEDDATE);
                this.columnMAILEDBY = new global::System.Data.DataColumn("MAILEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAILEDBY);
                this.columnMAILEDDATE = new global::System.Data.DataColumn("MAILEDDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAILEDDATE);
                this.columnCLEAREDBY = new global::System.Data.DataColumn("CLEAREDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLEAREDBY);
                this.columnCLEAREDDATE = new global::System.Data.DataColumn("CLEAREDDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLEAREDDATE);
                this.columnVOIDBY = new global::System.Data.DataColumn("VOIDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVOIDBY);
                this.columnVOIDDATE = new global::System.Data.DataColumn("VOIDDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVOIDDATE);
                this.columnPAYABLETO.Caption = "PayableTo";
                this.columnCHECKNUMBER.Caption = "CheckNumber";
                this.columnAMOUNT.Caption = "Amount";
                this.columnFROMACCOUNT.AllowDBNull = false;
                this.columnTYPE.AllowDBNull = false;
                this.columnPRINTEDBY.Caption = "PrintedBy";
                this.columnPRINTEDDATE.Caption = "PrintedDate";
                this.columnMAILEDBY.Caption = "MailedBy";
                this.columnMAILEDDATE.Caption = "MailedDate";
                this.columnCLEAREDBY.Caption = "ClearedBy";
                this.columnCLEAREDDATE.Caption = "ClearedDate";
                this.columnVOIDBY.Caption = "VoidBy";
                this.columnVOIDDATE.Caption = "VoidDate";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckDetailQueryingFieldsRow NewCheckDetailQueryingFieldsRow() {
                return ((CheckDetailQueryingFieldsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CheckDetailQueryingFieldsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CheckDetailQueryingFieldsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CheckDetailQueryingFieldsRowChanged != null)) {
                    this.CheckDetailQueryingFieldsRowChanged(this, new CheckDetailQueryingFieldsRowChangeEvent(((CheckDetailQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CheckDetailQueryingFieldsRowChanging != null)) {
                    this.CheckDetailQueryingFieldsRowChanging(this, new CheckDetailQueryingFieldsRowChangeEvent(((CheckDetailQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CheckDetailQueryingFieldsRowDeleted != null)) {
                    this.CheckDetailQueryingFieldsRowDeleted(this, new CheckDetailQueryingFieldsRowChangeEvent(((CheckDetailQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CheckDetailQueryingFieldsRowDeleting != null)) {
                    this.CheckDetailQueryingFieldsRowDeleting(this, new CheckDetailQueryingFieldsRowChangeEvent(((CheckDetailQueryingFieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCheckDetailQueryingFieldsRow(CheckDetailQueryingFieldsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9001QueryingFieldsData ds = new F9001QueryingFieldsData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CheckDetailQueryingFieldsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExciseTaxRateQueryingFieldsRow : global::System.Data.DataRow {
            
            private ExciseTaxRateQueryingFieldsDataTable tableExciseTaxRateQueryingFields;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseTaxRateQueryingFieldsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExciseTaxRateQueryingFields = ((ExciseTaxRateQueryingFieldsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RATEDISTRICTID {
                get {
                    try {
                        return ((int)(this[this.tableExciseTaxRateQueryingFields.RATEDISTRICTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RATEDISTRICTID\' in table \'ExciseTaxRateQueryingFields\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.RATEDISTRICTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ADMINFEES {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseTaxRateQueryingFields.ADMINFEESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADMINFEES\' in table \'ExciseTaxRateQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.ADMINFEESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TRANSACTIONFEES {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseTaxRateQueryingFields.TRANSACTIONFEESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANSACTIONFEES\' in table \'ExciseTaxRateQueryingFields\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.TRANSACTIONFEESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TECHFEES {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseTaxRateQueryingFields.TECHFEESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TECHFEES\' in table \'ExciseTaxRateQueryingFields\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.TECHFEESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int YEAR {
                get {
                    try {
                        return ((int)(this[this.tableExciseTaxRateQueryingFields.YEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YEAR\' in table \'ExciseTaxRateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.YEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LOCALRATE {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseTaxRateQueryingFields.LOCALRATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCALRATE\' in table \'ExciseTaxRateQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.LOCALRATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCALIS {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxRateQueryingFields.LOCALISColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCALIS\' in table \'ExciseTaxRateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.LOCALISColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TOTALTAXRATE {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseTaxRateQueryingFields.TOTALTAXRATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTALTAXRATE\' in table \'ExciseTaxRateQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.TOTALTAXRATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TAXDISTRICT {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxRateQueryingFields.TAXDISTRICTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TAXDISTRICT\' in table \'ExciseTaxRateQueryingFields\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.TAXDISTRICTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxRateQueryingFields.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPTION\' in table \'ExciseTaxRateQueryingFields\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxRateQueryingFields.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRATEDISTRICTIDNull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.RATEDISTRICTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRATEDISTRICTIDNull() {
                this[this.tableExciseTaxRateQueryingFields.RATEDISTRICTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADMINFEESNull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.ADMINFEESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADMINFEESNull() {
                this[this.tableExciseTaxRateQueryingFields.ADMINFEESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRANSACTIONFEESNull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.TRANSACTIONFEESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRANSACTIONFEESNull() {
                this[this.tableExciseTaxRateQueryingFields.TRANSACTIONFEESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTECHFEESNull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.TECHFEESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTECHFEESNull() {
                this[this.tableExciseTaxRateQueryingFields.TECHFEESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYEARNull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.YEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYEARNull() {
                this[this.tableExciseTaxRateQueryingFields.YEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCALRATENull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.LOCALRATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCALRATENull() {
                this[this.tableExciseTaxRateQueryingFields.LOCALRATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCALISNull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.LOCALISColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCALISNull() {
                this[this.tableExciseTaxRateQueryingFields.LOCALISColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTALTAXRATENull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.TOTALTAXRATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTALTAXRATENull() {
                this[this.tableExciseTaxRateQueryingFields.TOTALTAXRATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTAXDISTRICTNull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.TAXDISTRICTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTAXDISTRICTNull() {
                this[this.tableExciseTaxRateQueryingFields.TAXDISTRICTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableExciseTaxRateQueryingFields.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableExciseTaxRateQueryingFields.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExciseAffidvtQueryingFieldsRow : global::System.Data.DataRow {
            
            private ExciseAffidvtQueryingFieldsDataTable tableExciseAffidvtQueryingFields;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseAffidvtQueryingFieldsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExciseAffidvtQueryingFields = ((ExciseAffidvtQueryingFieldsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableExciseAffidvtQueryingFields.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'ExciseAffidvtQueryingFields\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentDate {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.PaymentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentDate\' in table \'ExciseAffidvtQueryingFields\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.PaymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormDate {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.FormDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormDate\' in table \'ExciseAffidvtQueryingFields\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.FormDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'ExciseAffidvtQueryingFields\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubmittedDate {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.SubmittedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubmittedDate\' in table \'ExciseAffidvtQueryingFields\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.SubmittedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromWEB {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.FromWEBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromWEB\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.FromWEBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.TotalDebtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt\' in table \'ExciseAffidvtQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.TotalDebtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocationCode {
                get {
                    try {
                        return ((int)(this[this.tableExciseAffidvtQueryingFields.LocationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationCode\' in table \'ExciseAffidvtQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.LocationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxCode {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.TaxCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxCode\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.TaxCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MobileHome {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.MobileHomeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MobileHome\' in table \'ExciseAffidvtQueryingFields\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.MobileHomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptNumber {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.ReceiptNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptNumber\' in table \'ExciseAffidvtQueryingFields\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ReceiptNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoteToDOR {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.NoteToDORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoteToDOR\' in table \'ExciseAffidvtQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.NoteToDORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.PhoneNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhoneNumber\' in table \'ExciseAffidvtQueryingFields\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IndividualType {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.IndividualTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IndividualType\' in table \'ExciseAffidvtQueryingFields\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.IndividualTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Owner {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.OwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Owner\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.OwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'ExciseAffidvtQueryingFields\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'ExciseAffidvtQueryingFields\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZipCode {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.ZipCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZipCode\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ZipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ExciseAffidvtQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonalProp {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.PersonalPropColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalProp\' in table \'ExciseAffidvtQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.PersonalPropColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssessedValue {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.AssessedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessedValue\' in table \'ExciseAffidvtQueryingFields\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.AssessedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartialSale {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.PartialSaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PartialSale\' in table \'ExciseAffidvtQueryingFields\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.PartialSaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Segregated {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.SegregatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Segregated\' in table \'ExciseAffidvtQueryingFields\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.SegregatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StreetAddress {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.StreetAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StreetAddress\' in table \'ExciseAffidvtQueryingFields\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.StreetAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationOfSale {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.LocationOfSaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationOfSale\' in table \'ExciseAffidvtQueryingFields\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.LocationOfSaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NameOfLocation {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.NameOfLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NameOfLocation\' in table \'ExciseAffidvtQueryingFields\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.NameOfLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.UseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode\' in table \'ExciseAffidvtQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.UseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptRegNumber {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.ExemptRegNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptRegNumber\' in table \'ExciseAffidvtQueryingFields\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ExemptRegNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ForestLand {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.ForestLandColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForestLand\' in table \'ExciseAffidvtQueryingFields\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ForestLandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OpenSpace {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.OpenSpaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpenSpace\' in table \'ExciseAffidvtQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.OpenSpaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Historic {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.HistoricColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Historic\' in table \'ExciseAffidvtQueryingFields\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.HistoricColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Continuance {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.ContinuanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Continuance\' in table \'ExciseAffidvtQueryingFields\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ContinuanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonalPropertyDescription {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.PersonalPropertyDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalPropertyDescription\' in table \'ExciseAffidvtQueryin" +
                                "gFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.PersonalPropertyDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionCode {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.ExemptionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionCode\' in table \'ExciseAffidvtQueryingFields\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ExemptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionDescription {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.ExemptionDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionDescription\' in table \'ExciseAffidvtQueryingFields" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ExemptionDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentType {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.DocumentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentType\' in table \'ExciseAffidvtQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.DocumentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentDate {
                get {
                    try {
                        return ((string)(this[this.tableExciseAffidvtQueryingFields.DocumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentDate\' in table \'ExciseAffidvtQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.DocumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrossSellingPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.GrossSellingPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossSellingPrice\' in table \'ExciseAffidvtQueryingFields\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.GrossSellingPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PersonalPropertyAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.PersonalPropertyAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalPropertyAmount\' in table \'ExciseAffidvtQueryingFiel" +
                                "ds\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.PersonalPropertyAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RealPropertyExemptAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.RealPropertyExemptAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealPropertyExemptAmount\' in table \'ExciseAffidvtQueryingFi" +
                                "elds\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.RealPropertyExemptAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxableSalePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.TaxableSalePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxableSalePrice\' in table \'ExciseAffidvtQueryingFields\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.TaxableSalePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExciseTaxState {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.ExciseTaxStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseTaxState\' in table \'ExciseAffidvtQueryingFields\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ExciseTaxStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExciseTaxLocal {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.ExciseTaxLocalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseTaxLocal\' in table \'ExciseAffidvtQueryingFields\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.ExciseTaxLocalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentInterestState {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.DelinquentInterestStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentInterestState\' in table \'ExciseAffidvtQueryingFie" +
                                "lds\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.DelinquentInterestStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentInterestLocal {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.DelinquentInterestLocalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentInterestLocal\' in table \'ExciseAffidvtQueryingFie" +
                                "lds\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.DelinquentInterestLocalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentPenalty {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.DelinquentPenaltyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentPenalty\' in table \'ExciseAffidvtQueryingFields\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.DelinquentPenaltyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TechnologyFee {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.TechnologyFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TechnologyFee\' in table \'ExciseAffidvtQueryingFields\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.TechnologyFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransactionFee {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseAffidvtQueryingFields.TransactionFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionFee\' in table \'ExciseAffidvtQueryingFields\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableExciseAffidvtQueryingFields.TransactionFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableExciseAffidvtQueryingFields.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentDateNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.PaymentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentDateNull() {
                this[this.tableExciseAffidvtQueryingFields.PaymentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormDateNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.FormDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormDateNull() {
                this[this.tableExciseAffidvtQueryingFields.FormDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableExciseAffidvtQueryingFields.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubmittedDateNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.SubmittedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubmittedDateNull() {
                this[this.tableExciseAffidvtQueryingFields.SubmittedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromWEBNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.FromWEBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromWEBNull() {
                this[this.tableExciseAffidvtQueryingFields.FromWEBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebtNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.TotalDebtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebtNull() {
                this[this.tableExciseAffidvtQueryingFields.TotalDebtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationCodeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.LocationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationCodeNull() {
                this[this.tableExciseAffidvtQueryingFields.LocationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCodeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.TaxCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCodeNull() {
                this[this.tableExciseAffidvtQueryingFields.TaxCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileHomeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.MobileHomeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileHomeNull() {
                this[this.tableExciseAffidvtQueryingFields.MobileHomeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptNumberNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ReceiptNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptNumberNull() {
                this[this.tableExciseAffidvtQueryingFields.ReceiptNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteToDORNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.NoteToDORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteToDORNull() {
                this[this.tableExciseAffidvtQueryingFields.NoteToDORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableExciseAffidvtQueryingFields.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNumberNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.PhoneNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNumberNull() {
                this[this.tableExciseAffidvtQueryingFields.PhoneNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndividualTypeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.IndividualTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndividualTypeNull() {
                this[this.tableExciseAffidvtQueryingFields.IndividualTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.OwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNull() {
                this[this.tableExciseAffidvtQueryingFields.OwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableExciseAffidvtQueryingFields.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableExciseAffidvtQueryingFields.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableExciseAffidvtQueryingFields.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableExciseAffidvtQueryingFields.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipCodeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ZipCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipCodeNull() {
                this[this.tableExciseAffidvtQueryingFields.ZipCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableExciseAffidvtQueryingFields.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableExciseAffidvtQueryingFields.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalPropNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.PersonalPropColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalPropNull() {
                this[this.tableExciseAffidvtQueryingFields.PersonalPropColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessedValueNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.AssessedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessedValueNull() {
                this[this.tableExciseAffidvtQueryingFields.AssessedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableExciseAffidvtQueryingFields.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartialSaleNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.PartialSaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartialSaleNull() {
                this[this.tableExciseAffidvtQueryingFields.PartialSaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSegregatedNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.SegregatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSegregatedNull() {
                this[this.tableExciseAffidvtQueryingFields.SegregatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetAddressNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.StreetAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetAddressNull() {
                this[this.tableExciseAffidvtQueryingFields.StreetAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationOfSaleNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.LocationOfSaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationOfSaleNull() {
                this[this.tableExciseAffidvtQueryingFields.LocationOfSaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameOfLocationNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.NameOfLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameOfLocationNull() {
                this[this.tableExciseAffidvtQueryingFields.NameOfLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCodeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.UseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCodeNull() {
                this[this.tableExciseAffidvtQueryingFields.UseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptRegNumberNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ExemptRegNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptRegNumberNull() {
                this[this.tableExciseAffidvtQueryingFields.ExemptRegNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForestLandNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ForestLandColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForestLandNull() {
                this[this.tableExciseAffidvtQueryingFields.ForestLandColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpenSpaceNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.OpenSpaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpenSpaceNull() {
                this[this.tableExciseAffidvtQueryingFields.OpenSpaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHistoricNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.HistoricColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHistoricNull() {
                this[this.tableExciseAffidvtQueryingFields.HistoricColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContinuanceNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ContinuanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContinuanceNull() {
                this[this.tableExciseAffidvtQueryingFields.ContinuanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalPropertyDescriptionNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.PersonalPropertyDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalPropertyDescriptionNull() {
                this[this.tableExciseAffidvtQueryingFields.PersonalPropertyDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionCodeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ExemptionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionCodeNull() {
                this[this.tableExciseAffidvtQueryingFields.ExemptionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionDescriptionNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ExemptionDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionDescriptionNull() {
                this[this.tableExciseAffidvtQueryingFields.ExemptionDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentTypeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.DocumentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentTypeNull() {
                this[this.tableExciseAffidvtQueryingFields.DocumentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentDateNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.DocumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentDateNull() {
                this[this.tableExciseAffidvtQueryingFields.DocumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossSellingPriceNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.GrossSellingPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossSellingPriceNull() {
                this[this.tableExciseAffidvtQueryingFields.GrossSellingPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalPropertyAmountNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.PersonalPropertyAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalPropertyAmountNull() {
                this[this.tableExciseAffidvtQueryingFields.PersonalPropertyAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealPropertyExemptAmountNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.RealPropertyExemptAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealPropertyExemptAmountNull() {
                this[this.tableExciseAffidvtQueryingFields.RealPropertyExemptAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxableSalePriceNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.TaxableSalePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxableSalePriceNull() {
                this[this.tableExciseAffidvtQueryingFields.TaxableSalePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseTaxStateNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ExciseTaxStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseTaxStateNull() {
                this[this.tableExciseAffidvtQueryingFields.ExciseTaxStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseTaxLocalNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.ExciseTaxLocalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseTaxLocalNull() {
                this[this.tableExciseAffidvtQueryingFields.ExciseTaxLocalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentInterestStateNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.DelinquentInterestStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentInterestStateNull() {
                this[this.tableExciseAffidvtQueryingFields.DelinquentInterestStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentInterestLocalNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.DelinquentInterestLocalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentInterestLocalNull() {
                this[this.tableExciseAffidvtQueryingFields.DelinquentInterestLocalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentPenaltyNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.DelinquentPenaltyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentPenaltyNull() {
                this[this.tableExciseAffidvtQueryingFields.DelinquentPenaltyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTechnologyFeeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.TechnologyFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTechnologyFeeNull() {
                this[this.tableExciseAffidvtQueryingFields.TechnologyFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionFeeNull() {
                return this.IsNull(this.tableExciseAffidvtQueryingFields.TransactionFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionFeeNull() {
                this[this.tableExciseAffidvtQueryingFields.TransactionFeeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RealEstateQueryingFieldsRow : global::System.Data.DataRow {
            
            private RealEstateQueryingFieldsDataTable tableRealEstateQueryingFields;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RealEstateQueryingFieldsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRealEstateQueryingFields = ((RealEstateQueryingFieldsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int STATEMENTID {
                get {
                    try {
                        return ((int)(this[this.tableRealEstateQueryingFields.STATEMENTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATEMENTID\' in table \'RealEstateQueryingFields\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.STATEMENTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATEMENTNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableRealEstateQueryingFields.STATEMENTNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATEMENTNUMBER\' in table \'RealEstateQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.STATEMENTNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ROLLYEAR {
                get {
                    try {
                        return ((short)(this[this.tableRealEstateQueryingFields.ROLLYEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ROLLYEAR\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.ROLLYEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short LEVYYEAR {
                get {
                    try {
                        return ((short)(this[this.tableRealEstateQueryingFields.LEVYYEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LEVYYEAR\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.LEVYYEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DISTRICT {
                get {
                    try {
                        return ((int)(this[this.tableRealEstateQueryingFields.DISTRICTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DISTRICT\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.DISTRICTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TOTALVALUE {
                get {
                    try {
                        return ((decimal)(this[this.tableRealEstateQueryingFields.TOTALVALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTALVALUE\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.TOTALVALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ORIGINALTAX {
                get {
                    try {
                        return ((decimal)(this[this.tableRealEstateQueryingFields.ORIGINALTAXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORIGINALTAX\' in table \'RealEstateQueryingFields\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.ORIGINALTAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITUS {
                get {
                    try {
                        return ((string)(this[this.tableRealEstateQueryingFields.SITUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SITUS\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.SITUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TOTALEXEMPTIONS {
                get {
                    try {
                        return ((decimal)(this[this.tableRealEstateQueryingFields.TOTALEXEMPTIONSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTALEXEMPTIONS\' in table \'RealEstateQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.TOTALEXEMPTIONSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TOTALDEDUCTIONS {
                get {
                    try {
                        return ((decimal)(this[this.tableRealEstateQueryingFields.TOTALDEDUCTIONSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTALDEDUCTIONS\' in table \'RealEstateQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.TOTALDEDUCTIONSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LEGAL {
                get {
                    try {
                        return ((string)(this[this.tableRealEstateQueryingFields.LEGALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LEGAL\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.LEGALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TAXABLEVALUE {
                get {
                    try {
                        return ((decimal)(this[this.tableRealEstateQueryingFields.TAXABLEVALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TAXABLEVALUE\' in table \'RealEstateQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.TAXABLEVALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TAXBILLED {
                get {
                    try {
                        return ((decimal)(this[this.tableRealEstateQueryingFields.TAXBILLEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TAXBILLED\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.TAXBILLEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNERNAME {
                get {
                    try {
                        return ((string)(this[this.tableRealEstateQueryingFields.OWNERNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNERNAME\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.OWNERNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAPNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableRealEstateQueryingFields.MAPNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAPNUMBER\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.MAPNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PARCELID {
                get {
                    try {
                        return ((int)(this[this.tableRealEstateQueryingFields.PARCELIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARCELID\' in table \'RealEstateQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.PARCELIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARCELNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableRealEstateQueryingFields.PARCELNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARCELNUMBER\' in table \'RealEstateQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableRealEstateQueryingFields.PARCELNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATEMENTIDNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.STATEMENTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATEMENTIDNull() {
                this[this.tableRealEstateQueryingFields.STATEMENTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATEMENTNUMBERNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.STATEMENTNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATEMENTNUMBERNull() {
                this[this.tableRealEstateQueryingFields.STATEMENTNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROLLYEARNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.ROLLYEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROLLYEARNull() {
                this[this.tableRealEstateQueryingFields.ROLLYEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLEVYYEARNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.LEVYYEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLEVYYEARNull() {
                this[this.tableRealEstateQueryingFields.LEVYYEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTRICTNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.DISTRICTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTRICTNull() {
                this[this.tableRealEstateQueryingFields.DISTRICTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTALVALUENull() {
                return this.IsNull(this.tableRealEstateQueryingFields.TOTALVALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTALVALUENull() {
                this[this.tableRealEstateQueryingFields.TOTALVALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORIGINALTAXNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.ORIGINALTAXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORIGINALTAXNull() {
                this[this.tableRealEstateQueryingFields.ORIGINALTAXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSITUSNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.SITUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSITUSNull() {
                this[this.tableRealEstateQueryingFields.SITUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTALEXEMPTIONSNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.TOTALEXEMPTIONSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTALEXEMPTIONSNull() {
                this[this.tableRealEstateQueryingFields.TOTALEXEMPTIONSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTALDEDUCTIONSNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.TOTALDEDUCTIONSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTALDEDUCTIONSNull() {
                this[this.tableRealEstateQueryingFields.TOTALDEDUCTIONSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLEGALNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.LEGALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLEGALNull() {
                this[this.tableRealEstateQueryingFields.LEGALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTAXABLEVALUENull() {
                return this.IsNull(this.tableRealEstateQueryingFields.TAXABLEVALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTAXABLEVALUENull() {
                this[this.tableRealEstateQueryingFields.TAXABLEVALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTAXBILLEDNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.TAXBILLEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTAXBILLEDNull() {
                this[this.tableRealEstateQueryingFields.TAXBILLEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNERNAMENull() {
                return this.IsNull(this.tableRealEstateQueryingFields.OWNERNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNERNAMENull() {
                this[this.tableRealEstateQueryingFields.OWNERNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAPNUMBERNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.MAPNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAPNUMBERNull() {
                this[this.tableRealEstateQueryingFields.MAPNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARCELIDNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.PARCELIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARCELIDNull() {
                this[this.tableRealEstateQueryingFields.PARCELIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARCELNUMBERNull() {
                return this.IsNull(this.tableRealEstateQueryingFields.PARCELNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARCELNUMBERNull() {
                this[this.tableRealEstateQueryingFields.PARCELNUMBERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExciseTaxStatementQueryingFieldsRow : global::System.Data.DataRow {
            
            private ExciseTaxStatementQueryingFieldsDataTable tableExciseTaxStatementQueryingFields;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExciseTaxStatementQueryingFieldsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExciseTaxStatementQueryingFields = ((ExciseTaxStatementQueryingFieldsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int STATEMENTID {
                get {
                    try {
                        return ((int)(this[this.tableExciseTaxStatementQueryingFields.STATEMENTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATEMENTID\' in table \'ExciseTaxStatementQueryingFields\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.STATEMENTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARCELNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.PARCELNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARCELNUMBER\' in table \'ExciseTaxStatementQueryingFields\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.PARCELNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SALEDATE {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.SALEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SALEDATE\' in table \'ExciseTaxStatementQueryingFields\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.SALEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAYMENTDATE {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.PAYMENTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAYMENTDATE\' in table \'ExciseTaxStatementQueryingFields\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.PAYMENTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FORMDATE {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.FORMDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FORMDATE\' in table \'ExciseTaxStatementQueryingFields\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.FORMDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOBILEHOME {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.MOBILEHOMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOBILEHOME\' in table \'ExciseTaxStatementQueryingFields\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.MOBILEHOMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RECEIPTNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.RECEIPTNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RECEIPTNUMBER\' in table \'ExciseTaxStatementQueryingFields\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.RECEIPTNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISTRICT {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.DISTRICTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DISTRICT\' in table \'ExciseTaxStatementQueryingFields\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.DISTRICTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SALEAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableExciseTaxStatementQueryingFields.SALEAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SALEAMOUNT\' in table \'ExciseTaxStatementQueryingFields\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.SALEAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TAXCODE {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.TAXCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TAXCODE\' in table \'ExciseTaxStatementQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.TAXCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRANTOR {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.GRANTORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRANTOR\' in table \'ExciseTaxStatementQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.GRANTORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GRANTEE {
                get {
                    try {
                        return ((string)(this[this.tableExciseTaxStatementQueryingFields.GRANTEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRANTEE\' in table \'ExciseTaxStatementQueryingFields\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExciseTaxStatementQueryingFields.GRANTEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATEMENTIDNull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.STATEMENTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATEMENTIDNull() {
                this[this.tableExciseTaxStatementQueryingFields.STATEMENTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARCELNUMBERNull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.PARCELNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARCELNUMBERNull() {
                this[this.tableExciseTaxStatementQueryingFields.PARCELNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSALEDATENull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.SALEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSALEDATENull() {
                this[this.tableExciseTaxStatementQueryingFields.SALEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAYMENTDATENull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.PAYMENTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAYMENTDATENull() {
                this[this.tableExciseTaxStatementQueryingFields.PAYMENTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFORMDATENull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.FORMDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFORMDATENull() {
                this[this.tableExciseTaxStatementQueryingFields.FORMDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOBILEHOMENull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.MOBILEHOMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOBILEHOMENull() {
                this[this.tableExciseTaxStatementQueryingFields.MOBILEHOMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRECEIPTNUMBERNull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.RECEIPTNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRECEIPTNUMBERNull() {
                this[this.tableExciseTaxStatementQueryingFields.RECEIPTNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTRICTNull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.DISTRICTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTRICTNull() {
                this[this.tableExciseTaxStatementQueryingFields.DISTRICTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSALEAMOUNTNull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.SALEAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSALEAMOUNTNull() {
                this[this.tableExciseTaxStatementQueryingFields.SALEAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTAXCODENull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.TAXCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTAXCODENull() {
                this[this.tableExciseTaxStatementQueryingFields.TAXCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRANTORNull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.GRANTORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRANTORNull() {
                this[this.tableExciseTaxStatementQueryingFields.GRANTORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRANTEENull() {
                return this.IsNull(this.tableExciseTaxStatementQueryingFields.GRANTEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRANTEENull() {
                this[this.tableExciseTaxStatementQueryingFields.GRANTEEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CheckDetailQueryingFieldsRow : global::System.Data.DataRow {
            
            private CheckDetailQueryingFieldsDataTable tableCheckDetailQueryingFields;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckDetailQueryingFieldsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCheckDetailQueryingFields = ((CheckDetailQueryingFieldsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAYABLETO {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.PAYABLETOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAYABLETO\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.PAYABLETOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHECKNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.CHECKNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CHECKNUMBER\' in table \'CheckDetailQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.CHECKNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHECKDATE {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.CHECKDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CHECKDATE\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.CHECKDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckDetailQueryingFields.AMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AMOUNT\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.AMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MEMO {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.MEMOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MEMO\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.MEMOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FROMACCOUNT {
                get {
                    return ((string)(this[this.tableCheckDetailQueryingFields.FROMACCOUNTColumn]));
                }
                set {
                    this[this.tableCheckDetailQueryingFields.FROMACCOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AGENCY {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.AGENCYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AGENCY\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.AGENCYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TYPE {
                get {
                    return ((string)(this[this.tableCheckDetailQueryingFields.TYPEColumn]));
                }
                set {
                    this[this.tableCheckDetailQueryingFields.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USERNAME {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.USERNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USERNAME\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.USERNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRINTEDBY {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.PRINTEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRINTEDBY\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.PRINTEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRINTEDDATE {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.PRINTEDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRINTEDDATE\' in table \'CheckDetailQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.PRINTEDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAILEDBY {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.MAILEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAILEDBY\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.MAILEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAILEDDATE {
                get {
                    if (this.IsMAILEDDATENull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableCheckDetailQueryingFields.MAILEDDATEColumn]));
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.MAILEDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLEAREDBY {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.CLEAREDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLEAREDBY\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.CLEAREDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLEAREDDATE {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.CLEAREDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLEAREDDATE\' in table \'CheckDetailQueryingFields\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.CLEAREDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VOIDBY {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.VOIDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VOIDBY\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.VOIDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VOIDDATE {
                get {
                    try {
                        return ((string)(this[this.tableCheckDetailQueryingFields.VOIDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VOIDDATE\' in table \'CheckDetailQueryingFields\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckDetailQueryingFields.VOIDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAYABLETONull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.PAYABLETOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAYABLETONull() {
                this[this.tableCheckDetailQueryingFields.PAYABLETOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHECKNUMBERNull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.CHECKNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHECKNUMBERNull() {
                this[this.tableCheckDetailQueryingFields.CHECKNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHECKDATENull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.CHECKDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHECKDATENull() {
                this[this.tableCheckDetailQueryingFields.CHECKDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMOUNTNull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.AMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMOUNTNull() {
                this[this.tableCheckDetailQueryingFields.AMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEMONull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.MEMOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEMONull() {
                this[this.tableCheckDetailQueryingFields.MEMOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAGENCYNull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.AGENCYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAGENCYNull() {
                this[this.tableCheckDetailQueryingFields.AGENCYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSERNAMENull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.USERNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSERNAMENull() {
                this[this.tableCheckDetailQueryingFields.USERNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRINTEDBYNull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.PRINTEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRINTEDBYNull() {
                this[this.tableCheckDetailQueryingFields.PRINTEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRINTEDDATENull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.PRINTEDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRINTEDDATENull() {
                this[this.tableCheckDetailQueryingFields.PRINTEDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAILEDBYNull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.MAILEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAILEDBYNull() {
                this[this.tableCheckDetailQueryingFields.MAILEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAILEDDATENull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.MAILEDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAILEDDATENull() {
                this[this.tableCheckDetailQueryingFields.MAILEDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLEAREDBYNull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.CLEAREDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLEAREDBYNull() {
                this[this.tableCheckDetailQueryingFields.CLEAREDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLEAREDDATENull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.CLEAREDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLEAREDDATENull() {
                this[this.tableCheckDetailQueryingFields.CLEAREDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVOIDBYNull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.VOIDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVOIDBYNull() {
                this[this.tableCheckDetailQueryingFields.VOIDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVOIDDATENull() {
                return this.IsNull(this.tableCheckDetailQueryingFields.VOIDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVOIDDATENull() {
                this[this.tableCheckDetailQueryingFields.VOIDDATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExciseTaxRateQueryingFieldsRowChangeEvent : global::System.EventArgs {
            
            private ExciseTaxRateQueryingFieldsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxRateQueryingFieldsRowChangeEvent(ExciseTaxRateQueryingFieldsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxRateQueryingFieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExciseAffidvtQueryingFieldsRowChangeEvent : global::System.EventArgs {
            
            private ExciseAffidvtQueryingFieldsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseAffidvtQueryingFieldsRowChangeEvent(ExciseAffidvtQueryingFieldsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseAffidvtQueryingFieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RealEstateQueryingFieldsRowChangeEvent : global::System.EventArgs {
            
            private RealEstateQueryingFieldsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealEstateQueryingFieldsRowChangeEvent(RealEstateQueryingFieldsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RealEstateQueryingFieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExciseTaxStatementQueryingFieldsRowChangeEvent : global::System.EventArgs {
            
            private ExciseTaxStatementQueryingFieldsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxStatementQueryingFieldsRowChangeEvent(ExciseTaxStatementQueryingFieldsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExciseTaxStatementQueryingFieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CheckDetailQueryingFieldsRowChangeEvent : global::System.EventArgs {
            
            private CheckDetailQueryingFieldsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckDetailQueryingFieldsRowChangeEvent(CheckDetailQueryingFieldsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckDetailQueryingFieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591