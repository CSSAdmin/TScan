//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F1031SpecialDistrictAssessmentData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F1031SpecialDistrictAssessmentData : global::System.Data.DataSet {
        
        private ListDistrictAssessmentIDDataTable tableListDistrictAssessmentID;
        
        private ListDistrictAssessmentRatesDataTable tableListDistrictAssessmentRates;
        
        private ListSpecialDistrictAssessmentPropertyDataTable tableListSpecialDistrictAssessmentProperty;
        
        private ListSpecialDistrictAssessmentRatesDataTable tableListSpecialDistrictAssessmentRates;
        
        private SaveDistrictAssessmentDetailsDataTable tableSaveDistrictAssessmentDetails;
        
        private GetDistrictAssessmentParcelIDDataTable tableGetDistrictAssessmentParcelID;
        
        private ListDistrictAssessmentPropertyDataTable tableListDistrictAssessmentProperty;
        
        private ListDeleteOutputValueDataTable tableListDeleteOutputValue;
        
        private ListInputVAlueDataTable tableListInputVAlue;
        
        private ListCheckOutPutValueDataTable tableListCheckOutPutValue;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F1031SpecialDistrictAssessmentData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F1031SpecialDistrictAssessmentData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListDistrictAssessmentID"] != null)) {
                    base.Tables.Add(new ListDistrictAssessmentIDDataTable(ds.Tables["ListDistrictAssessmentID"]));
                }
                if ((ds.Tables["ListDistrictAssessmentRates"] != null)) {
                    base.Tables.Add(new ListDistrictAssessmentRatesDataTable(ds.Tables["ListDistrictAssessmentRates"]));
                }
                if ((ds.Tables["ListSpecialDistrictAssessmentProperty"] != null)) {
                    base.Tables.Add(new ListSpecialDistrictAssessmentPropertyDataTable(ds.Tables["ListSpecialDistrictAssessmentProperty"]));
                }
                if ((ds.Tables["ListSpecialDistrictAssessmentRates"] != null)) {
                    base.Tables.Add(new ListSpecialDistrictAssessmentRatesDataTable(ds.Tables["ListSpecialDistrictAssessmentRates"]));
                }
                if ((ds.Tables["SaveDistrictAssessmentDetails"] != null)) {
                    base.Tables.Add(new SaveDistrictAssessmentDetailsDataTable(ds.Tables["SaveDistrictAssessmentDetails"]));
                }
                if ((ds.Tables["GetDistrictAssessmentParcelID"] != null)) {
                    base.Tables.Add(new GetDistrictAssessmentParcelIDDataTable(ds.Tables["GetDistrictAssessmentParcelID"]));
                }
                if ((ds.Tables["ListDistrictAssessmentProperty"] != null)) {
                    base.Tables.Add(new ListDistrictAssessmentPropertyDataTable(ds.Tables["ListDistrictAssessmentProperty"]));
                }
                if ((ds.Tables["ListDeleteOutputValue"] != null)) {
                    base.Tables.Add(new ListDeleteOutputValueDataTable(ds.Tables["ListDeleteOutputValue"]));
                }
                if ((ds.Tables["ListInputVAlue"] != null)) {
                    base.Tables.Add(new ListInputVAlueDataTable(ds.Tables["ListInputVAlue"]));
                }
                if ((ds.Tables["ListCheckOutPutValue"] != null)) {
                    base.Tables.Add(new ListCheckOutPutValueDataTable(ds.Tables["ListCheckOutPutValue"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDistrictAssessmentIDDataTable ListDistrictAssessmentID {
            get {
                return this.tableListDistrictAssessmentID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDistrictAssessmentRatesDataTable ListDistrictAssessmentRates {
            get {
                return this.tableListDistrictAssessmentRates;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSpecialDistrictAssessmentPropertyDataTable ListSpecialDistrictAssessmentProperty {
            get {
                return this.tableListSpecialDistrictAssessmentProperty;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSpecialDistrictAssessmentRatesDataTable ListSpecialDistrictAssessmentRates {
            get {
                return this.tableListSpecialDistrictAssessmentRates;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveDistrictAssessmentDetailsDataTable SaveDistrictAssessmentDetails {
            get {
                return this.tableSaveDistrictAssessmentDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetDistrictAssessmentParcelIDDataTable GetDistrictAssessmentParcelID {
            get {
                return this.tableGetDistrictAssessmentParcelID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDistrictAssessmentPropertyDataTable ListDistrictAssessmentProperty {
            get {
                return this.tableListDistrictAssessmentProperty;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDeleteOutputValueDataTable ListDeleteOutputValue {
            get {
                return this.tableListDeleteOutputValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListInputVAlueDataTable ListInputVAlue {
            get {
                return this.tableListInputVAlue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListCheckOutPutValueDataTable ListCheckOutPutValue {
            get {
                return this.tableListCheckOutPutValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F1031SpecialDistrictAssessmentData cln = ((F1031SpecialDistrictAssessmentData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListDistrictAssessmentID"] != null)) {
                    base.Tables.Add(new ListDistrictAssessmentIDDataTable(ds.Tables["ListDistrictAssessmentID"]));
                }
                if ((ds.Tables["ListDistrictAssessmentRates"] != null)) {
                    base.Tables.Add(new ListDistrictAssessmentRatesDataTable(ds.Tables["ListDistrictAssessmentRates"]));
                }
                if ((ds.Tables["ListSpecialDistrictAssessmentProperty"] != null)) {
                    base.Tables.Add(new ListSpecialDistrictAssessmentPropertyDataTable(ds.Tables["ListSpecialDistrictAssessmentProperty"]));
                }
                if ((ds.Tables["ListSpecialDistrictAssessmentRates"] != null)) {
                    base.Tables.Add(new ListSpecialDistrictAssessmentRatesDataTable(ds.Tables["ListSpecialDistrictAssessmentRates"]));
                }
                if ((ds.Tables["SaveDistrictAssessmentDetails"] != null)) {
                    base.Tables.Add(new SaveDistrictAssessmentDetailsDataTable(ds.Tables["SaveDistrictAssessmentDetails"]));
                }
                if ((ds.Tables["GetDistrictAssessmentParcelID"] != null)) {
                    base.Tables.Add(new GetDistrictAssessmentParcelIDDataTable(ds.Tables["GetDistrictAssessmentParcelID"]));
                }
                if ((ds.Tables["ListDistrictAssessmentProperty"] != null)) {
                    base.Tables.Add(new ListDistrictAssessmentPropertyDataTable(ds.Tables["ListDistrictAssessmentProperty"]));
                }
                if ((ds.Tables["ListDeleteOutputValue"] != null)) {
                    base.Tables.Add(new ListDeleteOutputValueDataTable(ds.Tables["ListDeleteOutputValue"]));
                }
                if ((ds.Tables["ListInputVAlue"] != null)) {
                    base.Tables.Add(new ListInputVAlueDataTable(ds.Tables["ListInputVAlue"]));
                }
                if ((ds.Tables["ListCheckOutPutValue"] != null)) {
                    base.Tables.Add(new ListCheckOutPutValueDataTable(ds.Tables["ListCheckOutPutValue"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListDistrictAssessmentID = ((ListDistrictAssessmentIDDataTable)(base.Tables["ListDistrictAssessmentID"]));
            if ((initTable == true)) {
                if ((this.tableListDistrictAssessmentID != null)) {
                    this.tableListDistrictAssessmentID.InitVars();
                }
            }
            this.tableListDistrictAssessmentRates = ((ListDistrictAssessmentRatesDataTable)(base.Tables["ListDistrictAssessmentRates"]));
            if ((initTable == true)) {
                if ((this.tableListDistrictAssessmentRates != null)) {
                    this.tableListDistrictAssessmentRates.InitVars();
                }
            }
            this.tableListSpecialDistrictAssessmentProperty = ((ListSpecialDistrictAssessmentPropertyDataTable)(base.Tables["ListSpecialDistrictAssessmentProperty"]));
            if ((initTable == true)) {
                if ((this.tableListSpecialDistrictAssessmentProperty != null)) {
                    this.tableListSpecialDistrictAssessmentProperty.InitVars();
                }
            }
            this.tableListSpecialDistrictAssessmentRates = ((ListSpecialDistrictAssessmentRatesDataTable)(base.Tables["ListSpecialDistrictAssessmentRates"]));
            if ((initTable == true)) {
                if ((this.tableListSpecialDistrictAssessmentRates != null)) {
                    this.tableListSpecialDistrictAssessmentRates.InitVars();
                }
            }
            this.tableSaveDistrictAssessmentDetails = ((SaveDistrictAssessmentDetailsDataTable)(base.Tables["SaveDistrictAssessmentDetails"]));
            if ((initTable == true)) {
                if ((this.tableSaveDistrictAssessmentDetails != null)) {
                    this.tableSaveDistrictAssessmentDetails.InitVars();
                }
            }
            this.tableGetDistrictAssessmentParcelID = ((GetDistrictAssessmentParcelIDDataTable)(base.Tables["GetDistrictAssessmentParcelID"]));
            if ((initTable == true)) {
                if ((this.tableGetDistrictAssessmentParcelID != null)) {
                    this.tableGetDistrictAssessmentParcelID.InitVars();
                }
            }
            this.tableListDistrictAssessmentProperty = ((ListDistrictAssessmentPropertyDataTable)(base.Tables["ListDistrictAssessmentProperty"]));
            if ((initTable == true)) {
                if ((this.tableListDistrictAssessmentProperty != null)) {
                    this.tableListDistrictAssessmentProperty.InitVars();
                }
            }
            this.tableListDeleteOutputValue = ((ListDeleteOutputValueDataTable)(base.Tables["ListDeleteOutputValue"]));
            if ((initTable == true)) {
                if ((this.tableListDeleteOutputValue != null)) {
                    this.tableListDeleteOutputValue.InitVars();
                }
            }
            this.tableListInputVAlue = ((ListInputVAlueDataTable)(base.Tables["ListInputVAlue"]));
            if ((initTable == true)) {
                if ((this.tableListInputVAlue != null)) {
                    this.tableListInputVAlue.InitVars();
                }
            }
            this.tableListCheckOutPutValue = ((ListCheckOutPutValueDataTable)(base.Tables["ListCheckOutPutValue"]));
            if ((initTable == true)) {
                if ((this.tableListCheckOutPutValue != null)) {
                    this.tableListCheckOutPutValue.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F1031SpecialDistrictAssessmentData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F1031SpecialDistrictAssessmentData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListDistrictAssessmentID = new ListDistrictAssessmentIDDataTable();
            base.Tables.Add(this.tableListDistrictAssessmentID);
            this.tableListDistrictAssessmentRates = new ListDistrictAssessmentRatesDataTable();
            base.Tables.Add(this.tableListDistrictAssessmentRates);
            this.tableListSpecialDistrictAssessmentProperty = new ListSpecialDistrictAssessmentPropertyDataTable();
            base.Tables.Add(this.tableListSpecialDistrictAssessmentProperty);
            this.tableListSpecialDistrictAssessmentRates = new ListSpecialDistrictAssessmentRatesDataTable();
            base.Tables.Add(this.tableListSpecialDistrictAssessmentRates);
            this.tableSaveDistrictAssessmentDetails = new SaveDistrictAssessmentDetailsDataTable();
            base.Tables.Add(this.tableSaveDistrictAssessmentDetails);
            this.tableGetDistrictAssessmentParcelID = new GetDistrictAssessmentParcelIDDataTable();
            base.Tables.Add(this.tableGetDistrictAssessmentParcelID);
            this.tableListDistrictAssessmentProperty = new ListDistrictAssessmentPropertyDataTable();
            base.Tables.Add(this.tableListDistrictAssessmentProperty);
            this.tableListDeleteOutputValue = new ListDeleteOutputValueDataTable();
            base.Tables.Add(this.tableListDeleteOutputValue);
            this.tableListInputVAlue = new ListInputVAlueDataTable();
            base.Tables.Add(this.tableListInputVAlue);
            this.tableListCheckOutPutValue = new ListCheckOutPutValueDataTable();
            base.Tables.Add(this.tableListCheckOutPutValue);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDistrictAssessmentID() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDistrictAssessmentRates() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSpecialDistrictAssessmentProperty() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSpecialDistrictAssessmentRates() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveDistrictAssessmentDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetDistrictAssessmentParcelID() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDistrictAssessmentProperty() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDeleteOutputValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListInputVAlue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListCheckOutPutValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListDistrictAssessmentIDRowChangeEventHandler(object sender, ListDistrictAssessmentIDRowChangeEvent e);
        
        public delegate void ListDistrictAssessmentRatesRowChangeEventHandler(object sender, ListDistrictAssessmentRatesRowChangeEvent e);
        
        public delegate void ListSpecialDistrictAssessmentPropertyRowChangeEventHandler(object sender, ListSpecialDistrictAssessmentPropertyRowChangeEvent e);
        
        public delegate void ListSpecialDistrictAssessmentRatesRowChangeEventHandler(object sender, ListSpecialDistrictAssessmentRatesRowChangeEvent e);
        
        public delegate void SaveDistrictAssessmentDetailsRowChangeEventHandler(object sender, SaveDistrictAssessmentDetailsRowChangeEvent e);
        
        public delegate void GetDistrictAssessmentParcelIDRowChangeEventHandler(object sender, GetDistrictAssessmentParcelIDRowChangeEvent e);
        
        public delegate void ListDistrictAssessmentPropertyRowChangeEventHandler(object sender, ListDistrictAssessmentPropertyRowChangeEvent e);
        
        public delegate void ListDeleteOutputValueRowChangeEventHandler(object sender, ListDeleteOutputValueRowChangeEvent e);
        
        public delegate void ListInputVAlueRowChangeEventHandler(object sender, ListInputVAlueRowChangeEvent e);
        
        public delegate void ListCheckOutPutValueRowChangeEventHandler(object sender, ListCheckOutPutValueRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDistrictAssessmentIDDataTable : global::System.Data.TypedTableBase<ListDistrictAssessmentIDRow> {
            
            private global::System.Data.DataColumn columnKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentIDDataTable() {
                this.TableName = "ListDistrictAssessmentID";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDistrictAssessmentIDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDistrictAssessmentIDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentIDRow this[int index] {
                get {
                    return ((ListDistrictAssessmentIDRow)(this.Rows[index]));
                }
            }
            
            public event ListDistrictAssessmentIDRowChangeEventHandler ListDistrictAssessmentIDRowChanging;
            
            public event ListDistrictAssessmentIDRowChangeEventHandler ListDistrictAssessmentIDRowChanged;
            
            public event ListDistrictAssessmentIDRowChangeEventHandler ListDistrictAssessmentIDRowDeleting;
            
            public event ListDistrictAssessmentIDRowChangeEventHandler ListDistrictAssessmentIDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDistrictAssessmentIDRow(ListDistrictAssessmentIDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentIDRow AddListDistrictAssessmentIDRow() {
                ListDistrictAssessmentIDRow rowListDistrictAssessmentIDRow = ((ListDistrictAssessmentIDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowListDistrictAssessmentIDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDistrictAssessmentIDRow);
                return rowListDistrictAssessmentIDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDistrictAssessmentIDDataTable cln = ((ListDistrictAssessmentIDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDistrictAssessmentIDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnKeyID.AutoIncrement = true;
                this.columnKeyID.AllowDBNull = false;
                this.columnKeyID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentIDRow NewListDistrictAssessmentIDRow() {
                return ((ListDistrictAssessmentIDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDistrictAssessmentIDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDistrictAssessmentIDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDistrictAssessmentIDRowChanged != null)) {
                    this.ListDistrictAssessmentIDRowChanged(this, new ListDistrictAssessmentIDRowChangeEvent(((ListDistrictAssessmentIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDistrictAssessmentIDRowChanging != null)) {
                    this.ListDistrictAssessmentIDRowChanging(this, new ListDistrictAssessmentIDRowChangeEvent(((ListDistrictAssessmentIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDistrictAssessmentIDRowDeleted != null)) {
                    this.ListDistrictAssessmentIDRowDeleted(this, new ListDistrictAssessmentIDRowChangeEvent(((ListDistrictAssessmentIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDistrictAssessmentIDRowDeleting != null)) {
                    this.ListDistrictAssessmentIDRowDeleting(this, new ListDistrictAssessmentIDRowChangeEvent(((ListDistrictAssessmentIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDistrictAssessmentIDRow(ListDistrictAssessmentIDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDistrictAssessmentIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDistrictAssessmentRatesDataTable : global::System.Data.TypedTableBase<ListDistrictAssessmentRatesRow> {
            
            private global::System.Data.DataColumn columnRateAcresID;
            
            private global::System.Data.DataColumn columnSARateItemID;
            
            private global::System.Data.DataColumn columnRateDescription;
            
            private global::System.Data.DataColumn columnRateType;
            
            private global::System.Data.DataColumn columnMinimum;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnAcres;
            
            private global::System.Data.DataColumn columnTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentRatesDataTable() {
                this.TableName = "ListDistrictAssessmentRates";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDistrictAssessmentRatesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDistrictAssessmentRatesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateAcresIDColumn {
                get {
                    return this.columnRateAcresID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SARateItemIDColumn {
                get {
                    return this.columnSARateItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateDescriptionColumn {
                get {
                    return this.columnRateDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeColumn {
                get {
                    return this.columnRateType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumColumn {
                get {
                    return this.columnMinimum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn {
                get {
                    return this.columnAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentRatesRow this[int index] {
                get {
                    return ((ListDistrictAssessmentRatesRow)(this.Rows[index]));
                }
            }
            
            public event ListDistrictAssessmentRatesRowChangeEventHandler ListDistrictAssessmentRatesRowChanging;
            
            public event ListDistrictAssessmentRatesRowChangeEventHandler ListDistrictAssessmentRatesRowChanged;
            
            public event ListDistrictAssessmentRatesRowChangeEventHandler ListDistrictAssessmentRatesRowDeleting;
            
            public event ListDistrictAssessmentRatesRowChangeEventHandler ListDistrictAssessmentRatesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDistrictAssessmentRatesRow(ListDistrictAssessmentRatesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentRatesRow AddListDistrictAssessmentRatesRow(int RateAcresID, int SARateItemID, string RateDescription, string RateType, string Minimum, decimal Amount, decimal Acres, decimal Total) {
                ListDistrictAssessmentRatesRow rowListDistrictAssessmentRatesRow = ((ListDistrictAssessmentRatesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RateAcresID,
                        SARateItemID,
                        RateDescription,
                        RateType,
                        Minimum,
                        Amount,
                        Acres,
                        Total};
                rowListDistrictAssessmentRatesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDistrictAssessmentRatesRow);
                return rowListDistrictAssessmentRatesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDistrictAssessmentRatesDataTable cln = ((ListDistrictAssessmentRatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDistrictAssessmentRatesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRateAcresID = base.Columns["RateAcresID"];
                this.columnSARateItemID = base.Columns["SARateItemID"];
                this.columnRateDescription = base.Columns["RateDescription"];
                this.columnRateType = base.Columns["RateType"];
                this.columnMinimum = base.Columns["Minimum"];
                this.columnAmount = base.Columns["Amount"];
                this.columnAcres = base.Columns["Acres"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRateAcresID = new global::System.Data.DataColumn("RateAcresID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateAcresID);
                this.columnSARateItemID = new global::System.Data.DataColumn("SARateItemID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSARateItemID);
                this.columnRateDescription = new global::System.Data.DataColumn("RateDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateDescription);
                this.columnRateType = new global::System.Data.DataColumn("RateType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateType);
                this.columnMinimum = new global::System.Data.DataColumn("Minimum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimum);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnRateAcresID.AllowDBNull = false;
                this.columnRateAcresID.ReadOnly = true;
                this.columnSARateItemID.AllowDBNull = false;
                this.columnSARateItemID.ReadOnly = true;
                this.columnRateDescription.AllowDBNull = false;
                this.columnRateDescription.MaxLength = 50;
                this.columnRateType.AllowDBNull = false;
                this.columnRateType.MaxLength = 50;
                this.columnMinimum.MaxLength = 10;
                this.columnAmount.AllowDBNull = false;
                this.columnTotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentRatesRow NewListDistrictAssessmentRatesRow() {
                return ((ListDistrictAssessmentRatesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDistrictAssessmentRatesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDistrictAssessmentRatesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDistrictAssessmentRatesRowChanged != null)) {
                    this.ListDistrictAssessmentRatesRowChanged(this, new ListDistrictAssessmentRatesRowChangeEvent(((ListDistrictAssessmentRatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDistrictAssessmentRatesRowChanging != null)) {
                    this.ListDistrictAssessmentRatesRowChanging(this, new ListDistrictAssessmentRatesRowChangeEvent(((ListDistrictAssessmentRatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDistrictAssessmentRatesRowDeleted != null)) {
                    this.ListDistrictAssessmentRatesRowDeleted(this, new ListDistrictAssessmentRatesRowChangeEvent(((ListDistrictAssessmentRatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDistrictAssessmentRatesRowDeleting != null)) {
                    this.ListDistrictAssessmentRatesRowDeleting(this, new ListDistrictAssessmentRatesRowChangeEvent(((ListDistrictAssessmentRatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDistrictAssessmentRatesRow(ListDistrictAssessmentRatesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDistrictAssessmentRatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSpecialDistrictAssessmentPropertyDataTable : global::System.Data.TypedTableBase<ListSpecialDistrictAssessmentPropertyRow> {
            
            private global::System.Data.DataColumn columnDistrictRollYear;
            
            private global::System.Data.DataColumn columnMinimumDistrictFee;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnPostName;
            
            private global::System.Data.DataColumn columnDistrictName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentPropertyDataTable() {
                this.TableName = "ListSpecialDistrictAssessmentProperty";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSpecialDistrictAssessmentPropertyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSpecialDistrictAssessmentPropertyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictRollYearColumn {
                get {
                    return this.columnDistrictRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumDistrictFeeColumn {
                get {
                    return this.columnMinimumDistrictFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostNameColumn {
                get {
                    return this.columnPostName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNameColumn {
                get {
                    return this.columnDistrictName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentPropertyRow this[int index] {
                get {
                    return ((ListSpecialDistrictAssessmentPropertyRow)(this.Rows[index]));
                }
            }
            
            public event ListSpecialDistrictAssessmentPropertyRowChangeEventHandler ListSpecialDistrictAssessmentPropertyRowChanging;
            
            public event ListSpecialDistrictAssessmentPropertyRowChangeEventHandler ListSpecialDistrictAssessmentPropertyRowChanged;
            
            public event ListSpecialDistrictAssessmentPropertyRowChangeEventHandler ListSpecialDistrictAssessmentPropertyRowDeleting;
            
            public event ListSpecialDistrictAssessmentPropertyRowChangeEventHandler ListSpecialDistrictAssessmentPropertyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSpecialDistrictAssessmentPropertyRow(ListSpecialDistrictAssessmentPropertyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentPropertyRow AddListSpecialDistrictAssessmentPropertyRow(short DistrictRollYear, decimal MinimumDistrictFee, byte Type, string PostName, string DistrictName) {
                ListSpecialDistrictAssessmentPropertyRow rowListSpecialDistrictAssessmentPropertyRow = ((ListSpecialDistrictAssessmentPropertyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DistrictRollYear,
                        MinimumDistrictFee,
                        Type,
                        PostName,
                        DistrictName};
                rowListSpecialDistrictAssessmentPropertyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSpecialDistrictAssessmentPropertyRow);
                return rowListSpecialDistrictAssessmentPropertyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSpecialDistrictAssessmentPropertyDataTable cln = ((ListSpecialDistrictAssessmentPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSpecialDistrictAssessmentPropertyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDistrictRollYear = base.Columns["DistrictRollYear"];
                this.columnMinimumDistrictFee = base.Columns["MinimumDistrictFee"];
                this.columnType = base.Columns["Type"];
                this.columnPostName = base.Columns["PostName"];
                this.columnDistrictName = base.Columns["DistrictName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDistrictRollYear = new global::System.Data.DataColumn("DistrictRollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictRollYear);
                this.columnMinimumDistrictFee = new global::System.Data.DataColumn("MinimumDistrictFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumDistrictFee);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnPostName = new global::System.Data.DataColumn("PostName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostName);
                this.columnDistrictName = new global::System.Data.DataColumn("DistrictName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictName);
                this.columnDistrictRollYear.AllowDBNull = false;
                this.columnMinimumDistrictFee.AllowDBNull = false;
                this.columnType.AllowDBNull = false;
                this.columnPostName.ReadOnly = true;
                this.columnPostName.MaxLength = 50;
                this.columnDistrictName.ReadOnly = true;
                this.columnDistrictName.MaxLength = 63;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentPropertyRow NewListSpecialDistrictAssessmentPropertyRow() {
                return ((ListSpecialDistrictAssessmentPropertyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSpecialDistrictAssessmentPropertyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSpecialDistrictAssessmentPropertyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSpecialDistrictAssessmentPropertyRowChanged != null)) {
                    this.ListSpecialDistrictAssessmentPropertyRowChanged(this, new ListSpecialDistrictAssessmentPropertyRowChangeEvent(((ListSpecialDistrictAssessmentPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSpecialDistrictAssessmentPropertyRowChanging != null)) {
                    this.ListSpecialDistrictAssessmentPropertyRowChanging(this, new ListSpecialDistrictAssessmentPropertyRowChangeEvent(((ListSpecialDistrictAssessmentPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSpecialDistrictAssessmentPropertyRowDeleted != null)) {
                    this.ListSpecialDistrictAssessmentPropertyRowDeleted(this, new ListSpecialDistrictAssessmentPropertyRowChangeEvent(((ListSpecialDistrictAssessmentPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSpecialDistrictAssessmentPropertyRowDeleting != null)) {
                    this.ListSpecialDistrictAssessmentPropertyRowDeleting(this, new ListSpecialDistrictAssessmentPropertyRowChangeEvent(((ListSpecialDistrictAssessmentPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSpecialDistrictAssessmentPropertyRow(ListSpecialDistrictAssessmentPropertyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSpecialDistrictAssessmentPropertyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSpecialDistrictAssessmentRatesDataTable : global::System.Data.TypedTableBase<ListSpecialDistrictAssessmentRatesRow> {
            
            private global::System.Data.DataColumn columnRateAcresID;
            
            private global::System.Data.DataColumn columnSARateItemID;
            
            private global::System.Data.DataColumn columnRateDescription;
            
            private global::System.Data.DataColumn columnRateType;
            
            private global::System.Data.DataColumn columnMinimum;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnAcres;
            
            private global::System.Data.DataColumn columnTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentRatesDataTable() {
                this.TableName = "ListSpecialDistrictAssessmentRates";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSpecialDistrictAssessmentRatesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSpecialDistrictAssessmentRatesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateAcresIDColumn {
                get {
                    return this.columnRateAcresID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SARateItemIDColumn {
                get {
                    return this.columnSARateItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateDescriptionColumn {
                get {
                    return this.columnRateDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeColumn {
                get {
                    return this.columnRateType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumColumn {
                get {
                    return this.columnMinimum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn {
                get {
                    return this.columnAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentRatesRow this[int index] {
                get {
                    return ((ListSpecialDistrictAssessmentRatesRow)(this.Rows[index]));
                }
            }
            
            public event ListSpecialDistrictAssessmentRatesRowChangeEventHandler ListSpecialDistrictAssessmentRatesRowChanging;
            
            public event ListSpecialDistrictAssessmentRatesRowChangeEventHandler ListSpecialDistrictAssessmentRatesRowChanged;
            
            public event ListSpecialDistrictAssessmentRatesRowChangeEventHandler ListSpecialDistrictAssessmentRatesRowDeleting;
            
            public event ListSpecialDistrictAssessmentRatesRowChangeEventHandler ListSpecialDistrictAssessmentRatesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSpecialDistrictAssessmentRatesRow(ListSpecialDistrictAssessmentRatesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentRatesRow AddListSpecialDistrictAssessmentRatesRow(int RateAcresID, int SARateItemID, string RateDescription, string RateType, string Minimum, decimal Amount, decimal Acres, decimal Total) {
                ListSpecialDistrictAssessmentRatesRow rowListSpecialDistrictAssessmentRatesRow = ((ListSpecialDistrictAssessmentRatesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RateAcresID,
                        SARateItemID,
                        RateDescription,
                        RateType,
                        Minimum,
                        Amount,
                        Acres,
                        Total};
                rowListSpecialDistrictAssessmentRatesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSpecialDistrictAssessmentRatesRow);
                return rowListSpecialDistrictAssessmentRatesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSpecialDistrictAssessmentRatesDataTable cln = ((ListSpecialDistrictAssessmentRatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSpecialDistrictAssessmentRatesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRateAcresID = base.Columns["RateAcresID"];
                this.columnSARateItemID = base.Columns["SARateItemID"];
                this.columnRateDescription = base.Columns["RateDescription"];
                this.columnRateType = base.Columns["RateType"];
                this.columnMinimum = base.Columns["Minimum"];
                this.columnAmount = base.Columns["Amount"];
                this.columnAcres = base.Columns["Acres"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRateAcresID = new global::System.Data.DataColumn("RateAcresID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateAcresID);
                this.columnSARateItemID = new global::System.Data.DataColumn("SARateItemID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSARateItemID);
                this.columnRateDescription = new global::System.Data.DataColumn("RateDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateDescription);
                this.columnRateType = new global::System.Data.DataColumn("RateType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateType);
                this.columnMinimum = new global::System.Data.DataColumn("Minimum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimum);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnRateAcresID.AllowDBNull = false;
                this.columnRateAcresID.ReadOnly = true;
                this.columnSARateItemID.AllowDBNull = false;
                this.columnSARateItemID.ReadOnly = true;
                this.columnRateDescription.AllowDBNull = false;
                this.columnRateDescription.MaxLength = 50;
                this.columnRateType.AllowDBNull = false;
                this.columnRateType.MaxLength = 50;
                this.columnMinimum.MaxLength = 10;
                this.columnAmount.AllowDBNull = false;
                this.columnTotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentRatesRow NewListSpecialDistrictAssessmentRatesRow() {
                return ((ListSpecialDistrictAssessmentRatesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSpecialDistrictAssessmentRatesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSpecialDistrictAssessmentRatesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSpecialDistrictAssessmentRatesRowChanged != null)) {
                    this.ListSpecialDistrictAssessmentRatesRowChanged(this, new ListSpecialDistrictAssessmentRatesRowChangeEvent(((ListSpecialDistrictAssessmentRatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSpecialDistrictAssessmentRatesRowChanging != null)) {
                    this.ListSpecialDistrictAssessmentRatesRowChanging(this, new ListSpecialDistrictAssessmentRatesRowChangeEvent(((ListSpecialDistrictAssessmentRatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSpecialDistrictAssessmentRatesRowDeleted != null)) {
                    this.ListSpecialDistrictAssessmentRatesRowDeleted(this, new ListSpecialDistrictAssessmentRatesRowChangeEvent(((ListSpecialDistrictAssessmentRatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSpecialDistrictAssessmentRatesRowDeleting != null)) {
                    this.ListSpecialDistrictAssessmentRatesRowDeleting(this, new ListSpecialDistrictAssessmentRatesRowChangeEvent(((ListSpecialDistrictAssessmentRatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSpecialDistrictAssessmentRatesRow(ListSpecialDistrictAssessmentRatesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSpecialDistrictAssessmentRatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveDistrictAssessmentDetailsDataTable : global::System.Data.TypedTableBase<SaveDistrictAssessmentDetailsRow> {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnIrrgAcres;
            
            private global::System.Data.DataColumn columnAcres1;
            
            private global::System.Data.DataColumn columnTurnouts;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnMapNumber;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnSADistrictID;
            
            private global::System.Data.DataColumn columnRateAcresID;
            
            private global::System.Data.DataColumn columnSARateItemID;
            
            private global::System.Data.DataColumn columnRateDescription;
            
            private global::System.Data.DataColumn columnRateType;
            
            private global::System.Data.DataColumn columnMinimum;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnAcres;
            
            private global::System.Data.DataColumn columnTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveDistrictAssessmentDetailsDataTable() {
                this.TableName = "SaveDistrictAssessmentDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveDistrictAssessmentDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveDistrictAssessmentDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrgAcresColumn {
                get {
                    return this.columnIrrgAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Acres1Column {
                get {
                    return this.columnAcres1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TurnoutsColumn {
                get {
                    return this.columnTurnouts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNumberColumn {
                get {
                    return this.columnMapNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SADistrictIDColumn {
                get {
                    return this.columnSADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateAcresIDColumn {
                get {
                    return this.columnRateAcresID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SARateItemIDColumn {
                get {
                    return this.columnSARateItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateDescriptionColumn {
                get {
                    return this.columnRateDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeColumn {
                get {
                    return this.columnRateType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumColumn {
                get {
                    return this.columnMinimum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn {
                get {
                    return this.columnAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveDistrictAssessmentDetailsRow this[int index] {
                get {
                    return ((SaveDistrictAssessmentDetailsRow)(this.Rows[index]));
                }
            }
            
            public event SaveDistrictAssessmentDetailsRowChangeEventHandler SaveDistrictAssessmentDetailsRowChanging;
            
            public event SaveDistrictAssessmentDetailsRowChangeEventHandler SaveDistrictAssessmentDetailsRowChanged;
            
            public event SaveDistrictAssessmentDetailsRowChangeEventHandler SaveDistrictAssessmentDetailsRowDeleting;
            
            public event SaveDistrictAssessmentDetailsRowChangeEventHandler SaveDistrictAssessmentDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveDistrictAssessmentDetailsRow(SaveDistrictAssessmentDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveDistrictAssessmentDetailsRow AddSaveDistrictAssessmentDetailsRow(
                        int StatementID, 
                        int ParcelID, 
                        string ParcelNumber, 
                        decimal IrrgAcres, 
                        decimal Acres1, 
                        int Turnouts, 
                        string Situs, 
                        string MapNumber, 
                        string Legal, 
                        int SADistrictID, 
                        int RateAcresID, 
                        int SARateItemID, 
                        string RateDescription, 
                        string RateType, 
                        bool Minimum, 
                        decimal Amount, 
                        decimal Acres, 
                        decimal Total) {
                SaveDistrictAssessmentDetailsRow rowSaveDistrictAssessmentDetailsRow = ((SaveDistrictAssessmentDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        ParcelID,
                        ParcelNumber,
                        IrrgAcres,
                        Acres1,
                        Turnouts,
                        Situs,
                        MapNumber,
                        Legal,
                        SADistrictID,
                        RateAcresID,
                        SARateItemID,
                        RateDescription,
                        RateType,
                        Minimum,
                        Amount,
                        Acres,
                        Total};
                rowSaveDistrictAssessmentDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveDistrictAssessmentDetailsRow);
                return rowSaveDistrictAssessmentDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveDistrictAssessmentDetailsDataTable cln = ((SaveDistrictAssessmentDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveDistrictAssessmentDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnIrrgAcres = base.Columns["IrrgAcres"];
                this.columnAcres1 = base.Columns["Acres1"];
                this.columnTurnouts = base.Columns["Turnouts"];
                this.columnSitus = base.Columns["Situs"];
                this.columnMapNumber = base.Columns["MapNumber"];
                this.columnLegal = base.Columns["Legal"];
                this.columnSADistrictID = base.Columns["SADistrictID"];
                this.columnRateAcresID = base.Columns["RateAcresID"];
                this.columnSARateItemID = base.Columns["SARateItemID"];
                this.columnRateDescription = base.Columns["RateDescription"];
                this.columnRateType = base.Columns["RateType"];
                this.columnMinimum = base.Columns["Minimum"];
                this.columnAmount = base.Columns["Amount"];
                this.columnAcres = base.Columns["Acres"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnIrrgAcres = new global::System.Data.DataColumn("IrrgAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrgAcres);
                this.columnAcres1 = new global::System.Data.DataColumn("Acres1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres1);
                this.columnTurnouts = new global::System.Data.DataColumn("Turnouts", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTurnouts);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnMapNumber = new global::System.Data.DataColumn("MapNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapNumber);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnSADistrictID = new global::System.Data.DataColumn("SADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSADistrictID);
                this.columnRateAcresID = new global::System.Data.DataColumn("RateAcresID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateAcresID);
                this.columnSARateItemID = new global::System.Data.DataColumn("SARateItemID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSARateItemID);
                this.columnRateDescription = new global::System.Data.DataColumn("RateDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateDescription);
                this.columnRateType = new global::System.Data.DataColumn("RateType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateType);
                this.columnMinimum = new global::System.Data.DataColumn("Minimum", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimum);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnStatementID.ReadOnly = true;
                this.columnParcelNumber.MaxLength = 50;
                this.columnAcres1.Caption = "Acres";
                this.columnSitus.MaxLength = 400;
                this.columnMapNumber.MaxLength = 50;
                this.columnLegal.MaxLength = 5000;
                this.columnSADistrictID.ReadOnly = true;
                this.columnRateAcresID.AllowDBNull = false;
                this.columnRateAcresID.ReadOnly = true;
                this.columnSARateItemID.AllowDBNull = false;
                this.columnSARateItemID.ReadOnly = true;
                this.columnRateDescription.AllowDBNull = false;
                this.columnRateDescription.MaxLength = 50;
                this.columnRateType.AllowDBNull = false;
                this.columnRateType.MaxLength = 50;
                this.columnAmount.AllowDBNull = false;
                this.columnTotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveDistrictAssessmentDetailsRow NewSaveDistrictAssessmentDetailsRow() {
                return ((SaveDistrictAssessmentDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveDistrictAssessmentDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveDistrictAssessmentDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveDistrictAssessmentDetailsRowChanged != null)) {
                    this.SaveDistrictAssessmentDetailsRowChanged(this, new SaveDistrictAssessmentDetailsRowChangeEvent(((SaveDistrictAssessmentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveDistrictAssessmentDetailsRowChanging != null)) {
                    this.SaveDistrictAssessmentDetailsRowChanging(this, new SaveDistrictAssessmentDetailsRowChangeEvent(((SaveDistrictAssessmentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveDistrictAssessmentDetailsRowDeleted != null)) {
                    this.SaveDistrictAssessmentDetailsRowDeleted(this, new SaveDistrictAssessmentDetailsRowChangeEvent(((SaveDistrictAssessmentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveDistrictAssessmentDetailsRowDeleting != null)) {
                    this.SaveDistrictAssessmentDetailsRowDeleting(this, new SaveDistrictAssessmentDetailsRowChangeEvent(((SaveDistrictAssessmentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveDistrictAssessmentDetailsRow(SaveDistrictAssessmentDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveDistrictAssessmentDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetDistrictAssessmentParcelIDDataTable : global::System.Data.TypedTableBase<GetDistrictAssessmentParcelIDRow> {
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnParcelRollYear;
            
            private global::System.Data.DataColumn columnOwner_Name;
            
            private global::System.Data.DataColumn columnLegalNotes;
            
            private global::System.Data.DataColumn columnLoanNumber;
            
            private global::System.Data.DataColumn columnMortgageID;
            
            private global::System.Data.DataColumn columnMortgageName;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnMapNumber;
            
            private global::System.Data.DataColumn columnPostTypeID;
            
            private global::System.Data.DataColumn columnPostName;
            
            private global::System.Data.DataColumn columnSADistrictID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictAssessmentParcelIDDataTable() {
                this.TableName = "GetDistrictAssessmentParcelID";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDistrictAssessmentParcelIDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetDistrictAssessmentParcelIDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelRollYearColumn {
                get {
                    return this.columnParcelRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Owner_NameColumn {
                get {
                    return this.columnOwner_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalNotesColumn {
                get {
                    return this.columnLegalNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanNumberColumn {
                get {
                    return this.columnLoanNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageIDColumn {
                get {
                    return this.columnMortgageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageNameColumn {
                get {
                    return this.columnMortgageName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNumberColumn {
                get {
                    return this.columnMapNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostTypeIDColumn {
                get {
                    return this.columnPostTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostNameColumn {
                get {
                    return this.columnPostName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SADistrictIDColumn {
                get {
                    return this.columnSADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictAssessmentParcelIDRow this[int index] {
                get {
                    return ((GetDistrictAssessmentParcelIDRow)(this.Rows[index]));
                }
            }
            
            public event GetDistrictAssessmentParcelIDRowChangeEventHandler GetDistrictAssessmentParcelIDRowChanging;
            
            public event GetDistrictAssessmentParcelIDRowChangeEventHandler GetDistrictAssessmentParcelIDRowChanged;
            
            public event GetDistrictAssessmentParcelIDRowChangeEventHandler GetDistrictAssessmentParcelIDRowDeleting;
            
            public event GetDistrictAssessmentParcelIDRowChangeEventHandler GetDistrictAssessmentParcelIDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetDistrictAssessmentParcelIDRow(GetDistrictAssessmentParcelIDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictAssessmentParcelIDRow AddGetDistrictAssessmentParcelIDRow(string ParcelNumber, int OwnerID, short ParcelRollYear, string Owner_Name, string LegalNotes, int LoanNumber, string MortgageName, string Situs, string MapNumber, byte PostTypeID, string PostName) {
                GetDistrictAssessmentParcelIDRow rowGetDistrictAssessmentParcelIDRow = ((GetDistrictAssessmentParcelIDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelNumber,
                        null,
                        OwnerID,
                        ParcelRollYear,
                        Owner_Name,
                        LegalNotes,
                        LoanNumber,
                        null,
                        MortgageName,
                        Situs,
                        MapNumber,
                        PostTypeID,
                        PostName,
                        null};
                rowGetDistrictAssessmentParcelIDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetDistrictAssessmentParcelIDRow);
                return rowGetDistrictAssessmentParcelIDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetDistrictAssessmentParcelIDDataTable cln = ((GetDistrictAssessmentParcelIDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetDistrictAssessmentParcelIDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnParcelRollYear = base.Columns["ParcelRollYear"];
                this.columnOwner_Name = base.Columns["Owner_Name"];
                this.columnLegalNotes = base.Columns["LegalNotes"];
                this.columnLoanNumber = base.Columns["LoanNumber"];
                this.columnMortgageID = base.Columns["MortgageID"];
                this.columnMortgageName = base.Columns["MortgageName"];
                this.columnSitus = base.Columns["Situs"];
                this.columnMapNumber = base.Columns["MapNumber"];
                this.columnPostTypeID = base.Columns["PostTypeID"];
                this.columnPostName = base.Columns["PostName"];
                this.columnSADistrictID = base.Columns["SADistrictID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnParcelRollYear = new global::System.Data.DataColumn("ParcelRollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelRollYear);
                this.columnOwner_Name = new global::System.Data.DataColumn("Owner_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwner_Name);
                this.columnLegalNotes = new global::System.Data.DataColumn("LegalNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegalNotes);
                this.columnLoanNumber = new global::System.Data.DataColumn("LoanNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanNumber);
                this.columnMortgageID = new global::System.Data.DataColumn("MortgageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageID);
                this.columnMortgageName = new global::System.Data.DataColumn("MortgageName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageName);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnMapNumber = new global::System.Data.DataColumn("MapNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapNumber);
                this.columnPostTypeID = new global::System.Data.DataColumn("PostTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostTypeID);
                this.columnPostName = new global::System.Data.DataColumn("PostName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostName);
                this.columnSADistrictID = new global::System.Data.DataColumn("SADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSADistrictID);
                this.columnParcelNumber.AllowDBNull = false;
                this.columnParcelNumber.MaxLength = 50;
                this.columnParcelID.AutoIncrement = true;
                this.columnParcelID.ReadOnly = true;
                this.columnOwner_Name.ReadOnly = true;
                this.columnOwner_Name.MaxLength = 102;
                this.columnLegalNotes.ReadOnly = true;
                this.columnLegalNotes.MaxLength = 5000;
                this.columnMortgageID.AutoIncrement = true;
                this.columnMortgageID.ReadOnly = true;
                this.columnMortgageName.MaxLength = 50;
                this.columnSitus.ReadOnly = true;
                this.columnSitus.MaxLength = 400;
                this.columnMapNumber.MaxLength = 50;
                this.columnPostName.MaxLength = 50;
                this.columnSADistrictID.AutoIncrement = true;
                this.columnSADistrictID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictAssessmentParcelIDRow NewGetDistrictAssessmentParcelIDRow() {
                return ((GetDistrictAssessmentParcelIDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetDistrictAssessmentParcelIDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetDistrictAssessmentParcelIDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetDistrictAssessmentParcelIDRowChanged != null)) {
                    this.GetDistrictAssessmentParcelIDRowChanged(this, new GetDistrictAssessmentParcelIDRowChangeEvent(((GetDistrictAssessmentParcelIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetDistrictAssessmentParcelIDRowChanging != null)) {
                    this.GetDistrictAssessmentParcelIDRowChanging(this, new GetDistrictAssessmentParcelIDRowChangeEvent(((GetDistrictAssessmentParcelIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetDistrictAssessmentParcelIDRowDeleted != null)) {
                    this.GetDistrictAssessmentParcelIDRowDeleted(this, new GetDistrictAssessmentParcelIDRowChangeEvent(((GetDistrictAssessmentParcelIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetDistrictAssessmentParcelIDRowDeleting != null)) {
                    this.GetDistrictAssessmentParcelIDRowDeleting(this, new GetDistrictAssessmentParcelIDRowChangeEvent(((GetDistrictAssessmentParcelIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetDistrictAssessmentParcelIDRow(GetDistrictAssessmentParcelIDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetDistrictAssessmentParcelIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDistrictAssessmentPropertyDataTable : global::System.Data.TypedTableBase<ListDistrictAssessmentPropertyRow> {
            
            private global::System.Data.DataColumn columnWorkingFileID;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnPostTypeID;
            
            private global::System.Data.DataColumn columnPostName;
            
            private global::System.Data.DataColumn columnIrrgAcres;
            
            private global::System.Data.DataColumn columnAcres;
            
            private global::System.Data.DataColumn columnTurnouts;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnOwner_Name;
            
            private global::System.Data.DataColumn columnMinimumDistrictFee;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnSADistrictID;
            
            private global::System.Data.DataColumn columnDistrictName;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnLoanNumber;
            
            private global::System.Data.DataColumn columnMortgageID;
            
            private global::System.Data.DataColumn columnMortgageName;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnMapNumber;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnReceiptForm;
            
            private global::System.Data.DataColumn columnStatementStatusText;
            
            private global::System.Data.DataColumn columnStatementStatusColor;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnIsCancelled;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentPropertyDataTable() {
                this.TableName = "ListDistrictAssessmentProperty";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDistrictAssessmentPropertyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDistrictAssessmentPropertyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkingFileIDColumn {
                get {
                    return this.columnWorkingFileID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostTypeIDColumn {
                get {
                    return this.columnPostTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostNameColumn {
                get {
                    return this.columnPostName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrgAcresColumn {
                get {
                    return this.columnIrrgAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn {
                get {
                    return this.columnAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TurnoutsColumn {
                get {
                    return this.columnTurnouts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Owner_NameColumn {
                get {
                    return this.columnOwner_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumDistrictFeeColumn {
                get {
                    return this.columnMinimumDistrictFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SADistrictIDColumn {
                get {
                    return this.columnSADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictNameColumn {
                get {
                    return this.columnDistrictName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanNumberColumn {
                get {
                    return this.columnLoanNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageIDColumn {
                get {
                    return this.columnMortgageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageNameColumn {
                get {
                    return this.columnMortgageName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNumberColumn {
                get {
                    return this.columnMapNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptFormColumn {
                get {
                    return this.columnReceiptForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementStatusTextColumn {
                get {
                    return this.columnStatementStatusText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementStatusColorColumn {
                get {
                    return this.columnStatementStatusColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCancelledColumn {
                get {
                    return this.columnIsCancelled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentPropertyRow this[int index] {
                get {
                    return ((ListDistrictAssessmentPropertyRow)(this.Rows[index]));
                }
            }
            
            public event ListDistrictAssessmentPropertyRowChangeEventHandler ListDistrictAssessmentPropertyRowChanging;
            
            public event ListDistrictAssessmentPropertyRowChangeEventHandler ListDistrictAssessmentPropertyRowChanged;
            
            public event ListDistrictAssessmentPropertyRowChangeEventHandler ListDistrictAssessmentPropertyRowDeleting;
            
            public event ListDistrictAssessmentPropertyRowChangeEventHandler ListDistrictAssessmentPropertyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDistrictAssessmentPropertyRow(ListDistrictAssessmentPropertyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentPropertyRow AddListDistrictAssessmentPropertyRow(
                        int WorkingFileID, 
                        int StatementID, 
                        int ParcelID, 
                        string ParcelNumber, 
                        bool IsPaid, 
                        byte PostTypeID, 
                        string PostName, 
                        decimal IrrgAcres, 
                        decimal Acres, 
                        string Turnouts, 
                        int OwnerID, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        string Owner_Name, 
                        decimal MinimumDistrictFee, 
                        short RollYear, 
                        string DistrictName, 
                        string StatementNumber, 
                        string LoanNumber, 
                        int MortgageID, 
                        string MortgageName, 
                        string Situs, 
                        string MapNumber, 
                        string Legal, 
                        string ReceiptForm, 
                        string StatementStatusText, 
                        string StatementStatusColor, 
                        decimal TaxAmount, 
                        bool IsCancelled) {
                ListDistrictAssessmentPropertyRow rowListDistrictAssessmentPropertyRow = ((ListDistrictAssessmentPropertyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkingFileID,
                        StatementID,
                        ParcelID,
                        ParcelNumber,
                        IsPaid,
                        PostTypeID,
                        PostName,
                        IrrgAcres,
                        Acres,
                        Turnouts,
                        OwnerID,
                        Address1,
                        Address2,
                        City,
                        Owner_Name,
                        MinimumDistrictFee,
                        RollYear,
                        null,
                        DistrictName,
                        StatementNumber,
                        LoanNumber,
                        MortgageID,
                        MortgageName,
                        Situs,
                        MapNumber,
                        Legal,
                        ReceiptForm,
                        StatementStatusText,
                        StatementStatusColor,
                        TaxAmount,
                        IsCancelled};
                rowListDistrictAssessmentPropertyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDistrictAssessmentPropertyRow);
                return rowListDistrictAssessmentPropertyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDistrictAssessmentPropertyDataTable cln = ((ListDistrictAssessmentPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDistrictAssessmentPropertyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkingFileID = base.Columns["WorkingFileID"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnPostTypeID = base.Columns["PostTypeID"];
                this.columnPostName = base.Columns["PostName"];
                this.columnIrrgAcres = base.Columns["IrrgAcres"];
                this.columnAcres = base.Columns["Acres"];
                this.columnTurnouts = base.Columns["Turnouts"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnOwner_Name = base.Columns["Owner_Name"];
                this.columnMinimumDistrictFee = base.Columns["MinimumDistrictFee"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnSADistrictID = base.Columns["SADistrictID"];
                this.columnDistrictName = base.Columns["DistrictName"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnLoanNumber = base.Columns["LoanNumber"];
                this.columnMortgageID = base.Columns["MortgageID"];
                this.columnMortgageName = base.Columns["MortgageName"];
                this.columnSitus = base.Columns["Situs"];
                this.columnMapNumber = base.Columns["MapNumber"];
                this.columnLegal = base.Columns["Legal"];
                this.columnReceiptForm = base.Columns["ReceiptForm"];
                this.columnStatementStatusText = base.Columns["StatementStatusText"];
                this.columnStatementStatusColor = base.Columns["StatementStatusColor"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnIsCancelled = base.Columns["IsCancelled"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkingFileID = new global::System.Data.DataColumn("WorkingFileID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkingFileID);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnPostTypeID = new global::System.Data.DataColumn("PostTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostTypeID);
                this.columnPostName = new global::System.Data.DataColumn("PostName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostName);
                this.columnIrrgAcres = new global::System.Data.DataColumn("IrrgAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrgAcres);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnTurnouts = new global::System.Data.DataColumn("Turnouts", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTurnouts);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnOwner_Name = new global::System.Data.DataColumn("Owner_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwner_Name);
                this.columnMinimumDistrictFee = new global::System.Data.DataColumn("MinimumDistrictFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumDistrictFee);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnSADistrictID = new global::System.Data.DataColumn("SADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSADistrictID);
                this.columnDistrictName = new global::System.Data.DataColumn("DistrictName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictName);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnLoanNumber = new global::System.Data.DataColumn("LoanNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanNumber);
                this.columnMortgageID = new global::System.Data.DataColumn("MortgageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageID);
                this.columnMortgageName = new global::System.Data.DataColumn("MortgageName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageName);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnMapNumber = new global::System.Data.DataColumn("MapNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapNumber);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnReceiptForm = new global::System.Data.DataColumn("ReceiptForm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptForm);
                this.columnStatementStatusText = new global::System.Data.DataColumn("StatementStatusText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementStatusText);
                this.columnStatementStatusColor = new global::System.Data.DataColumn("StatementStatusColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementStatusColor);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnIsCancelled = new global::System.Data.DataColumn("IsCancelled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCancelled);
                this.columnStatementID.ReadOnly = true;
                this.columnParcelID.ReadOnly = true;
                this.columnParcelNumber.MaxLength = 50;
                this.columnIsPaid.ReadOnly = true;
                this.columnPostName.ReadOnly = true;
                this.columnPostName.MaxLength = 50;
                this.columnIrrgAcres.ReadOnly = true;
                this.columnAcres.ReadOnly = true;
                this.columnTurnouts.ReadOnly = true;
                this.columnOwnerID.ReadOnly = true;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnCity.MaxLength = 153;
                this.columnOwner_Name.ReadOnly = true;
                this.columnOwner_Name.MaxLength = 102;
                this.columnMinimumDistrictFee.ReadOnly = true;
                this.columnSADistrictID.AutoIncrement = true;
                this.columnSADistrictID.ReadOnly = true;
                this.columnDistrictName.ReadOnly = true;
                this.columnDistrictName.MaxLength = 63;
                this.columnStatementNumber.ReadOnly = true;
                this.columnStatementNumber.MaxLength = 50;
                this.columnLoanNumber.ReadOnly = true;
                this.columnLoanNumber.MaxLength = 50;
                this.columnMortgageID.ReadOnly = true;
                this.columnMortgageName.ReadOnly = true;
                this.columnMortgageName.MaxLength = 50;
                this.columnSitus.MaxLength = 400;
                this.columnMapNumber.ReadOnly = true;
                this.columnMapNumber.MaxLength = 50;
                this.columnLegal.MaxLength = 5000;
                this.columnStatementStatusText.ReadOnly = true;
                this.columnStatementStatusText.MaxLength = 50;
                this.columnStatementStatusColor.ReadOnly = true;
                this.columnStatementStatusColor.MaxLength = 11;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentPropertyRow NewListDistrictAssessmentPropertyRow() {
                return ((ListDistrictAssessmentPropertyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDistrictAssessmentPropertyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDistrictAssessmentPropertyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDistrictAssessmentPropertyRowChanged != null)) {
                    this.ListDistrictAssessmentPropertyRowChanged(this, new ListDistrictAssessmentPropertyRowChangeEvent(((ListDistrictAssessmentPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDistrictAssessmentPropertyRowChanging != null)) {
                    this.ListDistrictAssessmentPropertyRowChanging(this, new ListDistrictAssessmentPropertyRowChangeEvent(((ListDistrictAssessmentPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDistrictAssessmentPropertyRowDeleted != null)) {
                    this.ListDistrictAssessmentPropertyRowDeleted(this, new ListDistrictAssessmentPropertyRowChangeEvent(((ListDistrictAssessmentPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDistrictAssessmentPropertyRowDeleting != null)) {
                    this.ListDistrictAssessmentPropertyRowDeleting(this, new ListDistrictAssessmentPropertyRowChangeEvent(((ListDistrictAssessmentPropertyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDistrictAssessmentPropertyRow(ListDistrictAssessmentPropertyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDistrictAssessmentPropertyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDeleteOutputValueDataTable : global::System.Data.TypedTableBase<ListDeleteOutputValueRow> {
            
            private global::System.Data.DataColumn columnIsPass;
            
            private global::System.Data.DataColumn columnErrorMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeleteOutputValueDataTable() {
                this.TableName = "ListDeleteOutputValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeleteOutputValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDeleteOutputValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPassColumn {
                get {
                    return this.columnIsPass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMessageColumn {
                get {
                    return this.columnErrorMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeleteOutputValueRow this[int index] {
                get {
                    return ((ListDeleteOutputValueRow)(this.Rows[index]));
                }
            }
            
            public event ListDeleteOutputValueRowChangeEventHandler ListDeleteOutputValueRowChanging;
            
            public event ListDeleteOutputValueRowChangeEventHandler ListDeleteOutputValueRowChanged;
            
            public event ListDeleteOutputValueRowChangeEventHandler ListDeleteOutputValueRowDeleting;
            
            public event ListDeleteOutputValueRowChangeEventHandler ListDeleteOutputValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDeleteOutputValueRow(ListDeleteOutputValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeleteOutputValueRow AddListDeleteOutputValueRow(bool IsPass, string ErrorMessage) {
                ListDeleteOutputValueRow rowListDeleteOutputValueRow = ((ListDeleteOutputValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsPass,
                        ErrorMessage};
                rowListDeleteOutputValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDeleteOutputValueRow);
                return rowListDeleteOutputValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDeleteOutputValueDataTable cln = ((ListDeleteOutputValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDeleteOutputValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsPass = base.Columns["IsPass"];
                this.columnErrorMessage = base.Columns["ErrorMessage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsPass = new global::System.Data.DataColumn("IsPass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPass);
                this.columnErrorMessage = new global::System.Data.DataColumn("ErrorMessage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMessage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeleteOutputValueRow NewListDeleteOutputValueRow() {
                return ((ListDeleteOutputValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDeleteOutputValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDeleteOutputValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDeleteOutputValueRowChanged != null)) {
                    this.ListDeleteOutputValueRowChanged(this, new ListDeleteOutputValueRowChangeEvent(((ListDeleteOutputValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDeleteOutputValueRowChanging != null)) {
                    this.ListDeleteOutputValueRowChanging(this, new ListDeleteOutputValueRowChangeEvent(((ListDeleteOutputValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDeleteOutputValueRowDeleted != null)) {
                    this.ListDeleteOutputValueRowDeleted(this, new ListDeleteOutputValueRowChangeEvent(((ListDeleteOutputValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDeleteOutputValueRowDeleting != null)) {
                    this.ListDeleteOutputValueRowDeleting(this, new ListDeleteOutputValueRowChangeEvent(((ListDeleteOutputValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDeleteOutputValueRow(ListDeleteOutputValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDeleteOutputValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListInputVAlueDataTable : global::System.Data.TypedTableBase<ListInputVAlueRow> {
            
            private global::System.Data.DataColumn columnKey;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnDataType;
            
            private global::System.Data.DataColumn columnMaxSize;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueDataTable() {
                this.TableName = "ListInputVAlue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInputVAlueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListInputVAlueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyColumn {
                get {
                    return this.columnKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataTypeColumn {
                get {
                    return this.columnDataType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxSizeColumn {
                get {
                    return this.columnMaxSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRow this[int index] {
                get {
                    return ((ListInputVAlueRow)(this.Rows[index]));
                }
            }
            
            public event ListInputVAlueRowChangeEventHandler ListInputVAlueRowChanging;
            
            public event ListInputVAlueRowChangeEventHandler ListInputVAlueRowChanged;
            
            public event ListInputVAlueRowChangeEventHandler ListInputVAlueRowDeleting;
            
            public event ListInputVAlueRowChangeEventHandler ListInputVAlueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListInputVAlueRow(ListInputVAlueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRow AddListInputVAlueRow(string Key, string Value, string DataType, long MaxSize) {
                ListInputVAlueRow rowListInputVAlueRow = ((ListInputVAlueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Key,
                        Value,
                        DataType,
                        MaxSize};
                rowListInputVAlueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListInputVAlueRow);
                return rowListInputVAlueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListInputVAlueDataTable cln = ((ListInputVAlueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListInputVAlueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKey = base.Columns["Key"];
                this.columnValue = base.Columns["Value"];
                this.columnDataType = base.Columns["DataType"];
                this.columnMaxSize = base.Columns["MaxSize"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKey = new global::System.Data.DataColumn("Key", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKey);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnDataType = new global::System.Data.DataColumn("DataType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataType);
                this.columnMaxSize = new global::System.Data.DataColumn("MaxSize", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxSize);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRow NewListInputVAlueRow() {
                return ((ListInputVAlueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListInputVAlueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListInputVAlueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListInputVAlueRowChanged != null)) {
                    this.ListInputVAlueRowChanged(this, new ListInputVAlueRowChangeEvent(((ListInputVAlueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListInputVAlueRowChanging != null)) {
                    this.ListInputVAlueRowChanging(this, new ListInputVAlueRowChangeEvent(((ListInputVAlueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListInputVAlueRowDeleted != null)) {
                    this.ListInputVAlueRowDeleted(this, new ListInputVAlueRowChangeEvent(((ListInputVAlueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListInputVAlueRowDeleting != null)) {
                    this.ListInputVAlueRowDeleting(this, new ListInputVAlueRowChangeEvent(((ListInputVAlueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListInputVAlueRow(ListInputVAlueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListInputVAlueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListCheckOutPutValueDataTable : global::System.Data.TypedTableBase<ListCheckOutPutValueRow> {
            
            private global::System.Data.DataColumn columnIsPass;
            
            private global::System.Data.DataColumn columnErrorMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCheckOutPutValueDataTable() {
                this.TableName = "ListCheckOutPutValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCheckOutPutValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListCheckOutPutValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPassColumn {
                get {
                    return this.columnIsPass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMessageColumn {
                get {
                    return this.columnErrorMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCheckOutPutValueRow this[int index] {
                get {
                    return ((ListCheckOutPutValueRow)(this.Rows[index]));
                }
            }
            
            public event ListCheckOutPutValueRowChangeEventHandler ListCheckOutPutValueRowChanging;
            
            public event ListCheckOutPutValueRowChangeEventHandler ListCheckOutPutValueRowChanged;
            
            public event ListCheckOutPutValueRowChangeEventHandler ListCheckOutPutValueRowDeleting;
            
            public event ListCheckOutPutValueRowChangeEventHandler ListCheckOutPutValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListCheckOutPutValueRow(ListCheckOutPutValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCheckOutPutValueRow AddListCheckOutPutValueRow(bool IsPass, string ErrorMessage) {
                ListCheckOutPutValueRow rowListCheckOutPutValueRow = ((ListCheckOutPutValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsPass,
                        ErrorMessage};
                rowListCheckOutPutValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListCheckOutPutValueRow);
                return rowListCheckOutPutValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListCheckOutPutValueDataTable cln = ((ListCheckOutPutValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListCheckOutPutValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsPass = base.Columns["IsPass"];
                this.columnErrorMessage = base.Columns["ErrorMessage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsPass = new global::System.Data.DataColumn("IsPass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPass);
                this.columnErrorMessage = new global::System.Data.DataColumn("ErrorMessage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMessage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCheckOutPutValueRow NewListCheckOutPutValueRow() {
                return ((ListCheckOutPutValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListCheckOutPutValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListCheckOutPutValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListCheckOutPutValueRowChanged != null)) {
                    this.ListCheckOutPutValueRowChanged(this, new ListCheckOutPutValueRowChangeEvent(((ListCheckOutPutValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListCheckOutPutValueRowChanging != null)) {
                    this.ListCheckOutPutValueRowChanging(this, new ListCheckOutPutValueRowChangeEvent(((ListCheckOutPutValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListCheckOutPutValueRowDeleted != null)) {
                    this.ListCheckOutPutValueRowDeleted(this, new ListCheckOutPutValueRowChangeEvent(((ListCheckOutPutValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListCheckOutPutValueRowDeleting != null)) {
                    this.ListCheckOutPutValueRowDeleting(this, new ListCheckOutPutValueRowChangeEvent(((ListCheckOutPutValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListCheckOutPutValueRow(ListCheckOutPutValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1031SpecialDistrictAssessmentData ds = new F1031SpecialDistrictAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListCheckOutPutValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDistrictAssessmentIDRow : global::System.Data.DataRow {
            
            private ListDistrictAssessmentIDDataTable tableListDistrictAssessmentID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDistrictAssessmentIDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDistrictAssessmentID = ((ListDistrictAssessmentIDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    return ((int)(this[this.tableListDistrictAssessmentID.KeyIDColumn]));
                }
                set {
                    this[this.tableListDistrictAssessmentID.KeyIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDistrictAssessmentRatesRow : global::System.Data.DataRow {
            
            private ListDistrictAssessmentRatesDataTable tableListDistrictAssessmentRates;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDistrictAssessmentRatesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDistrictAssessmentRates = ((ListDistrictAssessmentRatesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateAcresID {
                get {
                    return ((int)(this[this.tableListDistrictAssessmentRates.RateAcresIDColumn]));
                }
                set {
                    this[this.tableListDistrictAssessmentRates.RateAcresIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SARateItemID {
                get {
                    return ((int)(this[this.tableListDistrictAssessmentRates.SARateItemIDColumn]));
                }
                set {
                    this[this.tableListDistrictAssessmentRates.SARateItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateDescription {
                get {
                    return ((string)(this[this.tableListDistrictAssessmentRates.RateDescriptionColumn]));
                }
                set {
                    this[this.tableListDistrictAssessmentRates.RateDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateType {
                get {
                    return ((string)(this[this.tableListDistrictAssessmentRates.RateTypeColumn]));
                }
                set {
                    this[this.tableListDistrictAssessmentRates.RateTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Minimum {
                get {
                    if (this.IsMinimumNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListDistrictAssessmentRates.MinimumColumn]));
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentRates.MinimumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    return ((decimal)(this[this.tableListDistrictAssessmentRates.AmountColumn]));
                }
                set {
                    this[this.tableListDistrictAssessmentRates.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acres {
                get {
                    try {
                        return ((decimal)(this[this.tableListDistrictAssessmentRates.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'ListDistrictAssessmentRates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentRates.AcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableListDistrictAssessmentRates.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'ListDistrictAssessmentRates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentRates.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumNull() {
                return this.IsNull(this.tableListDistrictAssessmentRates.MinimumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumNull() {
                this[this.tableListDistrictAssessmentRates.MinimumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull() {
                return this.IsNull(this.tableListDistrictAssessmentRates.AcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull() {
                this[this.tableListDistrictAssessmentRates.AcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableListDistrictAssessmentRates.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableListDistrictAssessmentRates.TotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSpecialDistrictAssessmentPropertyRow : global::System.Data.DataRow {
            
            private ListSpecialDistrictAssessmentPropertyDataTable tableListSpecialDistrictAssessmentProperty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSpecialDistrictAssessmentPropertyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSpecialDistrictAssessmentProperty = ((ListSpecialDistrictAssessmentPropertyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DistrictRollYear {
                get {
                    return ((short)(this[this.tableListSpecialDistrictAssessmentProperty.DistrictRollYearColumn]));
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentProperty.DistrictRollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumDistrictFee {
                get {
                    return ((decimal)(this[this.tableListSpecialDistrictAssessmentProperty.MinimumDistrictFeeColumn]));
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentProperty.MinimumDistrictFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Type {
                get {
                    return ((byte)(this[this.tableListSpecialDistrictAssessmentProperty.TypeColumn]));
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentProperty.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostName {
                get {
                    if (this.IsPostNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListSpecialDistrictAssessmentProperty.PostNameColumn]));
                    }
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentProperty.PostNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictName {
                get {
                    if (this.IsDistrictNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListSpecialDistrictAssessmentProperty.DistrictNameColumn]));
                    }
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentProperty.DistrictNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostNameNull() {
                return this.IsNull(this.tableListSpecialDistrictAssessmentProperty.PostNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostNameNull() {
                this[this.tableListSpecialDistrictAssessmentProperty.PostNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNameNull() {
                return this.IsNull(this.tableListSpecialDistrictAssessmentProperty.DistrictNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNameNull() {
                this[this.tableListSpecialDistrictAssessmentProperty.DistrictNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSpecialDistrictAssessmentRatesRow : global::System.Data.DataRow {
            
            private ListSpecialDistrictAssessmentRatesDataTable tableListSpecialDistrictAssessmentRates;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSpecialDistrictAssessmentRatesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSpecialDistrictAssessmentRates = ((ListSpecialDistrictAssessmentRatesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateAcresID {
                get {
                    return ((int)(this[this.tableListSpecialDistrictAssessmentRates.RateAcresIDColumn]));
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentRates.RateAcresIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SARateItemID {
                get {
                    return ((int)(this[this.tableListSpecialDistrictAssessmentRates.SARateItemIDColumn]));
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentRates.SARateItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateDescription {
                get {
                    return ((string)(this[this.tableListSpecialDistrictAssessmentRates.RateDescriptionColumn]));
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentRates.RateDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateType {
                get {
                    return ((string)(this[this.tableListSpecialDistrictAssessmentRates.RateTypeColumn]));
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentRates.RateTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Minimum {
                get {
                    if (this.IsMinimumNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListSpecialDistrictAssessmentRates.MinimumColumn]));
                    }
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentRates.MinimumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    return ((decimal)(this[this.tableListSpecialDistrictAssessmentRates.AmountColumn]));
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentRates.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acres {
                get {
                    try {
                        return ((decimal)(this[this.tableListSpecialDistrictAssessmentRates.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'ListSpecialDistrictAssessmentRates\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentRates.AcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableListSpecialDistrictAssessmentRates.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'ListSpecialDistrictAssessmentRates\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListSpecialDistrictAssessmentRates.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumNull() {
                return this.IsNull(this.tableListSpecialDistrictAssessmentRates.MinimumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumNull() {
                this[this.tableListSpecialDistrictAssessmentRates.MinimumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull() {
                return this.IsNull(this.tableListSpecialDistrictAssessmentRates.AcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull() {
                this[this.tableListSpecialDistrictAssessmentRates.AcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableListSpecialDistrictAssessmentRates.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableListSpecialDistrictAssessmentRates.TotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveDistrictAssessmentDetailsRow : global::System.Data.DataRow {
            
            private SaveDistrictAssessmentDetailsDataTable tableSaveDistrictAssessmentDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveDistrictAssessmentDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveDistrictAssessmentDetails = ((SaveDistrictAssessmentDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableSaveDistrictAssessmentDetails.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'SaveDistrictAssessmentDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableSaveDistrictAssessmentDetails.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'SaveDistrictAssessmentDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    if (this.IsParcelNumberNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSaveDistrictAssessmentDetails.ParcelNumberColumn]));
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrgAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveDistrictAssessmentDetails.IrrgAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrgAcres\' in table \'SaveDistrictAssessmentDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.IrrgAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acres1 {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveDistrictAssessmentDetails.Acres1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres1\' in table \'SaveDistrictAssessmentDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.Acres1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Turnouts {
                get {
                    try {
                        return ((int)(this[this.tableSaveDistrictAssessmentDetails.TurnoutsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Turnouts\' in table \'SaveDistrictAssessmentDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.TurnoutsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    if (this.IsSitusNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSaveDistrictAssessmentDetails.SitusColumn]));
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapNumber {
                get {
                    try {
                        return ((string)(this[this.tableSaveDistrictAssessmentDetails.MapNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapNumber\' in table \'SaveDistrictAssessmentDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.MapNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    if (this.IsLegalNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSaveDistrictAssessmentDetails.LegalColumn]));
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SADistrictID {
                get {
                    try {
                        return ((int)(this[this.tableSaveDistrictAssessmentDetails.SADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SADistrictID\' in table \'SaveDistrictAssessmentDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.SADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateAcresID {
                get {
                    return ((int)(this[this.tableSaveDistrictAssessmentDetails.RateAcresIDColumn]));
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.RateAcresIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SARateItemID {
                get {
                    return ((int)(this[this.tableSaveDistrictAssessmentDetails.SARateItemIDColumn]));
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.SARateItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateDescription {
                get {
                    return ((string)(this[this.tableSaveDistrictAssessmentDetails.RateDescriptionColumn]));
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.RateDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateType {
                get {
                    return ((string)(this[this.tableSaveDistrictAssessmentDetails.RateTypeColumn]));
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.RateTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Minimum {
                get {
                    try {
                        return ((bool)(this[this.tableSaveDistrictAssessmentDetails.MinimumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Minimum\' in table \'SaveDistrictAssessmentDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.MinimumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    return ((decimal)(this[this.tableSaveDistrictAssessmentDetails.AmountColumn]));
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acres {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveDistrictAssessmentDetails.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'SaveDistrictAssessmentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.AcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveDistrictAssessmentDetails.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'SaveDistrictAssessmentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveDistrictAssessmentDetails.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableSaveDistrictAssessmentDetails.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableSaveDistrictAssessmentDetails.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableSaveDistrictAssessmentDetails.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrgAcresNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.IrrgAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrgAcresNull() {
                this[this.tableSaveDistrictAssessmentDetails.IrrgAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcres1Null() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.Acres1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcres1Null() {
                this[this.tableSaveDistrictAssessmentDetails.Acres1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTurnoutsNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.TurnoutsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTurnoutsNull() {
                this[this.tableSaveDistrictAssessmentDetails.TurnoutsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableSaveDistrictAssessmentDetails.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapNumberNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.MapNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapNumberNull() {
                this[this.tableSaveDistrictAssessmentDetails.MapNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableSaveDistrictAssessmentDetails.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSADistrictIDNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.SADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSADistrictIDNull() {
                this[this.tableSaveDistrictAssessmentDetails.SADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.MinimumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumNull() {
                this[this.tableSaveDistrictAssessmentDetails.MinimumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.AcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull() {
                this[this.tableSaveDistrictAssessmentDetails.AcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableSaveDistrictAssessmentDetails.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableSaveDistrictAssessmentDetails.TotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetDistrictAssessmentParcelIDRow : global::System.Data.DataRow {
            
            private GetDistrictAssessmentParcelIDDataTable tableGetDistrictAssessmentParcelID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDistrictAssessmentParcelIDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetDistrictAssessmentParcelID = ((GetDistrictAssessmentParcelIDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    return ((string)(this[this.tableGetDistrictAssessmentParcelID.ParcelNumberColumn]));
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableGetDistrictAssessmentParcelID.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'GetDistrictAssessmentParcelID\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableGetDistrictAssessmentParcelID.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'GetDistrictAssessmentParcelID\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ParcelRollYear {
                get {
                    try {
                        return ((short)(this[this.tableGetDistrictAssessmentParcelID.ParcelRollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelRollYear\' in table \'GetDistrictAssessmentParcelID\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.ParcelRollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Owner_Name {
                get {
                    if (this.IsOwner_NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetDistrictAssessmentParcelID.Owner_NameColumn]));
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.Owner_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LegalNotes {
                get {
                    if (this.IsLegalNotesNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetDistrictAssessmentParcelID.LegalNotesColumn]));
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.LegalNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LoanNumber {
                get {
                    try {
                        return ((int)(this[this.tableGetDistrictAssessmentParcelID.LoanNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanNumber\' in table \'GetDistrictAssessmentParcelID\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.LoanNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MortgageID {
                get {
                    try {
                        return ((int)(this[this.tableGetDistrictAssessmentParcelID.MortgageIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageID\' in table \'GetDistrictAssessmentParcelID\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.MortgageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MortgageName {
                get {
                    if (this.IsMortgageNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetDistrictAssessmentParcelID.MortgageNameColumn]));
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.MortgageNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    if (this.IsSitusNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetDistrictAssessmentParcelID.SitusColumn]));
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapNumber {
                get {
                    if (this.IsMapNumberNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetDistrictAssessmentParcelID.MapNumberColumn]));
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.MapNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PostTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableGetDistrictAssessmentParcelID.PostTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostTypeID\' in table \'GetDistrictAssessmentParcelID\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.PostTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostName {
                get {
                    if (this.IsPostNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetDistrictAssessmentParcelID.PostNameColumn]));
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.PostNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SADistrictID {
                get {
                    try {
                        return ((int)(this[this.tableGetDistrictAssessmentParcelID.SADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SADistrictID\' in table \'GetDistrictAssessmentParcelID\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetDistrictAssessmentParcelID.SADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableGetDistrictAssessmentParcelID.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableGetDistrictAssessmentParcelID.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelRollYearNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.ParcelRollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelRollYearNull() {
                this[this.tableGetDistrictAssessmentParcelID.ParcelRollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwner_NameNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.Owner_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwner_NameNull() {
                this[this.tableGetDistrictAssessmentParcelID.Owner_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNotesNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.LegalNotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNotesNull() {
                this[this.tableGetDistrictAssessmentParcelID.LegalNotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanNumberNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.LoanNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanNumberNull() {
                this[this.tableGetDistrictAssessmentParcelID.LoanNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageIDNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.MortgageIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageIDNull() {
                this[this.tableGetDistrictAssessmentParcelID.MortgageIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageNameNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.MortgageNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageNameNull() {
                this[this.tableGetDistrictAssessmentParcelID.MortgageNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableGetDistrictAssessmentParcelID.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapNumberNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.MapNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapNumberNull() {
                this[this.tableGetDistrictAssessmentParcelID.MapNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostTypeIDNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.PostTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostTypeIDNull() {
                this[this.tableGetDistrictAssessmentParcelID.PostTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostNameNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.PostNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostNameNull() {
                this[this.tableGetDistrictAssessmentParcelID.PostNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSADistrictIDNull() {
                return this.IsNull(this.tableGetDistrictAssessmentParcelID.SADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSADistrictIDNull() {
                this[this.tableGetDistrictAssessmentParcelID.SADistrictIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDistrictAssessmentPropertyRow : global::System.Data.DataRow {
            
            private ListDistrictAssessmentPropertyDataTable tableListDistrictAssessmentProperty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDistrictAssessmentPropertyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDistrictAssessmentProperty = ((ListDistrictAssessmentPropertyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkingFileID {
                get {
                    try {
                        return ((int)(this[this.tableListDistrictAssessmentProperty.WorkingFileIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkingFileID\' in table \'ListDistrictAssessmentProperty\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.WorkingFileIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableListDistrictAssessmentProperty.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'ListDistrictAssessmentProperty\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableListDistrictAssessmentProperty.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ListDistrictAssessmentProperty\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ListDistrictAssessmentProperty\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    try {
                        return ((bool)(this[this.tableListDistrictAssessmentProperty.IsPaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPaid\' in table \'ListDistrictAssessmentProperty\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PostTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableListDistrictAssessmentProperty.PostTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostTypeID\' in table \'ListDistrictAssessmentProperty\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.PostTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostName {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.PostNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostName\' in table \'ListDistrictAssessmentProperty\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.PostNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrgAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableListDistrictAssessmentProperty.IrrgAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrgAcres\' in table \'ListDistrictAssessmentProperty\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.IrrgAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acres {
                get {
                    try {
                        return ((decimal)(this[this.tableListDistrictAssessmentProperty.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'ListDistrictAssessmentProperty\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.AcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Turnouts {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.TurnoutsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Turnouts\' in table \'ListDistrictAssessmentProperty\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.TurnoutsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListDistrictAssessmentProperty.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ListDistrictAssessmentProperty\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    if (this.IsAddress1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.Address1Column]));
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    if (this.IsAddress2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.Address2Column]));
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    if (this.IsCityNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.CityColumn]));
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Owner_Name {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.Owner_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Owner_Name\' in table \'ListDistrictAssessmentProperty\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.Owner_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumDistrictFee {
                get {
                    try {
                        return ((decimal)(this[this.tableListDistrictAssessmentProperty.MinimumDistrictFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimumDistrictFee\' in table \'ListDistrictAssessmentPropert" +
                                "y\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.MinimumDistrictFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListDistrictAssessmentProperty.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListDistrictAssessmentProperty\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SADistrictID {
                get {
                    try {
                        return ((int)(this[this.tableListDistrictAssessmentProperty.SADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SADistrictID\' in table \'ListDistrictAssessmentProperty\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.SADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistrictName {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.DistrictNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictName\' in table \'ListDistrictAssessmentProperty\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.DistrictNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.StatementNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementNumber\' in table \'ListDistrictAssessmentProperty\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoanNumber {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.LoanNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanNumber\' in table \'ListDistrictAssessmentProperty\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.LoanNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MortgageID {
                get {
                    try {
                        return ((int)(this[this.tableListDistrictAssessmentProperty.MortgageIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageID\' in table \'ListDistrictAssessmentProperty\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.MortgageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MortgageName {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.MortgageNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageName\' in table \'ListDistrictAssessmentProperty\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.MortgageNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'ListDistrictAssessmentProperty\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapNumber {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.MapNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapNumber\' in table \'ListDistrictAssessmentProperty\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.MapNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'ListDistrictAssessmentProperty\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptForm {
                get {
                    if (this.IsReceiptFormNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.ReceiptFormColumn]));
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.ReceiptFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementStatusText {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.StatementStatusTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementStatusText\' in table \'ListDistrictAssessmentProper" +
                                "ty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.StatementStatusTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementStatusColor {
                get {
                    try {
                        return ((string)(this[this.tableListDistrictAssessmentProperty.StatementStatusColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementStatusColor\' in table \'ListDistrictAssessmentPrope" +
                                "rty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.StatementStatusColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableListDistrictAssessmentProperty.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'ListDistrictAssessmentProperty\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCancelled {
                get {
                    try {
                        return ((bool)(this[this.tableListDistrictAssessmentProperty.IsCancelledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCancelled\' in table \'ListDistrictAssessmentProperty\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListDistrictAssessmentProperty.IsCancelledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkingFileIDNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.WorkingFileIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkingFileIDNull() {
                this[this.tableListDistrictAssessmentProperty.WorkingFileIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableListDistrictAssessmentProperty.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableListDistrictAssessmentProperty.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableListDistrictAssessmentProperty.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPaidNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.IsPaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPaidNull() {
                this[this.tableListDistrictAssessmentProperty.IsPaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostTypeIDNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.PostTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostTypeIDNull() {
                this[this.tableListDistrictAssessmentProperty.PostTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostNameNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.PostNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostNameNull() {
                this[this.tableListDistrictAssessmentProperty.PostNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrgAcresNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.IrrgAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrgAcresNull() {
                this[this.tableListDistrictAssessmentProperty.IrrgAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.AcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull() {
                this[this.tableListDistrictAssessmentProperty.AcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTurnoutsNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.TurnoutsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTurnoutsNull() {
                this[this.tableListDistrictAssessmentProperty.TurnoutsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableListDistrictAssessmentProperty.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableListDistrictAssessmentProperty.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableListDistrictAssessmentProperty.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListDistrictAssessmentProperty.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwner_NameNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.Owner_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwner_NameNull() {
                this[this.tableListDistrictAssessmentProperty.Owner_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumDistrictFeeNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.MinimumDistrictFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumDistrictFeeNull() {
                this[this.tableListDistrictAssessmentProperty.MinimumDistrictFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListDistrictAssessmentProperty.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSADistrictIDNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.SADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSADistrictIDNull() {
                this[this.tableListDistrictAssessmentProperty.SADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNameNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.DistrictNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNameNull() {
                this[this.tableListDistrictAssessmentProperty.DistrictNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableListDistrictAssessmentProperty.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanNumberNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.LoanNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanNumberNull() {
                this[this.tableListDistrictAssessmentProperty.LoanNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageIDNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.MortgageIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageIDNull() {
                this[this.tableListDistrictAssessmentProperty.MortgageIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageNameNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.MortgageNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageNameNull() {
                this[this.tableListDistrictAssessmentProperty.MortgageNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableListDistrictAssessmentProperty.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapNumberNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.MapNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapNumberNull() {
                this[this.tableListDistrictAssessmentProperty.MapNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableListDistrictAssessmentProperty.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptFormNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.ReceiptFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptFormNull() {
                this[this.tableListDistrictAssessmentProperty.ReceiptFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementStatusTextNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.StatementStatusTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementStatusTextNull() {
                this[this.tableListDistrictAssessmentProperty.StatementStatusTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementStatusColorNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.StatementStatusColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementStatusColorNull() {
                this[this.tableListDistrictAssessmentProperty.StatementStatusColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tableListDistrictAssessmentProperty.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCancelledNull() {
                return this.IsNull(this.tableListDistrictAssessmentProperty.IsCancelledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCancelledNull() {
                this[this.tableListDistrictAssessmentProperty.IsCancelledColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDeleteOutputValueRow : global::System.Data.DataRow {
            
            private ListDeleteOutputValueDataTable tableListDeleteOutputValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeleteOutputValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDeleteOutputValue = ((ListDeleteOutputValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPass {
                get {
                    try {
                        return ((bool)(this[this.tableListDeleteOutputValue.IsPassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPass\' in table \'ListDeleteOutputValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeleteOutputValue.IsPassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMessage {
                get {
                    try {
                        return ((string)(this[this.tableListDeleteOutputValue.ErrorMessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMessage\' in table \'ListDeleteOutputValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeleteOutputValue.ErrorMessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPassNull() {
                return this.IsNull(this.tableListDeleteOutputValue.IsPassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPassNull() {
                this[this.tableListDeleteOutputValue.IsPassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMessageNull() {
                return this.IsNull(this.tableListDeleteOutputValue.ErrorMessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMessageNull() {
                this[this.tableListDeleteOutputValue.ErrorMessageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListInputVAlueRow : global::System.Data.DataRow {
            
            private ListInputVAlueDataTable tableListInputVAlue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInputVAlueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListInputVAlue = ((ListInputVAlueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Key {
                get {
                    try {
                        return ((string)(this[this.tableListInputVAlue.KeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Key\' in table \'ListInputVAlue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInputVAlue.KeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableListInputVAlue.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'ListInputVAlue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInputVAlue.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataType {
                get {
                    try {
                        return ((string)(this[this.tableListInputVAlue.DataTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataType\' in table \'ListInputVAlue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInputVAlue.DataTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MaxSize {
                get {
                    try {
                        return ((long)(this[this.tableListInputVAlue.MaxSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxSize\' in table \'ListInputVAlue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInputVAlue.MaxSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyNull() {
                return this.IsNull(this.tableListInputVAlue.KeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyNull() {
                this[this.tableListInputVAlue.KeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableListInputVAlue.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableListInputVAlue.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataTypeNull() {
                return this.IsNull(this.tableListInputVAlue.DataTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataTypeNull() {
                this[this.tableListInputVAlue.DataTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxSizeNull() {
                return this.IsNull(this.tableListInputVAlue.MaxSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxSizeNull() {
                this[this.tableListInputVAlue.MaxSizeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListCheckOutPutValueRow : global::System.Data.DataRow {
            
            private ListCheckOutPutValueDataTable tableListCheckOutPutValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCheckOutPutValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListCheckOutPutValue = ((ListCheckOutPutValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPass {
                get {
                    try {
                        return ((bool)(this[this.tableListCheckOutPutValue.IsPassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPass\' in table \'ListCheckOutPutValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCheckOutPutValue.IsPassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMessage {
                get {
                    try {
                        return ((string)(this[this.tableListCheckOutPutValue.ErrorMessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMessage\' in table \'ListCheckOutPutValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCheckOutPutValue.ErrorMessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPassNull() {
                return this.IsNull(this.tableListCheckOutPutValue.IsPassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPassNull() {
                this[this.tableListCheckOutPutValue.IsPassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMessageNull() {
                return this.IsNull(this.tableListCheckOutPutValue.ErrorMessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMessageNull() {
                this[this.tableListCheckOutPutValue.ErrorMessageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDistrictAssessmentIDRowChangeEvent : global::System.EventArgs {
            
            private ListDistrictAssessmentIDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentIDRowChangeEvent(ListDistrictAssessmentIDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentIDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDistrictAssessmentRatesRowChangeEvent : global::System.EventArgs {
            
            private ListDistrictAssessmentRatesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentRatesRowChangeEvent(ListDistrictAssessmentRatesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentRatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSpecialDistrictAssessmentPropertyRowChangeEvent : global::System.EventArgs {
            
            private ListSpecialDistrictAssessmentPropertyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentPropertyRowChangeEvent(ListSpecialDistrictAssessmentPropertyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSpecialDistrictAssessmentRatesRowChangeEvent : global::System.EventArgs {
            
            private ListSpecialDistrictAssessmentRatesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentRatesRowChangeEvent(ListSpecialDistrictAssessmentRatesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSpecialDistrictAssessmentRatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveDistrictAssessmentDetailsRowChangeEvent : global::System.EventArgs {
            
            private SaveDistrictAssessmentDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveDistrictAssessmentDetailsRowChangeEvent(SaveDistrictAssessmentDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveDistrictAssessmentDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetDistrictAssessmentParcelIDRowChangeEvent : global::System.EventArgs {
            
            private GetDistrictAssessmentParcelIDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictAssessmentParcelIDRowChangeEvent(GetDistrictAssessmentParcelIDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDistrictAssessmentParcelIDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDistrictAssessmentPropertyRowChangeEvent : global::System.EventArgs {
            
            private ListDistrictAssessmentPropertyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentPropertyRowChangeEvent(ListDistrictAssessmentPropertyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDistrictAssessmentPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDeleteOutputValueRowChangeEvent : global::System.EventArgs {
            
            private ListDeleteOutputValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeleteOutputValueRowChangeEvent(ListDeleteOutputValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeleteOutputValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListInputVAlueRowChangeEvent : global::System.EventArgs {
            
            private ListInputVAlueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRowChangeEvent(ListInputVAlueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListCheckOutPutValueRowChangeEvent : global::System.EventArgs {
            
            private ListCheckOutPutValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCheckOutPutValueRowChangeEvent(ListCheckOutPutValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCheckOutPutValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591