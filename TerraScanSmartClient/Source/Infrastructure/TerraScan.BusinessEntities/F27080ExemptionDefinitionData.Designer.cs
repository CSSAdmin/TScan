//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F27080ExemptionDefinitionData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F27080ExemptionDefinitionData : global::System.Data.DataSet {
        
        private ListExemptionTypeTableDataTable tableListExemptionTypeTable;
        
        private GridLoadExemptionTypeTableDataTable tableGridLoadExemptionTypeTable;
        
        private GetSeniorExemptionTypeTableDataTable tableGetSeniorExemptionTypeTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F27080ExemptionDefinitionData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F27080ExemptionDefinitionData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListExemptionTypeTable"] != null)) {
                    base.Tables.Add(new ListExemptionTypeTableDataTable(ds.Tables["ListExemptionTypeTable"]));
                }
                if ((ds.Tables["GridLoadExemptionTypeTable"] != null)) {
                    base.Tables.Add(new GridLoadExemptionTypeTableDataTable(ds.Tables["GridLoadExemptionTypeTable"]));
                }
                if ((ds.Tables["GetSeniorExemptionTypeTable"] != null)) {
                    base.Tables.Add(new GetSeniorExemptionTypeTableDataTable(ds.Tables["GetSeniorExemptionTypeTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListExemptionTypeTableDataTable ListExemptionTypeTable {
            get {
                return this.tableListExemptionTypeTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GridLoadExemptionTypeTableDataTable GridLoadExemptionTypeTable {
            get {
                return this.tableGridLoadExemptionTypeTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSeniorExemptionTypeTableDataTable GetSeniorExemptionTypeTable {
            get {
                return this.tableGetSeniorExemptionTypeTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F27080ExemptionDefinitionData cln = ((F27080ExemptionDefinitionData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListExemptionTypeTable"] != null)) {
                    base.Tables.Add(new ListExemptionTypeTableDataTable(ds.Tables["ListExemptionTypeTable"]));
                }
                if ((ds.Tables["GridLoadExemptionTypeTable"] != null)) {
                    base.Tables.Add(new GridLoadExemptionTypeTableDataTable(ds.Tables["GridLoadExemptionTypeTable"]));
                }
                if ((ds.Tables["GetSeniorExemptionTypeTable"] != null)) {
                    base.Tables.Add(new GetSeniorExemptionTypeTableDataTable(ds.Tables["GetSeniorExemptionTypeTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListExemptionTypeTable = ((ListExemptionTypeTableDataTable)(base.Tables["ListExemptionTypeTable"]));
            if ((initTable == true)) {
                if ((this.tableListExemptionTypeTable != null)) {
                    this.tableListExemptionTypeTable.InitVars();
                }
            }
            this.tableGridLoadExemptionTypeTable = ((GridLoadExemptionTypeTableDataTable)(base.Tables["GridLoadExemptionTypeTable"]));
            if ((initTable == true)) {
                if ((this.tableGridLoadExemptionTypeTable != null)) {
                    this.tableGridLoadExemptionTypeTable.InitVars();
                }
            }
            this.tableGetSeniorExemptionTypeTable = ((GetSeniorExemptionTypeTableDataTable)(base.Tables["GetSeniorExemptionTypeTable"]));
            if ((initTable == true)) {
                if ((this.tableGetSeniorExemptionTypeTable != null)) {
                    this.tableGetSeniorExemptionTypeTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F27080ExemptionDefinitionData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F27080ExemptionDefinitionData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListExemptionTypeTable = new ListExemptionTypeTableDataTable();
            base.Tables.Add(this.tableListExemptionTypeTable);
            this.tableGridLoadExemptionTypeTable = new GridLoadExemptionTypeTableDataTable();
            base.Tables.Add(this.tableGridLoadExemptionTypeTable);
            this.tableGetSeniorExemptionTypeTable = new GetSeniorExemptionTypeTableDataTable();
            base.Tables.Add(this.tableGetSeniorExemptionTypeTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListExemptionTypeTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGridLoadExemptionTypeTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSeniorExemptionTypeTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F27080ExemptionDefinitionData ds = new F27080ExemptionDefinitionData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListExemptionTypeTableRowChangeEventHandler(object sender, ListExemptionTypeTableRowChangeEvent e);
        
        public delegate void GridLoadExemptionTypeTableRowChangeEventHandler(object sender, GridLoadExemptionTypeTableRowChangeEvent e);
        
        public delegate void GetSeniorExemptionTypeTableRowChangeEventHandler(object sender, GetSeniorExemptionTypeTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListExemptionTypeTableDataTable : global::System.Data.TypedTableBase<ListExemptionTypeTableRow> {
            
            private global::System.Data.DataColumn columnExemptionTypeID;
            
            private global::System.Data.DataColumn columnExemptionType;
            
            private global::System.Data.DataColumn columnIncomeMin;
            
            private global::System.Data.DataColumn columnIncomeMax;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeTableDataTable() {
                this.TableName = "ListExemptionTypeTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExemptionTypeTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListExemptionTypeTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionTypeIDColumn {
                get {
                    return this.columnExemptionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionTypeColumn {
                get {
                    return this.columnExemptionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomeMinColumn {
                get {
                    return this.columnIncomeMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomeMaxColumn {
                get {
                    return this.columnIncomeMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeTableRow this[int index] {
                get {
                    return ((ListExemptionTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event ListExemptionTypeTableRowChangeEventHandler ListExemptionTypeTableRowChanging;
            
            public event ListExemptionTypeTableRowChangeEventHandler ListExemptionTypeTableRowChanged;
            
            public event ListExemptionTypeTableRowChangeEventHandler ListExemptionTypeTableRowDeleting;
            
            public event ListExemptionTypeTableRowChangeEventHandler ListExemptionTypeTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListExemptionTypeTableRow(ListExemptionTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeTableRow AddListExemptionTypeTableRow(int ExemptionTypeID, string ExemptionType, int IncomeMin, int IncomeMax) {
                ListExemptionTypeTableRow rowListExemptionTypeTableRow = ((ListExemptionTypeTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExemptionTypeID,
                        ExemptionType,
                        IncomeMin,
                        IncomeMax};
                rowListExemptionTypeTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListExemptionTypeTableRow);
                return rowListExemptionTypeTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListExemptionTypeTableDataTable cln = ((ListExemptionTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListExemptionTypeTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExemptionTypeID = base.Columns["ExemptionTypeID"];
                this.columnExemptionType = base.Columns["ExemptionType"];
                this.columnIncomeMin = base.Columns["IncomeMin"];
                this.columnIncomeMax = base.Columns["IncomeMax"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExemptionTypeID = new global::System.Data.DataColumn("ExemptionTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionTypeID);
                this.columnExemptionType = new global::System.Data.DataColumn("ExemptionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionType);
                this.columnIncomeMin = new global::System.Data.DataColumn("IncomeMin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeMin);
                this.columnIncomeMax = new global::System.Data.DataColumn("IncomeMax", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeMax);
                this.columnExemptionTypeID.ReadOnly = true;
                this.columnExemptionType.ReadOnly = true;
                this.columnExemptionType.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeTableRow NewListExemptionTypeTableRow() {
                return ((ListExemptionTypeTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListExemptionTypeTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListExemptionTypeTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListExemptionTypeTableRowChanged != null)) {
                    this.ListExemptionTypeTableRowChanged(this, new ListExemptionTypeTableRowChangeEvent(((ListExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListExemptionTypeTableRowChanging != null)) {
                    this.ListExemptionTypeTableRowChanging(this, new ListExemptionTypeTableRowChangeEvent(((ListExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListExemptionTypeTableRowDeleted != null)) {
                    this.ListExemptionTypeTableRowDeleted(this, new ListExemptionTypeTableRowChangeEvent(((ListExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListExemptionTypeTableRowDeleting != null)) {
                    this.ListExemptionTypeTableRowDeleting(this, new ListExemptionTypeTableRowChangeEvent(((ListExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListExemptionTypeTableRow(ListExemptionTypeTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27080ExemptionDefinitionData ds = new F27080ExemptionDefinitionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListExemptionTypeTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GridLoadExemptionTypeTableDataTable : global::System.Data.TypedTableBase<GridLoadExemptionTypeTableRow> {
            
            private global::System.Data.DataColumn columnExemptionCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnExemptionPercent;
            
            private global::System.Data.DataColumn columnValueChangeMinimum;
            
            private global::System.Data.DataColumn columnValueChangeMaximum;
            
            private global::System.Data.DataColumn columnIncomeMin;
            
            private global::System.Data.DataColumn columnIncomeMax;
            
            private global::System.Data.DataColumn columnAbstractCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GridLoadExemptionTypeTableDataTable() {
                this.TableName = "GridLoadExemptionTypeTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GridLoadExemptionTypeTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GridLoadExemptionTypeTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionCodeColumn {
                get {
                    return this.columnExemptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionPercentColumn {
                get {
                    return this.columnExemptionPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueChangeMinimumColumn {
                get {
                    return this.columnValueChangeMinimum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueChangeMaximumColumn {
                get {
                    return this.columnValueChangeMaximum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomeMinColumn {
                get {
                    return this.columnIncomeMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncomeMaxColumn {
                get {
                    return this.columnIncomeMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbstractCodeColumn {
                get {
                    return this.columnAbstractCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GridLoadExemptionTypeTableRow this[int index] {
                get {
                    return ((GridLoadExemptionTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event GridLoadExemptionTypeTableRowChangeEventHandler GridLoadExemptionTypeTableRowChanging;
            
            public event GridLoadExemptionTypeTableRowChangeEventHandler GridLoadExemptionTypeTableRowChanged;
            
            public event GridLoadExemptionTypeTableRowChangeEventHandler GridLoadExemptionTypeTableRowDeleting;
            
            public event GridLoadExemptionTypeTableRowChangeEventHandler GridLoadExemptionTypeTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGridLoadExemptionTypeTableRow(GridLoadExemptionTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GridLoadExemptionTypeTableRow AddGridLoadExemptionTypeTableRow(string ExemptionCode, string Description, string ExemptionPercent, string ValueChangeMinimum, string ValueChangeMaximum, string IncomeMin, string IncomeMax, string AbstractCode) {
                GridLoadExemptionTypeTableRow rowGridLoadExemptionTypeTableRow = ((GridLoadExemptionTypeTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExemptionCode,
                        Description,
                        ExemptionPercent,
                        ValueChangeMinimum,
                        ValueChangeMaximum,
                        IncomeMin,
                        IncomeMax,
                        AbstractCode};
                rowGridLoadExemptionTypeTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGridLoadExemptionTypeTableRow);
                return rowGridLoadExemptionTypeTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GridLoadExemptionTypeTableDataTable cln = ((GridLoadExemptionTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GridLoadExemptionTypeTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExemptionCode = base.Columns["ExemptionCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnExemptionPercent = base.Columns["ExemptionPercent"];
                this.columnValueChangeMinimum = base.Columns["ValueChangeMinimum"];
                this.columnValueChangeMaximum = base.Columns["ValueChangeMaximum"];
                this.columnIncomeMin = base.Columns["IncomeMin"];
                this.columnIncomeMax = base.Columns["IncomeMax"];
                this.columnAbstractCode = base.Columns["AbstractCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExemptionCode = new global::System.Data.DataColumn("ExemptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnExemptionPercent = new global::System.Data.DataColumn("ExemptionPercent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionPercent);
                this.columnValueChangeMinimum = new global::System.Data.DataColumn("ValueChangeMinimum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueChangeMinimum);
                this.columnValueChangeMaximum = new global::System.Data.DataColumn("ValueChangeMaximum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueChangeMaximum);
                this.columnIncomeMin = new global::System.Data.DataColumn("IncomeMin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeMin);
                this.columnIncomeMax = new global::System.Data.DataColumn("IncomeMax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncomeMax);
                this.columnAbstractCode = new global::System.Data.DataColumn("AbstractCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbstractCode);
                this.columnExemptionCode.AllowDBNull = false;
                this.columnExemptionCode.MaxLength = 50;
                this.columnDescription.MaxLength = 250;
                this.columnAbstractCode.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GridLoadExemptionTypeTableRow NewGridLoadExemptionTypeTableRow() {
                return ((GridLoadExemptionTypeTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GridLoadExemptionTypeTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GridLoadExemptionTypeTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GridLoadExemptionTypeTableRowChanged != null)) {
                    this.GridLoadExemptionTypeTableRowChanged(this, new GridLoadExemptionTypeTableRowChangeEvent(((GridLoadExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GridLoadExemptionTypeTableRowChanging != null)) {
                    this.GridLoadExemptionTypeTableRowChanging(this, new GridLoadExemptionTypeTableRowChangeEvent(((GridLoadExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GridLoadExemptionTypeTableRowDeleted != null)) {
                    this.GridLoadExemptionTypeTableRowDeleted(this, new GridLoadExemptionTypeTableRowChangeEvent(((GridLoadExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GridLoadExemptionTypeTableRowDeleting != null)) {
                    this.GridLoadExemptionTypeTableRowDeleting(this, new GridLoadExemptionTypeTableRowChangeEvent(((GridLoadExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGridLoadExemptionTypeTableRow(GridLoadExemptionTypeTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27080ExemptionDefinitionData ds = new F27080ExemptionDefinitionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GridLoadExemptionTypeTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSeniorExemptionTypeTableDataTable : global::System.Data.TypedTableBase<GetSeniorExemptionTypeTableRow> {
            
            private global::System.Data.DataColumn columnExemptionID;
            
            private global::System.Data.DataColumn columnExemptionTypeID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSeniorExemptionTypeTableDataTable() {
                this.TableName = "GetSeniorExemptionTypeTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSeniorExemptionTypeTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSeniorExemptionTypeTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionIDColumn {
                get {
                    return this.columnExemptionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionTypeIDColumn {
                get {
                    return this.columnExemptionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSeniorExemptionTypeTableRow this[int index] {
                get {
                    return ((GetSeniorExemptionTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event GetSeniorExemptionTypeTableRowChangeEventHandler GetSeniorExemptionTypeTableRowChanging;
            
            public event GetSeniorExemptionTypeTableRowChangeEventHandler GetSeniorExemptionTypeTableRowChanged;
            
            public event GetSeniorExemptionTypeTableRowChangeEventHandler GetSeniorExemptionTypeTableRowDeleting;
            
            public event GetSeniorExemptionTypeTableRowChangeEventHandler GetSeniorExemptionTypeTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSeniorExemptionTypeTableRow(GetSeniorExemptionTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSeniorExemptionTypeTableRow AddGetSeniorExemptionTypeTableRow(int ExemptionID, int ExemptionTypeID, short RollYear, string Description) {
                GetSeniorExemptionTypeTableRow rowGetSeniorExemptionTypeTableRow = ((GetSeniorExemptionTypeTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExemptionID,
                        ExemptionTypeID,
                        RollYear,
                        Description};
                rowGetSeniorExemptionTypeTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSeniorExemptionTypeTableRow);
                return rowGetSeniorExemptionTypeTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSeniorExemptionTypeTableDataTable cln = ((GetSeniorExemptionTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSeniorExemptionTypeTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExemptionID = base.Columns["ExemptionID"];
                this.columnExemptionTypeID = base.Columns["ExemptionTypeID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExemptionID = new global::System.Data.DataColumn("ExemptionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionID);
                this.columnExemptionTypeID = new global::System.Data.DataColumn("ExemptionTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionTypeID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnExemptionID.ReadOnly = true;
                this.columnDescription.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSeniorExemptionTypeTableRow NewGetSeniorExemptionTypeTableRow() {
                return ((GetSeniorExemptionTypeTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSeniorExemptionTypeTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSeniorExemptionTypeTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSeniorExemptionTypeTableRowChanged != null)) {
                    this.GetSeniorExemptionTypeTableRowChanged(this, new GetSeniorExemptionTypeTableRowChangeEvent(((GetSeniorExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSeniorExemptionTypeTableRowChanging != null)) {
                    this.GetSeniorExemptionTypeTableRowChanging(this, new GetSeniorExemptionTypeTableRowChangeEvent(((GetSeniorExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSeniorExemptionTypeTableRowDeleted != null)) {
                    this.GetSeniorExemptionTypeTableRowDeleted(this, new GetSeniorExemptionTypeTableRowChangeEvent(((GetSeniorExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSeniorExemptionTypeTableRowDeleting != null)) {
                    this.GetSeniorExemptionTypeTableRowDeleting(this, new GetSeniorExemptionTypeTableRowChangeEvent(((GetSeniorExemptionTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSeniorExemptionTypeTableRow(GetSeniorExemptionTypeTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27080ExemptionDefinitionData ds = new F27080ExemptionDefinitionData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSeniorExemptionTypeTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListExemptionTypeTableRow : global::System.Data.DataRow {
            
            private ListExemptionTypeTableDataTable tableListExemptionTypeTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExemptionTypeTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListExemptionTypeTable = ((ListExemptionTypeTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListExemptionTypeTable.ExemptionTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionTypeID\' in table \'ListExemptionTypeTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListExemptionTypeTable.ExemptionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionType {
                get {
                    try {
                        return ((string)(this[this.tableListExemptionTypeTable.ExemptionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionType\' in table \'ListExemptionTypeTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListExemptionTypeTable.ExemptionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IncomeMin {
                get {
                    try {
                        return ((int)(this[this.tableListExemptionTypeTable.IncomeMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomeMin\' in table \'ListExemptionTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExemptionTypeTable.IncomeMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IncomeMax {
                get {
                    try {
                        return ((int)(this[this.tableListExemptionTypeTable.IncomeMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomeMax\' in table \'ListExemptionTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExemptionTypeTable.IncomeMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionTypeIDNull() {
                return this.IsNull(this.tableListExemptionTypeTable.ExemptionTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionTypeIDNull() {
                this[this.tableListExemptionTypeTable.ExemptionTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionTypeNull() {
                return this.IsNull(this.tableListExemptionTypeTable.ExemptionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionTypeNull() {
                this[this.tableListExemptionTypeTable.ExemptionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomeMinNull() {
                return this.IsNull(this.tableListExemptionTypeTable.IncomeMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomeMinNull() {
                this[this.tableListExemptionTypeTable.IncomeMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomeMaxNull() {
                return this.IsNull(this.tableListExemptionTypeTable.IncomeMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomeMaxNull() {
                this[this.tableListExemptionTypeTable.IncomeMaxColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GridLoadExemptionTypeTableRow : global::System.Data.DataRow {
            
            private GridLoadExemptionTypeTableDataTable tableGridLoadExemptionTypeTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GridLoadExemptionTypeTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGridLoadExemptionTypeTable = ((GridLoadExemptionTypeTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionCode {
                get {
                    return ((string)(this[this.tableGridLoadExemptionTypeTable.ExemptionCodeColumn]));
                }
                set {
                    this[this.tableGridLoadExemptionTypeTable.ExemptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGridLoadExemptionTypeTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GridLoadExemptionTypeTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGridLoadExemptionTypeTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionPercent {
                get {
                    try {
                        return ((string)(this[this.tableGridLoadExemptionTypeTable.ExemptionPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionPercent\' in table \'GridLoadExemptionTypeTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGridLoadExemptionTypeTable.ExemptionPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueChangeMinimum {
                get {
                    try {
                        return ((string)(this[this.tableGridLoadExemptionTypeTable.ValueChangeMinimumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueChangeMinimum\' in table \'GridLoadExemptionTypeTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGridLoadExemptionTypeTable.ValueChangeMinimumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueChangeMaximum {
                get {
                    try {
                        return ((string)(this[this.tableGridLoadExemptionTypeTable.ValueChangeMaximumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueChangeMaximum\' in table \'GridLoadExemptionTypeTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGridLoadExemptionTypeTable.ValueChangeMaximumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncomeMin {
                get {
                    try {
                        return ((string)(this[this.tableGridLoadExemptionTypeTable.IncomeMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomeMin\' in table \'GridLoadExemptionTypeTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGridLoadExemptionTypeTable.IncomeMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncomeMax {
                get {
                    try {
                        return ((string)(this[this.tableGridLoadExemptionTypeTable.IncomeMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncomeMax\' in table \'GridLoadExemptionTypeTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGridLoadExemptionTypeTable.IncomeMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AbstractCode {
                get {
                    try {
                        return ((string)(this[this.tableGridLoadExemptionTypeTable.AbstractCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AbstractCode\' in table \'GridLoadExemptionTypeTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGridLoadExemptionTypeTable.AbstractCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGridLoadExemptionTypeTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGridLoadExemptionTypeTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionPercentNull() {
                return this.IsNull(this.tableGridLoadExemptionTypeTable.ExemptionPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionPercentNull() {
                this[this.tableGridLoadExemptionTypeTable.ExemptionPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueChangeMinimumNull() {
                return this.IsNull(this.tableGridLoadExemptionTypeTable.ValueChangeMinimumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueChangeMinimumNull() {
                this[this.tableGridLoadExemptionTypeTable.ValueChangeMinimumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueChangeMaximumNull() {
                return this.IsNull(this.tableGridLoadExemptionTypeTable.ValueChangeMaximumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueChangeMaximumNull() {
                this[this.tableGridLoadExemptionTypeTable.ValueChangeMaximumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomeMinNull() {
                return this.IsNull(this.tableGridLoadExemptionTypeTable.IncomeMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomeMinNull() {
                this[this.tableGridLoadExemptionTypeTable.IncomeMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncomeMaxNull() {
                return this.IsNull(this.tableGridLoadExemptionTypeTable.IncomeMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncomeMaxNull() {
                this[this.tableGridLoadExemptionTypeTable.IncomeMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbstractCodeNull() {
                return this.IsNull(this.tableGridLoadExemptionTypeTable.AbstractCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbstractCodeNull() {
                this[this.tableGridLoadExemptionTypeTable.AbstractCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSeniorExemptionTypeTableRow : global::System.Data.DataRow {
            
            private GetSeniorExemptionTypeTableDataTable tableGetSeniorExemptionTypeTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSeniorExemptionTypeTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSeniorExemptionTypeTable = ((GetSeniorExemptionTypeTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionID {
                get {
                    try {
                        return ((int)(this[this.tableGetSeniorExemptionTypeTable.ExemptionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionID\' in table \'GetSeniorExemptionTypeTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetSeniorExemptionTypeTable.ExemptionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetSeniorExemptionTypeTable.ExemptionTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionTypeID\' in table \'GetSeniorExemptionTypeTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSeniorExemptionTypeTable.ExemptionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableGetSeniorExemptionTypeTable.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetSeniorExemptionTypeTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetSeniorExemptionTypeTable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetSeniorExemptionTypeTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GetSeniorExemptionTypeTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetSeniorExemptionTypeTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionIDNull() {
                return this.IsNull(this.tableGetSeniorExemptionTypeTable.ExemptionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionIDNull() {
                this[this.tableGetSeniorExemptionTypeTable.ExemptionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionTypeIDNull() {
                return this.IsNull(this.tableGetSeniorExemptionTypeTable.ExemptionTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionTypeIDNull() {
                this[this.tableGetSeniorExemptionTypeTable.ExemptionTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetSeniorExemptionTypeTable.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetSeniorExemptionTypeTable.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetSeniorExemptionTypeTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetSeniorExemptionTypeTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListExemptionTypeTableRowChangeEvent : global::System.EventArgs {
            
            private ListExemptionTypeTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeTableRowChangeEvent(ListExemptionTypeTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExemptionTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GridLoadExemptionTypeTableRowChangeEvent : global::System.EventArgs {
            
            private GridLoadExemptionTypeTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GridLoadExemptionTypeTableRowChangeEvent(GridLoadExemptionTypeTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GridLoadExemptionTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSeniorExemptionTypeTableRowChangeEvent : global::System.EventArgs {
            
            private GetSeniorExemptionTypeTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSeniorExemptionTypeTableRowChangeEvent(GetSeniorExemptionTypeTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSeniorExemptionTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591