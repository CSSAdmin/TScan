//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GDocEventHeaderData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GDocEventHeaderData : global::System.Data.DataSet {
        
        private ListGDocEventHeaderStatusDataTable tableListGDocEventHeaderStatus;
        
        private GetGDocEventHeaderDataTable tableGetGDocEventHeader;
        
        private SaveGDocEventHeaderDataTable tableSaveGDocEventHeader;
        
        private GetMasterFormNoDataTable tableGetMasterFormNo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GDocEventHeaderData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GDocEventHeaderData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListGDocEventHeaderStatus"] != null)) {
                    base.Tables.Add(new ListGDocEventHeaderStatusDataTable(ds.Tables["ListGDocEventHeaderStatus"]));
                }
                if ((ds.Tables["GetGDocEventHeader"] != null)) {
                    base.Tables.Add(new GetGDocEventHeaderDataTable(ds.Tables["GetGDocEventHeader"]));
                }
                if ((ds.Tables["SaveGDocEventHeader"] != null)) {
                    base.Tables.Add(new SaveGDocEventHeaderDataTable(ds.Tables["SaveGDocEventHeader"]));
                }
                if ((ds.Tables["GetMasterFormNo"] != null)) {
                    base.Tables.Add(new GetMasterFormNoDataTable(ds.Tables["GetMasterFormNo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListGDocEventHeaderStatusDataTable ListGDocEventHeaderStatus {
            get {
                return this.tableListGDocEventHeaderStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetGDocEventHeaderDataTable GetGDocEventHeader {
            get {
                return this.tableGetGDocEventHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveGDocEventHeaderDataTable SaveGDocEventHeader {
            get {
                return this.tableSaveGDocEventHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMasterFormNoDataTable GetMasterFormNo {
            get {
                return this.tableGetMasterFormNo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GDocEventHeaderData cln = ((GDocEventHeaderData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListGDocEventHeaderStatus"] != null)) {
                    base.Tables.Add(new ListGDocEventHeaderStatusDataTable(ds.Tables["ListGDocEventHeaderStatus"]));
                }
                if ((ds.Tables["GetGDocEventHeader"] != null)) {
                    base.Tables.Add(new GetGDocEventHeaderDataTable(ds.Tables["GetGDocEventHeader"]));
                }
                if ((ds.Tables["SaveGDocEventHeader"] != null)) {
                    base.Tables.Add(new SaveGDocEventHeaderDataTable(ds.Tables["SaveGDocEventHeader"]));
                }
                if ((ds.Tables["GetMasterFormNo"] != null)) {
                    base.Tables.Add(new GetMasterFormNoDataTable(ds.Tables["GetMasterFormNo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListGDocEventHeaderStatus = ((ListGDocEventHeaderStatusDataTable)(base.Tables["ListGDocEventHeaderStatus"]));
            if ((initTable == true)) {
                if ((this.tableListGDocEventHeaderStatus != null)) {
                    this.tableListGDocEventHeaderStatus.InitVars();
                }
            }
            this.tableGetGDocEventHeader = ((GetGDocEventHeaderDataTable)(base.Tables["GetGDocEventHeader"]));
            if ((initTable == true)) {
                if ((this.tableGetGDocEventHeader != null)) {
                    this.tableGetGDocEventHeader.InitVars();
                }
            }
            this.tableSaveGDocEventHeader = ((SaveGDocEventHeaderDataTable)(base.Tables["SaveGDocEventHeader"]));
            if ((initTable == true)) {
                if ((this.tableSaveGDocEventHeader != null)) {
                    this.tableSaveGDocEventHeader.InitVars();
                }
            }
            this.tableGetMasterFormNo = ((GetMasterFormNoDataTable)(base.Tables["GetMasterFormNo"]));
            if ((initTable == true)) {
                if ((this.tableGetMasterFormNo != null)) {
                    this.tableGetMasterFormNo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GDocEventHeaderData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GDocEventHeaderData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListGDocEventHeaderStatus = new ListGDocEventHeaderStatusDataTable();
            base.Tables.Add(this.tableListGDocEventHeaderStatus);
            this.tableGetGDocEventHeader = new GetGDocEventHeaderDataTable();
            base.Tables.Add(this.tableGetGDocEventHeader);
            this.tableSaveGDocEventHeader = new SaveGDocEventHeaderDataTable();
            base.Tables.Add(this.tableSaveGDocEventHeader);
            this.tableGetMasterFormNo = new GetMasterFormNoDataTable();
            base.Tables.Add(this.tableGetMasterFormNo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListGDocEventHeaderStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetGDocEventHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveGDocEventHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMasterFormNo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GDocEventHeaderData ds = new GDocEventHeaderData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListGDocEventHeaderStatusRowChangeEventHandler(object sender, ListGDocEventHeaderStatusRowChangeEvent e);
        
        public delegate void GetGDocEventHeaderRowChangeEventHandler(object sender, GetGDocEventHeaderRowChangeEvent e);
        
        public delegate void SaveGDocEventHeaderRowChangeEventHandler(object sender, SaveGDocEventHeaderRowChangeEvent e);
        
        public delegate void GetMasterFormNoRowChangeEventHandler(object sender, GetMasterFormNoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListGDocEventHeaderStatusDataTable : global::System.Data.TypedTableBase<ListGDocEventHeaderStatusRow> {
            
            private global::System.Data.DataColumn columnStatusID;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnStatusColor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGDocEventHeaderStatusDataTable() {
                this.TableName = "ListGDocEventHeaderStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGDocEventHeaderStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListGDocEventHeaderStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusIDColumn {
                get {
                    return this.columnStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColorColumn {
                get {
                    return this.columnStatusColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGDocEventHeaderStatusRow this[int index] {
                get {
                    return ((ListGDocEventHeaderStatusRow)(this.Rows[index]));
                }
            }
            
            public event ListGDocEventHeaderStatusRowChangeEventHandler ListGDocEventHeaderStatusRowChanging;
            
            public event ListGDocEventHeaderStatusRowChangeEventHandler ListGDocEventHeaderStatusRowChanged;
            
            public event ListGDocEventHeaderStatusRowChangeEventHandler ListGDocEventHeaderStatusRowDeleting;
            
            public event ListGDocEventHeaderStatusRowChangeEventHandler ListGDocEventHeaderStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListGDocEventHeaderStatusRow(ListGDocEventHeaderStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGDocEventHeaderStatusRow AddListGDocEventHeaderStatusRow(int StatusID, string Status, string StatusColor) {
                ListGDocEventHeaderStatusRow rowListGDocEventHeaderStatusRow = ((ListGDocEventHeaderStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatusID,
                        Status,
                        StatusColor};
                rowListGDocEventHeaderStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListGDocEventHeaderStatusRow);
                return rowListGDocEventHeaderStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGDocEventHeaderStatusRow FindByStatusID(int StatusID) {
                return ((ListGDocEventHeaderStatusRow)(this.Rows.Find(new object[] {
                            StatusID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListGDocEventHeaderStatusDataTable cln = ((ListGDocEventHeaderStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListGDocEventHeaderStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatusID = base.Columns["StatusID"];
                this.columnStatus = base.Columns["Status"];
                this.columnStatusColor = base.Columns["StatusColor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatusID = new global::System.Data.DataColumn("StatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnStatusColor = new global::System.Data.DataColumn("StatusColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusColor);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStatusID}, true));
                this.columnStatusID.AllowDBNull = false;
                this.columnStatusID.Unique = true;
                this.columnStatus.MaxLength = 50;
                this.columnStatusColor.ReadOnly = true;
                this.columnStatusColor.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGDocEventHeaderStatusRow NewListGDocEventHeaderStatusRow() {
                return ((ListGDocEventHeaderStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListGDocEventHeaderStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListGDocEventHeaderStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListGDocEventHeaderStatusRowChanged != null)) {
                    this.ListGDocEventHeaderStatusRowChanged(this, new ListGDocEventHeaderStatusRowChangeEvent(((ListGDocEventHeaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListGDocEventHeaderStatusRowChanging != null)) {
                    this.ListGDocEventHeaderStatusRowChanging(this, new ListGDocEventHeaderStatusRowChangeEvent(((ListGDocEventHeaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListGDocEventHeaderStatusRowDeleted != null)) {
                    this.ListGDocEventHeaderStatusRowDeleted(this, new ListGDocEventHeaderStatusRowChangeEvent(((ListGDocEventHeaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListGDocEventHeaderStatusRowDeleting != null)) {
                    this.ListGDocEventHeaderStatusRowDeleting(this, new ListGDocEventHeaderStatusRowChangeEvent(((ListGDocEventHeaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListGDocEventHeaderStatusRow(ListGDocEventHeaderStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GDocEventHeaderData ds = new GDocEventHeaderData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListGDocEventHeaderStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetGDocEventHeaderDataTable : global::System.Data.TypedTableBase<GetGDocEventHeaderRow> {
            
            private global::System.Data.DataColumn columnEventType;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnStatusColor;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnComplete;
            
            private global::System.Data.DataColumn columnWorkOrder;
            
            private global::System.Data.DataColumn columnEvent;
            
            private global::System.Data.DataColumn columnStatusID;
            
            private global::System.Data.DataColumn columnNoOfChildren;
            
            private global::System.Data.DataColumn columnIsWorkOrder;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFeatureID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGDocEventHeaderDataTable() {
                this.TableName = "GetGDocEventHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetGDocEventHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetGDocEventHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventTypeColumn {
                get {
                    return this.columnEventType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColorColumn {
                get {
                    return this.columnStatusColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteColumn {
                get {
                    return this.columnComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkOrderColumn {
                get {
                    return this.columnWorkOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventColumn {
                get {
                    return this.columnEvent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusIDColumn {
                get {
                    return this.columnStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoOfChildrenColumn {
                get {
                    return this.columnNoOfChildren;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsWorkOrderColumn {
                get {
                    return this.columnIsWorkOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGDocEventHeaderRow this[int index] {
                get {
                    return ((GetGDocEventHeaderRow)(this.Rows[index]));
                }
            }
            
            public event GetGDocEventHeaderRowChangeEventHandler GetGDocEventHeaderRowChanging;
            
            public event GetGDocEventHeaderRowChangeEventHandler GetGDocEventHeaderRowChanged;
            
            public event GetGDocEventHeaderRowChangeEventHandler GetGDocEventHeaderRowDeleting;
            
            public event GetGDocEventHeaderRowChangeEventHandler GetGDocEventHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetGDocEventHeaderRow(GetGDocEventHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGDocEventHeaderRow AddGetGDocEventHeaderRow(string EventType, int FeatureClassID, string Status, string StatusColor, string EventDate, bool Complete, int WorkOrder, string Event, int StatusID, int NoOfChildren, string IsWorkOrder, string EndDate, int FeatureID) {
                GetGDocEventHeaderRow rowGetGDocEventHeaderRow = ((GetGDocEventHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EventType,
                        FeatureClassID,
                        Status,
                        StatusColor,
                        EventDate,
                        Complete,
                        WorkOrder,
                        Event,
                        StatusID,
                        NoOfChildren,
                        IsWorkOrder,
                        EndDate,
                        FeatureID};
                rowGetGDocEventHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetGDocEventHeaderRow);
                return rowGetGDocEventHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetGDocEventHeaderDataTable cln = ((GetGDocEventHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetGDocEventHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventType = base.Columns["EventType"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnStatus = base.Columns["Status"];
                this.columnStatusColor = base.Columns["StatusColor"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnComplete = base.Columns["Complete"];
                this.columnWorkOrder = base.Columns["WorkOrder"];
                this.columnEvent = base.Columns["Event"];
                this.columnStatusID = base.Columns["StatusID"];
                this.columnNoOfChildren = base.Columns["NoOfChildren"];
                this.columnIsWorkOrder = base.Columns["IsWorkOrder"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFeatureID = base.Columns["FeatureID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventType = new global::System.Data.DataColumn("EventType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventType);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnStatusColor = new global::System.Data.DataColumn("StatusColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusColor);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnComplete = new global::System.Data.DataColumn("Complete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComplete);
                this.columnWorkOrder = new global::System.Data.DataColumn("WorkOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkOrder);
                this.columnEvent = new global::System.Data.DataColumn("Event", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent);
                this.columnStatusID = new global::System.Data.DataColumn("StatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusID);
                this.columnNoOfChildren = new global::System.Data.DataColumn("NoOfChildren", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoOfChildren);
                this.columnIsWorkOrder = new global::System.Data.DataColumn("IsWorkOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsWorkOrder);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFeatureID = new global::System.Data.DataColumn("FeatureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureID);
                this.columnEventType.AllowDBNull = false;
                this.columnEventType.MaxLength = 50;
                this.columnStatus.MaxLength = 50;
                this.columnStatusColor.MaxLength = 50;
                this.columnEventDate.AllowDBNull = false;
                this.columnEvent.ReadOnly = true;
                this.columnEvent.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGDocEventHeaderRow NewGetGDocEventHeaderRow() {
                return ((GetGDocEventHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetGDocEventHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetGDocEventHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetGDocEventHeaderRowChanged != null)) {
                    this.GetGDocEventHeaderRowChanged(this, new GetGDocEventHeaderRowChangeEvent(((GetGDocEventHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetGDocEventHeaderRowChanging != null)) {
                    this.GetGDocEventHeaderRowChanging(this, new GetGDocEventHeaderRowChangeEvent(((GetGDocEventHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetGDocEventHeaderRowDeleted != null)) {
                    this.GetGDocEventHeaderRowDeleted(this, new GetGDocEventHeaderRowChangeEvent(((GetGDocEventHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetGDocEventHeaderRowDeleting != null)) {
                    this.GetGDocEventHeaderRowDeleting(this, new GetGDocEventHeaderRowChangeEvent(((GetGDocEventHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetGDocEventHeaderRow(GetGDocEventHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GDocEventHeaderData ds = new GDocEventHeaderData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetGDocEventHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveGDocEventHeaderDataTable : global::System.Data.TypedTableBase<SaveGDocEventHeaderRow> {
            
            private global::System.Data.DataColumn columnEvent;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnStatusID;
            
            private global::System.Data.DataColumn columnWOID;
            
            private global::System.Data.DataColumn columnComplete;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveGDocEventHeaderDataTable() {
                this.TableName = "SaveGDocEventHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveGDocEventHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveGDocEventHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventColumn {
                get {
                    return this.columnEvent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusIDColumn {
                get {
                    return this.columnStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WOIDColumn {
                get {
                    return this.columnWOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteColumn {
                get {
                    return this.columnComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveGDocEventHeaderRow this[int index] {
                get {
                    return ((SaveGDocEventHeaderRow)(this.Rows[index]));
                }
            }
            
            public event SaveGDocEventHeaderRowChangeEventHandler SaveGDocEventHeaderRowChanging;
            
            public event SaveGDocEventHeaderRowChangeEventHandler SaveGDocEventHeaderRowChanged;
            
            public event SaveGDocEventHeaderRowChangeEventHandler SaveGDocEventHeaderRowDeleting;
            
            public event SaveGDocEventHeaderRowChangeEventHandler SaveGDocEventHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveGDocEventHeaderRow(SaveGDocEventHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveGDocEventHeaderRow AddSaveGDocEventHeaderRow(string Event, string EventDate, int StatusID, int WOID, bool Complete, int EventID, string EndDate) {
                SaveGDocEventHeaderRow rowSaveGDocEventHeaderRow = ((SaveGDocEventHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Event,
                        EventDate,
                        StatusID,
                        WOID,
                        Complete,
                        EventID,
                        EndDate};
                rowSaveGDocEventHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveGDocEventHeaderRow);
                return rowSaveGDocEventHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveGDocEventHeaderDataTable cln = ((SaveGDocEventHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveGDocEventHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEvent = base.Columns["Event"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnStatusID = base.Columns["StatusID"];
                this.columnWOID = base.Columns["WOID"];
                this.columnComplete = base.Columns["Complete"];
                this.columnEventID = base.Columns["EventID"];
                this.columnEndDate = base.Columns["EndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEvent = new global::System.Data.DataColumn("Event", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnStatusID = new global::System.Data.DataColumn("StatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusID);
                this.columnWOID = new global::System.Data.DataColumn("WOID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWOID);
                this.columnComplete = new global::System.Data.DataColumn("Complete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComplete);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnEvent.ReadOnly = true;
                this.columnEvent.MaxLength = 100;
                this.columnWOID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveGDocEventHeaderRow NewSaveGDocEventHeaderRow() {
                return ((SaveGDocEventHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveGDocEventHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveGDocEventHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveGDocEventHeaderRowChanged != null)) {
                    this.SaveGDocEventHeaderRowChanged(this, new SaveGDocEventHeaderRowChangeEvent(((SaveGDocEventHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveGDocEventHeaderRowChanging != null)) {
                    this.SaveGDocEventHeaderRowChanging(this, new SaveGDocEventHeaderRowChangeEvent(((SaveGDocEventHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveGDocEventHeaderRowDeleted != null)) {
                    this.SaveGDocEventHeaderRowDeleted(this, new SaveGDocEventHeaderRowChangeEvent(((SaveGDocEventHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveGDocEventHeaderRowDeleting != null)) {
                    this.SaveGDocEventHeaderRowDeleting(this, new SaveGDocEventHeaderRowChangeEvent(((SaveGDocEventHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveGDocEventHeaderRow(SaveGDocEventHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GDocEventHeaderData ds = new GDocEventHeaderData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveGDocEventHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMasterFormNoDataTable : global::System.Data.TypedTableBase<GetMasterFormNoRow> {
            
            private global::System.Data.DataColumn columnMasterForm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMasterFormNoDataTable() {
                this.TableName = "GetMasterFormNo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMasterFormNoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMasterFormNoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MasterFormColumn {
                get {
                    return this.columnMasterForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMasterFormNoRow this[int index] {
                get {
                    return ((GetMasterFormNoRow)(this.Rows[index]));
                }
            }
            
            public event GetMasterFormNoRowChangeEventHandler GetMasterFormNoRowChanging;
            
            public event GetMasterFormNoRowChangeEventHandler GetMasterFormNoRowChanged;
            
            public event GetMasterFormNoRowChangeEventHandler GetMasterFormNoRowDeleting;
            
            public event GetMasterFormNoRowChangeEventHandler GetMasterFormNoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMasterFormNoRow(GetMasterFormNoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMasterFormNoRow AddGetMasterFormNoRow(string MasterForm) {
                GetMasterFormNoRow rowGetMasterFormNoRow = ((GetMasterFormNoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MasterForm};
                rowGetMasterFormNoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMasterFormNoRow);
                return rowGetMasterFormNoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMasterFormNoDataTable cln = ((GetMasterFormNoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMasterFormNoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMasterForm = base.Columns["MasterForm"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMasterForm = new global::System.Data.DataColumn("MasterForm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMasterForm);
                this.columnMasterForm.ReadOnly = true;
                this.columnMasterForm.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMasterFormNoRow NewGetMasterFormNoRow() {
                return ((GetMasterFormNoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMasterFormNoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMasterFormNoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMasterFormNoRowChanged != null)) {
                    this.GetMasterFormNoRowChanged(this, new GetMasterFormNoRowChangeEvent(((GetMasterFormNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMasterFormNoRowChanging != null)) {
                    this.GetMasterFormNoRowChanging(this, new GetMasterFormNoRowChangeEvent(((GetMasterFormNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMasterFormNoRowDeleted != null)) {
                    this.GetMasterFormNoRowDeleted(this, new GetMasterFormNoRowChangeEvent(((GetMasterFormNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMasterFormNoRowDeleting != null)) {
                    this.GetMasterFormNoRowDeleting(this, new GetMasterFormNoRowChangeEvent(((GetMasterFormNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMasterFormNoRow(GetMasterFormNoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GDocEventHeaderData ds = new GDocEventHeaderData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMasterFormNoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListGDocEventHeaderStatusRow : global::System.Data.DataRow {
            
            private ListGDocEventHeaderStatusDataTable tableListGDocEventHeaderStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGDocEventHeaderStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListGDocEventHeaderStatus = ((ListGDocEventHeaderStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatusID {
                get {
                    return ((int)(this[this.tableListGDocEventHeaderStatus.StatusIDColumn]));
                }
                set {
                    this[this.tableListGDocEventHeaderStatus.StatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableListGDocEventHeaderStatus.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'ListGDocEventHeaderStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGDocEventHeaderStatus.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatusColor {
                get {
                    try {
                        return ((string)(this[this.tableListGDocEventHeaderStatus.StatusColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusColor\' in table \'ListGDocEventHeaderStatus\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListGDocEventHeaderStatus.StatusColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableListGDocEventHeaderStatus.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableListGDocEventHeaderStatus.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusColorNull() {
                return this.IsNull(this.tableListGDocEventHeaderStatus.StatusColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusColorNull() {
                this[this.tableListGDocEventHeaderStatus.StatusColorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetGDocEventHeaderRow : global::System.Data.DataRow {
            
            private GetGDocEventHeaderDataTable tableGetGDocEventHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetGDocEventHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetGDocEventHeader = ((GetGDocEventHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventType {
                get {
                    return ((string)(this[this.tableGetGDocEventHeader.EventTypeColumn]));
                }
                set {
                    this[this.tableGetGDocEventHeader.EventTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableGetGDocEventHeader.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableGetGDocEventHeader.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatusColor {
                get {
                    try {
                        return ((string)(this[this.tableGetGDocEventHeader.StatusColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusColor\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.StatusColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventDate {
                get {
                    return ((string)(this[this.tableGetGDocEventHeader.EventDateColumn]));
                }
                set {
                    this[this.tableGetGDocEventHeader.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Complete {
                get {
                    try {
                        return ((bool)(this[this.tableGetGDocEventHeader.CompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Complete\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.CompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkOrder {
                get {
                    try {
                        return ((int)(this[this.tableGetGDocEventHeader.WorkOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkOrder\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.WorkOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Event {
                get {
                    try {
                        return ((string)(this[this.tableGetGDocEventHeader.EventColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Event\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.EventColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatusID {
                get {
                    try {
                        return ((int)(this[this.tableGetGDocEventHeader.StatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusID\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.StatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NoOfChildren {
                get {
                    try {
                        return ((int)(this[this.tableGetGDocEventHeader.NoOfChildrenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoOfChildren\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.NoOfChildrenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsWorkOrder {
                get {
                    try {
                        return ((string)(this[this.tableGetGDocEventHeader.IsWorkOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsWorkOrder\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.IsWorkOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndDate {
                get {
                    try {
                        return ((string)(this[this.tableGetGDocEventHeader.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureID {
                get {
                    try {
                        return ((int)(this[this.tableGetGDocEventHeader.FeatureIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureID\' in table \'GetGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetGDocEventHeader.FeatureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableGetGDocEventHeader.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableGetGDocEventHeader.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableGetGDocEventHeader.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableGetGDocEventHeader.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusColorNull() {
                return this.IsNull(this.tableGetGDocEventHeader.StatusColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusColorNull() {
                this[this.tableGetGDocEventHeader.StatusColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteNull() {
                return this.IsNull(this.tableGetGDocEventHeader.CompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteNull() {
                this[this.tableGetGDocEventHeader.CompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkOrderNull() {
                return this.IsNull(this.tableGetGDocEventHeader.WorkOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkOrderNull() {
                this[this.tableGetGDocEventHeader.WorkOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventNull() {
                return this.IsNull(this.tableGetGDocEventHeader.EventColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventNull() {
                this[this.tableGetGDocEventHeader.EventColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusIDNull() {
                return this.IsNull(this.tableGetGDocEventHeader.StatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusIDNull() {
                this[this.tableGetGDocEventHeader.StatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoOfChildrenNull() {
                return this.IsNull(this.tableGetGDocEventHeader.NoOfChildrenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoOfChildrenNull() {
                this[this.tableGetGDocEventHeader.NoOfChildrenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsWorkOrderNull() {
                return this.IsNull(this.tableGetGDocEventHeader.IsWorkOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsWorkOrderNull() {
                this[this.tableGetGDocEventHeader.IsWorkOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableGetGDocEventHeader.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableGetGDocEventHeader.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureIDNull() {
                return this.IsNull(this.tableGetGDocEventHeader.FeatureIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureIDNull() {
                this[this.tableGetGDocEventHeader.FeatureIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveGDocEventHeaderRow : global::System.Data.DataRow {
            
            private SaveGDocEventHeaderDataTable tableSaveGDocEventHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveGDocEventHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveGDocEventHeader = ((SaveGDocEventHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Event {
                get {
                    try {
                        return ((string)(this[this.tableSaveGDocEventHeader.EventColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Event\' in table \'SaveGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveGDocEventHeader.EventColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventDate {
                get {
                    try {
                        return ((string)(this[this.tableSaveGDocEventHeader.EventDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDate\' in table \'SaveGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveGDocEventHeader.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatusID {
                get {
                    try {
                        return ((int)(this[this.tableSaveGDocEventHeader.StatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusID\' in table \'SaveGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveGDocEventHeader.StatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WOID {
                get {
                    try {
                        return ((int)(this[this.tableSaveGDocEventHeader.WOIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WOID\' in table \'SaveGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveGDocEventHeader.WOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Complete {
                get {
                    try {
                        return ((bool)(this[this.tableSaveGDocEventHeader.CompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Complete\' in table \'SaveGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveGDocEventHeader.CompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tableSaveGDocEventHeader.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'SaveGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveGDocEventHeader.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndDate {
                get {
                    try {
                        return ((string)(this[this.tableSaveGDocEventHeader.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'SaveGDocEventHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveGDocEventHeader.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventNull() {
                return this.IsNull(this.tableSaveGDocEventHeader.EventColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventNull() {
                this[this.tableSaveGDocEventHeader.EventColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDateNull() {
                return this.IsNull(this.tableSaveGDocEventHeader.EventDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDateNull() {
                this[this.tableSaveGDocEventHeader.EventDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusIDNull() {
                return this.IsNull(this.tableSaveGDocEventHeader.StatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusIDNull() {
                this[this.tableSaveGDocEventHeader.StatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWOIDNull() {
                return this.IsNull(this.tableSaveGDocEventHeader.WOIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWOIDNull() {
                this[this.tableSaveGDocEventHeader.WOIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteNull() {
                return this.IsNull(this.tableSaveGDocEventHeader.CompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteNull() {
                this[this.tableSaveGDocEventHeader.CompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tableSaveGDocEventHeader.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tableSaveGDocEventHeader.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableSaveGDocEventHeader.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableSaveGDocEventHeader.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMasterFormNoRow : global::System.Data.DataRow {
            
            private GetMasterFormNoDataTable tableGetMasterFormNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMasterFormNoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMasterFormNo = ((GetMasterFormNoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MasterForm {
                get {
                    try {
                        return ((string)(this[this.tableGetMasterFormNo.MasterFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MasterForm\' in table \'GetMasterFormNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMasterFormNo.MasterFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMasterFormNull() {
                return this.IsNull(this.tableGetMasterFormNo.MasterFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMasterFormNull() {
                this[this.tableGetMasterFormNo.MasterFormColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListGDocEventHeaderStatusRowChangeEvent : global::System.EventArgs {
            
            private ListGDocEventHeaderStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGDocEventHeaderStatusRowChangeEvent(ListGDocEventHeaderStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGDocEventHeaderStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetGDocEventHeaderRowChangeEvent : global::System.EventArgs {
            
            private GetGDocEventHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGDocEventHeaderRowChangeEvent(GetGDocEventHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetGDocEventHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveGDocEventHeaderRowChangeEvent : global::System.EventArgs {
            
            private SaveGDocEventHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveGDocEventHeaderRowChangeEvent(SaveGDocEventHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveGDocEventHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMasterFormNoRowChangeEvent : global::System.EventArgs {
            
            private GetMasterFormNoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMasterFormNoRowChangeEvent(GetMasterFormNoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMasterFormNoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591