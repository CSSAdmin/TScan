//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F84721WaterValvePropertiesData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F84721WaterValvePropertiesData : global::System.Data.DataSet {
        
        private GetWaterValvePropertiesDataTable tableGetWaterValveProperties;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F84721WaterValvePropertiesData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F84721WaterValvePropertiesData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetWaterValveProperties"] != null)) {
                    base.Tables.Add(new GetWaterValvePropertiesDataTable(ds.Tables["GetWaterValveProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetWaterValvePropertiesDataTable GetWaterValveProperties {
            get {
                return this.tableGetWaterValveProperties;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F84721WaterValvePropertiesData cln = ((F84721WaterValvePropertiesData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetWaterValveProperties"] != null)) {
                    base.Tables.Add(new GetWaterValvePropertiesDataTable(ds.Tables["GetWaterValveProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetWaterValveProperties = ((GetWaterValvePropertiesDataTable)(base.Tables["GetWaterValveProperties"]));
            if ((initTable == true)) {
                if ((this.tableGetWaterValveProperties != null)) {
                    this.tableGetWaterValveProperties.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F84721WaterValvePropertiesData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F84721WaterValvePropertiesData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetWaterValveProperties = new GetWaterValvePropertiesDataTable();
            base.Tables.Add(this.tableGetWaterValveProperties);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetWaterValveProperties() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F84721WaterValvePropertiesData ds = new F84721WaterValvePropertiesData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetWaterValvePropertiesRowChangeEventHandler(object sender, GetWaterValvePropertiesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetWaterValvePropertiesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFeatureID;
            
            private global::System.Data.DataColumn columnCID;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            private global::System.Data.DataColumn columnModelNumber;
            
            private global::System.Data.DataColumn columnSerialNumber;
            
            private global::System.Data.DataColumn columnDiameter;
            
            private global::System.Data.DataColumn columnIsMotorized;
            
            private global::System.Data.DataColumn columnIsCurrentlyOpen;
            
            private global::System.Data.DataColumn columnIsLongKey;
            
            private global::System.Data.DataColumn columnIsMachineRun;
            
            private global::System.Data.DataColumn columnIsEnabled;
            
            private global::System.Data.DataColumn columnIsPrivate;
            
            private global::System.Data.DataColumn columnIsClockwiseToClose;
            
            private global::System.Data.DataColumn columnIsNormallyOpen;
            
            private global::System.Data.DataColumn columnPercentOpen;
            
            private global::System.Data.DataColumn columnTurnsToClose;
            
            private global::System.Data.DataColumn columnIsBypassValve;
            
            private global::System.Data.DataColumn columnPressureSetting;
            
            private global::System.Data.DataColumn columnHydrostaticPressue;
            
            private global::System.Data.DataColumn columnRegulationTypeID;
            
            private global::System.Data.DataColumn columnManufacturerID;
            
            private global::System.Data.DataColumn columnValveTypeID;
            
            private global::System.Data.DataColumn columnValveSeatTypeID;
            
            private global::System.Data.DataColumn columnConnectionTypeID;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnWaterTypeID;
            
            private global::System.Data.DataColumn columnAccessTypeID;
            
            private global::System.Data.DataColumn columnLifecycleStatusID;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnBusinessID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterValvePropertiesDataTable() {
                this.TableName = "GetWaterValveProperties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWaterValvePropertiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetWaterValvePropertiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIDColumn {
                get {
                    return this.columnCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelNumberColumn {
                get {
                    return this.columnModelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SerialNumberColumn {
                get {
                    return this.columnSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiameterColumn {
                get {
                    return this.columnDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMotorizedColumn {
                get {
                    return this.columnIsMotorized;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCurrentlyOpenColumn {
                get {
                    return this.columnIsCurrentlyOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsLongKeyColumn {
                get {
                    return this.columnIsLongKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMachineRunColumn {
                get {
                    return this.columnIsMachineRun;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEnabledColumn {
                get {
                    return this.columnIsEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrivateColumn {
                get {
                    return this.columnIsPrivate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsClockwiseToCloseColumn {
                get {
                    return this.columnIsClockwiseToClose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNormallyOpenColumn {
                get {
                    return this.columnIsNormallyOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentOpenColumn {
                get {
                    return this.columnPercentOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TurnsToCloseColumn {
                get {
                    return this.columnTurnsToClose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBypassValveColumn {
                get {
                    return this.columnIsBypassValve;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PressureSettingColumn {
                get {
                    return this.columnPressureSetting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydrostaticPressueColumn {
                get {
                    return this.columnHydrostaticPressue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegulationTypeIDColumn {
                get {
                    return this.columnRegulationTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerIDColumn {
                get {
                    return this.columnManufacturerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValveTypeIDColumn {
                get {
                    return this.columnValveTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValveSeatTypeIDColumn {
                get {
                    return this.columnValveSeatTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionTypeIDColumn {
                get {
                    return this.columnConnectionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WaterTypeIDColumn {
                get {
                    return this.columnWaterTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeIDColumn {
                get {
                    return this.columnAccessTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LifecycleStatusIDColumn {
                get {
                    return this.columnLifecycleStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessIDColumn {
                get {
                    return this.columnBusinessID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterValvePropertiesRow this[int index] {
                get {
                    return ((GetWaterValvePropertiesRow)(this.Rows[index]));
                }
            }
            
            public event GetWaterValvePropertiesRowChangeEventHandler GetWaterValvePropertiesRowChanging;
            
            public event GetWaterValvePropertiesRowChangeEventHandler GetWaterValvePropertiesRowChanged;
            
            public event GetWaterValvePropertiesRowChangeEventHandler GetWaterValvePropertiesRowDeleting;
            
            public event GetWaterValvePropertiesRowChangeEventHandler GetWaterValvePropertiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetWaterValvePropertiesRow(GetWaterValvePropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterValvePropertiesRow AddGetWaterValvePropertiesRow(
                        string CID, 
                        int FeatureClassID, 
                        string ModelNumber, 
                        string SerialNumber, 
                        decimal Diameter, 
                        bool IsMotorized, 
                        bool IsCurrentlyOpen, 
                        bool IsLongKey, 
                        bool IsMachineRun, 
                        bool IsEnabled, 
                        bool IsPrivate, 
                        bool IsClockwiseToClose, 
                        bool IsNormallyOpen, 
                        decimal PercentOpen, 
                        decimal TurnsToClose, 
                        bool IsBypassValve, 
                        decimal PressureSetting, 
                        decimal HydrostaticPressue, 
                        int RegulationTypeID, 
                        int ManufacturerID, 
                        int ValveTypeID, 
                        int ValveSeatTypeID, 
                        int ConnectionTypeID, 
                        int UserID, 
                        int WaterTypeID, 
                        int AccessTypeID, 
                        int LifecycleStatusID, 
                        string Comment, 
                        int BusinessID) {
                GetWaterValvePropertiesRow rowGetWaterValvePropertiesRow = ((GetWaterValvePropertiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CID,
                        FeatureClassID,
                        ModelNumber,
                        SerialNumber,
                        Diameter,
                        IsMotorized,
                        IsCurrentlyOpen,
                        IsLongKey,
                        IsMachineRun,
                        IsEnabled,
                        IsPrivate,
                        IsClockwiseToClose,
                        IsNormallyOpen,
                        PercentOpen,
                        TurnsToClose,
                        IsBypassValve,
                        PressureSetting,
                        HydrostaticPressue,
                        RegulationTypeID,
                        ManufacturerID,
                        ValveTypeID,
                        ValveSeatTypeID,
                        ConnectionTypeID,
                        UserID,
                        WaterTypeID,
                        AccessTypeID,
                        LifecycleStatusID,
                        Comment,
                        BusinessID};
                rowGetWaterValvePropertiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetWaterValvePropertiesRow);
                return rowGetWaterValvePropertiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetWaterValvePropertiesDataTable cln = ((GetWaterValvePropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetWaterValvePropertiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeatureID = base.Columns["FeatureID"];
                this.columnCID = base.Columns["CID"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnModelNumber = base.Columns["ModelNumber"];
                this.columnSerialNumber = base.Columns["SerialNumber"];
                this.columnDiameter = base.Columns["Diameter"];
                this.columnIsMotorized = base.Columns["IsMotorized"];
                this.columnIsCurrentlyOpen = base.Columns["IsCurrentlyOpen"];
                this.columnIsLongKey = base.Columns["IsLongKey"];
                this.columnIsMachineRun = base.Columns["IsMachineRun"];
                this.columnIsEnabled = base.Columns["IsEnabled"];
                this.columnIsPrivate = base.Columns["IsPrivate"];
                this.columnIsClockwiseToClose = base.Columns["IsClockwiseToClose"];
                this.columnIsNormallyOpen = base.Columns["IsNormallyOpen"];
                this.columnPercentOpen = base.Columns["PercentOpen"];
                this.columnTurnsToClose = base.Columns["TurnsToClose"];
                this.columnIsBypassValve = base.Columns["IsBypassValve"];
                this.columnPressureSetting = base.Columns["PressureSetting"];
                this.columnHydrostaticPressue = base.Columns["HydrostaticPressue"];
                this.columnRegulationTypeID = base.Columns["RegulationTypeID"];
                this.columnManufacturerID = base.Columns["ManufacturerID"];
                this.columnValveTypeID = base.Columns["ValveTypeID"];
                this.columnValveSeatTypeID = base.Columns["ValveSeatTypeID"];
                this.columnConnectionTypeID = base.Columns["ConnectionTypeID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnWaterTypeID = base.Columns["WaterTypeID"];
                this.columnAccessTypeID = base.Columns["AccessTypeID"];
                this.columnLifecycleStatusID = base.Columns["LifecycleStatusID"];
                this.columnComment = base.Columns["Comment"];
                this.columnBusinessID = base.Columns["BusinessID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeatureID = new global::System.Data.DataColumn("FeatureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureID);
                this.columnCID = new global::System.Data.DataColumn("CID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCID);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnModelNumber = new global::System.Data.DataColumn("ModelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModelNumber);
                this.columnSerialNumber = new global::System.Data.DataColumn("SerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNumber);
                this.columnDiameter = new global::System.Data.DataColumn("Diameter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiameter);
                this.columnIsMotorized = new global::System.Data.DataColumn("IsMotorized", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMotorized);
                this.columnIsCurrentlyOpen = new global::System.Data.DataColumn("IsCurrentlyOpen", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCurrentlyOpen);
                this.columnIsLongKey = new global::System.Data.DataColumn("IsLongKey", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLongKey);
                this.columnIsMachineRun = new global::System.Data.DataColumn("IsMachineRun", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMachineRun);
                this.columnIsEnabled = new global::System.Data.DataColumn("IsEnabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEnabled);
                this.columnIsPrivate = new global::System.Data.DataColumn("IsPrivate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrivate);
                this.columnIsClockwiseToClose = new global::System.Data.DataColumn("IsClockwiseToClose", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsClockwiseToClose);
                this.columnIsNormallyOpen = new global::System.Data.DataColumn("IsNormallyOpen", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNormallyOpen);
                this.columnPercentOpen = new global::System.Data.DataColumn("PercentOpen", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentOpen);
                this.columnTurnsToClose = new global::System.Data.DataColumn("TurnsToClose", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTurnsToClose);
                this.columnIsBypassValve = new global::System.Data.DataColumn("IsBypassValve", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBypassValve);
                this.columnPressureSetting = new global::System.Data.DataColumn("PressureSetting", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPressureSetting);
                this.columnHydrostaticPressue = new global::System.Data.DataColumn("HydrostaticPressue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydrostaticPressue);
                this.columnRegulationTypeID = new global::System.Data.DataColumn("RegulationTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegulationTypeID);
                this.columnManufacturerID = new global::System.Data.DataColumn("ManufacturerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerID);
                this.columnValveTypeID = new global::System.Data.DataColumn("ValveTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValveTypeID);
                this.columnValveSeatTypeID = new global::System.Data.DataColumn("ValveSeatTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValveSeatTypeID);
                this.columnConnectionTypeID = new global::System.Data.DataColumn("ConnectionTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionTypeID);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnWaterTypeID = new global::System.Data.DataColumn("WaterTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaterTypeID);
                this.columnAccessTypeID = new global::System.Data.DataColumn("AccessTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessTypeID);
                this.columnLifecycleStatusID = new global::System.Data.DataColumn("LifecycleStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLifecycleStatusID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnBusinessID = new global::System.Data.DataColumn("BusinessID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessID);
                this.columnFeatureID.AutoIncrement = true;
                this.columnFeatureID.ReadOnly = true;
                this.columnCID.MaxLength = 15;
                this.columnModelNumber.MaxLength = 20;
                this.columnSerialNumber.MaxLength = 30;
                this.columnComment.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterValvePropertiesRow NewGetWaterValvePropertiesRow() {
                return ((GetWaterValvePropertiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetWaterValvePropertiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetWaterValvePropertiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetWaterValvePropertiesRowChanged != null)) {
                    this.GetWaterValvePropertiesRowChanged(this, new GetWaterValvePropertiesRowChangeEvent(((GetWaterValvePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetWaterValvePropertiesRowChanging != null)) {
                    this.GetWaterValvePropertiesRowChanging(this, new GetWaterValvePropertiesRowChangeEvent(((GetWaterValvePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetWaterValvePropertiesRowDeleted != null)) {
                    this.GetWaterValvePropertiesRowDeleted(this, new GetWaterValvePropertiesRowChangeEvent(((GetWaterValvePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetWaterValvePropertiesRowDeleting != null)) {
                    this.GetWaterValvePropertiesRowDeleting(this, new GetWaterValvePropertiesRowChangeEvent(((GetWaterValvePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetWaterValvePropertiesRow(GetWaterValvePropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F84721WaterValvePropertiesData ds = new F84721WaterValvePropertiesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetWaterValvePropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetWaterValvePropertiesRow : global::System.Data.DataRow {
            
            private GetWaterValvePropertiesDataTable tableGetWaterValveProperties;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWaterValvePropertiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetWaterValveProperties = ((GetWaterValvePropertiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.FeatureIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureID\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.FeatureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CID {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterValveProperties.CIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CID\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.CIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'GetWaterValveProperties\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModelNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterValveProperties.ModelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModelNumber\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.ModelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SerialNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterValveProperties.SerialNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SerialNumber\' in table \'GetWaterValveProperties\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.SerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Diameter {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterValveProperties.DiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Diameter\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.DiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotorized {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterValveProperties.IsMotorizedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMotorized\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.IsMotorizedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentlyOpen {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterValveProperties.IsCurrentlyOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCurrentlyOpen\' in table \'GetWaterValveProperties\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.IsCurrentlyOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongKey {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterValveProperties.IsLongKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsLongKey\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.IsLongKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMachineRun {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterValveProperties.IsMachineRunColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMachineRun\' in table \'GetWaterValveProperties\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.IsMachineRunColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterValveProperties.IsEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEnabled\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.IsEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrivate {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterValveProperties.IsPrivateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrivate\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.IsPrivateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClockwiseToClose {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterValveProperties.IsClockwiseToCloseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsClockwiseToClose\' in table \'GetWaterValveProperties\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.IsClockwiseToCloseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormallyOpen {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterValveProperties.IsNormallyOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsNormallyOpen\' in table \'GetWaterValveProperties\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.IsNormallyOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PercentOpen {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterValveProperties.PercentOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentOpen\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.PercentOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TurnsToClose {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterValveProperties.TurnsToCloseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TurnsToClose\' in table \'GetWaterValveProperties\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.TurnsToCloseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBypassValve {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterValveProperties.IsBypassValveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBypassValve\' in table \'GetWaterValveProperties\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.IsBypassValveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PressureSetting {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterValveProperties.PressureSettingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PressureSetting\' in table \'GetWaterValveProperties\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.PressureSettingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HydrostaticPressue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterValveProperties.HydrostaticPressueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydrostaticPressue\' in table \'GetWaterValveProperties\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.HydrostaticPressueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RegulationTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.RegulationTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegulationTypeID\' in table \'GetWaterValveProperties\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.RegulationTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManufacturerID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.ManufacturerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufacturerID\' in table \'GetWaterValveProperties\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.ManufacturerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValveTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.ValveTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValveTypeID\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.ValveTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValveSeatTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.ValveSeatTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValveSeatTypeID\' in table \'GetWaterValveProperties\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.ValveSeatTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConnectionTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.ConnectionTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionTypeID\' in table \'GetWaterValveProperties\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.ConnectionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WaterTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.WaterTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaterTypeID\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.WaterTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AccessTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.AccessTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessTypeID\' in table \'GetWaterValveProperties\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.AccessTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LifecycleStatusID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.LifecycleStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LifecycleStatusID\' in table \'GetWaterValveProperties\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.LifecycleStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterValveProperties.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BusinessID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterValveProperties.BusinessIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessID\' in table \'GetWaterValveProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterValveProperties.BusinessIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.FeatureIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureIDNull() {
                this[this.tableGetWaterValveProperties.FeatureIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.CIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDNull() {
                this[this.tableGetWaterValveProperties.CIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableGetWaterValveProperties.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNumberNull() {
                return this.IsNull(this.tableGetWaterValveProperties.ModelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNumberNull() {
                this[this.tableGetWaterValveProperties.ModelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNumberNull() {
                return this.IsNull(this.tableGetWaterValveProperties.SerialNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNumberNull() {
                this[this.tableGetWaterValveProperties.SerialNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiameterNull() {
                return this.IsNull(this.tableGetWaterValveProperties.DiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiameterNull() {
                this[this.tableGetWaterValveProperties.DiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsMotorizedNull() {
                return this.IsNull(this.tableGetWaterValveProperties.IsMotorizedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsMotorizedNull() {
                this[this.tableGetWaterValveProperties.IsMotorizedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCurrentlyOpenNull() {
                return this.IsNull(this.tableGetWaterValveProperties.IsCurrentlyOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCurrentlyOpenNull() {
                this[this.tableGetWaterValveProperties.IsCurrentlyOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsLongKeyNull() {
                return this.IsNull(this.tableGetWaterValveProperties.IsLongKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsLongKeyNull() {
                this[this.tableGetWaterValveProperties.IsLongKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsMachineRunNull() {
                return this.IsNull(this.tableGetWaterValveProperties.IsMachineRunColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsMachineRunNull() {
                this[this.tableGetWaterValveProperties.IsMachineRunColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEnabledNull() {
                return this.IsNull(this.tableGetWaterValveProperties.IsEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEnabledNull() {
                this[this.tableGetWaterValveProperties.IsEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrivateNull() {
                return this.IsNull(this.tableGetWaterValveProperties.IsPrivateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrivateNull() {
                this[this.tableGetWaterValveProperties.IsPrivateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsClockwiseToCloseNull() {
                return this.IsNull(this.tableGetWaterValveProperties.IsClockwiseToCloseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsClockwiseToCloseNull() {
                this[this.tableGetWaterValveProperties.IsClockwiseToCloseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNormallyOpenNull() {
                return this.IsNull(this.tableGetWaterValveProperties.IsNormallyOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNormallyOpenNull() {
                this[this.tableGetWaterValveProperties.IsNormallyOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentOpenNull() {
                return this.IsNull(this.tableGetWaterValveProperties.PercentOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentOpenNull() {
                this[this.tableGetWaterValveProperties.PercentOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTurnsToCloseNull() {
                return this.IsNull(this.tableGetWaterValveProperties.TurnsToCloseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTurnsToCloseNull() {
                this[this.tableGetWaterValveProperties.TurnsToCloseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBypassValveNull() {
                return this.IsNull(this.tableGetWaterValveProperties.IsBypassValveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBypassValveNull() {
                this[this.tableGetWaterValveProperties.IsBypassValveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPressureSettingNull() {
                return this.IsNull(this.tableGetWaterValveProperties.PressureSettingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPressureSettingNull() {
                this[this.tableGetWaterValveProperties.PressureSettingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydrostaticPressueNull() {
                return this.IsNull(this.tableGetWaterValveProperties.HydrostaticPressueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydrostaticPressueNull() {
                this[this.tableGetWaterValveProperties.HydrostaticPressueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegulationTypeIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.RegulationTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegulationTypeIDNull() {
                this[this.tableGetWaterValveProperties.RegulationTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.ManufacturerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerIDNull() {
                this[this.tableGetWaterValveProperties.ManufacturerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValveTypeIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.ValveTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValveTypeIDNull() {
                this[this.tableGetWaterValveProperties.ValveTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValveSeatTypeIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.ValveSeatTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValveSeatTypeIDNull() {
                this[this.tableGetWaterValveProperties.ValveSeatTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConnectionTypeIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.ConnectionTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConnectionTypeIDNull() {
                this[this.tableGetWaterValveProperties.ConnectionTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableGetWaterValveProperties.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWaterTypeIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.WaterTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWaterTypeIDNull() {
                this[this.tableGetWaterValveProperties.WaterTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.AccessTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeIDNull() {
                this[this.tableGetWaterValveProperties.AccessTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLifecycleStatusIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.LifecycleStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLifecycleStatusIDNull() {
                this[this.tableGetWaterValveProperties.LifecycleStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableGetWaterValveProperties.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableGetWaterValveProperties.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessIDNull() {
                return this.IsNull(this.tableGetWaterValveProperties.BusinessIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessIDNull() {
                this[this.tableGetWaterValveProperties.BusinessIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetWaterValvePropertiesRowChangeEvent : global::System.EventArgs {
            
            private GetWaterValvePropertiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterValvePropertiesRowChangeEvent(GetWaterValvePropertiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterValvePropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591