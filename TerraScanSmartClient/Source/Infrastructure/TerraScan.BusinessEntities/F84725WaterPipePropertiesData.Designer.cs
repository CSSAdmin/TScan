//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F84725WaterPipePropertiesData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F84725WaterPipePropertiesData : global::System.Data.DataSet {
        
        private GetWaterPipePropertiesDataTableDataTable tableGetWaterPipePropertiesDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F84725WaterPipePropertiesData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F84725WaterPipePropertiesData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetWaterPipePropertiesDataTable"] != null)) {
                    base.Tables.Add(new GetWaterPipePropertiesDataTableDataTable(ds.Tables["GetWaterPipePropertiesDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetWaterPipePropertiesDataTableDataTable GetWaterPipePropertiesDataTable {
            get {
                return this.tableGetWaterPipePropertiesDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F84725WaterPipePropertiesData cln = ((F84725WaterPipePropertiesData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetWaterPipePropertiesDataTable"] != null)) {
                    base.Tables.Add(new GetWaterPipePropertiesDataTableDataTable(ds.Tables["GetWaterPipePropertiesDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetWaterPipePropertiesDataTable = ((GetWaterPipePropertiesDataTableDataTable)(base.Tables["GetWaterPipePropertiesDataTable"]));
            if ((initTable == true)) {
                if ((this.tableGetWaterPipePropertiesDataTable != null)) {
                    this.tableGetWaterPipePropertiesDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F84725WaterPipePropertiesData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F84725WaterPipePropertiesData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetWaterPipePropertiesDataTable = new GetWaterPipePropertiesDataTableDataTable();
            base.Tables.Add(this.tableGetWaterPipePropertiesDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetWaterPipePropertiesDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F84725WaterPipePropertiesData ds = new F84725WaterPipePropertiesData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetWaterPipePropertiesDataTableRowChangeEventHandler(object sender, GetWaterPipePropertiesDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetWaterPipePropertiesDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFeatureID;
            
            private global::System.Data.DataColumn columnCID;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            private global::System.Data.DataColumn columnIsEnabled;
            
            private global::System.Data.DataColumn columnIsPrivate;
            
            private global::System.Data.DataColumn columnBusinessID;
            
            private global::System.Data.DataColumn columnManufacturerID;
            
            private global::System.Data.DataColumn columnPipeTypeID;
            
            private global::System.Data.DataColumn columnDiameter;
            
            private global::System.Data.DataColumn columnPressureRating;
            
            private global::System.Data.DataColumn columnPipeClass;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnExteriorCoating;
            
            private global::System.Data.DataColumn columnLiningType;
            
            private global::System.Data.DataColumn columnIsPolywrap;
            
            private global::System.Data.DataColumn columnRoghness;
            
            private global::System.Data.DataColumn columnWaterTypeID;
            
            private global::System.Data.DataColumn columnJoinTypeMaleID;
            
            private global::System.Data.DataColumn columnJointTypeFemaleID;
            
            private global::System.Data.DataColumn columnGasketTypeID;
            
            private global::System.Data.DataColumn columnLifecycleStatusID;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipePropertiesDataTableDataTable() {
                this.TableName = "GetWaterPipePropertiesDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWaterPipePropertiesDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetWaterPipePropertiesDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIDColumn {
                get {
                    return this.columnCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEnabledColumn {
                get {
                    return this.columnIsEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrivateColumn {
                get {
                    return this.columnIsPrivate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessIDColumn {
                get {
                    return this.columnBusinessID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerIDColumn {
                get {
                    return this.columnManufacturerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeTypeIDColumn {
                get {
                    return this.columnPipeTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiameterColumn {
                get {
                    return this.columnDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PressureRatingColumn {
                get {
                    return this.columnPressureRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeClassColumn {
                get {
                    return this.columnPipeClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExteriorCoatingColumn {
                get {
                    return this.columnExteriorCoating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiningTypeColumn {
                get {
                    return this.columnLiningType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPolywrapColumn {
                get {
                    return this.columnIsPolywrap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoghnessColumn {
                get {
                    return this.columnRoghness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WaterTypeIDColumn {
                get {
                    return this.columnWaterTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoinTypeMaleIDColumn {
                get {
                    return this.columnJoinTypeMaleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JointTypeFemaleIDColumn {
                get {
                    return this.columnJointTypeFemaleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GasketTypeIDColumn {
                get {
                    return this.columnGasketTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LifecycleStatusIDColumn {
                get {
                    return this.columnLifecycleStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipePropertiesDataTableRow this[int index] {
                get {
                    return ((GetWaterPipePropertiesDataTableRow)(this.Rows[index]));
                }
            }
            
            public event GetWaterPipePropertiesDataTableRowChangeEventHandler GetWaterPipePropertiesDataTableRowChanging;
            
            public event GetWaterPipePropertiesDataTableRowChangeEventHandler GetWaterPipePropertiesDataTableRowChanged;
            
            public event GetWaterPipePropertiesDataTableRowChangeEventHandler GetWaterPipePropertiesDataTableRowDeleting;
            
            public event GetWaterPipePropertiesDataTableRowChangeEventHandler GetWaterPipePropertiesDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetWaterPipePropertiesDataTableRow(GetWaterPipePropertiesDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipePropertiesDataTableRow AddGetWaterPipePropertiesDataTableRow(
                        string CID, 
                        int FeatureClassID, 
                        bool IsEnabled, 
                        bool IsPrivate, 
                        int BusinessID, 
                        int ManufacturerID, 
                        int PipeTypeID, 
                        decimal Diameter, 
                        decimal PressureRating, 
                        string PipeClass, 
                        int MaterialID, 
                        string ExteriorCoating, 
                        string LiningType, 
                        bool IsPolywrap, 
                        decimal Roghness, 
                        int WaterTypeID, 
                        int JoinTypeMaleID, 
                        int JointTypeFemaleID, 
                        int GasketTypeID, 
                        int LifecycleStatusID, 
                        string Comment) {
                GetWaterPipePropertiesDataTableRow rowGetWaterPipePropertiesDataTableRow = ((GetWaterPipePropertiesDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CID,
                        FeatureClassID,
                        IsEnabled,
                        IsPrivate,
                        BusinessID,
                        ManufacturerID,
                        PipeTypeID,
                        Diameter,
                        PressureRating,
                        PipeClass,
                        MaterialID,
                        ExteriorCoating,
                        LiningType,
                        IsPolywrap,
                        Roghness,
                        WaterTypeID,
                        JoinTypeMaleID,
                        JointTypeFemaleID,
                        GasketTypeID,
                        LifecycleStatusID,
                        Comment};
                rowGetWaterPipePropertiesDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetWaterPipePropertiesDataTableRow);
                return rowGetWaterPipePropertiesDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetWaterPipePropertiesDataTableDataTable cln = ((GetWaterPipePropertiesDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetWaterPipePropertiesDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeatureID = base.Columns["FeatureID"];
                this.columnCID = base.Columns["CID"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnIsEnabled = base.Columns["IsEnabled"];
                this.columnIsPrivate = base.Columns["IsPrivate"];
                this.columnBusinessID = base.Columns["BusinessID"];
                this.columnManufacturerID = base.Columns["ManufacturerID"];
                this.columnPipeTypeID = base.Columns["PipeTypeID"];
                this.columnDiameter = base.Columns["Diameter"];
                this.columnPressureRating = base.Columns["PressureRating"];
                this.columnPipeClass = base.Columns["PipeClass"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnExteriorCoating = base.Columns["ExteriorCoating"];
                this.columnLiningType = base.Columns["LiningType"];
                this.columnIsPolywrap = base.Columns["IsPolywrap"];
                this.columnRoghness = base.Columns["Roghness"];
                this.columnWaterTypeID = base.Columns["WaterTypeID"];
                this.columnJoinTypeMaleID = base.Columns["JoinTypeMaleID"];
                this.columnJointTypeFemaleID = base.Columns["JointTypeFemaleID"];
                this.columnGasketTypeID = base.Columns["GasketTypeID"];
                this.columnLifecycleStatusID = base.Columns["LifecycleStatusID"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeatureID = new global::System.Data.DataColumn("FeatureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureID);
                this.columnCID = new global::System.Data.DataColumn("CID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCID);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnIsEnabled = new global::System.Data.DataColumn("IsEnabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEnabled);
                this.columnIsPrivate = new global::System.Data.DataColumn("IsPrivate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrivate);
                this.columnBusinessID = new global::System.Data.DataColumn("BusinessID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessID);
                this.columnManufacturerID = new global::System.Data.DataColumn("ManufacturerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerID);
                this.columnPipeTypeID = new global::System.Data.DataColumn("PipeTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeTypeID);
                this.columnDiameter = new global::System.Data.DataColumn("Diameter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiameter);
                this.columnPressureRating = new global::System.Data.DataColumn("PressureRating", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPressureRating);
                this.columnPipeClass = new global::System.Data.DataColumn("PipeClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeClass);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnExteriorCoating = new global::System.Data.DataColumn("ExteriorCoating", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExteriorCoating);
                this.columnLiningType = new global::System.Data.DataColumn("LiningType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiningType);
                this.columnIsPolywrap = new global::System.Data.DataColumn("IsPolywrap", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPolywrap);
                this.columnRoghness = new global::System.Data.DataColumn("Roghness", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoghness);
                this.columnWaterTypeID = new global::System.Data.DataColumn("WaterTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaterTypeID);
                this.columnJoinTypeMaleID = new global::System.Data.DataColumn("JoinTypeMaleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoinTypeMaleID);
                this.columnJointTypeFemaleID = new global::System.Data.DataColumn("JointTypeFemaleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJointTypeFemaleID);
                this.columnGasketTypeID = new global::System.Data.DataColumn("GasketTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasketTypeID);
                this.columnLifecycleStatusID = new global::System.Data.DataColumn("LifecycleStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLifecycleStatusID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnFeatureID.AutoIncrement = true;
                this.columnFeatureID.AllowDBNull = false;
                this.columnFeatureID.ReadOnly = true;
                this.columnCID.MaxLength = 15;
                this.columnPipeClass.MaxLength = 20;
                this.columnExteriorCoating.MaxLength = 20;
                this.columnLiningType.MaxLength = 20;
                this.columnComment.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipePropertiesDataTableRow NewGetWaterPipePropertiesDataTableRow() {
                return ((GetWaterPipePropertiesDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetWaterPipePropertiesDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetWaterPipePropertiesDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetWaterPipePropertiesDataTableRowChanged != null)) {
                    this.GetWaterPipePropertiesDataTableRowChanged(this, new GetWaterPipePropertiesDataTableRowChangeEvent(((GetWaterPipePropertiesDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetWaterPipePropertiesDataTableRowChanging != null)) {
                    this.GetWaterPipePropertiesDataTableRowChanging(this, new GetWaterPipePropertiesDataTableRowChangeEvent(((GetWaterPipePropertiesDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetWaterPipePropertiesDataTableRowDeleted != null)) {
                    this.GetWaterPipePropertiesDataTableRowDeleted(this, new GetWaterPipePropertiesDataTableRowChangeEvent(((GetWaterPipePropertiesDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetWaterPipePropertiesDataTableRowDeleting != null)) {
                    this.GetWaterPipePropertiesDataTableRowDeleting(this, new GetWaterPipePropertiesDataTableRowChangeEvent(((GetWaterPipePropertiesDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetWaterPipePropertiesDataTableRow(GetWaterPipePropertiesDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F84725WaterPipePropertiesData ds = new F84725WaterPipePropertiesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetWaterPipePropertiesDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetWaterPipePropertiesDataTableRow : global::System.Data.DataRow {
            
            private GetWaterPipePropertiesDataTableDataTable tableGetWaterPipePropertiesDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWaterPipePropertiesDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetWaterPipePropertiesDataTable = ((GetWaterPipePropertiesDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureID {
                get {
                    return ((int)(this[this.tableGetWaterPipePropertiesDataTable.FeatureIDColumn]));
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.FeatureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CID {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterPipePropertiesDataTable.CIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CID\' in table \'GetWaterPipePropertiesDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.CIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'GetWaterPipePropertiesDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterPipePropertiesDataTable.IsEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEnabled\' in table \'GetWaterPipePropertiesDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.IsEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrivate {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterPipePropertiesDataTable.IsPrivateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrivate\' in table \'GetWaterPipePropertiesDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.IsPrivateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BusinessID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.BusinessIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessID\' in table \'GetWaterPipePropertiesDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.BusinessIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManufacturerID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.ManufacturerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufacturerID\' in table \'GetWaterPipePropertiesDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.ManufacturerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PipeTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.PipeTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeTypeID\' in table \'GetWaterPipePropertiesDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.PipeTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Diameter {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterPipePropertiesDataTable.DiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Diameter\' in table \'GetWaterPipePropertiesDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.DiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PressureRating {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterPipePropertiesDataTable.PressureRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PressureRating\' in table \'GetWaterPipePropertiesDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.PressureRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeClass {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterPipePropertiesDataTable.PipeClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeClass\' in table \'GetWaterPipePropertiesDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.PipeClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.MaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'GetWaterPipePropertiesDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExteriorCoating {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterPipePropertiesDataTable.ExteriorCoatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExteriorCoating\' in table \'GetWaterPipePropertiesDataTable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.ExteriorCoatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LiningType {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterPipePropertiesDataTable.LiningTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiningType\' in table \'GetWaterPipePropertiesDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.LiningTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPolywrap {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterPipePropertiesDataTable.IsPolywrapColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPolywrap\' in table \'GetWaterPipePropertiesDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.IsPolywrapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Roghness {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterPipePropertiesDataTable.RoghnessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Roghness\' in table \'GetWaterPipePropertiesDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.RoghnessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WaterTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.WaterTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaterTypeID\' in table \'GetWaterPipePropertiesDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.WaterTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JoinTypeMaleID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.JoinTypeMaleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JoinTypeMaleID\' in table \'GetWaterPipePropertiesDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.JoinTypeMaleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JointTypeFemaleID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.JointTypeFemaleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JointTypeFemaleID\' in table \'GetWaterPipePropertiesDataTabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.JointTypeFemaleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GasketTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.GasketTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasketTypeID\' in table \'GetWaterPipePropertiesDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.GasketTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LifecycleStatusID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterPipePropertiesDataTable.LifecycleStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LifecycleStatusID\' in table \'GetWaterPipePropertiesDataTabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.LifecycleStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterPipePropertiesDataTable.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'GetWaterPipePropertiesDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetWaterPipePropertiesDataTable.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.CIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.CIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEnabledNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.IsEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEnabledNull() {
                this[this.tableGetWaterPipePropertiesDataTable.IsEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrivateNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.IsPrivateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrivateNull() {
                this[this.tableGetWaterPipePropertiesDataTable.IsPrivateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.BusinessIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.BusinessIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.ManufacturerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.ManufacturerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeTypeIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.PipeTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeTypeIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.PipeTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiameterNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.DiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiameterNull() {
                this[this.tableGetWaterPipePropertiesDataTable.DiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPressureRatingNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.PressureRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPressureRatingNull() {
                this[this.tableGetWaterPipePropertiesDataTable.PressureRatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeClassNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.PipeClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeClassNull() {
                this[this.tableGetWaterPipePropertiesDataTable.PipeClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.MaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.MaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExteriorCoatingNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.ExteriorCoatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExteriorCoatingNull() {
                this[this.tableGetWaterPipePropertiesDataTable.ExteriorCoatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiningTypeNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.LiningTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiningTypeNull() {
                this[this.tableGetWaterPipePropertiesDataTable.LiningTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPolywrapNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.IsPolywrapColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPolywrapNull() {
                this[this.tableGetWaterPipePropertiesDataTable.IsPolywrapColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoghnessNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.RoghnessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoghnessNull() {
                this[this.tableGetWaterPipePropertiesDataTable.RoghnessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWaterTypeIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.WaterTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWaterTypeIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.WaterTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoinTypeMaleIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.JoinTypeMaleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoinTypeMaleIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.JoinTypeMaleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJointTypeFemaleIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.JointTypeFemaleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJointTypeFemaleIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.JointTypeFemaleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasketTypeIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.GasketTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGasketTypeIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.GasketTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLifecycleStatusIDNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.LifecycleStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLifecycleStatusIDNull() {
                this[this.tableGetWaterPipePropertiesDataTable.LifecycleStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableGetWaterPipePropertiesDataTable.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableGetWaterPipePropertiesDataTable.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetWaterPipePropertiesDataTableRowChangeEvent : global::System.EventArgs {
            
            private GetWaterPipePropertiesDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipePropertiesDataTableRowChangeEvent(GetWaterPipePropertiesDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterPipePropertiesDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591