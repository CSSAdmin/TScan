//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8689
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F26000ParcelHeaderFormData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F26000ParcelHeaderFormData : global::System.Data.DataSet {
        
        private f26000ListParcelLandTypesDataTable tablef26000ListParcelLandTypes;
        
        private f26000ListParcelImprovementDataTable tablef26000ListParcelImprovement;
        
        private updateParcelHeaderDetailsDataTableDataTable tableupdateParcelHeaderDetailsDataTable;
        
        private F26000ParcelHeaderDataTable tableF26000ParcelHeader;
        
        private f26000ParcelHeaderExemptionDetailsDataTable tablef26000ParcelHeaderExemptionDetails;
        
        private f26000ClassCodeDataTable tablef26000ClassCode;
        
        private f26000_pcget_ExemptFieldDetailsDataTable tablef26000_pcget_ExemptFieldDetails;
        
        private f26000_pclst_AppraisalTypeDataTable tablef26000_pclst_AppraisalType;
        
        private GetConfigStateDataTable tableGetConfigState;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F26000ParcelHeaderFormData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F26000ParcelHeaderFormData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["f26000ListParcelLandTypes"] != null)) {
                    base.Tables.Add(new f26000ListParcelLandTypesDataTable(ds.Tables["f26000ListParcelLandTypes"]));
                }
                if ((ds.Tables["f26000ListParcelImprovement"] != null)) {
                    base.Tables.Add(new f26000ListParcelImprovementDataTable(ds.Tables["f26000ListParcelImprovement"]));
                }
                if ((ds.Tables["updateParcelHeaderDetailsDataTable"] != null)) {
                    base.Tables.Add(new updateParcelHeaderDetailsDataTableDataTable(ds.Tables["updateParcelHeaderDetailsDataTable"]));
                }
                if ((ds.Tables["F26000ParcelHeader"] != null)) {
                    base.Tables.Add(new F26000ParcelHeaderDataTable(ds.Tables["F26000ParcelHeader"]));
                }
                if ((ds.Tables["f26000ParcelHeaderExemptionDetails"] != null)) {
                    base.Tables.Add(new f26000ParcelHeaderExemptionDetailsDataTable(ds.Tables["f26000ParcelHeaderExemptionDetails"]));
                }
                if ((ds.Tables["f26000ClassCode"] != null)) {
                    base.Tables.Add(new f26000ClassCodeDataTable(ds.Tables["f26000ClassCode"]));
                }
                if ((ds.Tables["f26000_pcget_ExemptFieldDetails"] != null)) {
                    base.Tables.Add(new f26000_pcget_ExemptFieldDetailsDataTable(ds.Tables["f26000_pcget_ExemptFieldDetails"]));
                }
                if ((ds.Tables["f26000_pclst_AppraisalType"] != null)) {
                    base.Tables.Add(new f26000_pclst_AppraisalTypeDataTable(ds.Tables["f26000_pclst_AppraisalType"]));
                }
                if ((ds.Tables["GetConfigState"] != null)) {
                    base.Tables.Add(new GetConfigStateDataTable(ds.Tables["GetConfigState"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f26000ListParcelLandTypesDataTable f26000ListParcelLandTypes {
            get {
                return this.tablef26000ListParcelLandTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f26000ListParcelImprovementDataTable f26000ListParcelImprovement {
            get {
                return this.tablef26000ListParcelImprovement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public updateParcelHeaderDetailsDataTableDataTable updateParcelHeaderDetailsDataTable {
            get {
                return this.tableupdateParcelHeaderDetailsDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F26000ParcelHeaderDataTable F26000ParcelHeader {
            get {
                return this.tableF26000ParcelHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f26000ParcelHeaderExemptionDetailsDataTable f26000ParcelHeaderExemptionDetails {
            get {
                return this.tablef26000ParcelHeaderExemptionDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f26000ClassCodeDataTable f26000ClassCode {
            get {
                return this.tablef26000ClassCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f26000_pcget_ExemptFieldDetailsDataTable f26000_pcget_ExemptFieldDetails {
            get {
                return this.tablef26000_pcget_ExemptFieldDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f26000_pclst_AppraisalTypeDataTable f26000_pclst_AppraisalType {
            get {
                return this.tablef26000_pclst_AppraisalType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetConfigStateDataTable GetConfigState {
            get {
                return this.tableGetConfigState;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F26000ParcelHeaderFormData cln = ((F26000ParcelHeaderFormData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["f26000ListParcelLandTypes"] != null)) {
                    base.Tables.Add(new f26000ListParcelLandTypesDataTable(ds.Tables["f26000ListParcelLandTypes"]));
                }
                if ((ds.Tables["f26000ListParcelImprovement"] != null)) {
                    base.Tables.Add(new f26000ListParcelImprovementDataTable(ds.Tables["f26000ListParcelImprovement"]));
                }
                if ((ds.Tables["updateParcelHeaderDetailsDataTable"] != null)) {
                    base.Tables.Add(new updateParcelHeaderDetailsDataTableDataTable(ds.Tables["updateParcelHeaderDetailsDataTable"]));
                }
                if ((ds.Tables["F26000ParcelHeader"] != null)) {
                    base.Tables.Add(new F26000ParcelHeaderDataTable(ds.Tables["F26000ParcelHeader"]));
                }
                if ((ds.Tables["f26000ParcelHeaderExemptionDetails"] != null)) {
                    base.Tables.Add(new f26000ParcelHeaderExemptionDetailsDataTable(ds.Tables["f26000ParcelHeaderExemptionDetails"]));
                }
                if ((ds.Tables["f26000ClassCode"] != null)) {
                    base.Tables.Add(new f26000ClassCodeDataTable(ds.Tables["f26000ClassCode"]));
                }
                if ((ds.Tables["f26000_pcget_ExemptFieldDetails"] != null)) {
                    base.Tables.Add(new f26000_pcget_ExemptFieldDetailsDataTable(ds.Tables["f26000_pcget_ExemptFieldDetails"]));
                }
                if ((ds.Tables["f26000_pclst_AppraisalType"] != null)) {
                    base.Tables.Add(new f26000_pclst_AppraisalTypeDataTable(ds.Tables["f26000_pclst_AppraisalType"]));
                }
                if ((ds.Tables["GetConfigState"] != null)) {
                    base.Tables.Add(new GetConfigStateDataTable(ds.Tables["GetConfigState"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablef26000ListParcelLandTypes = ((f26000ListParcelLandTypesDataTable)(base.Tables["f26000ListParcelLandTypes"]));
            if ((initTable == true)) {
                if ((this.tablef26000ListParcelLandTypes != null)) {
                    this.tablef26000ListParcelLandTypes.InitVars();
                }
            }
            this.tablef26000ListParcelImprovement = ((f26000ListParcelImprovementDataTable)(base.Tables["f26000ListParcelImprovement"]));
            if ((initTable == true)) {
                if ((this.tablef26000ListParcelImprovement != null)) {
                    this.tablef26000ListParcelImprovement.InitVars();
                }
            }
            this.tableupdateParcelHeaderDetailsDataTable = ((updateParcelHeaderDetailsDataTableDataTable)(base.Tables["updateParcelHeaderDetailsDataTable"]));
            if ((initTable == true)) {
                if ((this.tableupdateParcelHeaderDetailsDataTable != null)) {
                    this.tableupdateParcelHeaderDetailsDataTable.InitVars();
                }
            }
            this.tableF26000ParcelHeader = ((F26000ParcelHeaderDataTable)(base.Tables["F26000ParcelHeader"]));
            if ((initTable == true)) {
                if ((this.tableF26000ParcelHeader != null)) {
                    this.tableF26000ParcelHeader.InitVars();
                }
            }
            this.tablef26000ParcelHeaderExemptionDetails = ((f26000ParcelHeaderExemptionDetailsDataTable)(base.Tables["f26000ParcelHeaderExemptionDetails"]));
            if ((initTable == true)) {
                if ((this.tablef26000ParcelHeaderExemptionDetails != null)) {
                    this.tablef26000ParcelHeaderExemptionDetails.InitVars();
                }
            }
            this.tablef26000ClassCode = ((f26000ClassCodeDataTable)(base.Tables["f26000ClassCode"]));
            if ((initTable == true)) {
                if ((this.tablef26000ClassCode != null)) {
                    this.tablef26000ClassCode.InitVars();
                }
            }
            this.tablef26000_pcget_ExemptFieldDetails = ((f26000_pcget_ExemptFieldDetailsDataTable)(base.Tables["f26000_pcget_ExemptFieldDetails"]));
            if ((initTable == true)) {
                if ((this.tablef26000_pcget_ExemptFieldDetails != null)) {
                    this.tablef26000_pcget_ExemptFieldDetails.InitVars();
                }
            }
            this.tablef26000_pclst_AppraisalType = ((f26000_pclst_AppraisalTypeDataTable)(base.Tables["f26000_pclst_AppraisalType"]));
            if ((initTable == true)) {
                if ((this.tablef26000_pclst_AppraisalType != null)) {
                    this.tablef26000_pclst_AppraisalType.InitVars();
                }
            }
            this.tableGetConfigState = ((GetConfigStateDataTable)(base.Tables["GetConfigState"]));
            if ((initTable == true)) {
                if ((this.tableGetConfigState != null)) {
                    this.tableGetConfigState.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F26000ParcelHeaderFormData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F26000ParcelHeaderFormData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablef26000ListParcelLandTypes = new f26000ListParcelLandTypesDataTable();
            base.Tables.Add(this.tablef26000ListParcelLandTypes);
            this.tablef26000ListParcelImprovement = new f26000ListParcelImprovementDataTable();
            base.Tables.Add(this.tablef26000ListParcelImprovement);
            this.tableupdateParcelHeaderDetailsDataTable = new updateParcelHeaderDetailsDataTableDataTable();
            base.Tables.Add(this.tableupdateParcelHeaderDetailsDataTable);
            this.tableF26000ParcelHeader = new F26000ParcelHeaderDataTable();
            base.Tables.Add(this.tableF26000ParcelHeader);
            this.tablef26000ParcelHeaderExemptionDetails = new f26000ParcelHeaderExemptionDetailsDataTable();
            base.Tables.Add(this.tablef26000ParcelHeaderExemptionDetails);
            this.tablef26000ClassCode = new f26000ClassCodeDataTable();
            base.Tables.Add(this.tablef26000ClassCode);
            this.tablef26000_pcget_ExemptFieldDetails = new f26000_pcget_ExemptFieldDetailsDataTable();
            base.Tables.Add(this.tablef26000_pcget_ExemptFieldDetails);
            this.tablef26000_pclst_AppraisalType = new f26000_pclst_AppraisalTypeDataTable();
            base.Tables.Add(this.tablef26000_pclst_AppraisalType);
            this.tableGetConfigState = new GetConfigStateDataTable();
            base.Tables.Add(this.tableGetConfigState);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef26000ListParcelLandTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef26000ListParcelImprovement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeupdateParcelHeaderDetailsDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF26000ParcelHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef26000ParcelHeaderExemptionDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef26000ClassCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef26000_pcget_ExemptFieldDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef26000_pclst_AppraisalType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetConfigState() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void f26000ListParcelLandTypesRowChangeEventHandler(object sender, f26000ListParcelLandTypesRowChangeEvent e);
        
        public delegate void f26000ListParcelImprovementRowChangeEventHandler(object sender, f26000ListParcelImprovementRowChangeEvent e);
        
        public delegate void updateParcelHeaderDetailsDataTableRowChangeEventHandler(object sender, updateParcelHeaderDetailsDataTableRowChangeEvent e);
        
        public delegate void F26000ParcelHeaderRowChangeEventHandler(object sender, F26000ParcelHeaderRowChangeEvent e);
        
        public delegate void f26000ParcelHeaderExemptionDetailsRowChangeEventHandler(object sender, f26000ParcelHeaderExemptionDetailsRowChangeEvent e);
        
        public delegate void f26000ClassCodeRowChangeEventHandler(object sender, f26000ClassCodeRowChangeEvent e);
        
        public delegate void f26000_pcget_ExemptFieldDetailsRowChangeEventHandler(object sender, f26000_pcget_ExemptFieldDetailsRowChangeEvent e);
        
        public delegate void f26000_pclst_AppraisalTypeRowChangeEventHandler(object sender, f26000_pclst_AppraisalTypeRowChangeEvent e);
        
        public delegate void GetConfigStateRowChangeEventHandler(object sender, GetConfigStateRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f26000ListParcelLandTypesDataTable : global::System.Data.TypedTableBase<f26000ListParcelLandTypesRow> {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelLandTypesDataTable() {
                this.TableName = "f26000ListParcelLandTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000ListParcelLandTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f26000ListParcelLandTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelLandTypesRow this[int index] {
                get {
                    return ((f26000ListParcelLandTypesRow)(this.Rows[index]));
                }
            }
            
            public event f26000ListParcelLandTypesRowChangeEventHandler f26000ListParcelLandTypesRowChanging;
            
            public event f26000ListParcelLandTypesRowChangeEventHandler f26000ListParcelLandTypesRowChanged;
            
            public event f26000ListParcelLandTypesRowChangeEventHandler f26000ListParcelLandTypesRowDeleting;
            
            public event f26000ListParcelLandTypesRowChangeEventHandler f26000ListParcelLandTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf26000ListParcelLandTypesRow(f26000ListParcelLandTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelLandTypesRow Addf26000ListParcelLandTypesRow(int LandTypeID, string LandType) {
                f26000ListParcelLandTypesRow rowf26000ListParcelLandTypesRow = ((f26000ListParcelLandTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType};
                rowf26000ListParcelLandTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf26000ListParcelLandTypesRow);
                return rowf26000ListParcelLandTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f26000ListParcelLandTypesDataTable cln = ((f26000ListParcelLandTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f26000ListParcelLandTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnLandTypeID.ReadOnly = true;
                this.columnLandType.ReadOnly = true;
                this.columnLandType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelLandTypesRow Newf26000ListParcelLandTypesRow() {
                return ((f26000ListParcelLandTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f26000ListParcelLandTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f26000ListParcelLandTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f26000ListParcelLandTypesRowChanged != null)) {
                    this.f26000ListParcelLandTypesRowChanged(this, new f26000ListParcelLandTypesRowChangeEvent(((f26000ListParcelLandTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f26000ListParcelLandTypesRowChanging != null)) {
                    this.f26000ListParcelLandTypesRowChanging(this, new f26000ListParcelLandTypesRowChangeEvent(((f26000ListParcelLandTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f26000ListParcelLandTypesRowDeleted != null)) {
                    this.f26000ListParcelLandTypesRowDeleted(this, new f26000ListParcelLandTypesRowChangeEvent(((f26000ListParcelLandTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f26000ListParcelLandTypesRowDeleting != null)) {
                    this.f26000ListParcelLandTypesRowDeleting(this, new f26000ListParcelLandTypesRowChangeEvent(((f26000ListParcelLandTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef26000ListParcelLandTypesRow(f26000ListParcelLandTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f26000ListParcelLandTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f26000ListParcelImprovementDataTable : global::System.Data.TypedTableBase<f26000ListParcelImprovementRow> {
            
            private global::System.Data.DataColumn columnImprovementID;
            
            private global::System.Data.DataColumn columnImprovement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelImprovementDataTable() {
                this.TableName = "f26000ListParcelImprovement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000ListParcelImprovementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f26000ListParcelImprovementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementIDColumn {
                get {
                    return this.columnImprovementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementColumn {
                get {
                    return this.columnImprovement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelImprovementRow this[int index] {
                get {
                    return ((f26000ListParcelImprovementRow)(this.Rows[index]));
                }
            }
            
            public event f26000ListParcelImprovementRowChangeEventHandler f26000ListParcelImprovementRowChanging;
            
            public event f26000ListParcelImprovementRowChangeEventHandler f26000ListParcelImprovementRowChanged;
            
            public event f26000ListParcelImprovementRowChangeEventHandler f26000ListParcelImprovementRowDeleting;
            
            public event f26000ListParcelImprovementRowChangeEventHandler f26000ListParcelImprovementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf26000ListParcelImprovementRow(f26000ListParcelImprovementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelImprovementRow Addf26000ListParcelImprovementRow(int ImprovementID, string Improvement) {
                f26000ListParcelImprovementRow rowf26000ListParcelImprovementRow = ((f26000ListParcelImprovementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImprovementID,
                        Improvement};
                rowf26000ListParcelImprovementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf26000ListParcelImprovementRow);
                return rowf26000ListParcelImprovementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f26000ListParcelImprovementDataTable cln = ((f26000ListParcelImprovementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f26000ListParcelImprovementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImprovementID = base.Columns["ImprovementID"];
                this.columnImprovement = base.Columns["Improvement"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImprovementID = new global::System.Data.DataColumn("ImprovementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementID);
                this.columnImprovement = new global::System.Data.DataColumn("Improvement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovement);
                this.columnImprovementID.ReadOnly = true;
                this.columnImprovement.ReadOnly = true;
                this.columnImprovement.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelImprovementRow Newf26000ListParcelImprovementRow() {
                return ((f26000ListParcelImprovementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f26000ListParcelImprovementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f26000ListParcelImprovementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f26000ListParcelImprovementRowChanged != null)) {
                    this.f26000ListParcelImprovementRowChanged(this, new f26000ListParcelImprovementRowChangeEvent(((f26000ListParcelImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f26000ListParcelImprovementRowChanging != null)) {
                    this.f26000ListParcelImprovementRowChanging(this, new f26000ListParcelImprovementRowChangeEvent(((f26000ListParcelImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f26000ListParcelImprovementRowDeleted != null)) {
                    this.f26000ListParcelImprovementRowDeleted(this, new f26000ListParcelImprovementRowChangeEvent(((f26000ListParcelImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f26000ListParcelImprovementRowDeleting != null)) {
                    this.f26000ListParcelImprovementRowDeleting(this, new f26000ListParcelImprovementRowChangeEvent(((f26000ListParcelImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef26000ListParcelImprovementRow(f26000ListParcelImprovementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f26000ListParcelImprovementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class updateParcelHeaderDetailsDataTableDataTable : global::System.Data.TypedTableBase<updateParcelHeaderDetailsDataTableRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnTaxDistrictID;
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnImprovementID;
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnMID1;
            
            private global::System.Data.DataColumn columnMID2;
            
            private global::System.Data.DataColumn columnMID3;
            
            private global::System.Data.DataColumn columnMID4;
            
            private global::System.Data.DataColumn columnMID5;
            
            private global::System.Data.DataColumn columnMID6;
            
            private global::System.Data.DataColumn columnMID7;
            
            private global::System.Data.DataColumn columnMID8;
            
            private global::System.Data.DataColumn columnLocationID;
            
            private global::System.Data.DataColumn columnGroupingID;
            
            private global::System.Data.DataColumn columnTIFFundID;
            
            private global::System.Data.DataColumn columnExemptionID;
            
            private global::System.Data.DataColumn columnExemptionCode;
            
            private global::System.Data.DataColumn columnExemptFromAmount;
            
            private global::System.Data.DataColumn columnIsGreenbelt;
            
            private global::System.Data.DataColumn columnGreenbeltFilingDate;
            
            private global::System.Data.DataColumn columnGreenbeltMarketValue;
            
            private global::System.Data.DataColumn columnGreenbeltValueLoss;
            
            private global::System.Data.DataColumn columnClassCode;
            
            private global::System.Data.DataColumn columnPropertyPenalty;
            
            private global::System.Data.DataColumn columnAppraisalTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelHeaderDetailsDataTableDataTable() {
                this.TableName = "updateParcelHeaderDetailsDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal updateParcelHeaderDetailsDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected updateParcelHeaderDetailsDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxDistrictIDColumn {
                get {
                    return this.columnTaxDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementIDColumn {
                get {
                    return this.columnImprovementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID1Column {
                get {
                    return this.columnMID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID2Column {
                get {
                    return this.columnMID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID3Column {
                get {
                    return this.columnMID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID4Column {
                get {
                    return this.columnMID4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID5Column {
                get {
                    return this.columnMID5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID6Column {
                get {
                    return this.columnMID6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID7Column {
                get {
                    return this.columnMID7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID8Column {
                get {
                    return this.columnMID8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupingIDColumn {
                get {
                    return this.columnGroupingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIFFundIDColumn {
                get {
                    return this.columnTIFFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionIDColumn {
                get {
                    return this.columnExemptionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionCodeColumn {
                get {
                    return this.columnExemptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptFromAmountColumn {
                get {
                    return this.columnExemptFromAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsGreenbeltColumn {
                get {
                    return this.columnIsGreenbelt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreenbeltFilingDateColumn {
                get {
                    return this.columnGreenbeltFilingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreenbeltMarketValueColumn {
                get {
                    return this.columnGreenbeltMarketValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreenbeltValueLossColumn {
                get {
                    return this.columnGreenbeltValueLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassCodeColumn {
                get {
                    return this.columnClassCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyPenaltyColumn {
                get {
                    return this.columnPropertyPenalty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraisalTypeIDColumn {
                get {
                    return this.columnAppraisalTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelHeaderDetailsDataTableRow this[int index] {
                get {
                    return ((updateParcelHeaderDetailsDataTableRow)(this.Rows[index]));
                }
            }
            
            public event updateParcelHeaderDetailsDataTableRowChangeEventHandler updateParcelHeaderDetailsDataTableRowChanging;
            
            public event updateParcelHeaderDetailsDataTableRowChangeEventHandler updateParcelHeaderDetailsDataTableRowChanged;
            
            public event updateParcelHeaderDetailsDataTableRowChangeEventHandler updateParcelHeaderDetailsDataTableRowDeleting;
            
            public event updateParcelHeaderDetailsDataTableRowChangeEventHandler updateParcelHeaderDetailsDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddupdateParcelHeaderDetailsDataTableRow(updateParcelHeaderDetailsDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelHeaderDetailsDataTableRow AddupdateParcelHeaderDetailsDataTableRow(
                        string ParcelID, 
                        string TaxDistrictID, 
                        string NBHDID, 
                        int ImprovementID, 
                        int LandTypeID, 
                        string MID1, 
                        string MID2, 
                        string MID3, 
                        string MID4, 
                        string MID5, 
                        string MID6, 
                        string MID7, 
                        string MID8, 
                        int LocationID, 
                        int GroupingID, 
                        int TIFFundID, 
                        int ExemptionID, 
                        string ExemptionCode, 
                        decimal ExemptFromAmount, 
                        bool IsGreenbelt, 
                        string GreenbeltFilingDate, 
                        decimal GreenbeltMarketValue, 
                        decimal GreenbeltValueLoss, 
                        string ClassCode, 
                        decimal PropertyPenalty, 
                        int AppraisalTypeID) {
                updateParcelHeaderDetailsDataTableRow rowupdateParcelHeaderDetailsDataTableRow = ((updateParcelHeaderDetailsDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        TaxDistrictID,
                        NBHDID,
                        ImprovementID,
                        LandTypeID,
                        MID1,
                        MID2,
                        MID3,
                        MID4,
                        MID5,
                        MID6,
                        MID7,
                        MID8,
                        LocationID,
                        GroupingID,
                        TIFFundID,
                        ExemptionID,
                        ExemptionCode,
                        ExemptFromAmount,
                        IsGreenbelt,
                        GreenbeltFilingDate,
                        GreenbeltMarketValue,
                        GreenbeltValueLoss,
                        ClassCode,
                        PropertyPenalty,
                        AppraisalTypeID};
                rowupdateParcelHeaderDetailsDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowupdateParcelHeaderDetailsDataTableRow);
                return rowupdateParcelHeaderDetailsDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                updateParcelHeaderDetailsDataTableDataTable cln = ((updateParcelHeaderDetailsDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new updateParcelHeaderDetailsDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnTaxDistrictID = base.Columns["TaxDistrictID"];
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnImprovementID = base.Columns["ImprovementID"];
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnMID1 = base.Columns["MID1"];
                this.columnMID2 = base.Columns["MID2"];
                this.columnMID3 = base.Columns["MID3"];
                this.columnMID4 = base.Columns["MID4"];
                this.columnMID5 = base.Columns["MID5"];
                this.columnMID6 = base.Columns["MID6"];
                this.columnMID7 = base.Columns["MID7"];
                this.columnMID8 = base.Columns["MID8"];
                this.columnLocationID = base.Columns["LocationID"];
                this.columnGroupingID = base.Columns["GroupingID"];
                this.columnTIFFundID = base.Columns["TIFFundID"];
                this.columnExemptionID = base.Columns["ExemptionID"];
                this.columnExemptionCode = base.Columns["ExemptionCode"];
                this.columnExemptFromAmount = base.Columns["ExemptFromAmount"];
                this.columnIsGreenbelt = base.Columns["IsGreenbelt"];
                this.columnGreenbeltFilingDate = base.Columns["GreenbeltFilingDate"];
                this.columnGreenbeltMarketValue = base.Columns["GreenbeltMarketValue"];
                this.columnGreenbeltValueLoss = base.Columns["GreenbeltValueLoss"];
                this.columnClassCode = base.Columns["ClassCode"];
                this.columnPropertyPenalty = base.Columns["PropertyPenalty"];
                this.columnAppraisalTypeID = base.Columns["AppraisalTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnTaxDistrictID = new global::System.Data.DataColumn("TaxDistrictID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxDistrictID);
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnImprovementID = new global::System.Data.DataColumn("ImprovementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementID);
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnMID1 = new global::System.Data.DataColumn("MID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID1);
                this.columnMID2 = new global::System.Data.DataColumn("MID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID2);
                this.columnMID3 = new global::System.Data.DataColumn("MID3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID3);
                this.columnMID4 = new global::System.Data.DataColumn("MID4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID4);
                this.columnMID5 = new global::System.Data.DataColumn("MID5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID5);
                this.columnMID6 = new global::System.Data.DataColumn("MID6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID6);
                this.columnMID7 = new global::System.Data.DataColumn("MID7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID7);
                this.columnMID8 = new global::System.Data.DataColumn("MID8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID8);
                this.columnLocationID = new global::System.Data.DataColumn("LocationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationID);
                this.columnGroupingID = new global::System.Data.DataColumn("GroupingID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupingID);
                this.columnTIFFundID = new global::System.Data.DataColumn("TIFFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIFFundID);
                this.columnExemptionID = new global::System.Data.DataColumn("ExemptionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionID);
                this.columnExemptionCode = new global::System.Data.DataColumn("ExemptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionCode);
                this.columnExemptFromAmount = new global::System.Data.DataColumn("ExemptFromAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptFromAmount);
                this.columnIsGreenbelt = new global::System.Data.DataColumn("IsGreenbelt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGreenbelt);
                this.columnGreenbeltFilingDate = new global::System.Data.DataColumn("GreenbeltFilingDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreenbeltFilingDate);
                this.columnGreenbeltMarketValue = new global::System.Data.DataColumn("GreenbeltMarketValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreenbeltMarketValue);
                this.columnGreenbeltValueLoss = new global::System.Data.DataColumn("GreenbeltValueLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreenbeltValueLoss);
                this.columnClassCode = new global::System.Data.DataColumn("ClassCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassCode);
                this.columnPropertyPenalty = new global::System.Data.DataColumn("PropertyPenalty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyPenalty);
                this.columnAppraisalTypeID = new global::System.Data.DataColumn("AppraisalTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraisalTypeID);
                this.columnMID1.MaxLength = 50;
                this.columnMID2.MaxLength = 50;
                this.columnMID3.MaxLength = 50;
                this.columnMID4.MaxLength = 50;
                this.columnMID5.MaxLength = 50;
                this.columnMID6.MaxLength = 50;
                this.columnMID7.MaxLength = 50;
                this.columnMID8.MaxLength = 50;
                this.columnGreenbeltFilingDate.ReadOnly = true;
                this.columnGreenbeltFilingDate.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelHeaderDetailsDataTableRow NewupdateParcelHeaderDetailsDataTableRow() {
                return ((updateParcelHeaderDetailsDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new updateParcelHeaderDetailsDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(updateParcelHeaderDetailsDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.updateParcelHeaderDetailsDataTableRowChanged != null)) {
                    this.updateParcelHeaderDetailsDataTableRowChanged(this, new updateParcelHeaderDetailsDataTableRowChangeEvent(((updateParcelHeaderDetailsDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.updateParcelHeaderDetailsDataTableRowChanging != null)) {
                    this.updateParcelHeaderDetailsDataTableRowChanging(this, new updateParcelHeaderDetailsDataTableRowChangeEvent(((updateParcelHeaderDetailsDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.updateParcelHeaderDetailsDataTableRowDeleted != null)) {
                    this.updateParcelHeaderDetailsDataTableRowDeleted(this, new updateParcelHeaderDetailsDataTableRowChangeEvent(((updateParcelHeaderDetailsDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.updateParcelHeaderDetailsDataTableRowDeleting != null)) {
                    this.updateParcelHeaderDetailsDataTableRowDeleting(this, new updateParcelHeaderDetailsDataTableRowChangeEvent(((updateParcelHeaderDetailsDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveupdateParcelHeaderDetailsDataTableRow(updateParcelHeaderDetailsDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "updateParcelHeaderDetailsDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F26000ParcelHeaderDataTable : global::System.Data.TypedTableBase<F26000ParcelHeaderRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnParcelTypeID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnRetired;
            
            private global::System.Data.DataColumn columnExempt;
            
            private global::System.Data.DataColumn columnLockAdminBy;
            
            private global::System.Data.DataColumn columnLockAppraisalBy;
            
            private global::System.Data.DataColumn columnLockValueBy;
            
            private global::System.Data.DataColumn columnEvents;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnPrimaryOwner;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnClassCode;
            
            private global::System.Data.DataColumn columnClassCodeColorRGBR;
            
            private global::System.Data.DataColumn columnMID1;
            
            private global::System.Data.DataColumn columnMID2;
            
            private global::System.Data.DataColumn columnMID3;
            
            private global::System.Data.DataColumn columnMID4;
            
            private global::System.Data.DataColumn columnMID5;
            
            private global::System.Data.DataColumn columnMID6;
            
            private global::System.Data.DataColumn columnMID7;
            
            private global::System.Data.DataColumn columnMID8;
            
            private global::System.Data.DataColumn columnLabel;
            
            private global::System.Data.DataColumn columnLabe2;
            
            private global::System.Data.DataColumn columnLabe3;
            
            private global::System.Data.DataColumn columnLabe4;
            
            private global::System.Data.DataColumn columnLabe5;
            
            private global::System.Data.DataColumn columnLabe6;
            
            private global::System.Data.DataColumn columnLabe7;
            
            private global::System.Data.DataColumn columnLabe8;
            
            private global::System.Data.DataColumn columnMask1;
            
            private global::System.Data.DataColumn columnMask2;
            
            private global::System.Data.DataColumn columnMask3;
            
            private global::System.Data.DataColumn columnMask4;
            
            private global::System.Data.DataColumn columnMask5;
            
            private global::System.Data.DataColumn columnMask6;
            
            private global::System.Data.DataColumn columnMask7;
            
            private global::System.Data.DataColumn columnMask8;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnNeighborhoodGroup;
            
            private global::System.Data.DataColumn columnNBHDID;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            private global::System.Data.DataColumn columnAssessmentTypeID;
            
            private global::System.Data.DataColumn columnAssessmentType;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            private global::System.Data.DataColumn columnImprovementID;
            
            private global::System.Data.DataColumn columnImprovement;
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnAssessorLocation;
            
            private global::System.Data.DataColumn columnValuationGrouping;
            
            private global::System.Data.DataColumn columnExemptionCode;
            
            private global::System.Data.DataColumn columnExemptFromAmount;
            
            private global::System.Data.DataColumn columnExemptionAmount;
            
            private global::System.Data.DataColumn columnExemptionPercent;
            
            private global::System.Data.DataColumn columnIsGreenbelt;
            
            private global::System.Data.DataColumn columnGreenbeltFilingDate;
            
            private global::System.Data.DataColumn columnGreenbeltMarketValue;
            
            private global::System.Data.DataColumn columnGreenbeltValueLoss;
            
            private global::System.Data.DataColumn columnLocationID;
            
            private global::System.Data.DataColumn columnGroupingID;
            
            private global::System.Data.DataColumn columnExemptionID;
            
            private global::System.Data.DataColumn columnAutoCompleteValue;
            
            private global::System.Data.DataColumn columnPropertyPenalty;
            
            private global::System.Data.DataColumn columnTaxCredit;
            
            private global::System.Data.DataColumn columnUnusedTaxCredit;
            
            private global::System.Data.DataColumn columnAppraisalTypeID;
            
            private global::System.Data.DataColumn columnAppraisalType;
            
            private global::System.Data.DataColumn columnAgLandTaxCredit;
            
            private global::System.Data.DataColumn columnCurrStatRealTaxCredit;
            
            private global::System.Data.DataColumn columnCurrStatAglandTaxCredit;
            
            private global::System.Data.DataColumn columnCurrStatUnusedTaxCredit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F26000ParcelHeaderDataTable() {
                this.TableName = "F26000ParcelHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F26000ParcelHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F26000ParcelHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeIDColumn {
                get {
                    return this.columnParcelTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RetiredColumn {
                get {
                    return this.columnRetired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptColumn {
                get {
                    return this.columnExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockAdminByColumn {
                get {
                    return this.columnLockAdminBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockAppraisalByColumn {
                get {
                    return this.columnLockAppraisalBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockValueByColumn {
                get {
                    return this.columnLockValueBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventsColumn {
                get {
                    return this.columnEvents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryOwnerColumn {
                get {
                    return this.columnPrimaryOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassCodeColumn {
                get {
                    return this.columnClassCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassCodeColorRGBRColumn {
                get {
                    return this.columnClassCodeColorRGBR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID1Column {
                get {
                    return this.columnMID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID2Column {
                get {
                    return this.columnMID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID3Column {
                get {
                    return this.columnMID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID4Column {
                get {
                    return this.columnMID4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID5Column {
                get {
                    return this.columnMID5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID6Column {
                get {
                    return this.columnMID6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID7Column {
                get {
                    return this.columnMID7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID8Column {
                get {
                    return this.columnMID8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe2Column {
                get {
                    return this.columnLabe2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe3Column {
                get {
                    return this.columnLabe3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe4Column {
                get {
                    return this.columnLabe4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe5Column {
                get {
                    return this.columnLabe5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe6Column {
                get {
                    return this.columnLabe6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe7Column {
                get {
                    return this.columnLabe7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Labe8Column {
                get {
                    return this.columnLabe8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask1Column {
                get {
                    return this.columnMask1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask2Column {
                get {
                    return this.columnMask2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask3Column {
                get {
                    return this.columnMask3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask4Column {
                get {
                    return this.columnMask4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask5Column {
                get {
                    return this.columnMask5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask6Column {
                get {
                    return this.columnMask6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask7Column {
                get {
                    return this.columnMask7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mask8Column {
                get {
                    return this.columnMask8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NeighborhoodGroupColumn {
                get {
                    return this.columnNeighborhoodGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NBHDIDColumn {
                get {
                    return this.columnNBHDID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeIDColumn {
                get {
                    return this.columnAssessmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeColumn {
                get {
                    return this.columnAssessmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementIDColumn {
                get {
                    return this.columnImprovementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementColumn {
                get {
                    return this.columnImprovement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessorLocationColumn {
                get {
                    return this.columnAssessorLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValuationGroupingColumn {
                get {
                    return this.columnValuationGrouping;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionCodeColumn {
                get {
                    return this.columnExemptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptFromAmountColumn {
                get {
                    return this.columnExemptFromAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionAmountColumn {
                get {
                    return this.columnExemptionAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionPercentColumn {
                get {
                    return this.columnExemptionPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsGreenbeltColumn {
                get {
                    return this.columnIsGreenbelt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreenbeltFilingDateColumn {
                get {
                    return this.columnGreenbeltFilingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreenbeltMarketValueColumn {
                get {
                    return this.columnGreenbeltMarketValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreenbeltValueLossColumn {
                get {
                    return this.columnGreenbeltValueLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupingIDColumn {
                get {
                    return this.columnGroupingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionIDColumn {
                get {
                    return this.columnExemptionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AutoCompleteValueColumn {
                get {
                    return this.columnAutoCompleteValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyPenaltyColumn {
                get {
                    return this.columnPropertyPenalty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxCreditColumn {
                get {
                    return this.columnTaxCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnusedTaxCreditColumn {
                get {
                    return this.columnUnusedTaxCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraisalTypeIDColumn {
                get {
                    return this.columnAppraisalTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraisalTypeColumn {
                get {
                    return this.columnAppraisalType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgLandTaxCreditColumn {
                get {
                    return this.columnAgLandTaxCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrStatRealTaxCreditColumn {
                get {
                    return this.columnCurrStatRealTaxCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrStatAglandTaxCreditColumn {
                get {
                    return this.columnCurrStatAglandTaxCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrStatUnusedTaxCreditColumn {
                get {
                    return this.columnCurrStatUnusedTaxCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F26000ParcelHeaderRow this[int index] {
                get {
                    return ((F26000ParcelHeaderRow)(this.Rows[index]));
                }
            }
            
            public event F26000ParcelHeaderRowChangeEventHandler F26000ParcelHeaderRowChanging;
            
            public event F26000ParcelHeaderRowChangeEventHandler F26000ParcelHeaderRowChanged;
            
            public event F26000ParcelHeaderRowChangeEventHandler F26000ParcelHeaderRowDeleting;
            
            public event F26000ParcelHeaderRowChangeEventHandler F26000ParcelHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF26000ParcelHeaderRow(F26000ParcelHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F26000ParcelHeaderRow AddF26000ParcelHeaderRow(
                        string ParcelNumber, 
                        short RollYear, 
                        byte ParcelTypeID, 
                        string Type, 
                        string Retired, 
                        string Exempt, 
                        int LockAdminBy, 
                        int LockAppraisalBy, 
                        int LockValueBy, 
                        string Events, 
                        string Description, 
                        string PrimaryOwner, 
                        string Situs, 
                        string Legal, 
                        string ClassCode, 
                        string ClassCodeColorRGBR, 
                        string MID1, 
                        string MID2, 
                        string MID3, 
                        string MID4, 
                        string MID5, 
                        string MID6, 
                        string MID7, 
                        string MID8, 
                        string Label, 
                        string Labe2, 
                        string Labe3, 
                        string Labe4, 
                        string Labe5, 
                        string Labe6, 
                        string Labe7, 
                        string Labe8, 
                        string Mask1, 
                        string Mask2, 
                        string Mask3, 
                        string Mask4, 
                        string Mask5, 
                        string Mask6, 
                        string Mask7, 
                        string Mask8, 
                        string District, 
                        string NeighborhoodGroup, 
                        short AssessmentTypeID, 
                        string AssessmentType, 
                        string PhoneNumber, 
                        int ImprovementID, 
                        string Improvement, 
                        int LandTypeID, 
                        string LandType, 
                        string AssessorLocation, 
                        string ValuationGrouping, 
                        string ExemptionCode, 
                        decimal ExemptFromAmount, 
                        decimal ExemptionAmount, 
                        decimal ExemptionPercent, 
                        bool IsGreenbelt, 
                        System.DateTime GreenbeltFilingDate, 
                        decimal GreenbeltMarketValue, 
                        decimal GreenbeltValueLoss, 
                        int LocationID, 
                        int GroupingID, 
                        int ExemptionID, 
                        string AutoCompleteValue, 
                        decimal PropertyPenalty, 
                        decimal TaxCredit, 
                        decimal UnusedTaxCredit, 
                        string AppraisalTypeID, 
                        string AppraisalType, 
                        decimal AgLandTaxCredit, 
                        decimal CurrStatRealTaxCredit, 
                        decimal CurrStatAglandTaxCredit, 
                        decimal CurrStatUnusedTaxCredit) {
                F26000ParcelHeaderRow rowF26000ParcelHeaderRow = ((F26000ParcelHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelNumber,
                        RollYear,
                        ParcelTypeID,
                        Type,
                        Retired,
                        Exempt,
                        LockAdminBy,
                        LockAppraisalBy,
                        LockValueBy,
                        Events,
                        Description,
                        PrimaryOwner,
                        Situs,
                        Legal,
                        ClassCode,
                        ClassCodeColorRGBR,
                        MID1,
                        MID2,
                        MID3,
                        MID4,
                        MID5,
                        MID6,
                        MID7,
                        MID8,
                        Label,
                        Labe2,
                        Labe3,
                        Labe4,
                        Labe5,
                        Labe6,
                        Labe7,
                        Labe8,
                        Mask1,
                        Mask2,
                        Mask3,
                        Mask4,
                        Mask5,
                        Mask6,
                        Mask7,
                        Mask8,
                        District,
                        NeighborhoodGroup,
                        null,
                        null,
                        AssessmentTypeID,
                        AssessmentType,
                        null,
                        PhoneNumber,
                        ImprovementID,
                        Improvement,
                        LandTypeID,
                        LandType,
                        AssessorLocation,
                        ValuationGrouping,
                        ExemptionCode,
                        ExemptFromAmount,
                        ExemptionAmount,
                        ExemptionPercent,
                        IsGreenbelt,
                        GreenbeltFilingDate,
                        GreenbeltMarketValue,
                        GreenbeltValueLoss,
                        LocationID,
                        GroupingID,
                        ExemptionID,
                        AutoCompleteValue,
                        PropertyPenalty,
                        TaxCredit,
                        UnusedTaxCredit,
                        AppraisalTypeID,
                        AppraisalType,
                        AgLandTaxCredit,
                        CurrStatRealTaxCredit,
                        CurrStatAglandTaxCredit,
                        CurrStatUnusedTaxCredit};
                rowF26000ParcelHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF26000ParcelHeaderRow);
                return rowF26000ParcelHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F26000ParcelHeaderDataTable cln = ((F26000ParcelHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F26000ParcelHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnParcelTypeID = base.Columns["ParcelTypeID"];
                this.columnType = base.Columns["Type"];
                this.columnRetired = base.Columns["Retired"];
                this.columnExempt = base.Columns["Exempt"];
                this.columnLockAdminBy = base.Columns["LockAdminBy"];
                this.columnLockAppraisalBy = base.Columns["LockAppraisalBy"];
                this.columnLockValueBy = base.Columns["LockValueBy"];
                this.columnEvents = base.Columns["Events"];
                this.columnDescription = base.Columns["Description"];
                this.columnPrimaryOwner = base.Columns["PrimaryOwner"];
                this.columnSitus = base.Columns["Situs"];
                this.columnLegal = base.Columns["Legal"];
                this.columnClassCode = base.Columns["ClassCode"];
                this.columnClassCodeColorRGBR = base.Columns["ClassCodeColorRGBR"];
                this.columnMID1 = base.Columns["MID1"];
                this.columnMID2 = base.Columns["MID2"];
                this.columnMID3 = base.Columns["MID3"];
                this.columnMID4 = base.Columns["MID4"];
                this.columnMID5 = base.Columns["MID5"];
                this.columnMID6 = base.Columns["MID6"];
                this.columnMID7 = base.Columns["MID7"];
                this.columnMID8 = base.Columns["MID8"];
                this.columnLabel = base.Columns["Label"];
                this.columnLabe2 = base.Columns["Labe2"];
                this.columnLabe3 = base.Columns["Labe3"];
                this.columnLabe4 = base.Columns["Labe4"];
                this.columnLabe5 = base.Columns["Labe5"];
                this.columnLabe6 = base.Columns["Labe6"];
                this.columnLabe7 = base.Columns["Labe7"];
                this.columnLabe8 = base.Columns["Labe8"];
                this.columnMask1 = base.Columns["Mask1"];
                this.columnMask2 = base.Columns["Mask2"];
                this.columnMask3 = base.Columns["Mask3"];
                this.columnMask4 = base.Columns["Mask4"];
                this.columnMask5 = base.Columns["Mask5"];
                this.columnMask6 = base.Columns["Mask6"];
                this.columnMask7 = base.Columns["Mask7"];
                this.columnMask8 = base.Columns["Mask8"];
                this.columnDistrict = base.Columns["District"];
                this.columnNeighborhoodGroup = base.Columns["NeighborhoodGroup"];
                this.columnNBHDID = base.Columns["NBHDID"];
                this.columnDistrictID = base.Columns["DistrictID"];
                this.columnAssessmentTypeID = base.Columns["AssessmentTypeID"];
                this.columnAssessmentType = base.Columns["AssessmentType"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
                this.columnImprovementID = base.Columns["ImprovementID"];
                this.columnImprovement = base.Columns["Improvement"];
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnAssessorLocation = base.Columns["AssessorLocation"];
                this.columnValuationGrouping = base.Columns["ValuationGrouping"];
                this.columnExemptionCode = base.Columns["ExemptionCode"];
                this.columnExemptFromAmount = base.Columns["ExemptFromAmount"];
                this.columnExemptionAmount = base.Columns["ExemptionAmount"];
                this.columnExemptionPercent = base.Columns["ExemptionPercent"];
                this.columnIsGreenbelt = base.Columns["IsGreenbelt"];
                this.columnGreenbeltFilingDate = base.Columns["GreenbeltFilingDate"];
                this.columnGreenbeltMarketValue = base.Columns["GreenbeltMarketValue"];
                this.columnGreenbeltValueLoss = base.Columns["GreenbeltValueLoss"];
                this.columnLocationID = base.Columns["LocationID"];
                this.columnGroupingID = base.Columns["GroupingID"];
                this.columnExemptionID = base.Columns["ExemptionID"];
                this.columnAutoCompleteValue = base.Columns["AutoCompleteValue"];
                this.columnPropertyPenalty = base.Columns["PropertyPenalty"];
                this.columnTaxCredit = base.Columns["TaxCredit"];
                this.columnUnusedTaxCredit = base.Columns["UnusedTaxCredit"];
                this.columnAppraisalTypeID = base.Columns["AppraisalTypeID"];
                this.columnAppraisalType = base.Columns["AppraisalType"];
                this.columnAgLandTaxCredit = base.Columns["AgLandTaxCredit"];
                this.columnCurrStatRealTaxCredit = base.Columns["CurrStatRealTaxCredit"];
                this.columnCurrStatAglandTaxCredit = base.Columns["CurrStatAglandTaxCredit"];
                this.columnCurrStatUnusedTaxCredit = base.Columns["CurrStatUnusedTaxCredit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnParcelTypeID = new global::System.Data.DataColumn("ParcelTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelTypeID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnRetired = new global::System.Data.DataColumn("Retired", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetired);
                this.columnExempt = new global::System.Data.DataColumn("Exempt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExempt);
                this.columnLockAdminBy = new global::System.Data.DataColumn("LockAdminBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockAdminBy);
                this.columnLockAppraisalBy = new global::System.Data.DataColumn("LockAppraisalBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockAppraisalBy);
                this.columnLockValueBy = new global::System.Data.DataColumn("LockValueBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockValueBy);
                this.columnEvents = new global::System.Data.DataColumn("Events", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvents);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnPrimaryOwner = new global::System.Data.DataColumn("PrimaryOwner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryOwner);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnClassCode = new global::System.Data.DataColumn("ClassCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassCode);
                this.columnClassCodeColorRGBR = new global::System.Data.DataColumn("ClassCodeColorRGBR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassCodeColorRGBR);
                this.columnMID1 = new global::System.Data.DataColumn("MID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID1);
                this.columnMID2 = new global::System.Data.DataColumn("MID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID2);
                this.columnMID3 = new global::System.Data.DataColumn("MID3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID3);
                this.columnMID4 = new global::System.Data.DataColumn("MID4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID4);
                this.columnMID5 = new global::System.Data.DataColumn("MID5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID5);
                this.columnMID6 = new global::System.Data.DataColumn("MID6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID6);
                this.columnMID7 = new global::System.Data.DataColumn("MID7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID7);
                this.columnMID8 = new global::System.Data.DataColumn("MID8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID8);
                this.columnLabel = new global::System.Data.DataColumn("Label", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabel);
                this.columnLabe2 = new global::System.Data.DataColumn("Labe2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe2);
                this.columnLabe3 = new global::System.Data.DataColumn("Labe3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe3);
                this.columnLabe4 = new global::System.Data.DataColumn("Labe4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe4);
                this.columnLabe5 = new global::System.Data.DataColumn("Labe5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe5);
                this.columnLabe6 = new global::System.Data.DataColumn("Labe6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe6);
                this.columnLabe7 = new global::System.Data.DataColumn("Labe7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe7);
                this.columnLabe8 = new global::System.Data.DataColumn("Labe8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabe8);
                this.columnMask1 = new global::System.Data.DataColumn("Mask1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask1);
                this.columnMask2 = new global::System.Data.DataColumn("Mask2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask2);
                this.columnMask3 = new global::System.Data.DataColumn("Mask3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask3);
                this.columnMask4 = new global::System.Data.DataColumn("Mask4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask4);
                this.columnMask5 = new global::System.Data.DataColumn("Mask5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask5);
                this.columnMask6 = new global::System.Data.DataColumn("Mask6", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask6);
                this.columnMask7 = new global::System.Data.DataColumn("Mask7", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask7);
                this.columnMask8 = new global::System.Data.DataColumn("Mask8", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMask8);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnNeighborhoodGroup = new global::System.Data.DataColumn("NeighborhoodGroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNeighborhoodGroup);
                this.columnNBHDID = new global::System.Data.DataColumn("NBHDID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNBHDID);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnAssessmentTypeID = new global::System.Data.DataColumn("AssessmentTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentTypeID);
                this.columnAssessmentType = new global::System.Data.DataColumn("AssessmentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentType);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnImprovementID = new global::System.Data.DataColumn("ImprovementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementID);
                this.columnImprovement = new global::System.Data.DataColumn("Improvement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovement);
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnAssessorLocation = new global::System.Data.DataColumn("AssessorLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessorLocation);
                this.columnValuationGrouping = new global::System.Data.DataColumn("ValuationGrouping", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValuationGrouping);
                this.columnExemptionCode = new global::System.Data.DataColumn("ExemptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionCode);
                this.columnExemptFromAmount = new global::System.Data.DataColumn("ExemptFromAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptFromAmount);
                this.columnExemptionAmount = new global::System.Data.DataColumn("ExemptionAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionAmount);
                this.columnExemptionPercent = new global::System.Data.DataColumn("ExemptionPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionPercent);
                this.columnIsGreenbelt = new global::System.Data.DataColumn("IsGreenbelt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGreenbelt);
                this.columnGreenbeltFilingDate = new global::System.Data.DataColumn("GreenbeltFilingDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreenbeltFilingDate);
                this.columnGreenbeltMarketValue = new global::System.Data.DataColumn("GreenbeltMarketValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreenbeltMarketValue);
                this.columnGreenbeltValueLoss = new global::System.Data.DataColumn("GreenbeltValueLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreenbeltValueLoss);
                this.columnLocationID = new global::System.Data.DataColumn("LocationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationID);
                this.columnGroupingID = new global::System.Data.DataColumn("GroupingID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupingID);
                this.columnExemptionID = new global::System.Data.DataColumn("ExemptionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionID);
                this.columnAutoCompleteValue = new global::System.Data.DataColumn("AutoCompleteValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAutoCompleteValue);
                this.columnPropertyPenalty = new global::System.Data.DataColumn("PropertyPenalty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyPenalty);
                this.columnTaxCredit = new global::System.Data.DataColumn("TaxCredit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCredit);
                this.columnUnusedTaxCredit = new global::System.Data.DataColumn("UnusedTaxCredit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnusedTaxCredit);
                this.columnAppraisalTypeID = new global::System.Data.DataColumn("AppraisalTypeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraisalTypeID);
                this.columnAppraisalType = new global::System.Data.DataColumn("AppraisalType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraisalType);
                this.columnAgLandTaxCredit = new global::System.Data.DataColumn("AgLandTaxCredit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgLandTaxCredit);
                this.columnCurrStatRealTaxCredit = new global::System.Data.DataColumn("CurrStatRealTaxCredit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrStatRealTaxCredit);
                this.columnCurrStatAglandTaxCredit = new global::System.Data.DataColumn("CurrStatAglandTaxCredit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrStatAglandTaxCredit);
                this.columnCurrStatUnusedTaxCredit = new global::System.Data.DataColumn("CurrStatUnusedTaxCredit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrStatUnusedTaxCredit);
                this.columnParcelID.AutoIncrement = true;
                this.columnParcelID.AllowDBNull = false;
                this.columnParcelID.ReadOnly = true;
                this.columnParcelNumber.AllowDBNull = false;
                this.columnParcelNumber.MaxLength = 50;
                this.columnParcelTypeID.AllowDBNull = false;
                this.columnType.MaxLength = 50;
                this.columnRetired.ReadOnly = true;
                this.columnRetired.MaxLength = 7;
                this.columnExempt.ReadOnly = true;
                this.columnExempt.MaxLength = 6;
                this.columnEvents.ReadOnly = true;
                this.columnEvents.MaxLength = 5;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
                this.columnPrimaryOwner.ReadOnly = true;
                this.columnPrimaryOwner.MaxLength = 102;
                this.columnSitus.ReadOnly = true;
                this.columnSitus.MaxLength = 500;
                this.columnLegal.ReadOnly = true;
                this.columnLegal.MaxLength = 1000;
                this.columnClassCode.ReadOnly = true;
                this.columnClassCode.MaxLength = 50;
                this.columnClassCodeColorRGBR.ReadOnly = true;
                this.columnClassCodeColorRGBR.MaxLength = 50;
                this.columnMID1.MaxLength = 50;
                this.columnMID2.MaxLength = 50;
                this.columnMID3.MaxLength = 50;
                this.columnMID4.MaxLength = 50;
                this.columnMID5.MaxLength = 50;
                this.columnMID6.MaxLength = 50;
                this.columnMID7.MaxLength = 50;
                this.columnMID8.MaxLength = 50;
                this.columnLabel.ReadOnly = true;
                this.columnLabel.MaxLength = 1000;
                this.columnLabe2.ReadOnly = true;
                this.columnLabe2.MaxLength = 1000;
                this.columnLabe3.ReadOnly = true;
                this.columnLabe3.MaxLength = 1000;
                this.columnLabe4.ReadOnly = true;
                this.columnLabe4.MaxLength = 1000;
                this.columnLabe5.ReadOnly = true;
                this.columnLabe5.MaxLength = 1000;
                this.columnLabe6.ReadOnly = true;
                this.columnLabe6.MaxLength = 1000;
                this.columnLabe7.ReadOnly = true;
                this.columnLabe7.MaxLength = 1000;
                this.columnLabe8.ReadOnly = true;
                this.columnLabe8.MaxLength = 1000;
                this.columnMask1.ReadOnly = true;
                this.columnMask1.MaxLength = 1000;
                this.columnMask2.ReadOnly = true;
                this.columnMask2.MaxLength = 1000;
                this.columnMask3.ReadOnly = true;
                this.columnMask3.MaxLength = 1000;
                this.columnMask4.ReadOnly = true;
                this.columnMask4.MaxLength = 1000;
                this.columnMask5.ReadOnly = true;
                this.columnMask5.MaxLength = 1000;
                this.columnMask6.ReadOnly = true;
                this.columnMask6.MaxLength = 1000;
                this.columnMask7.ReadOnly = true;
                this.columnMask7.MaxLength = 1000;
                this.columnMask8.ReadOnly = true;
                this.columnMask8.MaxLength = 1000;
                this.columnDistrict.ReadOnly = true;
                this.columnDistrict.MaxLength = 103;
                this.columnNeighborhoodGroup.ReadOnly = true;
                this.columnNeighborhoodGroup.MaxLength = 250;
                this.columnNBHDID.AutoIncrement = true;
                this.columnNBHDID.ReadOnly = true;
                this.columnDistrictID.AutoIncrement = true;
                this.columnDistrictID.ReadOnly = true;
                this.columnAssessmentType.MaxLength = 50;
                this.columnOwnerID.AutoIncrement = true;
                this.columnOwnerID.ReadOnly = true;
                this.columnPhoneNumber.MaxLength = 50;
                this.columnImprovement.MaxLength = 50;
                this.columnLandType.MaxLength = 50;
                this.columnAssessorLocation.ReadOnly = true;
                this.columnAssessorLocation.MaxLength = 303;
                this.columnValuationGrouping.ReadOnly = true;
                this.columnValuationGrouping.MaxLength = 303;
                this.columnExemptionCode.ReadOnly = true;
                this.columnExemptionCode.MaxLength = 303;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F26000ParcelHeaderRow NewF26000ParcelHeaderRow() {
                return ((F26000ParcelHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F26000ParcelHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F26000ParcelHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F26000ParcelHeaderRowChanged != null)) {
                    this.F26000ParcelHeaderRowChanged(this, new F26000ParcelHeaderRowChangeEvent(((F26000ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F26000ParcelHeaderRowChanging != null)) {
                    this.F26000ParcelHeaderRowChanging(this, new F26000ParcelHeaderRowChangeEvent(((F26000ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F26000ParcelHeaderRowDeleted != null)) {
                    this.F26000ParcelHeaderRowDeleted(this, new F26000ParcelHeaderRowChangeEvent(((F26000ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F26000ParcelHeaderRowDeleting != null)) {
                    this.F26000ParcelHeaderRowDeleting(this, new F26000ParcelHeaderRowChangeEvent(((F26000ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF26000ParcelHeaderRow(F26000ParcelHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F26000ParcelHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f26000ParcelHeaderExemptionDetailsDataTable : global::System.Data.TypedTableBase<f26000ParcelHeaderExemptionDetailsRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnExemptAmount;
            
            private global::System.Data.DataColumn columnExemptionPercent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ParcelHeaderExemptionDetailsDataTable() {
                this.TableName = "f26000ParcelHeaderExemptionDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000ParcelHeaderExemptionDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f26000ParcelHeaderExemptionDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptAmountColumn {
                get {
                    return this.columnExemptAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionPercentColumn {
                get {
                    return this.columnExemptionPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ParcelHeaderExemptionDetailsRow this[int index] {
                get {
                    return ((f26000ParcelHeaderExemptionDetailsRow)(this.Rows[index]));
                }
            }
            
            public event f26000ParcelHeaderExemptionDetailsRowChangeEventHandler f26000ParcelHeaderExemptionDetailsRowChanging;
            
            public event f26000ParcelHeaderExemptionDetailsRowChangeEventHandler f26000ParcelHeaderExemptionDetailsRowChanged;
            
            public event f26000ParcelHeaderExemptionDetailsRowChangeEventHandler f26000ParcelHeaderExemptionDetailsRowDeleting;
            
            public event f26000ParcelHeaderExemptionDetailsRowChangeEventHandler f26000ParcelHeaderExemptionDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf26000ParcelHeaderExemptionDetailsRow(f26000ParcelHeaderExemptionDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ParcelHeaderExemptionDetailsRow Addf26000ParcelHeaderExemptionDetailsRow(int ParcelID, decimal ExemptAmount, decimal ExemptionPercent) {
                f26000ParcelHeaderExemptionDetailsRow rowf26000ParcelHeaderExemptionDetailsRow = ((f26000ParcelHeaderExemptionDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        ExemptAmount,
                        ExemptionPercent};
                rowf26000ParcelHeaderExemptionDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf26000ParcelHeaderExemptionDetailsRow);
                return rowf26000ParcelHeaderExemptionDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f26000ParcelHeaderExemptionDetailsDataTable cln = ((f26000ParcelHeaderExemptionDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f26000ParcelHeaderExemptionDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnExemptAmount = base.Columns["ExemptAmount"];
                this.columnExemptionPercent = base.Columns["ExemptionPercent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnExemptAmount = new global::System.Data.DataColumn("ExemptAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptAmount);
                this.columnExemptionPercent = new global::System.Data.DataColumn("ExemptionPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionPercent);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ParcelHeaderExemptionDetailsRow Newf26000ParcelHeaderExemptionDetailsRow() {
                return ((f26000ParcelHeaderExemptionDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f26000ParcelHeaderExemptionDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f26000ParcelHeaderExemptionDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f26000ParcelHeaderExemptionDetailsRowChanged != null)) {
                    this.f26000ParcelHeaderExemptionDetailsRowChanged(this, new f26000ParcelHeaderExemptionDetailsRowChangeEvent(((f26000ParcelHeaderExemptionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f26000ParcelHeaderExemptionDetailsRowChanging != null)) {
                    this.f26000ParcelHeaderExemptionDetailsRowChanging(this, new f26000ParcelHeaderExemptionDetailsRowChangeEvent(((f26000ParcelHeaderExemptionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f26000ParcelHeaderExemptionDetailsRowDeleted != null)) {
                    this.f26000ParcelHeaderExemptionDetailsRowDeleted(this, new f26000ParcelHeaderExemptionDetailsRowChangeEvent(((f26000ParcelHeaderExemptionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f26000ParcelHeaderExemptionDetailsRowDeleting != null)) {
                    this.f26000ParcelHeaderExemptionDetailsRowDeleting(this, new f26000ParcelHeaderExemptionDetailsRowChangeEvent(((f26000ParcelHeaderExemptionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef26000ParcelHeaderExemptionDetailsRow(f26000ParcelHeaderExemptionDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f26000ParcelHeaderExemptionDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f26000ClassCodeDataTable : global::System.Data.TypedTableBase<f26000ClassCodeRow> {
            
            private global::System.Data.DataColumn columnClassCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ClassCodeDataTable() {
                this.TableName = "f26000ClassCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000ClassCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f26000ClassCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassCodeColumn {
                get {
                    return this.columnClassCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ClassCodeRow this[int index] {
                get {
                    return ((f26000ClassCodeRow)(this.Rows[index]));
                }
            }
            
            public event f26000ClassCodeRowChangeEventHandler f26000ClassCodeRowChanging;
            
            public event f26000ClassCodeRowChangeEventHandler f26000ClassCodeRowChanged;
            
            public event f26000ClassCodeRowChangeEventHandler f26000ClassCodeRowDeleting;
            
            public event f26000ClassCodeRowChangeEventHandler f26000ClassCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf26000ClassCodeRow(f26000ClassCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ClassCodeRow Addf26000ClassCodeRow(string ClassCode) {
                f26000ClassCodeRow rowf26000ClassCodeRow = ((f26000ClassCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClassCode};
                rowf26000ClassCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf26000ClassCodeRow);
                return rowf26000ClassCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f26000ClassCodeDataTable cln = ((f26000ClassCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f26000ClassCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClassCode = base.Columns["ClassCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClassCode = new global::System.Data.DataColumn("ClassCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassCode);
                this.columnClassCode.ReadOnly = true;
                this.columnClassCode.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ClassCodeRow Newf26000ClassCodeRow() {
                return ((f26000ClassCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f26000ClassCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f26000ClassCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f26000ClassCodeRowChanged != null)) {
                    this.f26000ClassCodeRowChanged(this, new f26000ClassCodeRowChangeEvent(((f26000ClassCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f26000ClassCodeRowChanging != null)) {
                    this.f26000ClassCodeRowChanging(this, new f26000ClassCodeRowChangeEvent(((f26000ClassCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f26000ClassCodeRowDeleted != null)) {
                    this.f26000ClassCodeRowDeleted(this, new f26000ClassCodeRowChangeEvent(((f26000ClassCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f26000ClassCodeRowDeleting != null)) {
                    this.f26000ClassCodeRowDeleting(this, new f26000ClassCodeRowChangeEvent(((f26000ClassCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef26000ClassCodeRow(f26000ClassCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f26000ClassCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f26000_pcget_ExemptFieldDetailsDataTable : global::System.Data.TypedTableBase<f26000_pcget_ExemptFieldDetailsRow> {
            
            private global::System.Data.DataColumn columnExemptionFromAmount;
            
            private global::System.Data.DataColumn columnExemptionReduction;
            
            private global::System.Data.DataColumn columnExemptionPercent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pcget_ExemptFieldDetailsDataTable() {
                this.TableName = "f26000_pcget_ExemptFieldDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000_pcget_ExemptFieldDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f26000_pcget_ExemptFieldDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionFromAmountColumn {
                get {
                    return this.columnExemptionFromAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionReductionColumn {
                get {
                    return this.columnExemptionReduction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionPercentColumn {
                get {
                    return this.columnExemptionPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pcget_ExemptFieldDetailsRow this[int index] {
                get {
                    return ((f26000_pcget_ExemptFieldDetailsRow)(this.Rows[index]));
                }
            }
            
            public event f26000_pcget_ExemptFieldDetailsRowChangeEventHandler f26000_pcget_ExemptFieldDetailsRowChanging;
            
            public event f26000_pcget_ExemptFieldDetailsRowChangeEventHandler f26000_pcget_ExemptFieldDetailsRowChanged;
            
            public event f26000_pcget_ExemptFieldDetailsRowChangeEventHandler f26000_pcget_ExemptFieldDetailsRowDeleting;
            
            public event f26000_pcget_ExemptFieldDetailsRowChangeEventHandler f26000_pcget_ExemptFieldDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf26000_pcget_ExemptFieldDetailsRow(f26000_pcget_ExemptFieldDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pcget_ExemptFieldDetailsRow Addf26000_pcget_ExemptFieldDetailsRow(decimal ExemptionFromAmount, decimal ExemptionReduction, decimal ExemptionPercent) {
                f26000_pcget_ExemptFieldDetailsRow rowf26000_pcget_ExemptFieldDetailsRow = ((f26000_pcget_ExemptFieldDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ExemptionFromAmount,
                        ExemptionReduction,
                        ExemptionPercent};
                rowf26000_pcget_ExemptFieldDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf26000_pcget_ExemptFieldDetailsRow);
                return rowf26000_pcget_ExemptFieldDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f26000_pcget_ExemptFieldDetailsDataTable cln = ((f26000_pcget_ExemptFieldDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f26000_pcget_ExemptFieldDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExemptionFromAmount = base.Columns["ExemptionFromAmount"];
                this.columnExemptionReduction = base.Columns["ExemptionReduction"];
                this.columnExemptionPercent = base.Columns["ExemptionPercent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExemptionFromAmount = new global::System.Data.DataColumn("ExemptionFromAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionFromAmount);
                this.columnExemptionReduction = new global::System.Data.DataColumn("ExemptionReduction", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionReduction);
                this.columnExemptionPercent = new global::System.Data.DataColumn("ExemptionPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionPercent);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pcget_ExemptFieldDetailsRow Newf26000_pcget_ExemptFieldDetailsRow() {
                return ((f26000_pcget_ExemptFieldDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f26000_pcget_ExemptFieldDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f26000_pcget_ExemptFieldDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f26000_pcget_ExemptFieldDetailsRowChanged != null)) {
                    this.f26000_pcget_ExemptFieldDetailsRowChanged(this, new f26000_pcget_ExemptFieldDetailsRowChangeEvent(((f26000_pcget_ExemptFieldDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f26000_pcget_ExemptFieldDetailsRowChanging != null)) {
                    this.f26000_pcget_ExemptFieldDetailsRowChanging(this, new f26000_pcget_ExemptFieldDetailsRowChangeEvent(((f26000_pcget_ExemptFieldDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f26000_pcget_ExemptFieldDetailsRowDeleted != null)) {
                    this.f26000_pcget_ExemptFieldDetailsRowDeleted(this, new f26000_pcget_ExemptFieldDetailsRowChangeEvent(((f26000_pcget_ExemptFieldDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f26000_pcget_ExemptFieldDetailsRowDeleting != null)) {
                    this.f26000_pcget_ExemptFieldDetailsRowDeleting(this, new f26000_pcget_ExemptFieldDetailsRowChangeEvent(((f26000_pcget_ExemptFieldDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef26000_pcget_ExemptFieldDetailsRow(f26000_pcget_ExemptFieldDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f26000_pcget_ExemptFieldDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f26000_pclst_AppraisalTypeDataTable : global::System.Data.TypedTableBase<f26000_pclst_AppraisalTypeRow> {
            
            private global::System.Data.DataColumn columnAppraisalTypeID;
            
            private global::System.Data.DataColumn columnAppraisalType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pclst_AppraisalTypeDataTable() {
                this.TableName = "f26000_pclst_AppraisalType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000_pclst_AppraisalTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f26000_pclst_AppraisalTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraisalTypeIDColumn {
                get {
                    return this.columnAppraisalTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppraisalTypeColumn {
                get {
                    return this.columnAppraisalType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pclst_AppraisalTypeRow this[int index] {
                get {
                    return ((f26000_pclst_AppraisalTypeRow)(this.Rows[index]));
                }
            }
            
            public event f26000_pclst_AppraisalTypeRowChangeEventHandler f26000_pclst_AppraisalTypeRowChanging;
            
            public event f26000_pclst_AppraisalTypeRowChangeEventHandler f26000_pclst_AppraisalTypeRowChanged;
            
            public event f26000_pclst_AppraisalTypeRowChangeEventHandler f26000_pclst_AppraisalTypeRowDeleting;
            
            public event f26000_pclst_AppraisalTypeRowChangeEventHandler f26000_pclst_AppraisalTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf26000_pclst_AppraisalTypeRow(f26000_pclst_AppraisalTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pclst_AppraisalTypeRow Addf26000_pclst_AppraisalTypeRow(int AppraisalTypeID, string AppraisalType) {
                f26000_pclst_AppraisalTypeRow rowf26000_pclst_AppraisalTypeRow = ((f26000_pclst_AppraisalTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AppraisalTypeID,
                        AppraisalType};
                rowf26000_pclst_AppraisalTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf26000_pclst_AppraisalTypeRow);
                return rowf26000_pclst_AppraisalTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f26000_pclst_AppraisalTypeDataTable cln = ((f26000_pclst_AppraisalTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f26000_pclst_AppraisalTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAppraisalTypeID = base.Columns["AppraisalTypeID"];
                this.columnAppraisalType = base.Columns["AppraisalType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAppraisalTypeID = new global::System.Data.DataColumn("AppraisalTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraisalTypeID);
                this.columnAppraisalType = new global::System.Data.DataColumn("AppraisalType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppraisalType);
                this.columnAppraisalTypeID.AllowDBNull = false;
                this.columnAppraisalType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pclst_AppraisalTypeRow Newf26000_pclst_AppraisalTypeRow() {
                return ((f26000_pclst_AppraisalTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f26000_pclst_AppraisalTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f26000_pclst_AppraisalTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f26000_pclst_AppraisalTypeRowChanged != null)) {
                    this.f26000_pclst_AppraisalTypeRowChanged(this, new f26000_pclst_AppraisalTypeRowChangeEvent(((f26000_pclst_AppraisalTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f26000_pclst_AppraisalTypeRowChanging != null)) {
                    this.f26000_pclst_AppraisalTypeRowChanging(this, new f26000_pclst_AppraisalTypeRowChangeEvent(((f26000_pclst_AppraisalTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f26000_pclst_AppraisalTypeRowDeleted != null)) {
                    this.f26000_pclst_AppraisalTypeRowDeleted(this, new f26000_pclst_AppraisalTypeRowChangeEvent(((f26000_pclst_AppraisalTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f26000_pclst_AppraisalTypeRowDeleting != null)) {
                    this.f26000_pclst_AppraisalTypeRowDeleting(this, new f26000_pclst_AppraisalTypeRowChangeEvent(((f26000_pclst_AppraisalTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef26000_pclst_AppraisalTypeRow(f26000_pclst_AppraisalTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f26000_pclst_AppraisalTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetConfigStateDataTable : global::System.Data.TypedTableBase<GetConfigStateRow> {
            
            private global::System.Data.DataColumn columnIsCfgStateNE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigStateDataTable() {
                this.TableName = "GetConfigState";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetConfigStateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetConfigStateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCfgStateNEColumn {
                get {
                    return this.columnIsCfgStateNE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigStateRow this[int index] {
                get {
                    return ((GetConfigStateRow)(this.Rows[index]));
                }
            }
            
            public event GetConfigStateRowChangeEventHandler GetConfigStateRowChanging;
            
            public event GetConfigStateRowChangeEventHandler GetConfigStateRowChanged;
            
            public event GetConfigStateRowChangeEventHandler GetConfigStateRowDeleting;
            
            public event GetConfigStateRowChangeEventHandler GetConfigStateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetConfigStateRow(GetConfigStateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigStateRow AddGetConfigStateRow(byte IsCfgStateNE) {
                GetConfigStateRow rowGetConfigStateRow = ((GetConfigStateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsCfgStateNE};
                rowGetConfigStateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetConfigStateRow);
                return rowGetConfigStateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetConfigStateDataTable cln = ((GetConfigStateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetConfigStateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsCfgStateNE = base.Columns["IsCfgStateNE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsCfgStateNE = new global::System.Data.DataColumn("IsCfgStateNE", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCfgStateNE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigStateRow NewGetConfigStateRow() {
                return ((GetConfigStateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetConfigStateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetConfigStateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetConfigStateRowChanged != null)) {
                    this.GetConfigStateRowChanged(this, new GetConfigStateRowChangeEvent(((GetConfigStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetConfigStateRowChanging != null)) {
                    this.GetConfigStateRowChanging(this, new GetConfigStateRowChangeEvent(((GetConfigStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetConfigStateRowDeleted != null)) {
                    this.GetConfigStateRowDeleted(this, new GetConfigStateRowChangeEvent(((GetConfigStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetConfigStateRowDeleting != null)) {
                    this.GetConfigStateRowDeleting(this, new GetConfigStateRowChangeEvent(((GetConfigStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetConfigStateRow(GetConfigStateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F26000ParcelHeaderFormData ds = new F26000ParcelHeaderFormData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetConfigStateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f26000ListParcelLandTypesRow : global::System.Data.DataRow {
            
            private f26000ListParcelLandTypesDataTable tablef26000ListParcelLandTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000ListParcelLandTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef26000ListParcelLandTypes = ((f26000ListParcelLandTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tablef26000ListParcelLandTypes.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'f26000ListParcelLandTypes\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef26000ListParcelLandTypes.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tablef26000ListParcelLandTypes.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'f26000ListParcelLandTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef26000ListParcelLandTypes.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tablef26000ListParcelLandTypes.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tablef26000ListParcelLandTypes.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tablef26000ListParcelLandTypes.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tablef26000ListParcelLandTypes.LandTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f26000ListParcelImprovementRow : global::System.Data.DataRow {
            
            private f26000ListParcelImprovementDataTable tablef26000ListParcelImprovement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000ListParcelImprovementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef26000ListParcelImprovement = ((f26000ListParcelImprovementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImprovementID {
                get {
                    try {
                        return ((int)(this[this.tablef26000ListParcelImprovement.ImprovementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementID\' in table \'f26000ListParcelImprovement\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablef26000ListParcelImprovement.ImprovementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Improvement {
                get {
                    try {
                        return ((string)(this[this.tablef26000ListParcelImprovement.ImprovementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Improvement\' in table \'f26000ListParcelImprovement\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablef26000ListParcelImprovement.ImprovementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementIDNull() {
                return this.IsNull(this.tablef26000ListParcelImprovement.ImprovementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementIDNull() {
                this[this.tablef26000ListParcelImprovement.ImprovementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementNull() {
                return this.IsNull(this.tablef26000ListParcelImprovement.ImprovementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementNull() {
                this[this.tablef26000ListParcelImprovement.ImprovementColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class updateParcelHeaderDetailsDataTableRow : global::System.Data.DataRow {
            
            private updateParcelHeaderDetailsDataTableDataTable tableupdateParcelHeaderDetailsDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal updateParcelHeaderDetailsDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableupdateParcelHeaderDetailsDataTable = ((updateParcelHeaderDetailsDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelID {
                get {
                    if (this.IsParcelIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.ParcelIDColumn]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxDistrictID {
                get {
                    if (this.IsTaxDistrictIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.TaxDistrictIDColumn]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.TaxDistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NBHDID {
                get {
                    if (this.IsNBHDIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.NBHDIDColumn]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImprovementID {
                get {
                    try {
                        return ((int)(this[this.tableupdateParcelHeaderDetailsDataTable.ImprovementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementID\' in table \'updateParcelHeaderDetailsDataTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.ImprovementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableupdateParcelHeaderDetailsDataTable.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'updateParcelHeaderDetailsDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID1 {
                get {
                    if (this.IsMID1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.MID1Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.MID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID2 {
                get {
                    if (this.IsMID2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.MID2Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.MID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID3 {
                get {
                    if (this.IsMID3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.MID3Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.MID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID4 {
                get {
                    if (this.IsMID4Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.MID4Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.MID4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID5 {
                get {
                    if (this.IsMID5Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.MID5Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.MID5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID6 {
                get {
                    if (this.IsMID6Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.MID6Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.MID6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID7 {
                get {
                    if (this.IsMID7Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.MID7Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.MID7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID8 {
                get {
                    if (this.IsMID8Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.MID8Column]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.MID8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableupdateParcelHeaderDetailsDataTable.LocationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationID\' in table \'updateParcelHeaderDetailsDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.LocationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupingID {
                get {
                    try {
                        return ((int)(this[this.tableupdateParcelHeaderDetailsDataTable.GroupingIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupingID\' in table \'updateParcelHeaderDetailsDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.GroupingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TIFFundID {
                get {
                    try {
                        return ((int)(this[this.tableupdateParcelHeaderDetailsDataTable.TIFFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIFFundID\' in table \'updateParcelHeaderDetailsDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.TIFFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionID {
                get {
                    try {
                        return ((int)(this[this.tableupdateParcelHeaderDetailsDataTable.ExemptionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionID\' in table \'updateParcelHeaderDetailsDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.ExemptionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionCode {
                get {
                    try {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.ExemptionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionCode\' in table \'updateParcelHeaderDetailsDataTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.ExemptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExemptFromAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableupdateParcelHeaderDetailsDataTable.ExemptFromAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptFromAmount\' in table \'updateParcelHeaderDetailsDataTa" +
                                "ble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.ExemptFromAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreenbelt {
                get {
                    try {
                        return ((bool)(this[this.tableupdateParcelHeaderDetailsDataTable.IsGreenbeltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsGreenbelt\' in table \'updateParcelHeaderDetailsDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.IsGreenbeltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GreenbeltFilingDate {
                get {
                    if (this.IsGreenbeltFilingDateNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.GreenbeltFilingDateColumn]));
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.GreenbeltFilingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GreenbeltMarketValue {
                get {
                    try {
                        return ((decimal)(this[this.tableupdateParcelHeaderDetailsDataTable.GreenbeltMarketValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreenbeltMarketValue\' in table \'updateParcelHeaderDetailsDa" +
                                "taTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.GreenbeltMarketValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GreenbeltValueLoss {
                get {
                    try {
                        return ((decimal)(this[this.tableupdateParcelHeaderDetailsDataTable.GreenbeltValueLossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreenbeltValueLoss\' in table \'updateParcelHeaderDetailsData" +
                                "Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.GreenbeltValueLossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassCode {
                get {
                    try {
                        return ((string)(this[this.tableupdateParcelHeaderDetailsDataTable.ClassCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassCode\' in table \'updateParcelHeaderDetailsDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.ClassCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropertyPenalty {
                get {
                    try {
                        return ((decimal)(this[this.tableupdateParcelHeaderDetailsDataTable.PropertyPenaltyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropertyPenalty\' in table \'updateParcelHeaderDetailsDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.PropertyPenaltyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AppraisalTypeID {
                get {
                    try {
                        return ((int)(this[this.tableupdateParcelHeaderDetailsDataTable.AppraisalTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraisalTypeID\' in table \'updateParcelHeaderDetailsDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupdateParcelHeaderDetailsDataTable.AppraisalTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxDistrictIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.TaxDistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxDistrictIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.TaxDistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.ImprovementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.ImprovementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID1Null() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.MID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID1Null() {
                this[this.tableupdateParcelHeaderDetailsDataTable.MID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID2Null() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.MID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID2Null() {
                this[this.tableupdateParcelHeaderDetailsDataTable.MID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID3Null() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.MID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID3Null() {
                this[this.tableupdateParcelHeaderDetailsDataTable.MID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID4Null() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.MID4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID4Null() {
                this[this.tableupdateParcelHeaderDetailsDataTable.MID4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID5Null() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.MID5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID5Null() {
                this[this.tableupdateParcelHeaderDetailsDataTable.MID5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID6Null() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.MID6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID6Null() {
                this[this.tableupdateParcelHeaderDetailsDataTable.MID6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID7Null() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.MID7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID7Null() {
                this[this.tableupdateParcelHeaderDetailsDataTable.MID7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID8Null() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.MID8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID8Null() {
                this[this.tableupdateParcelHeaderDetailsDataTable.MID8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.LocationIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.LocationIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupingIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.GroupingIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupingIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.GroupingIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIFFundIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.TIFFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIFFundIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.TIFFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.ExemptionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.ExemptionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionCodeNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.ExemptionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionCodeNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.ExemptionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptFromAmountNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.ExemptFromAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptFromAmountNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.ExemptFromAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsGreenbeltNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.IsGreenbeltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsGreenbeltNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.IsGreenbeltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreenbeltFilingDateNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.GreenbeltFilingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreenbeltFilingDateNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.GreenbeltFilingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreenbeltMarketValueNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.GreenbeltMarketValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreenbeltMarketValueNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.GreenbeltMarketValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreenbeltValueLossNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.GreenbeltValueLossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreenbeltValueLossNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.GreenbeltValueLossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassCodeNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.ClassCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassCodeNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.ClassCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyPenaltyNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.PropertyPenaltyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyPenaltyNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.PropertyPenaltyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraisalTypeIDNull() {
                return this.IsNull(this.tableupdateParcelHeaderDetailsDataTable.AppraisalTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraisalTypeIDNull() {
                this[this.tableupdateParcelHeaderDetailsDataTable.AppraisalTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F26000ParcelHeaderRow : global::System.Data.DataRow {
            
            private F26000ParcelHeaderDataTable tableF26000ParcelHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F26000ParcelHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF26000ParcelHeader = ((F26000ParcelHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    return ((int)(this[this.tableF26000ParcelHeader.ParcelIDColumn]));
                }
                set {
                    this[this.tableF26000ParcelHeader.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    return ((string)(this[this.tableF26000ParcelHeader.ParcelNumberColumn]));
                }
                set {
                    this[this.tableF26000ParcelHeader.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableF26000ParcelHeader.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ParcelTypeID {
                get {
                    return ((byte)(this[this.tableF26000ParcelHeader.ParcelTypeIDColumn]));
                }
                set {
                    this[this.tableF26000ParcelHeader.ParcelTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Retired {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.RetiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Retired\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.RetiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exempt {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.ExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exempt\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LockAdminBy {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.LockAdminByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LockAdminBy\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.LockAdminByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LockAppraisalBy {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.LockAppraisalByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LockAppraisalBy\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.LockAppraisalByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LockValueBy {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.LockValueByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LockValueBy\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.LockValueByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Events {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.EventsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Events\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.EventsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableF26000ParcelHeader.DescriptionColumn]));
                }
                set {
                    this[this.tableF26000ParcelHeader.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryOwner {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.PrimaryOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryOwner\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.PrimaryOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassCode {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.ClassCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassCode\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ClassCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassCodeColorRGBR {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.ClassCodeColorRGBRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassCodeColorRGBR\' in table \'F26000ParcelHeader\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ClassCodeColorRGBRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID1 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.MID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID1\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.MID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID2 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.MID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID2\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.MID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID3 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.MID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID3\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.MID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID4 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.MID4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID4\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.MID4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID5 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.MID5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID5\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.MID5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID6 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.MID6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID6\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.MID6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID7 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.MID7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID7\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.MID7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID8 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.MID8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID8\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.MID8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.LabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Label\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe2 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Labe2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Labe2\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Labe2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe3 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Labe3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Labe3\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Labe3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe4 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Labe4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Labe4\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Labe4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe5 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Labe5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Labe5\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Labe5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe6 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Labe6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Labe6\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Labe6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe7 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Labe7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Labe7\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Labe7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Labe8 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Labe8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Labe8\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Labe8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask1 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Mask1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mask1\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Mask1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask2 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Mask2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mask2\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Mask2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask3 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Mask3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mask3\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Mask3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask4 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Mask4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mask4\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Mask4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask5 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Mask5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mask5\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Mask5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask6 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Mask6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mask6\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Mask6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask7 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Mask7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mask7\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Mask7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mask8 {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.Mask8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mask8\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.Mask8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NeighborhoodGroup {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.NeighborhoodGroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NeighborhoodGroup\' in table \'F26000ParcelHeader\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.NeighborhoodGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NBHDID {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.NBHDIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NBHDID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.NBHDIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.DistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AssessmentTypeID {
                get {
                    try {
                        return ((short)(this[this.tableF26000ParcelHeader.AssessmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentTypeID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.AssessmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessmentType {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.AssessmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentType\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.AssessmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.PhoneNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhoneNumber\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImprovementID {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.ImprovementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ImprovementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Improvement {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.ImprovementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Improvement\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ImprovementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessorLocation {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.AssessorLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessorLocation\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.AssessorLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValuationGrouping {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.ValuationGroupingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValuationGrouping\' in table \'F26000ParcelHeader\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ValuationGroupingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionCode {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.ExemptionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionCode\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ExemptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExemptFromAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.ExemptFromAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptFromAmount\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ExemptFromAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExemptionAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.ExemptionAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionAmount\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ExemptionAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExemptionPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.ExemptionPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionPercent\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ExemptionPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreenbelt {
                get {
                    try {
                        return ((bool)(this[this.tableF26000ParcelHeader.IsGreenbeltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsGreenbelt\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.IsGreenbeltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime GreenbeltFilingDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableF26000ParcelHeader.GreenbeltFilingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreenbeltFilingDate\' in table \'F26000ParcelHeader\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.GreenbeltFilingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GreenbeltMarketValue {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.GreenbeltMarketValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreenbeltMarketValue\' in table \'F26000ParcelHeader\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.GreenbeltMarketValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GreenbeltValueLoss {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.GreenbeltValueLossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreenbeltValueLoss\' in table \'F26000ParcelHeader\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.GreenbeltValueLossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocationID {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.LocationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.LocationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupingID {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.GroupingIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupingID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.GroupingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExemptionID {
                get {
                    try {
                        return ((int)(this[this.tableF26000ParcelHeader.ExemptionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.ExemptionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AutoCompleteValue {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.AutoCompleteValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AutoCompleteValue\' in table \'F26000ParcelHeader\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.AutoCompleteValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PropertyPenalty {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.PropertyPenaltyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropertyPenalty\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.PropertyPenaltyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxCredit {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.TaxCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxCredit\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.TaxCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnusedTaxCredit {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.UnusedTaxCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnusedTaxCredit\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.UnusedTaxCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppraisalTypeID {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.AppraisalTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraisalTypeID\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.AppraisalTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppraisalType {
                get {
                    try {
                        return ((string)(this[this.tableF26000ParcelHeader.AppraisalTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraisalType\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.AppraisalTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AgLandTaxCredit {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.AgLandTaxCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgLandTaxCredit\' in table \'F26000ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.AgLandTaxCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrStatRealTaxCredit {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.CurrStatRealTaxCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrStatRealTaxCredit\' in table \'F26000ParcelHeader\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.CurrStatRealTaxCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrStatAglandTaxCredit {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.CurrStatAglandTaxCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrStatAglandTaxCredit\' in table \'F26000ParcelHeader\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.CurrStatAglandTaxCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CurrStatUnusedTaxCredit {
                get {
                    try {
                        return ((decimal)(this[this.tableF26000ParcelHeader.CurrStatUnusedTaxCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrStatUnusedTaxCredit\' in table \'F26000ParcelHeader\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableF26000ParcelHeader.CurrStatUnusedTaxCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableF26000ParcelHeader.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableF26000ParcelHeader.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableF26000ParcelHeader.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableF26000ParcelHeader.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetiredNull() {
                return this.IsNull(this.tableF26000ParcelHeader.RetiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetiredNull() {
                this[this.tableF26000ParcelHeader.RetiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptNull() {
                this[this.tableF26000ParcelHeader.ExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockAdminByNull() {
                return this.IsNull(this.tableF26000ParcelHeader.LockAdminByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockAdminByNull() {
                this[this.tableF26000ParcelHeader.LockAdminByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockAppraisalByNull() {
                return this.IsNull(this.tableF26000ParcelHeader.LockAppraisalByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockAppraisalByNull() {
                this[this.tableF26000ParcelHeader.LockAppraisalByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockValueByNull() {
                return this.IsNull(this.tableF26000ParcelHeader.LockValueByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockValueByNull() {
                this[this.tableF26000ParcelHeader.LockValueByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventsNull() {
                return this.IsNull(this.tableF26000ParcelHeader.EventsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventsNull() {
                this[this.tableF26000ParcelHeader.EventsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryOwnerNull() {
                return this.IsNull(this.tableF26000ParcelHeader.PrimaryOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryOwnerNull() {
                this[this.tableF26000ParcelHeader.PrimaryOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableF26000ParcelHeader.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableF26000ParcelHeader.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableF26000ParcelHeader.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableF26000ParcelHeader.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassCodeNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ClassCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassCodeNull() {
                this[this.tableF26000ParcelHeader.ClassCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassCodeColorRGBRNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ClassCodeColorRGBRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassCodeColorRGBRNull() {
                this[this.tableF26000ParcelHeader.ClassCodeColorRGBRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID1Null() {
                return this.IsNull(this.tableF26000ParcelHeader.MID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID1Null() {
                this[this.tableF26000ParcelHeader.MID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID2Null() {
                return this.IsNull(this.tableF26000ParcelHeader.MID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID2Null() {
                this[this.tableF26000ParcelHeader.MID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID3Null() {
                return this.IsNull(this.tableF26000ParcelHeader.MID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID3Null() {
                this[this.tableF26000ParcelHeader.MID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID4Null() {
                return this.IsNull(this.tableF26000ParcelHeader.MID4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID4Null() {
                this[this.tableF26000ParcelHeader.MID4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID5Null() {
                return this.IsNull(this.tableF26000ParcelHeader.MID5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID5Null() {
                this[this.tableF26000ParcelHeader.MID5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID6Null() {
                return this.IsNull(this.tableF26000ParcelHeader.MID6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID6Null() {
                this[this.tableF26000ParcelHeader.MID6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID7Null() {
                return this.IsNull(this.tableF26000ParcelHeader.MID7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID7Null() {
                this[this.tableF26000ParcelHeader.MID7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID8Null() {
                return this.IsNull(this.tableF26000ParcelHeader.MID8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID8Null() {
                this[this.tableF26000ParcelHeader.MID8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelNull() {
                return this.IsNull(this.tableF26000ParcelHeader.LabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelNull() {
                this[this.tableF26000ParcelHeader.LabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe2Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Labe2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe2Null() {
                this[this.tableF26000ParcelHeader.Labe2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe3Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Labe3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe3Null() {
                this[this.tableF26000ParcelHeader.Labe3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe4Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Labe4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe4Null() {
                this[this.tableF26000ParcelHeader.Labe4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe5Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Labe5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe5Null() {
                this[this.tableF26000ParcelHeader.Labe5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe6Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Labe6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe6Null() {
                this[this.tableF26000ParcelHeader.Labe6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe7Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Labe7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe7Null() {
                this[this.tableF26000ParcelHeader.Labe7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabe8Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Labe8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabe8Null() {
                this[this.tableF26000ParcelHeader.Labe8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask1Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Mask1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask1Null() {
                this[this.tableF26000ParcelHeader.Mask1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask2Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Mask2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask2Null() {
                this[this.tableF26000ParcelHeader.Mask2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask3Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Mask3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask3Null() {
                this[this.tableF26000ParcelHeader.Mask3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask4Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Mask4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask4Null() {
                this[this.tableF26000ParcelHeader.Mask4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask5Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Mask5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask5Null() {
                this[this.tableF26000ParcelHeader.Mask5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask6Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Mask6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask6Null() {
                this[this.tableF26000ParcelHeader.Mask6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask7Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Mask7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask7Null() {
                this[this.tableF26000ParcelHeader.Mask7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMask8Null() {
                return this.IsNull(this.tableF26000ParcelHeader.Mask8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMask8Null() {
                this[this.tableF26000ParcelHeader.Mask8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableF26000ParcelHeader.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableF26000ParcelHeader.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNeighborhoodGroupNull() {
                return this.IsNull(this.tableF26000ParcelHeader.NeighborhoodGroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNeighborhoodGroupNull() {
                this[this.tableF26000ParcelHeader.NeighborhoodGroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNBHDIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.NBHDIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNBHDIDNull() {
                this[this.tableF26000ParcelHeader.NBHDIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.DistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictIDNull() {
                this[this.tableF26000ParcelHeader.DistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.AssessmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeIDNull() {
                this[this.tableF26000ParcelHeader.AssessmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeNull() {
                return this.IsNull(this.tableF26000ParcelHeader.AssessmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeNull() {
                this[this.tableF26000ParcelHeader.AssessmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableF26000ParcelHeader.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNumberNull() {
                return this.IsNull(this.tableF26000ParcelHeader.PhoneNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNumberNull() {
                this[this.tableF26000ParcelHeader.PhoneNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ImprovementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementIDNull() {
                this[this.tableF26000ParcelHeader.ImprovementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ImprovementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementNull() {
                this[this.tableF26000ParcelHeader.ImprovementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableF26000ParcelHeader.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableF26000ParcelHeader.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableF26000ParcelHeader.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessorLocationNull() {
                return this.IsNull(this.tableF26000ParcelHeader.AssessorLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessorLocationNull() {
                this[this.tableF26000ParcelHeader.AssessorLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValuationGroupingNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ValuationGroupingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValuationGroupingNull() {
                this[this.tableF26000ParcelHeader.ValuationGroupingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionCodeNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ExemptionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionCodeNull() {
                this[this.tableF26000ParcelHeader.ExemptionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptFromAmountNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ExemptFromAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptFromAmountNull() {
                this[this.tableF26000ParcelHeader.ExemptFromAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionAmountNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ExemptionAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionAmountNull() {
                this[this.tableF26000ParcelHeader.ExemptionAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionPercentNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ExemptionPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionPercentNull() {
                this[this.tableF26000ParcelHeader.ExemptionPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsGreenbeltNull() {
                return this.IsNull(this.tableF26000ParcelHeader.IsGreenbeltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsGreenbeltNull() {
                this[this.tableF26000ParcelHeader.IsGreenbeltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreenbeltFilingDateNull() {
                return this.IsNull(this.tableF26000ParcelHeader.GreenbeltFilingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreenbeltFilingDateNull() {
                this[this.tableF26000ParcelHeader.GreenbeltFilingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreenbeltMarketValueNull() {
                return this.IsNull(this.tableF26000ParcelHeader.GreenbeltMarketValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreenbeltMarketValueNull() {
                this[this.tableF26000ParcelHeader.GreenbeltMarketValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreenbeltValueLossNull() {
                return this.IsNull(this.tableF26000ParcelHeader.GreenbeltValueLossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreenbeltValueLossNull() {
                this[this.tableF26000ParcelHeader.GreenbeltValueLossColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.LocationIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationIDNull() {
                this[this.tableF26000ParcelHeader.LocationIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupingIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.GroupingIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupingIDNull() {
                this[this.tableF26000ParcelHeader.GroupingIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.ExemptionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionIDNull() {
                this[this.tableF26000ParcelHeader.ExemptionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoCompleteValueNull() {
                return this.IsNull(this.tableF26000ParcelHeader.AutoCompleteValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoCompleteValueNull() {
                this[this.tableF26000ParcelHeader.AutoCompleteValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyPenaltyNull() {
                return this.IsNull(this.tableF26000ParcelHeader.PropertyPenaltyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyPenaltyNull() {
                this[this.tableF26000ParcelHeader.PropertyPenaltyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCreditNull() {
                return this.IsNull(this.tableF26000ParcelHeader.TaxCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCreditNull() {
                this[this.tableF26000ParcelHeader.TaxCreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnusedTaxCreditNull() {
                return this.IsNull(this.tableF26000ParcelHeader.UnusedTaxCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnusedTaxCreditNull() {
                this[this.tableF26000ParcelHeader.UnusedTaxCreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraisalTypeIDNull() {
                return this.IsNull(this.tableF26000ParcelHeader.AppraisalTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraisalTypeIDNull() {
                this[this.tableF26000ParcelHeader.AppraisalTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraisalTypeNull() {
                return this.IsNull(this.tableF26000ParcelHeader.AppraisalTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraisalTypeNull() {
                this[this.tableF26000ParcelHeader.AppraisalTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgLandTaxCreditNull() {
                return this.IsNull(this.tableF26000ParcelHeader.AgLandTaxCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgLandTaxCreditNull() {
                this[this.tableF26000ParcelHeader.AgLandTaxCreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrStatRealTaxCreditNull() {
                return this.IsNull(this.tableF26000ParcelHeader.CurrStatRealTaxCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrStatRealTaxCreditNull() {
                this[this.tableF26000ParcelHeader.CurrStatRealTaxCreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrStatAglandTaxCreditNull() {
                return this.IsNull(this.tableF26000ParcelHeader.CurrStatAglandTaxCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrStatAglandTaxCreditNull() {
                this[this.tableF26000ParcelHeader.CurrStatAglandTaxCreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrStatUnusedTaxCreditNull() {
                return this.IsNull(this.tableF26000ParcelHeader.CurrStatUnusedTaxCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrStatUnusedTaxCreditNull() {
                this[this.tableF26000ParcelHeader.CurrStatUnusedTaxCreditColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f26000ParcelHeaderExemptionDetailsRow : global::System.Data.DataRow {
            
            private f26000ParcelHeaderExemptionDetailsDataTable tablef26000ParcelHeaderExemptionDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000ParcelHeaderExemptionDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef26000ParcelHeaderExemptionDetails = ((f26000ParcelHeaderExemptionDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tablef26000ParcelHeaderExemptionDetails.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'f26000ParcelHeaderExemptionDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablef26000ParcelHeaderExemptionDetails.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExemptAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablef26000ParcelHeaderExemptionDetails.ExemptAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptAmount\' in table \'f26000ParcelHeaderExemptionDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef26000ParcelHeaderExemptionDetails.ExemptAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExemptionPercent {
                get {
                    try {
                        return ((decimal)(this[this.tablef26000ParcelHeaderExemptionDetails.ExemptionPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionPercent\' in table \'f26000ParcelHeaderExemptionDeta" +
                                "ils\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef26000ParcelHeaderExemptionDetails.ExemptionPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tablef26000ParcelHeaderExemptionDetails.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tablef26000ParcelHeaderExemptionDetails.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptAmountNull() {
                return this.IsNull(this.tablef26000ParcelHeaderExemptionDetails.ExemptAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptAmountNull() {
                this[this.tablef26000ParcelHeaderExemptionDetails.ExemptAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionPercentNull() {
                return this.IsNull(this.tablef26000ParcelHeaderExemptionDetails.ExemptionPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionPercentNull() {
                this[this.tablef26000ParcelHeaderExemptionDetails.ExemptionPercentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f26000ClassCodeRow : global::System.Data.DataRow {
            
            private f26000ClassCodeDataTable tablef26000ClassCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000ClassCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef26000ClassCode = ((f26000ClassCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassCode {
                get {
                    try {
                        return ((string)(this[this.tablef26000ClassCode.ClassCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassCode\' in table \'f26000ClassCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef26000ClassCode.ClassCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassCodeNull() {
                return this.IsNull(this.tablef26000ClassCode.ClassCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassCodeNull() {
                this[this.tablef26000ClassCode.ClassCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f26000_pcget_ExemptFieldDetailsRow : global::System.Data.DataRow {
            
            private f26000_pcget_ExemptFieldDetailsDataTable tablef26000_pcget_ExemptFieldDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000_pcget_ExemptFieldDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef26000_pcget_ExemptFieldDetails = ((f26000_pcget_ExemptFieldDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExemptionFromAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablef26000_pcget_ExemptFieldDetails.ExemptionFromAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionFromAmount\' in table \'f26000_pcget_ExemptFieldDeta" +
                                "ils\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef26000_pcget_ExemptFieldDetails.ExemptionFromAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExemptionReduction {
                get {
                    try {
                        return ((decimal)(this[this.tablef26000_pcget_ExemptFieldDetails.ExemptionReductionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionReduction\' in table \'f26000_pcget_ExemptFieldDetai" +
                                "ls\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef26000_pcget_ExemptFieldDetails.ExemptionReductionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExemptionPercent {
                get {
                    try {
                        return ((decimal)(this[this.tablef26000_pcget_ExemptFieldDetails.ExemptionPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionPercent\' in table \'f26000_pcget_ExemptFieldDetails" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef26000_pcget_ExemptFieldDetails.ExemptionPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionFromAmountNull() {
                return this.IsNull(this.tablef26000_pcget_ExemptFieldDetails.ExemptionFromAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionFromAmountNull() {
                this[this.tablef26000_pcget_ExemptFieldDetails.ExemptionFromAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionReductionNull() {
                return this.IsNull(this.tablef26000_pcget_ExemptFieldDetails.ExemptionReductionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionReductionNull() {
                this[this.tablef26000_pcget_ExemptFieldDetails.ExemptionReductionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionPercentNull() {
                return this.IsNull(this.tablef26000_pcget_ExemptFieldDetails.ExemptionPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionPercentNull() {
                this[this.tablef26000_pcget_ExemptFieldDetails.ExemptionPercentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f26000_pclst_AppraisalTypeRow : global::System.Data.DataRow {
            
            private f26000_pclst_AppraisalTypeDataTable tablef26000_pclst_AppraisalType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f26000_pclst_AppraisalTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef26000_pclst_AppraisalType = ((f26000_pclst_AppraisalTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AppraisalTypeID {
                get {
                    return ((int)(this[this.tablef26000_pclst_AppraisalType.AppraisalTypeIDColumn]));
                }
                set {
                    this[this.tablef26000_pclst_AppraisalType.AppraisalTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppraisalType {
                get {
                    try {
                        return ((string)(this[this.tablef26000_pclst_AppraisalType.AppraisalTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppraisalType\' in table \'f26000_pclst_AppraisalType\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablef26000_pclst_AppraisalType.AppraisalTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppraisalTypeNull() {
                return this.IsNull(this.tablef26000_pclst_AppraisalType.AppraisalTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppraisalTypeNull() {
                this[this.tablef26000_pclst_AppraisalType.AppraisalTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetConfigStateRow : global::System.Data.DataRow {
            
            private GetConfigStateDataTable tableGetConfigState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetConfigStateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetConfigState = ((GetConfigStateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IsCfgStateNE {
                get {
                    try {
                        return ((byte)(this[this.tableGetConfigState.IsCfgStateNEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCfgStateNE\' in table \'GetConfigState\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetConfigState.IsCfgStateNEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCfgStateNENull() {
                return this.IsNull(this.tableGetConfigState.IsCfgStateNEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCfgStateNENull() {
                this[this.tableGetConfigState.IsCfgStateNEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f26000ListParcelLandTypesRowChangeEvent : global::System.EventArgs {
            
            private f26000ListParcelLandTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelLandTypesRowChangeEvent(f26000ListParcelLandTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelLandTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f26000ListParcelImprovementRowChangeEvent : global::System.EventArgs {
            
            private f26000ListParcelImprovementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelImprovementRowChangeEvent(f26000ListParcelImprovementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ListParcelImprovementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class updateParcelHeaderDetailsDataTableRowChangeEvent : global::System.EventArgs {
            
            private updateParcelHeaderDetailsDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelHeaderDetailsDataTableRowChangeEvent(updateParcelHeaderDetailsDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public updateParcelHeaderDetailsDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F26000ParcelHeaderRowChangeEvent : global::System.EventArgs {
            
            private F26000ParcelHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F26000ParcelHeaderRowChangeEvent(F26000ParcelHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F26000ParcelHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f26000ParcelHeaderExemptionDetailsRowChangeEvent : global::System.EventArgs {
            
            private f26000ParcelHeaderExemptionDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ParcelHeaderExemptionDetailsRowChangeEvent(f26000ParcelHeaderExemptionDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ParcelHeaderExemptionDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f26000ClassCodeRowChangeEvent : global::System.EventArgs {
            
            private f26000ClassCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ClassCodeRowChangeEvent(f26000ClassCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000ClassCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f26000_pcget_ExemptFieldDetailsRowChangeEvent : global::System.EventArgs {
            
            private f26000_pcget_ExemptFieldDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pcget_ExemptFieldDetailsRowChangeEvent(f26000_pcget_ExemptFieldDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pcget_ExemptFieldDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f26000_pclst_AppraisalTypeRowChangeEvent : global::System.EventArgs {
            
            private f26000_pclst_AppraisalTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pclst_AppraisalTypeRowChangeEvent(f26000_pclst_AppraisalTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f26000_pclst_AppraisalTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetConfigStateRowChangeEvent : global::System.EventArgs {
            
            private GetConfigStateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigStateRowChangeEvent(GetConfigStateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigStateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591