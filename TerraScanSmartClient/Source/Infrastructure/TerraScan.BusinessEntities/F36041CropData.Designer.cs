//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F36041CropData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F36041CropData : global::System.Data.DataSet {
        
        private GetCropDetailsDataTable tableGetCropDetails;
        
        private GetCropCodeDetailsDataTable tableGetCropCodeDetails;
        
        private CheckBreakValuesDataTable tableCheckBreakValues;
        
        private RollYearDataTable tableRollYear;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F36041CropData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F36041CropData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetCropDetails"] != null)) {
                    base.Tables.Add(new GetCropDetailsDataTable(ds.Tables["GetCropDetails"]));
                }
                if ((ds.Tables["GetCropCodeDetails"] != null)) {
                    base.Tables.Add(new GetCropCodeDetailsDataTable(ds.Tables["GetCropCodeDetails"]));
                }
                if ((ds.Tables["CheckBreakValues"] != null)) {
                    base.Tables.Add(new CheckBreakValuesDataTable(ds.Tables["CheckBreakValues"]));
                }
                if ((ds.Tables["RollYear"] != null)) {
                    base.Tables.Add(new RollYearDataTable(ds.Tables["RollYear"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetCropDetailsDataTable GetCropDetails {
            get {
                return this.tableGetCropDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetCropCodeDetailsDataTable GetCropCodeDetails {
            get {
                return this.tableGetCropCodeDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CheckBreakValuesDataTable CheckBreakValues {
            get {
                return this.tableCheckBreakValues;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RollYearDataTable RollYear {
            get {
                return this.tableRollYear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F36041CropData cln = ((F36041CropData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetCropDetails"] != null)) {
                    base.Tables.Add(new GetCropDetailsDataTable(ds.Tables["GetCropDetails"]));
                }
                if ((ds.Tables["GetCropCodeDetails"] != null)) {
                    base.Tables.Add(new GetCropCodeDetailsDataTable(ds.Tables["GetCropCodeDetails"]));
                }
                if ((ds.Tables["CheckBreakValues"] != null)) {
                    base.Tables.Add(new CheckBreakValuesDataTable(ds.Tables["CheckBreakValues"]));
                }
                if ((ds.Tables["RollYear"] != null)) {
                    base.Tables.Add(new RollYearDataTable(ds.Tables["RollYear"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetCropDetails = ((GetCropDetailsDataTable)(base.Tables["GetCropDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetCropDetails != null)) {
                    this.tableGetCropDetails.InitVars();
                }
            }
            this.tableGetCropCodeDetails = ((GetCropCodeDetailsDataTable)(base.Tables["GetCropCodeDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetCropCodeDetails != null)) {
                    this.tableGetCropCodeDetails.InitVars();
                }
            }
            this.tableCheckBreakValues = ((CheckBreakValuesDataTable)(base.Tables["CheckBreakValues"]));
            if ((initTable == true)) {
                if ((this.tableCheckBreakValues != null)) {
                    this.tableCheckBreakValues.InitVars();
                }
            }
            this.tableRollYear = ((RollYearDataTable)(base.Tables["RollYear"]));
            if ((initTable == true)) {
                if ((this.tableRollYear != null)) {
                    this.tableRollYear.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F36041CropData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F36041CropData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetCropDetails = new GetCropDetailsDataTable();
            base.Tables.Add(this.tableGetCropDetails);
            this.tableGetCropCodeDetails = new GetCropCodeDetailsDataTable();
            base.Tables.Add(this.tableGetCropCodeDetails);
            this.tableCheckBreakValues = new CheckBreakValuesDataTable();
            base.Tables.Add(this.tableCheckBreakValues);
            this.tableRollYear = new RollYearDataTable();
            base.Tables.Add(this.tableRollYear);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetCropDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetCropCodeDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCheckBreakValues() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRollYear() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F36041CropData ds = new F36041CropData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetCropDetailsRowChangeEventHandler(object sender, GetCropDetailsRowChangeEvent e);
        
        public delegate void GetCropCodeDetailsRowChangeEventHandler(object sender, GetCropCodeDetailsRowChangeEvent e);
        
        public delegate void CheckBreakValuesRowChangeEventHandler(object sender, CheckBreakValuesRowChangeEvent e);
        
        public delegate void RollYearRowChangeEventHandler(object sender, RollYearRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetCropDetailsDataTable : global::System.Data.TypedTableBase<GetCropDetailsRow> {
            
            private global::System.Data.DataColumn columnCropID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnCropCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIsFruitTree;
            
            private global::System.Data.DataColumn columnPlanted;
            
            private global::System.Data.DataColumn columnAge;
            
            private global::System.Data.DataColumn columnAdjust;
            
            private global::System.Data.DataColumn columnValuePer;
            
            private global::System.Data.DataColumn columnAcres;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnIsCropConfigured;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropDetailsDataTable() {
                this.TableName = "GetCropDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCropDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetCropDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropIDColumn {
                get {
                    return this.columnCropID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropCodeColumn {
                get {
                    return this.columnCropCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFruitTreeColumn {
                get {
                    return this.columnIsFruitTree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlantedColumn {
                get {
                    return this.columnPlanted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustColumn {
                get {
                    return this.columnAdjust;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValuePerColumn {
                get {
                    return this.columnValuePer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn {
                get {
                    return this.columnAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCropConfiguredColumn {
                get {
                    return this.columnIsCropConfigured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropDetailsRow this[int index] {
                get {
                    return ((GetCropDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetCropDetailsRowChangeEventHandler GetCropDetailsRowChanging;
            
            public event GetCropDetailsRowChangeEventHandler GetCropDetailsRowChanged;
            
            public event GetCropDetailsRowChangeEventHandler GetCropDetailsRowDeleting;
            
            public event GetCropDetailsRowChangeEventHandler GetCropDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetCropDetailsRow(GetCropDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropDetailsRow AddGetCropDetailsRow(int CropID, int ValueSliceID, string CropCode, string Description, string IsFruitTree, string Planted, int Age, string Adjust, decimal ValuePer, string Acres, decimal Value, bool IsCropConfigured) {
                GetCropDetailsRow rowGetCropDetailsRow = ((GetCropDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CropID,
                        ValueSliceID,
                        CropCode,
                        Description,
                        IsFruitTree,
                        Planted,
                        Age,
                        Adjust,
                        ValuePer,
                        Acres,
                        Value,
                        IsCropConfigured};
                rowGetCropDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetCropDetailsRow);
                return rowGetCropDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetCropDetailsDataTable cln = ((GetCropDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetCropDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCropID = base.Columns["CropID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnCropCode = base.Columns["CropCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsFruitTree = base.Columns["IsFruitTree"];
                this.columnPlanted = base.Columns["Planted"];
                this.columnAge = base.Columns["Age"];
                this.columnAdjust = base.Columns["Adjust"];
                this.columnValuePer = base.Columns["ValuePer"];
                this.columnAcres = base.Columns["Acres"];
                this.columnValue = base.Columns["Value"];
                this.columnIsCropConfigured = base.Columns["IsCropConfigured"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCropID = new global::System.Data.DataColumn("CropID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnCropCode = new global::System.Data.DataColumn("CropCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsFruitTree = new global::System.Data.DataColumn("IsFruitTree", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFruitTree);
                this.columnPlanted = new global::System.Data.DataColumn("Planted", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanted);
                this.columnAge = new global::System.Data.DataColumn("Age", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAge);
                this.columnAdjust = new global::System.Data.DataColumn("Adjust", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjust);
                this.columnValuePer = new global::System.Data.DataColumn("ValuePer", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValuePer);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnIsCropConfigured = new global::System.Data.DataColumn("IsCropConfigured", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCropConfigured);
                this.columnCropCode.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropDetailsRow NewGetCropDetailsRow() {
                return ((GetCropDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetCropDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetCropDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetCropDetailsRowChanged != null)) {
                    this.GetCropDetailsRowChanged(this, new GetCropDetailsRowChangeEvent(((GetCropDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetCropDetailsRowChanging != null)) {
                    this.GetCropDetailsRowChanging(this, new GetCropDetailsRowChangeEvent(((GetCropDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetCropDetailsRowDeleted != null)) {
                    this.GetCropDetailsRowDeleted(this, new GetCropDetailsRowChangeEvent(((GetCropDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetCropDetailsRowDeleting != null)) {
                    this.GetCropDetailsRowDeleting(this, new GetCropDetailsRowChangeEvent(((GetCropDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetCropDetailsRow(GetCropDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36041CropData ds = new F36041CropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetCropDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetCropCodeDetailsDataTable : global::System.Data.TypedTableBase<GetCropCodeDetailsRow> {
            
            private global::System.Data.DataColumn columnCropVID;
            
            private global::System.Data.DataColumn columnCropCode;
            
            private global::System.Data.DataColumn columnIsFruitTree;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnValue5;
            
            private global::System.Data.DataColumn columnBreak5;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIsCropConfigured;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropCodeDetailsDataTable() {
                this.TableName = "GetCropCodeDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCropCodeDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetCropCodeDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropVIDColumn {
                get {
                    return this.columnCropVID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CropCodeColumn {
                get {
                    return this.columnCropCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFruitTreeColumn {
                get {
                    return this.columnIsFruitTree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value5Column {
                get {
                    return this.columnValue5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCropConfiguredColumn {
                get {
                    return this.columnIsCropConfigured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropCodeDetailsRow this[int index] {
                get {
                    return ((GetCropCodeDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetCropCodeDetailsRowChangeEventHandler GetCropCodeDetailsRowChanging;
            
            public event GetCropCodeDetailsRowChangeEventHandler GetCropCodeDetailsRowChanged;
            
            public event GetCropCodeDetailsRowChangeEventHandler GetCropCodeDetailsRowDeleting;
            
            public event GetCropCodeDetailsRowChangeEventHandler GetCropCodeDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetCropCodeDetailsRow(GetCropCodeDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropCodeDetailsRow AddGetCropCodeDetailsRow(
                        int CropVID, 
                        string CropCode, 
                        string IsFruitTree, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Value5, 
                        decimal Break5, 
                        decimal Value4, 
                        decimal Break4, 
                        decimal Value3, 
                        decimal Break3, 
                        decimal Value1, 
                        decimal Break1, 
                        decimal BaseValue, 
                        string Description, 
                        bool IsCropConfigured) {
                GetCropCodeDetailsRow rowGetCropCodeDetailsRow = ((GetCropCodeDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CropVID,
                        CropCode,
                        IsFruitTree,
                        Break2,
                        Value2,
                        Value5,
                        Break5,
                        Value4,
                        Break4,
                        Value3,
                        Break3,
                        Value1,
                        Break1,
                        BaseValue,
                        Description,
                        IsCropConfigured};
                rowGetCropCodeDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetCropCodeDetailsRow);
                return rowGetCropCodeDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetCropCodeDetailsDataTable cln = ((GetCropCodeDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetCropCodeDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCropVID = base.Columns["CropVID"];
                this.columnCropCode = base.Columns["CropCode"];
                this.columnIsFruitTree = base.Columns["IsFruitTree"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnValue5 = base.Columns["Value5"];
                this.columnBreak5 = base.Columns["Break5"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsCropConfigured = base.Columns["IsCropConfigured"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCropVID = new global::System.Data.DataColumn("CropVID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropVID);
                this.columnCropCode = new global::System.Data.DataColumn("CropCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCropCode);
                this.columnIsFruitTree = new global::System.Data.DataColumn("IsFruitTree", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFruitTree);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnValue5 = new global::System.Data.DataColumn("Value5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue5);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsCropConfigured = new global::System.Data.DataColumn("IsCropConfigured", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCropConfigured);
                this.columnCropVID.AllowDBNull = false;
                this.columnCropCode.AllowDBNull = false;
                this.columnCropCode.MaxLength = 20;
                this.columnIsFruitTree.AllowDBNull = false;
                this.columnBaseValue.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropCodeDetailsRow NewGetCropCodeDetailsRow() {
                return ((GetCropCodeDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetCropCodeDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetCropCodeDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetCropCodeDetailsRowChanged != null)) {
                    this.GetCropCodeDetailsRowChanged(this, new GetCropCodeDetailsRowChangeEvent(((GetCropCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetCropCodeDetailsRowChanging != null)) {
                    this.GetCropCodeDetailsRowChanging(this, new GetCropCodeDetailsRowChangeEvent(((GetCropCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetCropCodeDetailsRowDeleted != null)) {
                    this.GetCropCodeDetailsRowDeleted(this, new GetCropCodeDetailsRowChangeEvent(((GetCropCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetCropCodeDetailsRowDeleting != null)) {
                    this.GetCropCodeDetailsRowDeleting(this, new GetCropCodeDetailsRowChangeEvent(((GetCropCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetCropCodeDetailsRow(GetCropCodeDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36041CropData ds = new F36041CropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetCropCodeDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CheckBreakValuesDataTable : global::System.Data.TypedTableBase<CheckBreakValuesRow> {
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            private global::System.Data.DataColumn columnValue5;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesDataTable() {
                this.TableName = "CheckBreakValues";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckBreakValuesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CheckBreakValuesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value5Column {
                get {
                    return this.columnValue5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow this[int index] {
                get {
                    return ((CheckBreakValuesRow)(this.Rows[index]));
                }
            }
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowChanging;
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowChanged;
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowDeleting;
            
            public event CheckBreakValuesRowChangeEventHandler CheckBreakValuesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCheckBreakValuesRow(CheckBreakValuesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow AddCheckBreakValuesRow(decimal BaseValue, decimal Break1, decimal Value1, decimal Break2, decimal Value2, decimal Break3, decimal Value3, decimal Break4, decimal Value4, decimal Break5, decimal Value5) {
                CheckBreakValuesRow rowCheckBreakValuesRow = ((CheckBreakValuesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        Break5,
                        Value5};
                rowCheckBreakValuesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCheckBreakValuesRow);
                return rowCheckBreakValuesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CheckBreakValuesDataTable cln = ((CheckBreakValuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CheckBreakValuesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnBreak5 = base.Columns["Break5"];
                this.columnValue5 = base.Columns["Value5"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
                this.columnValue5 = new global::System.Data.DataColumn("Value5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue5);
                this.columnBaseValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow NewCheckBreakValuesRow() {
                return ((CheckBreakValuesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CheckBreakValuesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CheckBreakValuesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CheckBreakValuesRowChanged != null)) {
                    this.CheckBreakValuesRowChanged(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CheckBreakValuesRowChanging != null)) {
                    this.CheckBreakValuesRowChanging(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CheckBreakValuesRowDeleted != null)) {
                    this.CheckBreakValuesRowDeleted(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CheckBreakValuesRowDeleting != null)) {
                    this.CheckBreakValuesRowDeleting(this, new CheckBreakValuesRowChangeEvent(((CheckBreakValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCheckBreakValuesRow(CheckBreakValuesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36041CropData ds = new F36041CropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CheckBreakValuesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RollYearDataTable : global::System.Data.TypedTableBase<RollYearRow> {
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollYearDataTable() {
                this.TableName = "RollYear";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RollYearDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RollYearDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollYearRow this[int index] {
                get {
                    return ((RollYearRow)(this.Rows[index]));
                }
            }
            
            public event RollYearRowChangeEventHandler RollYearRowChanging;
            
            public event RollYearRowChangeEventHandler RollYearRowChanged;
            
            public event RollYearRowChangeEventHandler RollYearRowDeleting;
            
            public event RollYearRowChangeEventHandler RollYearRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRollYearRow(RollYearRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollYearRow AddRollYearRow(int RollYear) {
                RollYearRow rowRollYearRow = ((RollYearRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RollYear};
                rowRollYearRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRollYearRow);
                return rowRollYearRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RollYearDataTable cln = ((RollYearDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RollYearDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollYearRow NewRollYearRow() {
                return ((RollYearRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RollYearRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RollYearRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RollYearRowChanged != null)) {
                    this.RollYearRowChanged(this, new RollYearRowChangeEvent(((RollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RollYearRowChanging != null)) {
                    this.RollYearRowChanging(this, new RollYearRowChangeEvent(((RollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RollYearRowDeleted != null)) {
                    this.RollYearRowDeleted(this, new RollYearRowChangeEvent(((RollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RollYearRowDeleting != null)) {
                    this.RollYearRowDeleting(this, new RollYearRowChangeEvent(((RollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRollYearRow(RollYearRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36041CropData ds = new F36041CropData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RollYearDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetCropDetailsRow : global::System.Data.DataRow {
            
            private GetCropDetailsDataTable tableGetCropDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCropDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetCropDetails = ((GetCropDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CropID {
                get {
                    try {
                        return ((int)(this[this.tableGetCropDetails.CropIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CropID\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.CropIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableGetCropDetails.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CropCode {
                get {
                    try {
                        return ((string)(this[this.tableGetCropDetails.CropCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CropCode\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.CropCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGetCropDetails.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsFruitTree {
                get {
                    try {
                        return ((string)(this[this.tableGetCropDetails.IsFruitTreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFruitTree\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.IsFruitTreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Planted {
                get {
                    try {
                        return ((string)(this[this.tableGetCropDetails.PlantedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Planted\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.PlantedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Age {
                get {
                    try {
                        return ((int)(this[this.tableGetCropDetails.AgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Age\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.AgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adjust {
                get {
                    try {
                        return ((string)(this[this.tableGetCropDetails.AdjustColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adjust\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.AdjustColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ValuePer {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropDetails.ValuePerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValuePer\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.ValuePerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Acres {
                get {
                    try {
                        return ((string)(this[this.tableGetCropDetails.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.AcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropDetails.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropConfigured {
                get {
                    try {
                        return ((bool)(this[this.tableGetCropDetails.IsCropConfiguredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCropConfigured\' in table \'GetCropDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropDetails.IsCropConfiguredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropIDNull() {
                return this.IsNull(this.tableGetCropDetails.CropIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropIDNull() {
                this[this.tableGetCropDetails.CropIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableGetCropDetails.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableGetCropDetails.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropCodeNull() {
                return this.IsNull(this.tableGetCropDetails.CropCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCropCodeNull() {
                this[this.tableGetCropDetails.CropCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetCropDetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetCropDetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFruitTreeNull() {
                return this.IsNull(this.tableGetCropDetails.IsFruitTreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFruitTreeNull() {
                this[this.tableGetCropDetails.IsFruitTreeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantedNull() {
                return this.IsNull(this.tableGetCropDetails.PlantedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantedNull() {
                this[this.tableGetCropDetails.PlantedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeNull() {
                return this.IsNull(this.tableGetCropDetails.AgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeNull() {
                this[this.tableGetCropDetails.AgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustNull() {
                return this.IsNull(this.tableGetCropDetails.AdjustColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustNull() {
                this[this.tableGetCropDetails.AdjustColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValuePerNull() {
                return this.IsNull(this.tableGetCropDetails.ValuePerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValuePerNull() {
                this[this.tableGetCropDetails.ValuePerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull() {
                return this.IsNull(this.tableGetCropDetails.AcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull() {
                this[this.tableGetCropDetails.AcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableGetCropDetails.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableGetCropDetails.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCropConfiguredNull() {
                return this.IsNull(this.tableGetCropDetails.IsCropConfiguredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCropConfiguredNull() {
                this[this.tableGetCropDetails.IsCropConfiguredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetCropCodeDetailsRow : global::System.Data.DataRow {
            
            private GetCropCodeDetailsDataTable tableGetCropCodeDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCropCodeDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetCropCodeDetails = ((GetCropCodeDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CropVID {
                get {
                    return ((int)(this[this.tableGetCropCodeDetails.CropVIDColumn]));
                }
                set {
                    this[this.tableGetCropCodeDetails.CropVIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CropCode {
                get {
                    return ((string)(this[this.tableGetCropCodeDetails.CropCodeColumn]));
                }
                set {
                    this[this.tableGetCropCodeDetails.CropCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsFruitTree {
                get {
                    return ((string)(this[this.tableGetCropCodeDetails.IsFruitTreeColumn]));
                }
                set {
                    this[this.tableGetCropCodeDetails.IsFruitTreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value5 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Value5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value5\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Value5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetCropCodeDetails.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    return ((decimal)(this[this.tableGetCropCodeDetails.BaseValueColumn]));
                }
                set {
                    this[this.tableGetCropCodeDetails.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetCropCodeDetails.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCropConfigured {
                get {
                    try {
                        return ((bool)(this[this.tableGetCropCodeDetails.IsCropConfiguredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCropConfigured\' in table \'GetCropCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCropCodeDetails.IsCropConfiguredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableGetCropCodeDetails.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableGetCropCodeDetails.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue5Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Value5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue5Null() {
                this[this.tableGetCropCodeDetails.Value5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableGetCropCodeDetails.Break5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableGetCropCodeDetails.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableGetCropCodeDetails.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableGetCropCodeDetails.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableGetCropCodeDetails.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableGetCropCodeDetails.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableGetCropCodeDetails.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableGetCropCodeDetails.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGetCropCodeDetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGetCropCodeDetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCropConfiguredNull() {
                return this.IsNull(this.tableGetCropCodeDetails.IsCropConfiguredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCropConfiguredNull() {
                this[this.tableGetCropCodeDetails.IsCropConfiguredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CheckBreakValuesRow : global::System.Data.DataRow {
            
            private CheckBreakValuesDataTable tableCheckBreakValues;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckBreakValuesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCheckBreakValues = ((CheckBreakValuesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    return ((decimal)(this[this.tableCheckBreakValues.BaseValueColumn]));
                }
                set {
                    this[this.tableCheckBreakValues.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value5 {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckBreakValues.Value5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value5\' in table \'CheckBreakValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckBreakValues.Value5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableCheckBreakValues.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableCheckBreakValues.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableCheckBreakValues.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableCheckBreakValues.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableCheckBreakValues.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableCheckBreakValues.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableCheckBreakValues.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableCheckBreakValues.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableCheckBreakValues.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableCheckBreakValues.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableCheckBreakValues.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableCheckBreakValues.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableCheckBreakValues.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableCheckBreakValues.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableCheckBreakValues.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableCheckBreakValues.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableCheckBreakValues.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableCheckBreakValues.Break5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue5Null() {
                return this.IsNull(this.tableCheckBreakValues.Value5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue5Null() {
                this[this.tableCheckBreakValues.Value5Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RollYearRow : global::System.Data.DataRow {
            
            private RollYearDataTable tableRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RollYearRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRollYear = ((RollYearDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableRollYear.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'RollYear\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollYear.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableRollYear.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableRollYear.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetCropDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetCropDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropDetailsRowChangeEvent(GetCropDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetCropCodeDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetCropCodeDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropCodeDetailsRowChangeEvent(GetCropCodeDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCropCodeDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CheckBreakValuesRowChangeEvent : global::System.EventArgs {
            
            private CheckBreakValuesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRowChangeEvent(CheckBreakValuesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckBreakValuesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RollYearRowChangeEvent : global::System.EventArgs {
            
            private RollYearRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollYearRowChangeEvent(RollYearRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollYearRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591