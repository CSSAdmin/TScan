//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8689
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F29510ParcelCombineData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F29510ParcelCombineData : global::System.Data.DataSet {
        
        private f29510ListParcelDataTable tablef29510ListParcel;
        
        private OutputParamsDataTable tableOutputParams;
        
        private OutputValuesDataTable tableOutputValues;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F29510ParcelCombineData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F29510ParcelCombineData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["f29510ListParcel"] != null)) {
                    base.Tables.Add(new f29510ListParcelDataTable(ds.Tables["f29510ListParcel"]));
                }
                if ((ds.Tables["OutputParams"] != null)) {
                    base.Tables.Add(new OutputParamsDataTable(ds.Tables["OutputParams"]));
                }
                if ((ds.Tables["OutputValues"] != null)) {
                    base.Tables.Add(new OutputValuesDataTable(ds.Tables["OutputValues"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f29510ListParcelDataTable f29510ListParcel {
            get {
                return this.tablef29510ListParcel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OutputParamsDataTable OutputParams {
            get {
                return this.tableOutputParams;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OutputValuesDataTable OutputValues {
            get {
                return this.tableOutputValues;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F29510ParcelCombineData cln = ((F29510ParcelCombineData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["f29510ListParcel"] != null)) {
                    base.Tables.Add(new f29510ListParcelDataTable(ds.Tables["f29510ListParcel"]));
                }
                if ((ds.Tables["OutputParams"] != null)) {
                    base.Tables.Add(new OutputParamsDataTable(ds.Tables["OutputParams"]));
                }
                if ((ds.Tables["OutputValues"] != null)) {
                    base.Tables.Add(new OutputValuesDataTable(ds.Tables["OutputValues"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablef29510ListParcel = ((f29510ListParcelDataTable)(base.Tables["f29510ListParcel"]));
            if ((initTable == true)) {
                if ((this.tablef29510ListParcel != null)) {
                    this.tablef29510ListParcel.InitVars();
                }
            }
            this.tableOutputParams = ((OutputParamsDataTable)(base.Tables["OutputParams"]));
            if ((initTable == true)) {
                if ((this.tableOutputParams != null)) {
                    this.tableOutputParams.InitVars();
                }
            }
            this.tableOutputValues = ((OutputValuesDataTable)(base.Tables["OutputValues"]));
            if ((initTable == true)) {
                if ((this.tableOutputValues != null)) {
                    this.tableOutputValues.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F29510ParcelCombineData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablef29510ListParcel = new f29510ListParcelDataTable();
            base.Tables.Add(this.tablef29510ListParcel);
            this.tableOutputParams = new OutputParamsDataTable();
            base.Tables.Add(this.tableOutputParams);
            this.tableOutputValues = new OutputValuesDataTable();
            base.Tables.Add(this.tableOutputValues);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef29510ListParcel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOutputParams() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOutputValues() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F29510ParcelCombineData ds = new F29510ParcelCombineData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void f29510ListParcelRowChangeEventHandler(object sender, f29510ListParcelRowChangeEvent e);
        
        public delegate void OutputParamsRowChangeEventHandler(object sender, OutputParamsRowChangeEvent e);
        
        public delegate void OutputValuesRowChangeEventHandler(object sender, OutputValuesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f29510ListParcelDataTable : global::System.Data.TypedTableBase<f29510ListParcelRow> {
            
            private global::System.Data.DataColumn columnParcelsID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnParcelType;
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnPrimaryOwner;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnTaxableValue;
            
            private global::System.Data.DataColumn columnBaseParcelID;
            
            private global::System.Data.DataColumn columnCombineID;
            
            private global::System.Data.DataColumn columnIsProcessed;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnFeatureID;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnRank;
            
            private global::System.Data.DataColumn columnCombineParcelNumber;
            
            private global::System.Data.DataColumn columnCombineParcelID;
            
            private global::System.Data.DataColumn columnIsCombineAttachment;
            
            private global::System.Data.DataColumn columnIsCombineComment;
            
            private global::System.Data.DataColumn columnIsCombinePermit;
            
            private global::System.Data.DataColumn columnIsCombineAssociation;
            
            private global::System.Data.DataColumn columnIsNewConstruction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f29510ListParcelDataTable() {
                this.TableName = "f29510ListParcel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f29510ListParcelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f29510ListParcelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelsIDColumn {
                get {
                    return this.columnParcelsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelTypeColumn {
                get {
                    return this.columnParcelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryOwnerColumn {
                get {
                    return this.columnPrimaryOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableValueColumn {
                get {
                    return this.columnTaxableValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseParcelIDColumn {
                get {
                    return this.columnBaseParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CombineIDColumn {
                get {
                    return this.columnCombineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsProcessedColumn {
                get {
                    return this.columnIsProcessed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RankColumn {
                get {
                    return this.columnRank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CombineParcelNumberColumn {
                get {
                    return this.columnCombineParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CombineParcelIDColumn {
                get {
                    return this.columnCombineParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCombineAttachmentColumn {
                get {
                    return this.columnIsCombineAttachment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCombineCommentColumn {
                get {
                    return this.columnIsCombineComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCombinePermitColumn {
                get {
                    return this.columnIsCombinePermit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCombineAssociationColumn {
                get {
                    return this.columnIsCombineAssociation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNewConstructionColumn {
                get {
                    return this.columnIsNewConstruction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f29510ListParcelRow this[int index] {
                get {
                    return ((f29510ListParcelRow)(this.Rows[index]));
                }
            }
            
            public event f29510ListParcelRowChangeEventHandler f29510ListParcelRowChanging;
            
            public event f29510ListParcelRowChangeEventHandler f29510ListParcelRowChanged;
            
            public event f29510ListParcelRowChangeEventHandler f29510ListParcelRowDeleting;
            
            public event f29510ListParcelRowChangeEventHandler f29510ListParcelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf29510ListParcelRow(f29510ListParcelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f29510ListParcelRow Addf29510ListParcelRow(
                        int ParcelsID, 
                        string ParcelNumber, 
                        string ParcelType, 
                        string Code, 
                        string PrimaryOwner, 
                        string Situs, 
                        decimal TaxableValue, 
                        int BaseParcelID, 
                        int CombineID, 
                        bool IsProcessed, 
                        short RollYear, 
                        int FeatureID, 
                        int EventID, 
                        int Rank, 
                        string CombineParcelNumber, 
                        int CombineParcelID, 
                        bool IsCombineAttachment, 
                        bool IsCombineComment, 
                        bool IsCombinePermit, 
                        bool IsCombineAssociation, 
                        bool IsNewConstruction) {
                f29510ListParcelRow rowf29510ListParcelRow = ((f29510ListParcelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelsID,
                        ParcelNumber,
                        ParcelType,
                        Code,
                        PrimaryOwner,
                        Situs,
                        TaxableValue,
                        BaseParcelID,
                        CombineID,
                        IsProcessed,
                        RollYear,
                        FeatureID,
                        EventID,
                        Rank,
                        CombineParcelNumber,
                        CombineParcelID,
                        IsCombineAttachment,
                        IsCombineComment,
                        IsCombinePermit,
                        IsCombineAssociation,
                        IsNewConstruction};
                rowf29510ListParcelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf29510ListParcelRow);
                return rowf29510ListParcelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f29510ListParcelDataTable cln = ((f29510ListParcelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f29510ListParcelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelsID = base.Columns["ParcelsID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnParcelType = base.Columns["ParcelType"];
                this.columnCode = base.Columns["Code"];
                this.columnPrimaryOwner = base.Columns["PrimaryOwner"];
                this.columnSitus = base.Columns["Situs"];
                this.columnTaxableValue = base.Columns["TaxableValue"];
                this.columnBaseParcelID = base.Columns["BaseParcelID"];
                this.columnCombineID = base.Columns["CombineID"];
                this.columnIsProcessed = base.Columns["IsProcessed"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnFeatureID = base.Columns["FeatureID"];
                this.columnEventID = base.Columns["EventID"];
                this.columnRank = base.Columns["Rank"];
                this.columnCombineParcelNumber = base.Columns["CombineParcelNumber"];
                this.columnCombineParcelID = base.Columns["CombineParcelID"];
                this.columnIsCombineAttachment = base.Columns["IsCombineAttachment"];
                this.columnIsCombineComment = base.Columns["IsCombineComment"];
                this.columnIsCombinePermit = base.Columns["IsCombinePermit"];
                this.columnIsCombineAssociation = base.Columns["IsCombineAssociation"];
                this.columnIsNewConstruction = base.Columns["IsNewConstruction"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelsID = new global::System.Data.DataColumn("ParcelsID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelsID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnParcelType = new global::System.Data.DataColumn("ParcelType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelType);
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnPrimaryOwner = new global::System.Data.DataColumn("PrimaryOwner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryOwner);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnTaxableValue = new global::System.Data.DataColumn("TaxableValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxableValue);
                this.columnBaseParcelID = new global::System.Data.DataColumn("BaseParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseParcelID);
                this.columnCombineID = new global::System.Data.DataColumn("CombineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCombineID);
                this.columnIsProcessed = new global::System.Data.DataColumn("IsProcessed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsProcessed);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnFeatureID = new global::System.Data.DataColumn("FeatureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureID);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnRank = new global::System.Data.DataColumn("Rank", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRank);
                this.columnCombineParcelNumber = new global::System.Data.DataColumn("CombineParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCombineParcelNumber);
                this.columnCombineParcelID = new global::System.Data.DataColumn("CombineParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCombineParcelID);
                this.columnIsCombineAttachment = new global::System.Data.DataColumn("IsCombineAttachment", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCombineAttachment);
                this.columnIsCombineComment = new global::System.Data.DataColumn("IsCombineComment", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCombineComment);
                this.columnIsCombinePermit = new global::System.Data.DataColumn("IsCombinePermit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCombinePermit);
                this.columnIsCombineAssociation = new global::System.Data.DataColumn("IsCombineAssociation", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCombineAssociation);
                this.columnIsNewConstruction = new global::System.Data.DataColumn("IsNewConstruction", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNewConstruction);
                this.columnParcelsID.ReadOnly = true;
                this.columnParcelNumber.ReadOnly = true;
                this.columnParcelNumber.MaxLength = 50;
                this.columnParcelType.ReadOnly = true;
                this.columnParcelType.MaxLength = 50;
                this.columnCode.ReadOnly = true;
                this.columnCode.MaxLength = 50;
                this.columnPrimaryOwner.ReadOnly = true;
                this.columnPrimaryOwner.MaxLength = 102;
                this.columnSitus.ReadOnly = true;
                this.columnSitus.MaxLength = 400;
                this.columnTaxableValue.ReadOnly = true;
                this.columnBaseParcelID.ReadOnly = true;
                this.columnCombineID.ReadOnly = true;
                this.columnIsProcessed.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnFeatureID.ReadOnly = true;
                this.columnEventID.ReadOnly = true;
                this.columnRank.ReadOnly = true;
                this.columnCombineParcelNumber.ReadOnly = true;
                this.columnCombineParcelNumber.MaxLength = 50;
                this.columnCombineParcelID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f29510ListParcelRow Newf29510ListParcelRow() {
                return ((f29510ListParcelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f29510ListParcelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f29510ListParcelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f29510ListParcelRowChanged != null)) {
                    this.f29510ListParcelRowChanged(this, new f29510ListParcelRowChangeEvent(((f29510ListParcelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f29510ListParcelRowChanging != null)) {
                    this.f29510ListParcelRowChanging(this, new f29510ListParcelRowChangeEvent(((f29510ListParcelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f29510ListParcelRowDeleted != null)) {
                    this.f29510ListParcelRowDeleted(this, new f29510ListParcelRowChangeEvent(((f29510ListParcelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f29510ListParcelRowDeleting != null)) {
                    this.f29510ListParcelRowDeleting(this, new f29510ListParcelRowChangeEvent(((f29510ListParcelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef29510ListParcelRow(f29510ListParcelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29510ParcelCombineData ds = new F29510ParcelCombineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f29510ListParcelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OutputParamsDataTable : global::System.Data.TypedTableBase<OutputParamsRow> {
            
            private global::System.Data.DataColumn columnKey;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnDataType;
            
            private global::System.Data.DataColumn columnMaxSize;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputParamsDataTable() {
                this.TableName = "OutputParams";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutputParamsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OutputParamsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyColumn {
                get {
                    return this.columnKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataTypeColumn {
                get {
                    return this.columnDataType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxSizeColumn {
                get {
                    return this.columnMaxSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputParamsRow this[int index] {
                get {
                    return ((OutputParamsRow)(this.Rows[index]));
                }
            }
            
            public event OutputParamsRowChangeEventHandler OutputParamsRowChanging;
            
            public event OutputParamsRowChangeEventHandler OutputParamsRowChanged;
            
            public event OutputParamsRowChangeEventHandler OutputParamsRowDeleting;
            
            public event OutputParamsRowChangeEventHandler OutputParamsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOutputParamsRow(OutputParamsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputParamsRow AddOutputParamsRow(string Key, string Value, string DataType, long MaxSize) {
                OutputParamsRow rowOutputParamsRow = ((OutputParamsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Key,
                        Value,
                        DataType,
                        MaxSize};
                rowOutputParamsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOutputParamsRow);
                return rowOutputParamsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OutputParamsDataTable cln = ((OutputParamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OutputParamsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKey = base.Columns["Key"];
                this.columnValue = base.Columns["Value"];
                this.columnDataType = base.Columns["DataType"];
                this.columnMaxSize = base.Columns["MaxSize"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKey = new global::System.Data.DataColumn("Key", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKey);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnDataType = new global::System.Data.DataColumn("DataType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataType);
                this.columnMaxSize = new global::System.Data.DataColumn("MaxSize", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxSize);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputParamsRow NewOutputParamsRow() {
                return ((OutputParamsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OutputParamsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OutputParamsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OutputParamsRowChanged != null)) {
                    this.OutputParamsRowChanged(this, new OutputParamsRowChangeEvent(((OutputParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OutputParamsRowChanging != null)) {
                    this.OutputParamsRowChanging(this, new OutputParamsRowChangeEvent(((OutputParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OutputParamsRowDeleted != null)) {
                    this.OutputParamsRowDeleted(this, new OutputParamsRowChangeEvent(((OutputParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OutputParamsRowDeleting != null)) {
                    this.OutputParamsRowDeleting(this, new OutputParamsRowChangeEvent(((OutputParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOutputParamsRow(OutputParamsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29510ParcelCombineData ds = new F29510ParcelCombineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OutputParamsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OutputValuesDataTable : global::System.Data.TypedTableBase<OutputValuesRow> {
            
            private global::System.Data.DataColumn columnPrimaryKeyID;
            
            private global::System.Data.DataColumn columnResults;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputValuesDataTable() {
                this.TableName = "OutputValues";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutputValuesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OutputValuesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryKeyIDColumn {
                get {
                    return this.columnPrimaryKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultsColumn {
                get {
                    return this.columnResults;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputValuesRow this[int index] {
                get {
                    return ((OutputValuesRow)(this.Rows[index]));
                }
            }
            
            public event OutputValuesRowChangeEventHandler OutputValuesRowChanging;
            
            public event OutputValuesRowChangeEventHandler OutputValuesRowChanged;
            
            public event OutputValuesRowChangeEventHandler OutputValuesRowDeleting;
            
            public event OutputValuesRowChangeEventHandler OutputValuesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOutputValuesRow(OutputValuesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputValuesRow AddOutputValuesRow(int PrimaryKeyID, string Results) {
                OutputValuesRow rowOutputValuesRow = ((OutputValuesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PrimaryKeyID,
                        Results};
                rowOutputValuesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOutputValuesRow);
                return rowOutputValuesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OutputValuesDataTable cln = ((OutputValuesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OutputValuesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPrimaryKeyID = base.Columns["PrimaryKeyID"];
                this.columnResults = base.Columns["Results"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPrimaryKeyID = new global::System.Data.DataColumn("PrimaryKeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryKeyID);
                this.columnResults = new global::System.Data.DataColumn("Results", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResults);
                this.columnResults.Caption = "Message";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputValuesRow NewOutputValuesRow() {
                return ((OutputValuesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OutputValuesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OutputValuesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OutputValuesRowChanged != null)) {
                    this.OutputValuesRowChanged(this, new OutputValuesRowChangeEvent(((OutputValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OutputValuesRowChanging != null)) {
                    this.OutputValuesRowChanging(this, new OutputValuesRowChangeEvent(((OutputValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OutputValuesRowDeleted != null)) {
                    this.OutputValuesRowDeleted(this, new OutputValuesRowChangeEvent(((OutputValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OutputValuesRowDeleting != null)) {
                    this.OutputValuesRowDeleting(this, new OutputValuesRowChangeEvent(((OutputValuesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOutputValuesRow(OutputValuesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29510ParcelCombineData ds = new F29510ParcelCombineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OutputValuesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f29510ListParcelRow : global::System.Data.DataRow {
            
            private f29510ListParcelDataTable tablef29510ListParcel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f29510ListParcelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef29510ListParcel = ((f29510ListParcelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelsID {
                get {
                    try {
                        return ((int)(this[this.tablef29510ListParcel.ParcelsIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelsID\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.ParcelsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tablef29510ListParcel.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelType {
                get {
                    try {
                        return ((string)(this[this.tablef29510ListParcel.ParcelTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelType\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.ParcelTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tablef29510ListParcel.CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Code\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryOwner {
                get {
                    try {
                        return ((string)(this[this.tablef29510ListParcel.PrimaryOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryOwner\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.PrimaryOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tablef29510ListParcel.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxableValue {
                get {
                    try {
                        return ((decimal)(this[this.tablef29510ListParcel.TaxableValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxableValue\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.TaxableValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseParcelID {
                get {
                    try {
                        return ((int)(this[this.tablef29510ListParcel.BaseParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseParcelID\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.BaseParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CombineID {
                get {
                    try {
                        return ((int)(this[this.tablef29510ListParcel.CombineIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CombineID\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.CombineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessed {
                get {
                    try {
                        return ((bool)(this[this.tablef29510ListParcel.IsProcessedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsProcessed\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.IsProcessedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tablef29510ListParcel.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureID {
                get {
                    try {
                        return ((int)(this[this.tablef29510ListParcel.FeatureIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureID\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.FeatureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tablef29510ListParcel.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rank {
                get {
                    try {
                        return ((int)(this[this.tablef29510ListParcel.RankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rank\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.RankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CombineParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tablef29510ListParcel.CombineParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CombineParcelNumber\' in table \'f29510ListParcel\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.CombineParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CombineParcelID {
                get {
                    try {
                        return ((int)(this[this.tablef29510ListParcel.CombineParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CombineParcelID\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.CombineParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombineAttachment {
                get {
                    try {
                        return ((bool)(this[this.tablef29510ListParcel.IsCombineAttachmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCombineAttachment\' in table \'f29510ListParcel\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.IsCombineAttachmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombineComment {
                get {
                    try {
                        return ((bool)(this[this.tablef29510ListParcel.IsCombineCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCombineComment\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.IsCombineCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombinePermit {
                get {
                    try {
                        return ((bool)(this[this.tablef29510ListParcel.IsCombinePermitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCombinePermit\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.IsCombinePermitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombineAssociation {
                get {
                    try {
                        return ((bool)(this[this.tablef29510ListParcel.IsCombineAssociationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCombineAssociation\' in table \'f29510ListParcel\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.IsCombineAssociationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewConstruction {
                get {
                    try {
                        return ((bool)(this[this.tablef29510ListParcel.IsNewConstructionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsNewConstruction\' in table \'f29510ListParcel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef29510ListParcel.IsNewConstructionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelsIDNull() {
                return this.IsNull(this.tablef29510ListParcel.ParcelsIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelsIDNull() {
                this[this.tablef29510ListParcel.ParcelsIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tablef29510ListParcel.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tablef29510ListParcel.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelTypeNull() {
                return this.IsNull(this.tablef29510ListParcel.ParcelTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelTypeNull() {
                this[this.tablef29510ListParcel.ParcelTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tablef29510ListParcel.CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tablef29510ListParcel.CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryOwnerNull() {
                return this.IsNull(this.tablef29510ListParcel.PrimaryOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryOwnerNull() {
                this[this.tablef29510ListParcel.PrimaryOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tablef29510ListParcel.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tablef29510ListParcel.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxableValueNull() {
                return this.IsNull(this.tablef29510ListParcel.TaxableValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxableValueNull() {
                this[this.tablef29510ListParcel.TaxableValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseParcelIDNull() {
                return this.IsNull(this.tablef29510ListParcel.BaseParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseParcelIDNull() {
                this[this.tablef29510ListParcel.BaseParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombineIDNull() {
                return this.IsNull(this.tablef29510ListParcel.CombineIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCombineIDNull() {
                this[this.tablef29510ListParcel.CombineIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsProcessedNull() {
                return this.IsNull(this.tablef29510ListParcel.IsProcessedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsProcessedNull() {
                this[this.tablef29510ListParcel.IsProcessedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tablef29510ListParcel.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tablef29510ListParcel.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureIDNull() {
                return this.IsNull(this.tablef29510ListParcel.FeatureIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureIDNull() {
                this[this.tablef29510ListParcel.FeatureIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tablef29510ListParcel.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tablef29510ListParcel.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRankNull() {
                return this.IsNull(this.tablef29510ListParcel.RankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRankNull() {
                this[this.tablef29510ListParcel.RankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombineParcelNumberNull() {
                return this.IsNull(this.tablef29510ListParcel.CombineParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCombineParcelNumberNull() {
                this[this.tablef29510ListParcel.CombineParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombineParcelIDNull() {
                return this.IsNull(this.tablef29510ListParcel.CombineParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCombineParcelIDNull() {
                this[this.tablef29510ListParcel.CombineParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCombineAttachmentNull() {
                return this.IsNull(this.tablef29510ListParcel.IsCombineAttachmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCombineAttachmentNull() {
                this[this.tablef29510ListParcel.IsCombineAttachmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCombineCommentNull() {
                return this.IsNull(this.tablef29510ListParcel.IsCombineCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCombineCommentNull() {
                this[this.tablef29510ListParcel.IsCombineCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCombinePermitNull() {
                return this.IsNull(this.tablef29510ListParcel.IsCombinePermitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCombinePermitNull() {
                this[this.tablef29510ListParcel.IsCombinePermitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCombineAssociationNull() {
                return this.IsNull(this.tablef29510ListParcel.IsCombineAssociationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCombineAssociationNull() {
                this[this.tablef29510ListParcel.IsCombineAssociationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNewConstructionNull() {
                return this.IsNull(this.tablef29510ListParcel.IsNewConstructionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNewConstructionNull() {
                this[this.tablef29510ListParcel.IsNewConstructionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OutputParamsRow : global::System.Data.DataRow {
            
            private OutputParamsDataTable tableOutputParams;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutputParamsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOutputParams = ((OutputParamsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Key {
                get {
                    try {
                        return ((string)(this[this.tableOutputParams.KeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Key\' in table \'OutputParams\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutputParams.KeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableOutputParams.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'OutputParams\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutputParams.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataType {
                get {
                    try {
                        return ((string)(this[this.tableOutputParams.DataTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataType\' in table \'OutputParams\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutputParams.DataTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MaxSize {
                get {
                    try {
                        return ((long)(this[this.tableOutputParams.MaxSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxSize\' in table \'OutputParams\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutputParams.MaxSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyNull() {
                return this.IsNull(this.tableOutputParams.KeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyNull() {
                this[this.tableOutputParams.KeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableOutputParams.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableOutputParams.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataTypeNull() {
                return this.IsNull(this.tableOutputParams.DataTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataTypeNull() {
                this[this.tableOutputParams.DataTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxSizeNull() {
                return this.IsNull(this.tableOutputParams.MaxSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxSizeNull() {
                this[this.tableOutputParams.MaxSizeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OutputValuesRow : global::System.Data.DataRow {
            
            private OutputValuesDataTable tableOutputValues;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutputValuesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOutputValues = ((OutputValuesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrimaryKeyID {
                get {
                    try {
                        return ((int)(this[this.tableOutputValues.PrimaryKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryKeyID\' in table \'OutputValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutputValues.PrimaryKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Results {
                get {
                    try {
                        return ((string)(this[this.tableOutputValues.ResultsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Results\' in table \'OutputValues\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutputValues.ResultsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryKeyIDNull() {
                return this.IsNull(this.tableOutputValues.PrimaryKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryKeyIDNull() {
                this[this.tableOutputValues.PrimaryKeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultsNull() {
                return this.IsNull(this.tableOutputValues.ResultsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultsNull() {
                this[this.tableOutputValues.ResultsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f29510ListParcelRowChangeEvent : global::System.EventArgs {
            
            private f29510ListParcelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f29510ListParcelRowChangeEvent(f29510ListParcelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f29510ListParcelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OutputParamsRowChangeEvent : global::System.EventArgs {
            
            private OutputParamsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputParamsRowChangeEvent(OutputParamsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputParamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OutputValuesRowChangeEvent : global::System.EventArgs {
            
            private OutputValuesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputValuesRowChangeEvent(OutputValuesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputValuesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591