//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F3205ApexSketchData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F3205ApexSketchData : global::System.Data.DataSet {
        
        private F3205pcgetSketchLinksExistDataTable tableF3205pcgetSketchLinksExist;
        
        private F3205pcgetSketchFilePathDataTable tableF3205pcgetSketchFilePath;
        
        private F3205pcinsSketchImageDataTable tableF3205pcinsSketchImage;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F3205ApexSketchData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F3205ApexSketchData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["F3205pcgetSketchLinksExist"] != null)) {
                    base.Tables.Add(new F3205pcgetSketchLinksExistDataTable(ds.Tables["F3205pcgetSketchLinksExist"]));
                }
                if ((ds.Tables["F3205pcgetSketchFilePath"] != null)) {
                    base.Tables.Add(new F3205pcgetSketchFilePathDataTable(ds.Tables["F3205pcgetSketchFilePath"]));
                }
                if ((ds.Tables["F3205pcinsSketchImage"] != null)) {
                    base.Tables.Add(new F3205pcinsSketchImageDataTable(ds.Tables["F3205pcinsSketchImage"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F3205pcgetSketchLinksExistDataTable F3205pcgetSketchLinksExist {
            get {
                return this.tableF3205pcgetSketchLinksExist;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F3205pcgetSketchFilePathDataTable F3205pcgetSketchFilePath {
            get {
                return this.tableF3205pcgetSketchFilePath;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F3205pcinsSketchImageDataTable F3205pcinsSketchImage {
            get {
                return this.tableF3205pcinsSketchImage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F3205ApexSketchData cln = ((F3205ApexSketchData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["F3205pcgetSketchLinksExist"] != null)) {
                    base.Tables.Add(new F3205pcgetSketchLinksExistDataTable(ds.Tables["F3205pcgetSketchLinksExist"]));
                }
                if ((ds.Tables["F3205pcgetSketchFilePath"] != null)) {
                    base.Tables.Add(new F3205pcgetSketchFilePathDataTable(ds.Tables["F3205pcgetSketchFilePath"]));
                }
                if ((ds.Tables["F3205pcinsSketchImage"] != null)) {
                    base.Tables.Add(new F3205pcinsSketchImageDataTable(ds.Tables["F3205pcinsSketchImage"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableF3205pcgetSketchLinksExist = ((F3205pcgetSketchLinksExistDataTable)(base.Tables["F3205pcgetSketchLinksExist"]));
            if ((initTable == true)) {
                if ((this.tableF3205pcgetSketchLinksExist != null)) {
                    this.tableF3205pcgetSketchLinksExist.InitVars();
                }
            }
            this.tableF3205pcgetSketchFilePath = ((F3205pcgetSketchFilePathDataTable)(base.Tables["F3205pcgetSketchFilePath"]));
            if ((initTable == true)) {
                if ((this.tableF3205pcgetSketchFilePath != null)) {
                    this.tableF3205pcgetSketchFilePath.InitVars();
                }
            }
            this.tableF3205pcinsSketchImage = ((F3205pcinsSketchImageDataTable)(base.Tables["F3205pcinsSketchImage"]));
            if ((initTable == true)) {
                if ((this.tableF3205pcinsSketchImage != null)) {
                    this.tableF3205pcinsSketchImage.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F3205ApexSketchData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F3205ApexSketchData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableF3205pcgetSketchLinksExist = new F3205pcgetSketchLinksExistDataTable();
            base.Tables.Add(this.tableF3205pcgetSketchLinksExist);
            this.tableF3205pcgetSketchFilePath = new F3205pcgetSketchFilePathDataTable();
            base.Tables.Add(this.tableF3205pcgetSketchFilePath);
            this.tableF3205pcinsSketchImage = new F3205pcinsSketchImageDataTable();
            base.Tables.Add(this.tableF3205pcinsSketchImage);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF3205pcgetSketchLinksExist() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF3205pcgetSketchFilePath() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF3205pcinsSketchImage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F3205ApexSketchData ds = new F3205ApexSketchData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void F3205pcgetSketchLinksExistRowChangeEventHandler(object sender, F3205pcgetSketchLinksExistRowChangeEvent e);
        
        public delegate void F3205pcgetSketchFilePathRowChangeEventHandler(object sender, F3205pcgetSketchFilePathRowChangeEvent e);
        
        public delegate void F3205pcinsSketchImageRowChangeEventHandler(object sender, F3205pcinsSketchImageRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F3205pcgetSketchLinksExistDataTable : global::System.Data.TypedTableBase<F3205pcgetSketchLinksExistRow> {
            
            private global::System.Data.DataColumn columnIsLinkSetComplete;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchLinksExistDataTable() {
                this.TableName = "F3205pcgetSketchLinksExist";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F3205pcgetSketchLinksExistDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F3205pcgetSketchLinksExistDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsLinkSetCompleteColumn {
                get {
                    return this.columnIsLinkSetComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchLinksExistRow this[int index] {
                get {
                    return ((F3205pcgetSketchLinksExistRow)(this.Rows[index]));
                }
            }
            
            public event F3205pcgetSketchLinksExistRowChangeEventHandler F3205pcgetSketchLinksExistRowChanging;
            
            public event F3205pcgetSketchLinksExistRowChangeEventHandler F3205pcgetSketchLinksExistRowChanged;
            
            public event F3205pcgetSketchLinksExistRowChangeEventHandler F3205pcgetSketchLinksExistRowDeleting;
            
            public event F3205pcgetSketchLinksExistRowChangeEventHandler F3205pcgetSketchLinksExistRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF3205pcgetSketchLinksExistRow(F3205pcgetSketchLinksExistRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchLinksExistRow AddF3205pcgetSketchLinksExistRow(int IsLinkSetComplete) {
                F3205pcgetSketchLinksExistRow rowF3205pcgetSketchLinksExistRow = ((F3205pcgetSketchLinksExistRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsLinkSetComplete};
                rowF3205pcgetSketchLinksExistRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF3205pcgetSketchLinksExistRow);
                return rowF3205pcgetSketchLinksExistRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F3205pcgetSketchLinksExistDataTable cln = ((F3205pcgetSketchLinksExistDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F3205pcgetSketchLinksExistDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsLinkSetComplete = base.Columns["IsLinkSetComplete"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsLinkSetComplete = new global::System.Data.DataColumn("IsLinkSetComplete", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLinkSetComplete);
                this.columnIsLinkSetComplete.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchLinksExistRow NewF3205pcgetSketchLinksExistRow() {
                return ((F3205pcgetSketchLinksExistRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F3205pcgetSketchLinksExistRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F3205pcgetSketchLinksExistRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F3205pcgetSketchLinksExistRowChanged != null)) {
                    this.F3205pcgetSketchLinksExistRowChanged(this, new F3205pcgetSketchLinksExistRowChangeEvent(((F3205pcgetSketchLinksExistRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F3205pcgetSketchLinksExistRowChanging != null)) {
                    this.F3205pcgetSketchLinksExistRowChanging(this, new F3205pcgetSketchLinksExistRowChangeEvent(((F3205pcgetSketchLinksExistRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F3205pcgetSketchLinksExistRowDeleted != null)) {
                    this.F3205pcgetSketchLinksExistRowDeleted(this, new F3205pcgetSketchLinksExistRowChangeEvent(((F3205pcgetSketchLinksExistRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F3205pcgetSketchLinksExistRowDeleting != null)) {
                    this.F3205pcgetSketchLinksExistRowDeleting(this, new F3205pcgetSketchLinksExistRowChangeEvent(((F3205pcgetSketchLinksExistRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF3205pcgetSketchLinksExistRow(F3205pcgetSketchLinksExistRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F3205ApexSketchData ds = new F3205ApexSketchData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F3205pcgetSketchLinksExistDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F3205pcgetSketchFilePathDataTable : global::System.Data.TypedTableBase<F3205pcgetSketchFilePathRow> {
            
            private global::System.Data.DataColumn columnFilePath;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchFilePathDataTable() {
                this.TableName = "F3205pcgetSketchFilePath";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F3205pcgetSketchFilePathDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F3205pcgetSketchFilePathDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchFilePathRow this[int index] {
                get {
                    return ((F3205pcgetSketchFilePathRow)(this.Rows[index]));
                }
            }
            
            public event F3205pcgetSketchFilePathRowChangeEventHandler F3205pcgetSketchFilePathRowChanging;
            
            public event F3205pcgetSketchFilePathRowChangeEventHandler F3205pcgetSketchFilePathRowChanged;
            
            public event F3205pcgetSketchFilePathRowChangeEventHandler F3205pcgetSketchFilePathRowDeleting;
            
            public event F3205pcgetSketchFilePathRowChangeEventHandler F3205pcgetSketchFilePathRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF3205pcgetSketchFilePathRow(F3205pcgetSketchFilePathRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchFilePathRow AddF3205pcgetSketchFilePathRow(string FilePath) {
                F3205pcgetSketchFilePathRow rowF3205pcgetSketchFilePathRow = ((F3205pcgetSketchFilePathRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FilePath};
                rowF3205pcgetSketchFilePathRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF3205pcgetSketchFilePathRow);
                return rowF3205pcgetSketchFilePathRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F3205pcgetSketchFilePathDataTable cln = ((F3205pcgetSketchFilePathDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F3205pcgetSketchFilePathDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilePath = base.Columns["FilePath"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnFilePath.ReadOnly = true;
                this.columnFilePath.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchFilePathRow NewF3205pcgetSketchFilePathRow() {
                return ((F3205pcgetSketchFilePathRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F3205pcgetSketchFilePathRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F3205pcgetSketchFilePathRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F3205pcgetSketchFilePathRowChanged != null)) {
                    this.F3205pcgetSketchFilePathRowChanged(this, new F3205pcgetSketchFilePathRowChangeEvent(((F3205pcgetSketchFilePathRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F3205pcgetSketchFilePathRowChanging != null)) {
                    this.F3205pcgetSketchFilePathRowChanging(this, new F3205pcgetSketchFilePathRowChangeEvent(((F3205pcgetSketchFilePathRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F3205pcgetSketchFilePathRowDeleted != null)) {
                    this.F3205pcgetSketchFilePathRowDeleted(this, new F3205pcgetSketchFilePathRowChangeEvent(((F3205pcgetSketchFilePathRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F3205pcgetSketchFilePathRowDeleting != null)) {
                    this.F3205pcgetSketchFilePathRowDeleting(this, new F3205pcgetSketchFilePathRowChangeEvent(((F3205pcgetSketchFilePathRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF3205pcgetSketchFilePathRow(F3205pcgetSketchFilePathRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F3205ApexSketchData ds = new F3205ApexSketchData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F3205pcgetSketchFilePathDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F3205pcinsSketchImageDataTable : global::System.Data.TypedTableBase<F3205pcinsSketchImageRow> {
            
            private global::System.Data.DataColumn columnFileID;
            
            private global::System.Data.DataColumn columnPage;
            
            private global::System.Data.DataColumn columnImagePath;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcinsSketchImageDataTable() {
                this.TableName = "F3205pcinsSketchImage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F3205pcinsSketchImageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F3205pcinsSketchImageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileIDColumn {
                get {
                    return this.columnFileID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PageColumn {
                get {
                    return this.columnPage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImagePathColumn {
                get {
                    return this.columnImagePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcinsSketchImageRow this[int index] {
                get {
                    return ((F3205pcinsSketchImageRow)(this.Rows[index]));
                }
            }
            
            public event F3205pcinsSketchImageRowChangeEventHandler F3205pcinsSketchImageRowChanging;
            
            public event F3205pcinsSketchImageRowChangeEventHandler F3205pcinsSketchImageRowChanged;
            
            public event F3205pcinsSketchImageRowChangeEventHandler F3205pcinsSketchImageRowDeleting;
            
            public event F3205pcinsSketchImageRowChangeEventHandler F3205pcinsSketchImageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF3205pcinsSketchImageRow(F3205pcinsSketchImageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcinsSketchImageRow AddF3205pcinsSketchImageRow(int Page, string ImagePath) {
                F3205pcinsSketchImageRow rowF3205pcinsSketchImageRow = ((F3205pcinsSketchImageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Page,
                        ImagePath};
                rowF3205pcinsSketchImageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF3205pcinsSketchImageRow);
                return rowF3205pcinsSketchImageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F3205pcinsSketchImageDataTable cln = ((F3205pcinsSketchImageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F3205pcinsSketchImageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFileID = base.Columns["FileID"];
                this.columnPage = base.Columns["Page"];
                this.columnImagePath = base.Columns["ImagePath"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFileID = new global::System.Data.DataColumn("FileID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileID);
                this.columnPage = new global::System.Data.DataColumn("Page", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPage);
                this.columnImagePath = new global::System.Data.DataColumn("ImagePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImagePath);
                this.columnFileID.AutoIncrement = true;
                this.columnFileID.ReadOnly = true;
                this.columnImagePath.ReadOnly = true;
                this.columnImagePath.MaxLength = 355;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcinsSketchImageRow NewF3205pcinsSketchImageRow() {
                return ((F3205pcinsSketchImageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F3205pcinsSketchImageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F3205pcinsSketchImageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F3205pcinsSketchImageRowChanged != null)) {
                    this.F3205pcinsSketchImageRowChanged(this, new F3205pcinsSketchImageRowChangeEvent(((F3205pcinsSketchImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F3205pcinsSketchImageRowChanging != null)) {
                    this.F3205pcinsSketchImageRowChanging(this, new F3205pcinsSketchImageRowChangeEvent(((F3205pcinsSketchImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F3205pcinsSketchImageRowDeleted != null)) {
                    this.F3205pcinsSketchImageRowDeleted(this, new F3205pcinsSketchImageRowChangeEvent(((F3205pcinsSketchImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F3205pcinsSketchImageRowDeleting != null)) {
                    this.F3205pcinsSketchImageRowDeleting(this, new F3205pcinsSketchImageRowChangeEvent(((F3205pcinsSketchImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF3205pcinsSketchImageRow(F3205pcinsSketchImageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F3205ApexSketchData ds = new F3205ApexSketchData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F3205pcinsSketchImageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F3205pcgetSketchLinksExistRow : global::System.Data.DataRow {
            
            private F3205pcgetSketchLinksExistDataTable tableF3205pcgetSketchLinksExist;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F3205pcgetSketchLinksExistRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF3205pcgetSketchLinksExist = ((F3205pcgetSketchLinksExistDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsLinkSetComplete {
                get {
                    try {
                        return ((int)(this[this.tableF3205pcgetSketchLinksExist.IsLinkSetCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsLinkSetComplete\' in table \'F3205pcgetSketchLinksExist\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableF3205pcgetSketchLinksExist.IsLinkSetCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsLinkSetCompleteNull() {
                return this.IsNull(this.tableF3205pcgetSketchLinksExist.IsLinkSetCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsLinkSetCompleteNull() {
                this[this.tableF3205pcgetSketchLinksExist.IsLinkSetCompleteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F3205pcgetSketchFilePathRow : global::System.Data.DataRow {
            
            private F3205pcgetSketchFilePathDataTable tableF3205pcgetSketchFilePath;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F3205pcgetSketchFilePathRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF3205pcgetSketchFilePath = ((F3205pcgetSketchFilePathDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    try {
                        return ((string)(this[this.tableF3205pcgetSketchFilePath.FilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilePath\' in table \'F3205pcgetSketchFilePath\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF3205pcgetSketchFilePath.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilePathNull() {
                return this.IsNull(this.tableF3205pcgetSketchFilePath.FilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilePathNull() {
                this[this.tableF3205pcgetSketchFilePath.FilePathColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F3205pcinsSketchImageRow : global::System.Data.DataRow {
            
            private F3205pcinsSketchImageDataTable tableF3205pcinsSketchImage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F3205pcinsSketchImageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF3205pcinsSketchImage = ((F3205pcinsSketchImageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileID {
                get {
                    try {
                        return ((int)(this[this.tableF3205pcinsSketchImage.FileIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileID\' in table \'F3205pcinsSketchImage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF3205pcinsSketchImage.FileIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Page {
                get {
                    try {
                        return ((int)(this[this.tableF3205pcinsSketchImage.PageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Page\' in table \'F3205pcinsSketchImage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF3205pcinsSketchImage.PageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImagePath {
                get {
                    try {
                        return ((string)(this[this.tableF3205pcinsSketchImage.ImagePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImagePath\' in table \'F3205pcinsSketchImage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF3205pcinsSketchImage.ImagePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileIDNull() {
                return this.IsNull(this.tableF3205pcinsSketchImage.FileIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileIDNull() {
                this[this.tableF3205pcinsSketchImage.FileIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageNull() {
                return this.IsNull(this.tableF3205pcinsSketchImage.PageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageNull() {
                this[this.tableF3205pcinsSketchImage.PageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImagePathNull() {
                return this.IsNull(this.tableF3205pcinsSketchImage.ImagePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImagePathNull() {
                this[this.tableF3205pcinsSketchImage.ImagePathColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F3205pcgetSketchLinksExistRowChangeEvent : global::System.EventArgs {
            
            private F3205pcgetSketchLinksExistRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchLinksExistRowChangeEvent(F3205pcgetSketchLinksExistRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchLinksExistRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F3205pcgetSketchFilePathRowChangeEvent : global::System.EventArgs {
            
            private F3205pcgetSketchFilePathRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchFilePathRowChangeEvent(F3205pcgetSketchFilePathRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcgetSketchFilePathRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F3205pcinsSketchImageRowChangeEvent : global::System.EventArgs {
            
            private F3205pcinsSketchImageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcinsSketchImageRowChangeEvent(F3205pcinsSketchImageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F3205pcinsSketchImageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591