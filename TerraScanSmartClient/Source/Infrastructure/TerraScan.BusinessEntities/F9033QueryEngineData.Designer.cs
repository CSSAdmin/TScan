//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F9033QueryEngineData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F9033QueryEngineData : global::System.Data.DataSet {
        
        private GetDefaultLayoutXMLDataTable tableGetDefaultLayoutXML;
        
        private ListQueryViewDataTable tableListQueryView;
        
        private ListQueryLayoutDataTable tableListQueryLayout;
        
        private ListQuerySnapShotDataTable tableListQuerySnapShot;
        
        private GetSystemSnapshotCountDataTable tableGetSystemSnapshotCount;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F9033QueryEngineData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F9033QueryEngineData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetDefaultLayoutXML"] != null)) {
                    base.Tables.Add(new GetDefaultLayoutXMLDataTable(ds.Tables["GetDefaultLayoutXML"]));
                }
                if ((ds.Tables["ListQueryView"] != null)) {
                    base.Tables.Add(new ListQueryViewDataTable(ds.Tables["ListQueryView"]));
                }
                if ((ds.Tables["ListQueryLayout"] != null)) {
                    base.Tables.Add(new ListQueryLayoutDataTable(ds.Tables["ListQueryLayout"]));
                }
                if ((ds.Tables["ListQuerySnapShot"] != null)) {
                    base.Tables.Add(new ListQuerySnapShotDataTable(ds.Tables["ListQuerySnapShot"]));
                }
                if ((ds.Tables["GetSystemSnapshotCount"] != null)) {
                    base.Tables.Add(new GetSystemSnapshotCountDataTable(ds.Tables["GetSystemSnapshotCount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetDefaultLayoutXMLDataTable GetDefaultLayoutXML {
            get {
                return this.tableGetDefaultLayoutXML;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListQueryViewDataTable ListQueryView {
            get {
                return this.tableListQueryView;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListQueryLayoutDataTable ListQueryLayout {
            get {
                return this.tableListQueryLayout;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListQuerySnapShotDataTable ListQuerySnapShot {
            get {
                return this.tableListQuerySnapShot;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSystemSnapshotCountDataTable GetSystemSnapshotCount {
            get {
                return this.tableGetSystemSnapshotCount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F9033QueryEngineData cln = ((F9033QueryEngineData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetDefaultLayoutXML"] != null)) {
                    base.Tables.Add(new GetDefaultLayoutXMLDataTable(ds.Tables["GetDefaultLayoutXML"]));
                }
                if ((ds.Tables["ListQueryView"] != null)) {
                    base.Tables.Add(new ListQueryViewDataTable(ds.Tables["ListQueryView"]));
                }
                if ((ds.Tables["ListQueryLayout"] != null)) {
                    base.Tables.Add(new ListQueryLayoutDataTable(ds.Tables["ListQueryLayout"]));
                }
                if ((ds.Tables["ListQuerySnapShot"] != null)) {
                    base.Tables.Add(new ListQuerySnapShotDataTable(ds.Tables["ListQuerySnapShot"]));
                }
                if ((ds.Tables["GetSystemSnapshotCount"] != null)) {
                    base.Tables.Add(new GetSystemSnapshotCountDataTable(ds.Tables["GetSystemSnapshotCount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetDefaultLayoutXML = ((GetDefaultLayoutXMLDataTable)(base.Tables["GetDefaultLayoutXML"]));
            if ((initTable == true)) {
                if ((this.tableGetDefaultLayoutXML != null)) {
                    this.tableGetDefaultLayoutXML.InitVars();
                }
            }
            this.tableListQueryView = ((ListQueryViewDataTable)(base.Tables["ListQueryView"]));
            if ((initTable == true)) {
                if ((this.tableListQueryView != null)) {
                    this.tableListQueryView.InitVars();
                }
            }
            this.tableListQueryLayout = ((ListQueryLayoutDataTable)(base.Tables["ListQueryLayout"]));
            if ((initTable == true)) {
                if ((this.tableListQueryLayout != null)) {
                    this.tableListQueryLayout.InitVars();
                }
            }
            this.tableListQuerySnapShot = ((ListQuerySnapShotDataTable)(base.Tables["ListQuerySnapShot"]));
            if ((initTable == true)) {
                if ((this.tableListQuerySnapShot != null)) {
                    this.tableListQuerySnapShot.InitVars();
                }
            }
            this.tableGetSystemSnapshotCount = ((GetSystemSnapshotCountDataTable)(base.Tables["GetSystemSnapshotCount"]));
            if ((initTable == true)) {
                if ((this.tableGetSystemSnapshotCount != null)) {
                    this.tableGetSystemSnapshotCount.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F9033QueryEngineData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F9033QueryEngineData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetDefaultLayoutXML = new GetDefaultLayoutXMLDataTable();
            base.Tables.Add(this.tableGetDefaultLayoutXML);
            this.tableListQueryView = new ListQueryViewDataTable();
            base.Tables.Add(this.tableListQueryView);
            this.tableListQueryLayout = new ListQueryLayoutDataTable();
            base.Tables.Add(this.tableListQueryLayout);
            this.tableListQuerySnapShot = new ListQuerySnapShotDataTable();
            base.Tables.Add(this.tableListQuerySnapShot);
            this.tableGetSystemSnapshotCount = new GetSystemSnapshotCountDataTable();
            base.Tables.Add(this.tableGetSystemSnapshotCount);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetDefaultLayoutXML() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListQueryView() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListQueryLayout() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListQuerySnapShot() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSystemSnapshotCount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F9033QueryEngineData ds = new F9033QueryEngineData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetDefaultLayoutXMLRowChangeEventHandler(object sender, GetDefaultLayoutXMLRowChangeEvent e);
        
        public delegate void ListQueryViewRowChangeEventHandler(object sender, ListQueryViewRowChangeEvent e);
        
        public delegate void ListQueryLayoutRowChangeEventHandler(object sender, ListQueryLayoutRowChangeEvent e);
        
        public delegate void ListQuerySnapShotRowChangeEventHandler(object sender, ListQuerySnapShotRowChangeEvent e);
        
        public delegate void GetSystemSnapshotCountRowChangeEventHandler(object sender, GetSystemSnapshotCountRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetDefaultLayoutXMLDataTable : global::System.Data.TypedTableBase<GetDefaultLayoutXMLRow> {
            
            private global::System.Data.DataColumn columnLayoutXML;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDefaultLayoutXMLDataTable() {
                this.TableName = "GetDefaultLayoutXML";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDefaultLayoutXMLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetDefaultLayoutXMLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayoutXMLColumn {
                get {
                    return this.columnLayoutXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDefaultLayoutXMLRow this[int index] {
                get {
                    return ((GetDefaultLayoutXMLRow)(this.Rows[index]));
                }
            }
            
            public event GetDefaultLayoutXMLRowChangeEventHandler GetDefaultLayoutXMLRowChanging;
            
            public event GetDefaultLayoutXMLRowChangeEventHandler GetDefaultLayoutXMLRowChanged;
            
            public event GetDefaultLayoutXMLRowChangeEventHandler GetDefaultLayoutXMLRowDeleting;
            
            public event GetDefaultLayoutXMLRowChangeEventHandler GetDefaultLayoutXMLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetDefaultLayoutXMLRow(GetDefaultLayoutXMLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDefaultLayoutXMLRow AddGetDefaultLayoutXMLRow(string LayoutXML) {
                GetDefaultLayoutXMLRow rowGetDefaultLayoutXMLRow = ((GetDefaultLayoutXMLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LayoutXML};
                rowGetDefaultLayoutXMLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetDefaultLayoutXMLRow);
                return rowGetDefaultLayoutXMLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetDefaultLayoutXMLDataTable cln = ((GetDefaultLayoutXMLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetDefaultLayoutXMLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLayoutXML = base.Columns["LayoutXML"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLayoutXML = new global::System.Data.DataColumn("LayoutXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayoutXML);
                this.columnLayoutXML.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDefaultLayoutXMLRow NewGetDefaultLayoutXMLRow() {
                return ((GetDefaultLayoutXMLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetDefaultLayoutXMLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetDefaultLayoutXMLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetDefaultLayoutXMLRowChanged != null)) {
                    this.GetDefaultLayoutXMLRowChanged(this, new GetDefaultLayoutXMLRowChangeEvent(((GetDefaultLayoutXMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetDefaultLayoutXMLRowChanging != null)) {
                    this.GetDefaultLayoutXMLRowChanging(this, new GetDefaultLayoutXMLRowChangeEvent(((GetDefaultLayoutXMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetDefaultLayoutXMLRowDeleted != null)) {
                    this.GetDefaultLayoutXMLRowDeleted(this, new GetDefaultLayoutXMLRowChangeEvent(((GetDefaultLayoutXMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetDefaultLayoutXMLRowDeleting != null)) {
                    this.GetDefaultLayoutXMLRowDeleting(this, new GetDefaultLayoutXMLRowChangeEvent(((GetDefaultLayoutXMLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetDefaultLayoutXMLRow(GetDefaultLayoutXMLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9033QueryEngineData ds = new F9033QueryEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetDefaultLayoutXMLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListQueryViewDataTable : global::System.Data.TypedTableBase<ListQueryViewRow> {
            
            private global::System.Data.DataColumn columnQueryViewID;
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnQueryView;
            
            private global::System.Data.DataColumn columnQueryViewName;
            
            private global::System.Data.DataColumn columnKeyField;
            
            private global::System.Data.DataColumn columnQueryLayoutID;
            
            private global::System.Data.DataColumn columnLayoutName;
            
            private global::System.Data.DataColumn columnLayoutXML;
            
            private global::System.Data.DataColumn columnForeignKeyName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryViewDataTable() {
                this.TableName = "ListQueryView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQueryViewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListQueryViewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueryViewIDColumn {
                get {
                    return this.columnQueryViewID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueryViewColumn {
                get {
                    return this.columnQueryView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueryViewNameColumn {
                get {
                    return this.columnQueryViewName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyFieldColumn {
                get {
                    return this.columnKeyField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueryLayoutIDColumn {
                get {
                    return this.columnQueryLayoutID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayoutNameColumn {
                get {
                    return this.columnLayoutName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayoutXMLColumn {
                get {
                    return this.columnLayoutXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForeignKeyNameColumn {
                get {
                    return this.columnForeignKeyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryViewRow this[int index] {
                get {
                    return ((ListQueryViewRow)(this.Rows[index]));
                }
            }
            
            public event ListQueryViewRowChangeEventHandler ListQueryViewRowChanging;
            
            public event ListQueryViewRowChangeEventHandler ListQueryViewRowChanged;
            
            public event ListQueryViewRowChangeEventHandler ListQueryViewRowDeleting;
            
            public event ListQueryViewRowChangeEventHandler ListQueryViewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListQueryViewRow(ListQueryViewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryViewRow AddListQueryViewRow(int Form, string QueryView, string QueryViewName, string KeyField, int QueryLayoutID, string LayoutName, string LayoutXML, string ForeignKeyName) {
                ListQueryViewRow rowListQueryViewRow = ((ListQueryViewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Form,
                        QueryView,
                        QueryViewName,
                        KeyField,
                        QueryLayoutID,
                        LayoutName,
                        LayoutXML,
                        ForeignKeyName};
                rowListQueryViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListQueryViewRow);
                return rowListQueryViewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListQueryViewDataTable cln = ((ListQueryViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListQueryViewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnQueryViewID = base.Columns["QueryViewID"];
                this.columnForm = base.Columns["Form"];
                this.columnQueryView = base.Columns["QueryView"];
                this.columnQueryViewName = base.Columns["QueryViewName"];
                this.columnKeyField = base.Columns["KeyField"];
                this.columnQueryLayoutID = base.Columns["QueryLayoutID"];
                this.columnLayoutName = base.Columns["LayoutName"];
                this.columnLayoutXML = base.Columns["LayoutXML"];
                this.columnForeignKeyName = base.Columns["ForeignKeyName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnQueryViewID = new global::System.Data.DataColumn("QueryViewID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueryViewID);
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnQueryView = new global::System.Data.DataColumn("QueryView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueryView);
                this.columnQueryViewName = new global::System.Data.DataColumn("QueryViewName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueryViewName);
                this.columnKeyField = new global::System.Data.DataColumn("KeyField", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyField);
                this.columnQueryLayoutID = new global::System.Data.DataColumn("QueryLayoutID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueryLayoutID);
                this.columnLayoutName = new global::System.Data.DataColumn("LayoutName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayoutName);
                this.columnLayoutXML = new global::System.Data.DataColumn("LayoutXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayoutXML);
                this.columnForeignKeyName = new global::System.Data.DataColumn("ForeignKeyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForeignKeyName);
                this.columnQueryViewID.AutoIncrement = true;
                this.columnQueryViewID.AllowDBNull = false;
                this.columnQueryViewID.ReadOnly = true;
                this.columnForm.AllowDBNull = false;
                this.columnQueryView.MaxLength = 50;
                this.columnQueryViewName.MaxLength = 50;
                this.columnKeyField.ReadOnly = true;
                this.columnKeyField.MaxLength = 20;
                this.columnQueryLayoutID.ReadOnly = true;
                this.columnLayoutName.ReadOnly = true;
                this.columnLayoutName.MaxLength = 50;
                this.columnLayoutXML.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryViewRow NewListQueryViewRow() {
                return ((ListQueryViewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListQueryViewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListQueryViewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListQueryViewRowChanged != null)) {
                    this.ListQueryViewRowChanged(this, new ListQueryViewRowChangeEvent(((ListQueryViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListQueryViewRowChanging != null)) {
                    this.ListQueryViewRowChanging(this, new ListQueryViewRowChangeEvent(((ListQueryViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListQueryViewRowDeleted != null)) {
                    this.ListQueryViewRowDeleted(this, new ListQueryViewRowChangeEvent(((ListQueryViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListQueryViewRowDeleting != null)) {
                    this.ListQueryViewRowDeleting(this, new ListQueryViewRowChangeEvent(((ListQueryViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListQueryViewRow(ListQueryViewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9033QueryEngineData ds = new F9033QueryEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListQueryViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListQueryLayoutDataTable : global::System.Data.TypedTableBase<ListQueryLayoutRow> {
            
            private global::System.Data.DataColumn columnQueryLayoutID;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnName_Display;
            
            private global::System.Data.DataColumn columnIsAllUsers;
            
            private global::System.Data.DataColumn columnIsDefault;
            
            private global::System.Data.DataColumn columnIsTSOnly;
            
            private global::System.Data.DataColumn columnIsDefault1;
            
            private global::System.Data.DataColumn columnQueryView;
            
            private global::System.Data.DataColumn columnLayoutName;
            
            private global::System.Data.DataColumn columnLayoutXML;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryLayoutDataTable() {
                this.TableName = "ListQueryLayout";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQueryLayoutDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListQueryLayoutDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueryLayoutIDColumn {
                get {
                    return this.columnQueryLayoutID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Name_DisplayColumn {
                get {
                    return this.columnName_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAllUsersColumn {
                get {
                    return this.columnIsAllUsers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDefaultColumn {
                get {
                    return this.columnIsDefault;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTSOnlyColumn {
                get {
                    return this.columnIsTSOnly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDefault1Column {
                get {
                    return this.columnIsDefault1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueryViewColumn {
                get {
                    return this.columnQueryView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayoutNameColumn {
                get {
                    return this.columnLayoutName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayoutXMLColumn {
                get {
                    return this.columnLayoutXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryLayoutRow this[int index] {
                get {
                    return ((ListQueryLayoutRow)(this.Rows[index]));
                }
            }
            
            public event ListQueryLayoutRowChangeEventHandler ListQueryLayoutRowChanging;
            
            public event ListQueryLayoutRowChangeEventHandler ListQueryLayoutRowChanged;
            
            public event ListQueryLayoutRowChangeEventHandler ListQueryLayoutRowDeleting;
            
            public event ListQueryLayoutRowChangeEventHandler ListQueryLayoutRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListQueryLayoutRow(ListQueryLayoutRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryLayoutRow AddListQueryLayoutRow(int UserID, string Name_Display, bool IsAllUsers, bool IsDefault, bool IsTSOnly, bool IsDefault1, string QueryView, string LayoutName, string LayoutXML) {
                ListQueryLayoutRow rowListQueryLayoutRow = ((ListQueryLayoutRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UserID,
                        Name_Display,
                        IsAllUsers,
                        IsDefault,
                        IsTSOnly,
                        IsDefault1,
                        QueryView,
                        LayoutName,
                        LayoutXML};
                rowListQueryLayoutRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListQueryLayoutRow);
                return rowListQueryLayoutRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListQueryLayoutDataTable cln = ((ListQueryLayoutDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListQueryLayoutDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnQueryLayoutID = base.Columns["QueryLayoutID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnName_Display = base.Columns["Name_Display"];
                this.columnIsAllUsers = base.Columns["IsAllUsers"];
                this.columnIsDefault = base.Columns["IsDefault"];
                this.columnIsTSOnly = base.Columns["IsTSOnly"];
                this.columnIsDefault1 = base.Columns["IsDefault1"];
                this.columnQueryView = base.Columns["QueryView"];
                this.columnLayoutName = base.Columns["LayoutName"];
                this.columnLayoutXML = base.Columns["LayoutXML"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnQueryLayoutID = new global::System.Data.DataColumn("QueryLayoutID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueryLayoutID);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnName_Display = new global::System.Data.DataColumn("Name_Display", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_Display);
                this.columnIsAllUsers = new global::System.Data.DataColumn("IsAllUsers", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAllUsers);
                this.columnIsDefault = new global::System.Data.DataColumn("IsDefault", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDefault);
                this.columnIsTSOnly = new global::System.Data.DataColumn("IsTSOnly", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTSOnly);
                this.columnIsDefault1 = new global::System.Data.DataColumn("IsDefault1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDefault1);
                this.columnQueryView = new global::System.Data.DataColumn("QueryView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueryView);
                this.columnLayoutName = new global::System.Data.DataColumn("LayoutName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayoutName);
                this.columnLayoutXML = new global::System.Data.DataColumn("LayoutXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayoutXML);
                this.columnQueryLayoutID.AutoIncrement = true;
                this.columnQueryLayoutID.AllowDBNull = false;
                this.columnQueryLayoutID.ReadOnly = true;
                this.columnUserID.AllowDBNull = false;
                this.columnName_Display.MaxLength = 50;
                this.columnQueryView.MaxLength = 50;
                this.columnLayoutName.MaxLength = 50;
                this.columnLayoutXML.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryLayoutRow NewListQueryLayoutRow() {
                return ((ListQueryLayoutRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListQueryLayoutRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListQueryLayoutRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListQueryLayoutRowChanged != null)) {
                    this.ListQueryLayoutRowChanged(this, new ListQueryLayoutRowChangeEvent(((ListQueryLayoutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListQueryLayoutRowChanging != null)) {
                    this.ListQueryLayoutRowChanging(this, new ListQueryLayoutRowChangeEvent(((ListQueryLayoutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListQueryLayoutRowDeleted != null)) {
                    this.ListQueryLayoutRowDeleted(this, new ListQueryLayoutRowChangeEvent(((ListQueryLayoutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListQueryLayoutRowDeleting != null)) {
                    this.ListQueryLayoutRowDeleting(this, new ListQueryLayoutRowChangeEvent(((ListQueryLayoutRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListQueryLayoutRow(ListQueryLayoutRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9033QueryEngineData ds = new F9033QueryEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListQueryLayoutDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListQuerySnapShotDataTable : global::System.Data.TypedTableBase<ListQuerySnapShotRow> {
            
            private global::System.Data.DataColumn columnSnapshotID;
            
            private global::System.Data.DataColumn columnSnapshotName;
            
            private global::System.Data.DataColumn columnQueryViewID;
            
            private global::System.Data.DataColumn columnRecordCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQuerySnapShotDataTable() {
                this.TableName = "ListQuerySnapShot";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQuerySnapShotDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListQuerySnapShotDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SnapshotIDColumn {
                get {
                    return this.columnSnapshotID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SnapshotNameColumn {
                get {
                    return this.columnSnapshotName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QueryViewIDColumn {
                get {
                    return this.columnQueryViewID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordCountColumn {
                get {
                    return this.columnRecordCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQuerySnapShotRow this[int index] {
                get {
                    return ((ListQuerySnapShotRow)(this.Rows[index]));
                }
            }
            
            public event ListQuerySnapShotRowChangeEventHandler ListQuerySnapShotRowChanging;
            
            public event ListQuerySnapShotRowChangeEventHandler ListQuerySnapShotRowChanged;
            
            public event ListQuerySnapShotRowChangeEventHandler ListQuerySnapShotRowDeleting;
            
            public event ListQuerySnapShotRowChangeEventHandler ListQuerySnapShotRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListQuerySnapShotRow(ListQuerySnapShotRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQuerySnapShotRow AddListQuerySnapShotRow(string SnapshotName, int RecordCount) {
                ListQuerySnapShotRow rowListQuerySnapShotRow = ((ListQuerySnapShotRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SnapshotName,
                        null,
                        RecordCount};
                rowListQuerySnapShotRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListQuerySnapShotRow);
                return rowListQuerySnapShotRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListQuerySnapShotDataTable cln = ((ListQuerySnapShotDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListQuerySnapShotDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSnapshotID = base.Columns["SnapshotID"];
                this.columnSnapshotName = base.Columns["SnapshotName"];
                this.columnQueryViewID = base.Columns["QueryViewID"];
                this.columnRecordCount = base.Columns["RecordCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSnapshotID = new global::System.Data.DataColumn("SnapshotID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapshotID);
                this.columnSnapshotName = new global::System.Data.DataColumn("SnapshotName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapshotName);
                this.columnQueryViewID = new global::System.Data.DataColumn("QueryViewID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQueryViewID);
                this.columnRecordCount = new global::System.Data.DataColumn("RecordCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordCount);
                this.columnSnapshotID.AutoIncrement = true;
                this.columnSnapshotID.AllowDBNull = false;
                this.columnSnapshotID.ReadOnly = true;
                this.columnSnapshotName.AllowDBNull = false;
                this.columnSnapshotName.MaxLength = 50;
                this.columnQueryViewID.AutoIncrement = true;
                this.columnQueryViewID.AllowDBNull = false;
                this.columnQueryViewID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQuerySnapShotRow NewListQuerySnapShotRow() {
                return ((ListQuerySnapShotRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListQuerySnapShotRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListQuerySnapShotRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListQuerySnapShotRowChanged != null)) {
                    this.ListQuerySnapShotRowChanged(this, new ListQuerySnapShotRowChangeEvent(((ListQuerySnapShotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListQuerySnapShotRowChanging != null)) {
                    this.ListQuerySnapShotRowChanging(this, new ListQuerySnapShotRowChangeEvent(((ListQuerySnapShotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListQuerySnapShotRowDeleted != null)) {
                    this.ListQuerySnapShotRowDeleted(this, new ListQuerySnapShotRowChangeEvent(((ListQuerySnapShotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListQuerySnapShotRowDeleting != null)) {
                    this.ListQuerySnapShotRowDeleting(this, new ListQuerySnapShotRowChangeEvent(((ListQuerySnapShotRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListQuerySnapShotRow(ListQuerySnapShotRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9033QueryEngineData ds = new F9033QueryEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListQuerySnapShotDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSystemSnapshotCountDataTable : global::System.Data.TypedTableBase<GetSystemSnapshotCountRow> {
            
            private global::System.Data.DataColumn columnSystemSnapshotItemCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSystemSnapshotCountDataTable() {
                this.TableName = "GetSystemSnapshotCount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSystemSnapshotCountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSystemSnapshotCountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystemSnapshotItemCountColumn {
                get {
                    return this.columnSystemSnapshotItemCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSystemSnapshotCountRow this[int index] {
                get {
                    return ((GetSystemSnapshotCountRow)(this.Rows[index]));
                }
            }
            
            public event GetSystemSnapshotCountRowChangeEventHandler GetSystemSnapshotCountRowChanging;
            
            public event GetSystemSnapshotCountRowChangeEventHandler GetSystemSnapshotCountRowChanged;
            
            public event GetSystemSnapshotCountRowChangeEventHandler GetSystemSnapshotCountRowDeleting;
            
            public event GetSystemSnapshotCountRowChangeEventHandler GetSystemSnapshotCountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSystemSnapshotCountRow(GetSystemSnapshotCountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSystemSnapshotCountRow AddGetSystemSnapshotCountRow(int SystemSnapshotItemCount) {
                GetSystemSnapshotCountRow rowGetSystemSnapshotCountRow = ((GetSystemSnapshotCountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SystemSnapshotItemCount};
                rowGetSystemSnapshotCountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSystemSnapshotCountRow);
                return rowGetSystemSnapshotCountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSystemSnapshotCountDataTable cln = ((GetSystemSnapshotCountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSystemSnapshotCountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSystemSnapshotItemCount = base.Columns["SystemSnapshotItemCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSystemSnapshotItemCount = new global::System.Data.DataColumn("SystemSnapshotItemCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemSnapshotItemCount);
                this.columnSystemSnapshotItemCount.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSystemSnapshotCountRow NewGetSystemSnapshotCountRow() {
                return ((GetSystemSnapshotCountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSystemSnapshotCountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSystemSnapshotCountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSystemSnapshotCountRowChanged != null)) {
                    this.GetSystemSnapshotCountRowChanged(this, new GetSystemSnapshotCountRowChangeEvent(((GetSystemSnapshotCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSystemSnapshotCountRowChanging != null)) {
                    this.GetSystemSnapshotCountRowChanging(this, new GetSystemSnapshotCountRowChangeEvent(((GetSystemSnapshotCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSystemSnapshotCountRowDeleted != null)) {
                    this.GetSystemSnapshotCountRowDeleted(this, new GetSystemSnapshotCountRowChangeEvent(((GetSystemSnapshotCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSystemSnapshotCountRowDeleting != null)) {
                    this.GetSystemSnapshotCountRowDeleting(this, new GetSystemSnapshotCountRowChangeEvent(((GetSystemSnapshotCountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSystemSnapshotCountRow(GetSystemSnapshotCountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9033QueryEngineData ds = new F9033QueryEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSystemSnapshotCountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetDefaultLayoutXMLRow : global::System.Data.DataRow {
            
            private GetDefaultLayoutXMLDataTable tableGetDefaultLayoutXML;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetDefaultLayoutXMLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetDefaultLayoutXML = ((GetDefaultLayoutXMLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayoutXML {
                get {
                    try {
                        return ((string)(this[this.tableGetDefaultLayoutXML.LayoutXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LayoutXML\' in table \'GetDefaultLayoutXML\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetDefaultLayoutXML.LayoutXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayoutXMLNull() {
                return this.IsNull(this.tableGetDefaultLayoutXML.LayoutXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayoutXMLNull() {
                this[this.tableGetDefaultLayoutXML.LayoutXMLColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListQueryViewRow : global::System.Data.DataRow {
            
            private ListQueryViewDataTable tableListQueryView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQueryViewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListQueryView = ((ListQueryViewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QueryViewID {
                get {
                    return ((int)(this[this.tableListQueryView.QueryViewIDColumn]));
                }
                set {
                    this[this.tableListQueryView.QueryViewIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    return ((int)(this[this.tableListQueryView.FormColumn]));
                }
                set {
                    this[this.tableListQueryView.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QueryView {
                get {
                    try {
                        return ((string)(this[this.tableListQueryView.QueryViewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QueryView\' in table \'ListQueryView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryView.QueryViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QueryViewName {
                get {
                    try {
                        return ((string)(this[this.tableListQueryView.QueryViewNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QueryViewName\' in table \'ListQueryView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryView.QueryViewNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyField {
                get {
                    try {
                        return ((string)(this[this.tableListQueryView.KeyFieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyField\' in table \'ListQueryView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryView.KeyFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QueryLayoutID {
                get {
                    try {
                        return ((int)(this[this.tableListQueryView.QueryLayoutIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QueryLayoutID\' in table \'ListQueryView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryView.QueryLayoutIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayoutName {
                get {
                    try {
                        return ((string)(this[this.tableListQueryView.LayoutNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LayoutName\' in table \'ListQueryView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryView.LayoutNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayoutXML {
                get {
                    try {
                        return ((string)(this[this.tableListQueryView.LayoutXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LayoutXML\' in table \'ListQueryView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryView.LayoutXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ForeignKeyName {
                get {
                    try {
                        return ((string)(this[this.tableListQueryView.ForeignKeyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForeignKeyName\' in table \'ListQueryView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryView.ForeignKeyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQueryViewNull() {
                return this.IsNull(this.tableListQueryView.QueryViewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQueryViewNull() {
                this[this.tableListQueryView.QueryViewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQueryViewNameNull() {
                return this.IsNull(this.tableListQueryView.QueryViewNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQueryViewNameNull() {
                this[this.tableListQueryView.QueryViewNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyFieldNull() {
                return this.IsNull(this.tableListQueryView.KeyFieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyFieldNull() {
                this[this.tableListQueryView.KeyFieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQueryLayoutIDNull() {
                return this.IsNull(this.tableListQueryView.QueryLayoutIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQueryLayoutIDNull() {
                this[this.tableListQueryView.QueryLayoutIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayoutNameNull() {
                return this.IsNull(this.tableListQueryView.LayoutNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayoutNameNull() {
                this[this.tableListQueryView.LayoutNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayoutXMLNull() {
                return this.IsNull(this.tableListQueryView.LayoutXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayoutXMLNull() {
                this[this.tableListQueryView.LayoutXMLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForeignKeyNameNull() {
                return this.IsNull(this.tableListQueryView.ForeignKeyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForeignKeyNameNull() {
                this[this.tableListQueryView.ForeignKeyNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListQueryLayoutRow : global::System.Data.DataRow {
            
            private ListQueryLayoutDataTable tableListQueryLayout;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQueryLayoutRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListQueryLayout = ((ListQueryLayoutDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QueryLayoutID {
                get {
                    return ((int)(this[this.tableListQueryLayout.QueryLayoutIDColumn]));
                }
                set {
                    this[this.tableListQueryLayout.QueryLayoutIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableListQueryLayout.UserIDColumn]));
                }
                set {
                    this[this.tableListQueryLayout.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_Display {
                get {
                    try {
                        return ((string)(this[this.tableListQueryLayout.Name_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name_Display\' in table \'ListQueryLayout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryLayout.Name_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllUsers {
                get {
                    try {
                        return ((bool)(this[this.tableListQueryLayout.IsAllUsersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAllUsers\' in table \'ListQueryLayout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryLayout.IsAllUsersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefault {
                get {
                    try {
                        return ((bool)(this[this.tableListQueryLayout.IsDefaultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDefault\' in table \'ListQueryLayout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryLayout.IsDefaultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTSOnly {
                get {
                    try {
                        return ((bool)(this[this.tableListQueryLayout.IsTSOnlyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTSOnly\' in table \'ListQueryLayout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryLayout.IsTSOnlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefault1 {
                get {
                    try {
                        return ((bool)(this[this.tableListQueryLayout.IsDefault1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDefault1\' in table \'ListQueryLayout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryLayout.IsDefault1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QueryView {
                get {
                    try {
                        return ((string)(this[this.tableListQueryLayout.QueryViewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QueryView\' in table \'ListQueryLayout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryLayout.QueryViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayoutName {
                get {
                    try {
                        return ((string)(this[this.tableListQueryLayout.LayoutNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LayoutName\' in table \'ListQueryLayout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryLayout.LayoutNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LayoutXML {
                get {
                    try {
                        return ((string)(this[this.tableListQueryLayout.LayoutXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LayoutXML\' in table \'ListQueryLayout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQueryLayout.LayoutXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsName_DisplayNull() {
                return this.IsNull(this.tableListQueryLayout.Name_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetName_DisplayNull() {
                this[this.tableListQueryLayout.Name_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAllUsersNull() {
                return this.IsNull(this.tableListQueryLayout.IsAllUsersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAllUsersNull() {
                this[this.tableListQueryLayout.IsAllUsersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDefaultNull() {
                return this.IsNull(this.tableListQueryLayout.IsDefaultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDefaultNull() {
                this[this.tableListQueryLayout.IsDefaultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTSOnlyNull() {
                return this.IsNull(this.tableListQueryLayout.IsTSOnlyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTSOnlyNull() {
                this[this.tableListQueryLayout.IsTSOnlyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDefault1Null() {
                return this.IsNull(this.tableListQueryLayout.IsDefault1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDefault1Null() {
                this[this.tableListQueryLayout.IsDefault1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQueryViewNull() {
                return this.IsNull(this.tableListQueryLayout.QueryViewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQueryViewNull() {
                this[this.tableListQueryLayout.QueryViewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayoutNameNull() {
                return this.IsNull(this.tableListQueryLayout.LayoutNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayoutNameNull() {
                this[this.tableListQueryLayout.LayoutNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayoutXMLNull() {
                return this.IsNull(this.tableListQueryLayout.LayoutXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayoutXMLNull() {
                this[this.tableListQueryLayout.LayoutXMLColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListQuerySnapShotRow : global::System.Data.DataRow {
            
            private ListQuerySnapShotDataTable tableListQuerySnapShot;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQuerySnapShotRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListQuerySnapShot = ((ListQuerySnapShotDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SnapshotID {
                get {
                    return ((int)(this[this.tableListQuerySnapShot.SnapshotIDColumn]));
                }
                set {
                    this[this.tableListQuerySnapShot.SnapshotIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SnapshotName {
                get {
                    return ((string)(this[this.tableListQuerySnapShot.SnapshotNameColumn]));
                }
                set {
                    this[this.tableListQuerySnapShot.SnapshotNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QueryViewID {
                get {
                    return ((int)(this[this.tableListQuerySnapShot.QueryViewIDColumn]));
                }
                set {
                    this[this.tableListQuerySnapShot.QueryViewIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RecordCount {
                get {
                    try {
                        return ((int)(this[this.tableListQuerySnapShot.RecordCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordCount\' in table \'ListQuerySnapShot\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQuerySnapShot.RecordCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordCountNull() {
                return this.IsNull(this.tableListQuerySnapShot.RecordCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordCountNull() {
                this[this.tableListQuerySnapShot.RecordCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSystemSnapshotCountRow : global::System.Data.DataRow {
            
            private GetSystemSnapshotCountDataTable tableGetSystemSnapshotCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSystemSnapshotCountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSystemSnapshotCount = ((GetSystemSnapshotCountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SystemSnapshotItemCount {
                get {
                    try {
                        return ((int)(this[this.tableGetSystemSnapshotCount.SystemSnapshotItemCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SystemSnapshotItemCount\' in table \'GetSystemSnapshotCount\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSystemSnapshotCount.SystemSnapshotItemCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSystemSnapshotItemCountNull() {
                return this.IsNull(this.tableGetSystemSnapshotCount.SystemSnapshotItemCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSystemSnapshotItemCountNull() {
                this[this.tableGetSystemSnapshotCount.SystemSnapshotItemCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetDefaultLayoutXMLRowChangeEvent : global::System.EventArgs {
            
            private GetDefaultLayoutXMLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDefaultLayoutXMLRowChangeEvent(GetDefaultLayoutXMLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetDefaultLayoutXMLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListQueryViewRowChangeEvent : global::System.EventArgs {
            
            private ListQueryViewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryViewRowChangeEvent(ListQueryViewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListQueryLayoutRowChangeEvent : global::System.EventArgs {
            
            private ListQueryLayoutRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryLayoutRowChangeEvent(ListQueryLayoutRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQueryLayoutRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListQuerySnapShotRowChangeEvent : global::System.EventArgs {
            
            private ListQuerySnapShotRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQuerySnapShotRowChangeEvent(ListQuerySnapShotRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQuerySnapShotRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSystemSnapshotCountRowChangeEvent : global::System.EventArgs {
            
            private GetSystemSnapshotCountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSystemSnapshotCountRowChangeEvent(GetSystemSnapshotCountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSystemSnapshotCountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591