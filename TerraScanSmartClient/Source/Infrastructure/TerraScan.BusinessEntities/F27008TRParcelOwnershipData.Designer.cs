//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F27008TRParcelOwnershipData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F27008TRParcelOwnershipData : global::System.Data.DataSet {
        
        private ListOwnersDatatableDataTable tableListOwnersDatatable;
        
        private ListParcelOwnershipDatatableDataTable tableListParcelOwnershipDatatable;
        
        private ListOwnerValidIDDataTable tableListOwnerValidID;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F27008TRParcelOwnershipData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F27008TRParcelOwnershipData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.ExcludeSchema)) {
                    this.InitExpressions();
                }
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListOwnersDatatable"] != null)) {
                    base.Tables.Add(new ListOwnersDatatableDataTable(ds.Tables["ListOwnersDatatable"]));
                }
                if ((ds.Tables["ListParcelOwnershipDatatable"] != null)) {
                    base.Tables.Add(new ListParcelOwnershipDatatableDataTable(ds.Tables["ListParcelOwnershipDatatable"]));
                }
                if ((ds.Tables["ListOwnerValidID"] != null)) {
                    base.Tables.Add(new ListOwnerValidIDDataTable(ds.Tables["ListOwnerValidID"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListOwnersDatatableDataTable ListOwnersDatatable {
            get {
                return this.tableListOwnersDatatable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListParcelOwnershipDatatableDataTable ListParcelOwnershipDatatable {
            get {
                return this.tableListParcelOwnershipDatatable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListOwnerValidIDDataTable ListOwnerValidID {
            get {
                return this.tableListOwnerValidID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F27008TRParcelOwnershipData cln = ((F27008TRParcelOwnershipData)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListOwnersDatatable"] != null)) {
                    base.Tables.Add(new ListOwnersDatatableDataTable(ds.Tables["ListOwnersDatatable"]));
                }
                if ((ds.Tables["ListParcelOwnershipDatatable"] != null)) {
                    base.Tables.Add(new ListParcelOwnershipDatatableDataTable(ds.Tables["ListParcelOwnershipDatatable"]));
                }
                if ((ds.Tables["ListOwnerValidID"] != null)) {
                    base.Tables.Add(new ListOwnerValidIDDataTable(ds.Tables["ListOwnerValidID"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListOwnersDatatable = ((ListOwnersDatatableDataTable)(base.Tables["ListOwnersDatatable"]));
            if ((initTable == true)) {
                if ((this.tableListOwnersDatatable != null)) {
                    this.tableListOwnersDatatable.InitVars();
                }
            }
            this.tableListParcelOwnershipDatatable = ((ListParcelOwnershipDatatableDataTable)(base.Tables["ListParcelOwnershipDatatable"]));
            if ((initTable == true)) {
                if ((this.tableListParcelOwnershipDatatable != null)) {
                    this.tableListParcelOwnershipDatatable.InitVars();
                }
            }
            this.tableListOwnerValidID = ((ListOwnerValidIDDataTable)(base.Tables["ListOwnerValidID"]));
            if ((initTable == true)) {
                if ((this.tableListOwnerValidID != null)) {
                    this.tableListOwnerValidID.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F27008TRParcelOwnershipData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F27008TRParcelOwnershipData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListOwnersDatatable = new ListOwnersDatatableDataTable();
            base.Tables.Add(this.tableListOwnersDatatable);
            this.tableListParcelOwnershipDatatable = new ListParcelOwnershipDatatableDataTable(false);
            base.Tables.Add(this.tableListParcelOwnershipDatatable);
            this.tableListOwnerValidID = new ListOwnerValidIDDataTable();
            base.Tables.Add(this.tableListOwnerValidID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListOwnersDatatable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListParcelOwnershipDatatable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListOwnerValidID() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F27008TRParcelOwnershipData ds = new F27008TRParcelOwnershipData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.ListParcelOwnershipDatatable.TaxPayerTextColumn.Expression = "iif(IsTaxPayer=1,\'Yes\',\'No\')";
            this.ListParcelOwnershipDatatable.PrimaryTextColumn.Expression = "iif(IsPrimary=1,\'Yes\',\'No\')";
        }
        
        public delegate void ListOwnersDatatableRowChangeEventHandler(object sender, ListOwnersDatatableRowChangeEvent e);
        
        public delegate void ListParcelOwnershipDatatableRowChangeEventHandler(object sender, ListParcelOwnershipDatatableRowChangeEvent e);
        
        public delegate void ListOwnerValidIDRowChangeEventHandler(object sender, ListOwnerValidIDRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListOwnersDatatableDataTable : global::System.Data.TypedTableBase<ListOwnersDatatableRow> {
            
            private global::System.Data.DataColumn columnMOwnerID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnOwnerPercent;
            
            private global::System.Data.DataColumn columnOwnerType;
            
            private global::System.Data.DataColumn columnIsPrimaryOwner;
            
            private global::System.Data.DataColumn columnIsTaxPayer;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnersDatatableDataTable() {
                this.TableName = "ListOwnersDatatable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnersDatatableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListOwnersDatatableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerIDColumn {
                get {
                    return this.columnMOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerPercentColumn {
                get {
                    return this.columnOwnerPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerTypeColumn {
                get {
                    return this.columnOwnerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrimaryOwnerColumn {
                get {
                    return this.columnIsPrimaryOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTaxPayerColumn {
                get {
                    return this.columnIsTaxPayer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnersDatatableRow this[int index] {
                get {
                    return ((ListOwnersDatatableRow)(this.Rows[index]));
                }
            }
            
            public event ListOwnersDatatableRowChangeEventHandler ListOwnersDatatableRowChanging;
            
            public event ListOwnersDatatableRowChangeEventHandler ListOwnersDatatableRowChanged;
            
            public event ListOwnersDatatableRowChangeEventHandler ListOwnersDatatableRowDeleting;
            
            public event ListOwnersDatatableRowChangeEventHandler ListOwnersDatatableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListOwnersDatatableRow(ListOwnersDatatableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnersDatatableRow AddListOwnersDatatableRow(int MOwnerID, string FirstName, string LastName, string Address1, string Address2, string City, int OwnerPercent, string OwnerType, int IsPrimaryOwner, bool IsTaxPayer, string State, string Zip) {
                ListOwnersDatatableRow rowListOwnersDatatableRow = ((ListOwnersDatatableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MOwnerID,
                        null,
                        FirstName,
                        LastName,
                        Address1,
                        Address2,
                        City,
                        OwnerPercent,
                        OwnerType,
                        IsPrimaryOwner,
                        IsTaxPayer,
                        State,
                        Zip};
                rowListOwnersDatatableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListOwnersDatatableRow);
                return rowListOwnersDatatableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListOwnersDatatableDataTable cln = ((ListOwnersDatatableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListOwnersDatatableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMOwnerID = base.Columns["MOwnerID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnOwnerPercent = base.Columns["OwnerPercent"];
                this.columnOwnerType = base.Columns["OwnerType"];
                this.columnIsPrimaryOwner = base.Columns["IsPrimaryOwner"];
                this.columnIsTaxPayer = base.Columns["IsTaxPayer"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMOwnerID = new global::System.Data.DataColumn("MOwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnOwnerPercent = new global::System.Data.DataColumn("OwnerPercent", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerPercent);
                this.columnOwnerType = new global::System.Data.DataColumn("OwnerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerType);
                this.columnIsPrimaryOwner = new global::System.Data.DataColumn("IsPrimaryOwner", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrimaryOwner);
                this.columnIsTaxPayer = new global::System.Data.DataColumn("IsTaxPayer", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTaxPayer);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnMOwnerID.ReadOnly = true;
                this.columnOwnerID.AutoIncrement = true;
                this.columnOwnerID.ReadOnly = true;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnOwnerPercent.ReadOnly = true;
                this.columnOwnerType.ReadOnly = true;
                this.columnIsPrimaryOwner.ReadOnly = true;
                this.columnIsTaxPayer.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnersDatatableRow NewListOwnersDatatableRow() {
                return ((ListOwnersDatatableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListOwnersDatatableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListOwnersDatatableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListOwnersDatatableRowChanged != null)) {
                    this.ListOwnersDatatableRowChanged(this, new ListOwnersDatatableRowChangeEvent(((ListOwnersDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListOwnersDatatableRowChanging != null)) {
                    this.ListOwnersDatatableRowChanging(this, new ListOwnersDatatableRowChangeEvent(((ListOwnersDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListOwnersDatatableRowDeleted != null)) {
                    this.ListOwnersDatatableRowDeleted(this, new ListOwnersDatatableRowChangeEvent(((ListOwnersDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListOwnersDatatableRowDeleting != null)) {
                    this.ListOwnersDatatableRowDeleting(this, new ListOwnersDatatableRowChangeEvent(((ListOwnersDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListOwnersDatatableRow(ListOwnersDatatableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27008TRParcelOwnershipData ds = new F27008TRParcelOwnershipData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListOwnersDatatableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListParcelOwnershipDatatableDataTable : global::System.Data.TypedTableBase<ListParcelOwnershipDatatableRow> {
            
            private global::System.Data.DataColumn columnMOwnerID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnOwnerPercent;
            
            private global::System.Data.DataColumn columnIsBilled;
            
            private global::System.Data.DataColumn columnIsProRated;
            
            private global::System.Data.DataColumn columnOwnerOrder;
            
            private global::System.Data.DataColumn columnOwnerCode;
            
            private global::System.Data.DataColumn columnMOwnerTypeID;
            
            private global::System.Data.DataColumn columnMOwnerType;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnIsPrimary;
            
            private global::System.Data.DataColumn columnIsCurrent;
            
            private global::System.Data.DataColumn columnIsTaxPayer;
            
            private global::System.Data.DataColumn columnIsTRExtra;
            
            private global::System.Data.DataColumn columnUndividedOwnershipID;
            
            private global::System.Data.DataColumn columnUndividedOwnership;
            
            private global::System.Data.DataColumn columnUndividedOwnershipColor;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnTaxPayerText;
            
            private global::System.Data.DataColumn columnPrimaryText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDatatableDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDatatableDataTable(bool initExpressions) {
                this.TableName = "ListParcelOwnershipDatatable";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelOwnershipDatatableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListParcelOwnershipDatatableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerIDColumn {
                get {
                    return this.columnMOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerPercentColumn {
                get {
                    return this.columnOwnerPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBilledColumn {
                get {
                    return this.columnIsBilled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsProRatedColumn {
                get {
                    return this.columnIsProRated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerOrderColumn {
                get {
                    return this.columnOwnerOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCodeColumn {
                get {
                    return this.columnOwnerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerTypeIDColumn {
                get {
                    return this.columnMOwnerTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOwnerTypeColumn {
                get {
                    return this.columnMOwnerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrimaryColumn {
                get {
                    return this.columnIsPrimary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCurrentColumn {
                get {
                    return this.columnIsCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTaxPayerColumn {
                get {
                    return this.columnIsTaxPayer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTRExtraColumn {
                get {
                    return this.columnIsTRExtra;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UndividedOwnershipIDColumn {
                get {
                    return this.columnUndividedOwnershipID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UndividedOwnershipColumn {
                get {
                    return this.columnUndividedOwnership;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UndividedOwnershipColorColumn {
                get {
                    return this.columnUndividedOwnershipColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxPayerTextColumn {
                get {
                    return this.columnTaxPayerText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryTextColumn {
                get {
                    return this.columnPrimaryText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDatatableRow this[int index] {
                get {
                    return ((ListParcelOwnershipDatatableRow)(this.Rows[index]));
                }
            }
            
            public event ListParcelOwnershipDatatableRowChangeEventHandler ListParcelOwnershipDatatableRowChanging;
            
            public event ListParcelOwnershipDatatableRowChangeEventHandler ListParcelOwnershipDatatableRowChanged;
            
            public event ListParcelOwnershipDatatableRowChangeEventHandler ListParcelOwnershipDatatableRowDeleting;
            
            public event ListParcelOwnershipDatatableRowChangeEventHandler ListParcelOwnershipDatatableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListParcelOwnershipDatatableRow(ListParcelOwnershipDatatableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDatatableRow AddListParcelOwnershipDatatableRow(
                        int OwnerID, 
                        string Name, 
                        string FirstName, 
                        string LastName, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        decimal OwnerPercent, 
                        bool IsBilled, 
                        bool IsProRated, 
                        byte OwnerOrder, 
                        string OwnerCode, 
                        byte MOwnerTypeID, 
                        string MOwnerType, 
                        string State, 
                        bool IsPrimary, 
                        bool IsCurrent, 
                        bool IsTaxPayer, 
                        bool IsTRExtra, 
                        short UndividedOwnershipID, 
                        string UndividedOwnership, 
                        string UndividedOwnershipColor, 
                        string Zip, 
                        bool IsDeleted, 
                        string TaxPayerText, 
                        string PrimaryText) {
                ListParcelOwnershipDatatableRow rowListParcelOwnershipDatatableRow = ((ListParcelOwnershipDatatableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OwnerID,
                        Name,
                        FirstName,
                        LastName,
                        Address1,
                        Address2,
                        City,
                        OwnerPercent,
                        IsBilled,
                        IsProRated,
                        OwnerOrder,
                        OwnerCode,
                        MOwnerTypeID,
                        MOwnerType,
                        State,
                        IsPrimary,
                        IsCurrent,
                        IsTaxPayer,
                        IsTRExtra,
                        UndividedOwnershipID,
                        UndividedOwnership,
                        UndividedOwnershipColor,
                        Zip,
                        IsDeleted,
                        TaxPayerText,
                        PrimaryText};
                rowListParcelOwnershipDatatableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListParcelOwnershipDatatableRow);
                return rowListParcelOwnershipDatatableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDatatableRow AddListParcelOwnershipDatatableRow(
                        int OwnerID, 
                        string Name, 
                        string FirstName, 
                        string LastName, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        decimal OwnerPercent, 
                        bool IsBilled, 
                        bool IsProRated, 
                        byte OwnerOrder, 
                        string OwnerCode, 
                        byte MOwnerTypeID, 
                        string MOwnerType, 
                        string State, 
                        bool IsPrimary, 
                        bool IsCurrent, 
                        bool IsTaxPayer, 
                        bool IsTRExtra, 
                        short UndividedOwnershipID, 
                        string UndividedOwnership, 
                        string UndividedOwnershipColor, 
                        string Zip, 
                        bool IsDeleted) {
                ListParcelOwnershipDatatableRow rowListParcelOwnershipDatatableRow = ((ListParcelOwnershipDatatableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OwnerID,
                        Name,
                        FirstName,
                        LastName,
                        Address1,
                        Address2,
                        City,
                        OwnerPercent,
                        IsBilled,
                        IsProRated,
                        OwnerOrder,
                        OwnerCode,
                        MOwnerTypeID,
                        MOwnerType,
                        State,
                        IsPrimary,
                        IsCurrent,
                        IsTaxPayer,
                        IsTRExtra,
                        UndividedOwnershipID,
                        UndividedOwnership,
                        UndividedOwnershipColor,
                        Zip,
                        IsDeleted,
                        null,
                        null};
                rowListParcelOwnershipDatatableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListParcelOwnershipDatatableRow);
                return rowListParcelOwnershipDatatableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListParcelOwnershipDatatableDataTable cln = ((ListParcelOwnershipDatatableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListParcelOwnershipDatatableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMOwnerID = base.Columns["MOwnerID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnName = base.Columns["Name"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnOwnerPercent = base.Columns["OwnerPercent"];
                this.columnIsBilled = base.Columns["IsBilled"];
                this.columnIsProRated = base.Columns["IsProRated"];
                this.columnOwnerOrder = base.Columns["OwnerOrder"];
                this.columnOwnerCode = base.Columns["OwnerCode"];
                this.columnMOwnerTypeID = base.Columns["MOwnerTypeID"];
                this.columnMOwnerType = base.Columns["MOwnerType"];
                this.columnState = base.Columns["State"];
                this.columnIsPrimary = base.Columns["IsPrimary"];
                this.columnIsCurrent = base.Columns["IsCurrent"];
                this.columnIsTaxPayer = base.Columns["IsTaxPayer"];
                this.columnIsTRExtra = base.Columns["IsTRExtra"];
                this.columnUndividedOwnershipID = base.Columns["UndividedOwnershipID"];
                this.columnUndividedOwnership = base.Columns["UndividedOwnership"];
                this.columnUndividedOwnershipColor = base.Columns["UndividedOwnershipColor"];
                this.columnZip = base.Columns["Zip"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnTaxPayerText = base.Columns["TaxPayerText"];
                this.columnPrimaryText = base.Columns["PrimaryText"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMOwnerID = new global::System.Data.DataColumn("MOwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnOwnerPercent = new global::System.Data.DataColumn("OwnerPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerPercent);
                this.columnIsBilled = new global::System.Data.DataColumn("IsBilled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBilled);
                this.columnIsProRated = new global::System.Data.DataColumn("IsProRated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsProRated);
                this.columnOwnerOrder = new global::System.Data.DataColumn("OwnerOrder", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerOrder);
                this.columnOwnerCode = new global::System.Data.DataColumn("OwnerCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCode);
                this.columnMOwnerTypeID = new global::System.Data.DataColumn("MOwnerTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerTypeID);
                this.columnMOwnerType = new global::System.Data.DataColumn("MOwnerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOwnerType);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnIsPrimary = new global::System.Data.DataColumn("IsPrimary", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrimary);
                this.columnIsCurrent = new global::System.Data.DataColumn("IsCurrent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCurrent);
                this.columnIsTaxPayer = new global::System.Data.DataColumn("IsTaxPayer", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTaxPayer);
                this.columnIsTRExtra = new global::System.Data.DataColumn("IsTRExtra", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTRExtra);
                this.columnUndividedOwnershipID = new global::System.Data.DataColumn("UndividedOwnershipID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUndividedOwnershipID);
                this.columnUndividedOwnership = new global::System.Data.DataColumn("UndividedOwnership", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUndividedOwnership);
                this.columnUndividedOwnershipColor = new global::System.Data.DataColumn("UndividedOwnershipColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUndividedOwnershipColor);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnTaxPayerText = new global::System.Data.DataColumn("TaxPayerText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPayerText);
                this.columnPrimaryText = new global::System.Data.DataColumn("PrimaryText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryText);
                this.columnMOwnerID.AutoIncrement = true;
                this.columnMOwnerID.ReadOnly = true;
                this.columnName.ReadOnly = true;
                this.columnName.MaxLength = 102;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnOwnerCode.MaxLength = 20;
                this.columnMOwnerTypeID.ReadOnly = true;
                this.columnMOwnerType.ReadOnly = true;
                this.columnMOwnerType.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnUndividedOwnership.ReadOnly = true;
                this.columnUndividedOwnership.MaxLength = 17;
                this.columnUndividedOwnershipColor.ReadOnly = true;
                this.columnUndividedOwnershipColor.MaxLength = 11;
                this.columnZip.MaxLength = 50;
                this.columnTaxPayerText.ReadOnly = true;
                this.columnPrimaryText.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDatatableRow NewListParcelOwnershipDatatableRow() {
                return ((ListParcelOwnershipDatatableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListParcelOwnershipDatatableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListParcelOwnershipDatatableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.TaxPayerTextColumn.Expression = "iif(IsTaxPayer=1,\'Yes\',\'No\')";
                this.PrimaryTextColumn.Expression = "iif(IsPrimary=1,\'Yes\',\'No\')";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListParcelOwnershipDatatableRowChanged != null)) {
                    this.ListParcelOwnershipDatatableRowChanged(this, new ListParcelOwnershipDatatableRowChangeEvent(((ListParcelOwnershipDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListParcelOwnershipDatatableRowChanging != null)) {
                    this.ListParcelOwnershipDatatableRowChanging(this, new ListParcelOwnershipDatatableRowChangeEvent(((ListParcelOwnershipDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListParcelOwnershipDatatableRowDeleted != null)) {
                    this.ListParcelOwnershipDatatableRowDeleted(this, new ListParcelOwnershipDatatableRowChangeEvent(((ListParcelOwnershipDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListParcelOwnershipDatatableRowDeleting != null)) {
                    this.ListParcelOwnershipDatatableRowDeleting(this, new ListParcelOwnershipDatatableRowChangeEvent(((ListParcelOwnershipDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListParcelOwnershipDatatableRow(ListParcelOwnershipDatatableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27008TRParcelOwnershipData ds = new F27008TRParcelOwnershipData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListParcelOwnershipDatatableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListOwnerValidIDDataTable : global::System.Data.TypedTableBase<ListOwnerValidIDRow> {
            
            private global::System.Data.DataColumn columnKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDDataTable() {
                this.TableName = "ListOwnerValidID";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnerValidIDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListOwnerValidIDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRow this[int index] {
                get {
                    return ((ListOwnerValidIDRow)(this.Rows[index]));
                }
            }
            
            public event ListOwnerValidIDRowChangeEventHandler ListOwnerValidIDRowChanging;
            
            public event ListOwnerValidIDRowChangeEventHandler ListOwnerValidIDRowChanged;
            
            public event ListOwnerValidIDRowChangeEventHandler ListOwnerValidIDRowDeleting;
            
            public event ListOwnerValidIDRowChangeEventHandler ListOwnerValidIDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListOwnerValidIDRow(ListOwnerValidIDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRow AddListOwnerValidIDRow(int KeyID) {
                ListOwnerValidIDRow rowListOwnerValidIDRow = ((ListOwnerValidIDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyID};
                rowListOwnerValidIDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListOwnerValidIDRow);
                return rowListOwnerValidIDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListOwnerValidIDDataTable cln = ((ListOwnerValidIDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListOwnerValidIDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnKeyID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRow NewListOwnerValidIDRow() {
                return ((ListOwnerValidIDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListOwnerValidIDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListOwnerValidIDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListOwnerValidIDRowChanged != null)) {
                    this.ListOwnerValidIDRowChanged(this, new ListOwnerValidIDRowChangeEvent(((ListOwnerValidIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListOwnerValidIDRowChanging != null)) {
                    this.ListOwnerValidIDRowChanging(this, new ListOwnerValidIDRowChangeEvent(((ListOwnerValidIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListOwnerValidIDRowDeleted != null)) {
                    this.ListOwnerValidIDRowDeleted(this, new ListOwnerValidIDRowChangeEvent(((ListOwnerValidIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListOwnerValidIDRowDeleting != null)) {
                    this.ListOwnerValidIDRowDeleting(this, new ListOwnerValidIDRowChangeEvent(((ListOwnerValidIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListOwnerValidIDRow(ListOwnerValidIDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27008TRParcelOwnershipData ds = new F27008TRParcelOwnershipData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListOwnerValidIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListOwnersDatatableRow : global::System.Data.DataRow {
            
            private ListOwnersDatatableDataTable tableListOwnersDatatable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnersDatatableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListOwnersDatatable = ((ListOwnersDatatableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MOwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnersDatatable.MOwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerID\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.MOwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnersDatatable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableListOwnersDatatable.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableListOwnersDatatable.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableListOwnersDatatable.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableListOwnersDatatable.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableListOwnersDatatable.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerPercent {
                get {
                    try {
                        return ((int)(this[this.tableListOwnersDatatable.OwnerPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerPercent\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.OwnerPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerType {
                get {
                    try {
                        return ((string)(this[this.tableListOwnersDatatable.OwnerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerType\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.OwnerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsPrimaryOwner {
                get {
                    try {
                        return ((int)(this[this.tableListOwnersDatatable.IsPrimaryOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrimaryOwner\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.IsPrimaryOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPayer {
                get {
                    try {
                        return ((bool)(this[this.tableListOwnersDatatable.IsTaxPayerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTaxPayer\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.IsTaxPayerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableListOwnersDatatable.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableListOwnersDatatable.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'ListOwnersDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnersDatatable.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerIDNull() {
                return this.IsNull(this.tableListOwnersDatatable.MOwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerIDNull() {
                this[this.tableListOwnersDatatable.MOwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableListOwnersDatatable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableListOwnersDatatable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableListOwnersDatatable.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableListOwnersDatatable.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableListOwnersDatatable.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableListOwnersDatatable.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableListOwnersDatatable.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableListOwnersDatatable.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableListOwnersDatatable.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableListOwnersDatatable.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListOwnersDatatable.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListOwnersDatatable.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerPercentNull() {
                return this.IsNull(this.tableListOwnersDatatable.OwnerPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerPercentNull() {
                this[this.tableListOwnersDatatable.OwnerPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerTypeNull() {
                return this.IsNull(this.tableListOwnersDatatable.OwnerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerTypeNull() {
                this[this.tableListOwnersDatatable.OwnerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrimaryOwnerNull() {
                return this.IsNull(this.tableListOwnersDatatable.IsPrimaryOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrimaryOwnerNull() {
                this[this.tableListOwnersDatatable.IsPrimaryOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTaxPayerNull() {
                return this.IsNull(this.tableListOwnersDatatable.IsTaxPayerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTaxPayerNull() {
                this[this.tableListOwnersDatatable.IsTaxPayerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableListOwnersDatatable.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableListOwnersDatatable.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableListOwnersDatatable.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableListOwnersDatatable.ZipColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListParcelOwnershipDatatableRow : global::System.Data.DataRow {
            
            private ListParcelOwnershipDatatableDataTable tableListParcelOwnershipDatatable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelOwnershipDatatableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListParcelOwnershipDatatable = ((ListParcelOwnershipDatatableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MOwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelOwnershipDatatable.MOwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerID\' in table \'ListParcelOwnershipDatatable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.MOwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelOwnershipDatatable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ListParcelOwnershipDatatable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ListParcelOwnershipDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'ListParcelOwnershipDatatable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'ListParcelOwnershipDatatable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'ListParcelOwnershipDatatable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'ListParcelOwnershipDatatable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ListParcelOwnershipDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OwnerPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableListParcelOwnershipDatatable.OwnerPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerPercent\' in table \'ListParcelOwnershipDatatable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.OwnerPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBilled {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDatatable.IsBilledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsBilled\' in table \'ListParcelOwnershipDatatable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.IsBilledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProRated {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDatatable.IsProRatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsProRated\' in table \'ListParcelOwnershipDatatable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.IsProRatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte OwnerOrder {
                get {
                    try {
                        return ((byte)(this[this.tableListParcelOwnershipDatatable.OwnerOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerOrder\' in table \'ListParcelOwnershipDatatable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.OwnerOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerCode {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.OwnerCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCode\' in table \'ListParcelOwnershipDatatable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.OwnerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MOwnerTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableListParcelOwnershipDatatable.MOwnerTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerTypeID\' in table \'ListParcelOwnershipDatatable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.MOwnerTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOwnerType {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.MOwnerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOwnerType\' in table \'ListParcelOwnershipDatatable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.MOwnerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ListParcelOwnershipDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimary {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDatatable.IsPrimaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrimary\' in table \'ListParcelOwnershipDatatable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.IsPrimaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDatatable.IsCurrentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCurrent\' in table \'ListParcelOwnershipDatatable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.IsCurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPayer {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDatatable.IsTaxPayerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTaxPayer\' in table \'ListParcelOwnershipDatatable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.IsTaxPayerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRExtra {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDatatable.IsTRExtraColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTRExtra\' in table \'ListParcelOwnershipDatatable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.IsTRExtraColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short UndividedOwnershipID {
                get {
                    try {
                        return ((short)(this[this.tableListParcelOwnershipDatatable.UndividedOwnershipIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UndividedOwnershipID\' in table \'ListParcelOwnershipDatatabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.UndividedOwnershipIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UndividedOwnership {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.UndividedOwnershipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UndividedOwnership\' in table \'ListParcelOwnershipDatatable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.UndividedOwnershipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UndividedOwnershipColor {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.UndividedOwnershipColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UndividedOwnershipColor\' in table \'ListParcelOwnershipDatat" +
                                "able\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.UndividedOwnershipColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'ListParcelOwnershipDatatable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelOwnershipDatatable.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'ListParcelOwnershipDatatable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxPayerText {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.TaxPayerTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxPayerText\' in table \'ListParcelOwnershipDatatable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.TaxPayerTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryText {
                get {
                    try {
                        return ((string)(this[this.tableListParcelOwnershipDatatable.PrimaryTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryText\' in table \'ListParcelOwnershipDatatable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListParcelOwnershipDatatable.PrimaryTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerIDNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.MOwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerIDNull() {
                this[this.tableListParcelOwnershipDatatable.MOwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableListParcelOwnershipDatatable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableListParcelOwnershipDatatable.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableListParcelOwnershipDatatable.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableListParcelOwnershipDatatable.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableListParcelOwnershipDatatable.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableListParcelOwnershipDatatable.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListParcelOwnershipDatatable.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerPercentNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.OwnerPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerPercentNull() {
                this[this.tableListParcelOwnershipDatatable.OwnerPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsBilledNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.IsBilledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsBilledNull() {
                this[this.tableListParcelOwnershipDatatable.IsBilledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsProRatedNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.IsProRatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsProRatedNull() {
                this[this.tableListParcelOwnershipDatatable.IsProRatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerOrderNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.OwnerOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerOrderNull() {
                this[this.tableListParcelOwnershipDatatable.OwnerOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCodeNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.OwnerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCodeNull() {
                this[this.tableListParcelOwnershipDatatable.OwnerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerTypeIDNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.MOwnerTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerTypeIDNull() {
                this[this.tableListParcelOwnershipDatatable.MOwnerTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOwnerTypeNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.MOwnerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOwnerTypeNull() {
                this[this.tableListParcelOwnershipDatatable.MOwnerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableListParcelOwnershipDatatable.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrimaryNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.IsPrimaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrimaryNull() {
                this[this.tableListParcelOwnershipDatatable.IsPrimaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCurrentNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.IsCurrentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCurrentNull() {
                this[this.tableListParcelOwnershipDatatable.IsCurrentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTaxPayerNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.IsTaxPayerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTaxPayerNull() {
                this[this.tableListParcelOwnershipDatatable.IsTaxPayerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTRExtraNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.IsTRExtraColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTRExtraNull() {
                this[this.tableListParcelOwnershipDatatable.IsTRExtraColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUndividedOwnershipIDNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.UndividedOwnershipIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUndividedOwnershipIDNull() {
                this[this.tableListParcelOwnershipDatatable.UndividedOwnershipIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUndividedOwnershipNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.UndividedOwnershipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUndividedOwnershipNull() {
                this[this.tableListParcelOwnershipDatatable.UndividedOwnershipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUndividedOwnershipColorNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.UndividedOwnershipColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUndividedOwnershipColorNull() {
                this[this.tableListParcelOwnershipDatatable.UndividedOwnershipColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableListParcelOwnershipDatatable.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tableListParcelOwnershipDatatable.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPayerTextNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.TaxPayerTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPayerTextNull() {
                this[this.tableListParcelOwnershipDatatable.TaxPayerTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryTextNull() {
                return this.IsNull(this.tableListParcelOwnershipDatatable.PrimaryTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryTextNull() {
                this[this.tableListParcelOwnershipDatatable.PrimaryTextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListOwnerValidIDRow : global::System.Data.DataRow {
            
            private ListOwnerValidIDDataTable tableListOwnerValidID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOwnerValidIDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListOwnerValidID = ((ListOwnerValidIDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tableListOwnerValidID.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'ListOwnerValidID\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOwnerValidID.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableListOwnerValidID.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableListOwnerValidID.KeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListOwnersDatatableRowChangeEvent : global::System.EventArgs {
            
            private ListOwnersDatatableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnersDatatableRowChangeEvent(ListOwnersDatatableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnersDatatableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListParcelOwnershipDatatableRowChangeEvent : global::System.EventArgs {
            
            private ListParcelOwnershipDatatableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDatatableRowChangeEvent(ListParcelOwnershipDatatableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelOwnershipDatatableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListOwnerValidIDRowChangeEvent : global::System.EventArgs {
            
            private ListOwnerValidIDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRowChangeEvent(ListOwnerValidIDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOwnerValidIDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591