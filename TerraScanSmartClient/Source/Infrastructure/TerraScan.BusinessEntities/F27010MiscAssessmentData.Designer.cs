//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F27010MiscAssessmentData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F27010MiscAssessmentData : global::System.Data.DataSet {
        
        private AssessmentTypeTableDataTable tableAssessmentTypeTable;
        
        private DistrictTableDataTable tableDistrictTable;
        
        private GetMessageTableDataTable tableGetMessageTable;
        
        private ListMiscAssessmentTableDataTable tableListMiscAssessmentTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F27010MiscAssessmentData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F27010MiscAssessmentData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AssessmentTypeTable"] != null)) {
                    base.Tables.Add(new AssessmentTypeTableDataTable(ds.Tables["AssessmentTypeTable"]));
                }
                if ((ds.Tables["DistrictTable"] != null)) {
                    base.Tables.Add(new DistrictTableDataTable(ds.Tables["DistrictTable"]));
                }
                if ((ds.Tables["GetMessageTable"] != null)) {
                    base.Tables.Add(new GetMessageTableDataTable(ds.Tables["GetMessageTable"]));
                }
                if ((ds.Tables["ListMiscAssessmentTable"] != null)) {
                    base.Tables.Add(new ListMiscAssessmentTableDataTable(ds.Tables["ListMiscAssessmentTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssessmentTypeTableDataTable AssessmentTypeTable {
            get {
                return this.tableAssessmentTypeTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistrictTableDataTable DistrictTable {
            get {
                return this.tableDistrictTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMessageTableDataTable GetMessageTable {
            get {
                return this.tableGetMessageTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMiscAssessmentTableDataTable ListMiscAssessmentTable {
            get {
                return this.tableListMiscAssessmentTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F27010MiscAssessmentData cln = ((F27010MiscAssessmentData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AssessmentTypeTable"] != null)) {
                    base.Tables.Add(new AssessmentTypeTableDataTable(ds.Tables["AssessmentTypeTable"]));
                }
                if ((ds.Tables["DistrictTable"] != null)) {
                    base.Tables.Add(new DistrictTableDataTable(ds.Tables["DistrictTable"]));
                }
                if ((ds.Tables["GetMessageTable"] != null)) {
                    base.Tables.Add(new GetMessageTableDataTable(ds.Tables["GetMessageTable"]));
                }
                if ((ds.Tables["ListMiscAssessmentTable"] != null)) {
                    base.Tables.Add(new ListMiscAssessmentTableDataTable(ds.Tables["ListMiscAssessmentTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAssessmentTypeTable = ((AssessmentTypeTableDataTable)(base.Tables["AssessmentTypeTable"]));
            if ((initTable == true)) {
                if ((this.tableAssessmentTypeTable != null)) {
                    this.tableAssessmentTypeTable.InitVars();
                }
            }
            this.tableDistrictTable = ((DistrictTableDataTable)(base.Tables["DistrictTable"]));
            if ((initTable == true)) {
                if ((this.tableDistrictTable != null)) {
                    this.tableDistrictTable.InitVars();
                }
            }
            this.tableGetMessageTable = ((GetMessageTableDataTable)(base.Tables["GetMessageTable"]));
            if ((initTable == true)) {
                if ((this.tableGetMessageTable != null)) {
                    this.tableGetMessageTable.InitVars();
                }
            }
            this.tableListMiscAssessmentTable = ((ListMiscAssessmentTableDataTable)(base.Tables["ListMiscAssessmentTable"]));
            if ((initTable == true)) {
                if ((this.tableListMiscAssessmentTable != null)) {
                    this.tableListMiscAssessmentTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F27010MiscAssessmentData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F27010MiscAssessmentData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAssessmentTypeTable = new AssessmentTypeTableDataTable();
            base.Tables.Add(this.tableAssessmentTypeTable);
            this.tableDistrictTable = new DistrictTableDataTable();
            base.Tables.Add(this.tableDistrictTable);
            this.tableGetMessageTable = new GetMessageTableDataTable();
            base.Tables.Add(this.tableGetMessageTable);
            this.tableListMiscAssessmentTable = new ListMiscAssessmentTableDataTable();
            base.Tables.Add(this.tableListMiscAssessmentTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAssessmentTypeTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistrictTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMessageTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMiscAssessmentTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F27010MiscAssessmentData ds = new F27010MiscAssessmentData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AssessmentTypeTableRowChangeEventHandler(object sender, AssessmentTypeTableRowChangeEvent e);
        
        public delegate void DistrictTableRowChangeEventHandler(object sender, DistrictTableRowChangeEvent e);
        
        public delegate void GetMessageTableRowChangeEventHandler(object sender, GetMessageTableRowChangeEvent e);
        
        public delegate void ListMiscAssessmentTableRowChangeEventHandler(object sender, ListMiscAssessmentTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssessmentTypeTableDataTable : global::System.Data.TypedTableBase<AssessmentTypeTableRow> {
            
            private global::System.Data.DataColumn columnKeyID;
            
            private global::System.Data.DataColumn columnKeyName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssessmentTypeTableDataTable() {
                this.TableName = "AssessmentTypeTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssessmentTypeTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AssessmentTypeTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyNameColumn {
                get {
                    return this.columnKeyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssessmentTypeTableRow this[int index] {
                get {
                    return ((AssessmentTypeTableRow)(this.Rows[index]));
                }
            }
            
            public event AssessmentTypeTableRowChangeEventHandler AssessmentTypeTableRowChanging;
            
            public event AssessmentTypeTableRowChangeEventHandler AssessmentTypeTableRowChanged;
            
            public event AssessmentTypeTableRowChangeEventHandler AssessmentTypeTableRowDeleting;
            
            public event AssessmentTypeTableRowChangeEventHandler AssessmentTypeTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAssessmentTypeTableRow(AssessmentTypeTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssessmentTypeTableRow AddAssessmentTypeTableRow(int KeyID, string KeyName) {
                AssessmentTypeTableRow rowAssessmentTypeTableRow = ((AssessmentTypeTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyID,
                        KeyName};
                rowAssessmentTypeTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssessmentTypeTableRow);
                return rowAssessmentTypeTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AssessmentTypeTableDataTable cln = ((AssessmentTypeTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssessmentTypeTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
                this.columnKeyName = base.Columns["KeyName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnKeyName = new global::System.Data.DataColumn("KeyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyName);
                this.columnKeyID.ReadOnly = true;
                this.columnKeyName.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssessmentTypeTableRow NewAssessmentTypeTableRow() {
                return ((AssessmentTypeTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssessmentTypeTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AssessmentTypeTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssessmentTypeTableRowChanged != null)) {
                    this.AssessmentTypeTableRowChanged(this, new AssessmentTypeTableRowChangeEvent(((AssessmentTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssessmentTypeTableRowChanging != null)) {
                    this.AssessmentTypeTableRowChanging(this, new AssessmentTypeTableRowChangeEvent(((AssessmentTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssessmentTypeTableRowDeleted != null)) {
                    this.AssessmentTypeTableRowDeleted(this, new AssessmentTypeTableRowChangeEvent(((AssessmentTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssessmentTypeTableRowDeleting != null)) {
                    this.AssessmentTypeTableRowDeleting(this, new AssessmentTypeTableRowChangeEvent(((AssessmentTypeTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAssessmentTypeTableRow(AssessmentTypeTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27010MiscAssessmentData ds = new F27010MiscAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssessmentTypeTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistrictTableDataTable : global::System.Data.TypedTableBase<DistrictTableRow> {
            
            private global::System.Data.DataColumn columnKeyID;
            
            private global::System.Data.DataColumn columnKeyName;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTableDataTable() {
                this.TableName = "DistrictTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistrictTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistrictTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyNameColumn {
                get {
                    return this.columnKeyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTableRow this[int index] {
                get {
                    return ((DistrictTableRow)(this.Rows[index]));
                }
            }
            
            public event DistrictTableRowChangeEventHandler DistrictTableRowChanging;
            
            public event DistrictTableRowChangeEventHandler DistrictTableRowChanged;
            
            public event DistrictTableRowChangeEventHandler DistrictTableRowDeleting;
            
            public event DistrictTableRowChangeEventHandler DistrictTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistrictTableRow(DistrictTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTableRow AddDistrictTableRow(int KeyID, string KeyName, int DistrictID) {
                DistrictTableRow rowDistrictTableRow = ((DistrictTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyID,
                        KeyName,
                        DistrictID};
                rowDistrictTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDistrictTableRow);
                return rowDistrictTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DistrictTableDataTable cln = ((DistrictTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DistrictTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
                this.columnKeyName = base.Columns["KeyName"];
                this.columnDistrictID = base.Columns["DistrictID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnKeyName = new global::System.Data.DataColumn("KeyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyName);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnKeyID.ReadOnly = true;
                this.columnKeyName.MaxLength = 400;
                this.columnDistrictID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTableRow NewDistrictTableRow() {
                return ((DistrictTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DistrictTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DistrictTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistrictTableRowChanged != null)) {
                    this.DistrictTableRowChanged(this, new DistrictTableRowChangeEvent(((DistrictTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistrictTableRowChanging != null)) {
                    this.DistrictTableRowChanging(this, new DistrictTableRowChangeEvent(((DistrictTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistrictTableRowDeleted != null)) {
                    this.DistrictTableRowDeleted(this, new DistrictTableRowChangeEvent(((DistrictTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistrictTableRowDeleting != null)) {
                    this.DistrictTableRowDeleting(this, new DistrictTableRowChangeEvent(((DistrictTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistrictTableRow(DistrictTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27010MiscAssessmentData ds = new F27010MiscAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistrictTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMessageTableDataTable : global::System.Data.TypedTableBase<GetMessageTableRow> {
            
            private global::System.Data.DataColumn columnIsDifferent;
            
            private global::System.Data.DataColumn columnTooltipText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMessageTableDataTable() {
                this.TableName = "GetMessageTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMessageTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMessageTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDifferentColumn {
                get {
                    return this.columnIsDifferent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TooltipTextColumn {
                get {
                    return this.columnTooltipText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMessageTableRow this[int index] {
                get {
                    return ((GetMessageTableRow)(this.Rows[index]));
                }
            }
            
            public event GetMessageTableRowChangeEventHandler GetMessageTableRowChanging;
            
            public event GetMessageTableRowChangeEventHandler GetMessageTableRowChanged;
            
            public event GetMessageTableRowChangeEventHandler GetMessageTableRowDeleting;
            
            public event GetMessageTableRowChangeEventHandler GetMessageTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMessageTableRow(GetMessageTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMessageTableRow AddGetMessageTableRow(bool IsDifferent, string TooltipText) {
                GetMessageTableRow rowGetMessageTableRow = ((GetMessageTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsDifferent,
                        TooltipText};
                rowGetMessageTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMessageTableRow);
                return rowGetMessageTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMessageTableDataTable cln = ((GetMessageTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMessageTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsDifferent = base.Columns["IsDifferent"];
                this.columnTooltipText = base.Columns["TooltipText"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsDifferent = new global::System.Data.DataColumn("IsDifferent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDifferent);
                this.columnTooltipText = new global::System.Data.DataColumn("TooltipText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTooltipText);
                this.columnTooltipText.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMessageTableRow NewGetMessageTableRow() {
                return ((GetMessageTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMessageTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMessageTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMessageTableRowChanged != null)) {
                    this.GetMessageTableRowChanged(this, new GetMessageTableRowChangeEvent(((GetMessageTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMessageTableRowChanging != null)) {
                    this.GetMessageTableRowChanging(this, new GetMessageTableRowChangeEvent(((GetMessageTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMessageTableRowDeleted != null)) {
                    this.GetMessageTableRowDeleted(this, new GetMessageTableRowChangeEvent(((GetMessageTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMessageTableRowDeleting != null)) {
                    this.GetMessageTableRowDeleting(this, new GetMessageTableRowChangeEvent(((GetMessageTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMessageTableRow(GetMessageTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27010MiscAssessmentData ds = new F27010MiscAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMessageTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMiscAssessmentTableDataTable : global::System.Data.TypedTableBase<ListMiscAssessmentTableRow> {
            
            private global::System.Data.DataColumn columnRank;
            
            private global::System.Data.DataColumn columnCharge;
            
            private global::System.Data.DataColumn columnAcres;
            
            private global::System.Data.DataColumn columnFees;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnMADistrictID;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            private global::System.Data.DataColumn columnBenefitCharge;
            
            private global::System.Data.DataColumn columnFirePatrolAcres;
            
            private global::System.Data.DataColumn columnSiteAcres;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnAssessedValue;
            
            private global::System.Data.DataColumn columnCountyFee;
            
            private global::System.Data.DataColumn columnDryAcres;
            
            private global::System.Data.DataColumn columnIrrigatedAcres;
            
            private global::System.Data.DataColumn columnFPAFee;
            
            private global::System.Data.DataColumn columnResidentialRate;
            
            private global::System.Data.DataColumn columnTimberAcres;
            
            private global::System.Data.DataColumn columnCommercialRate;
            
            private global::System.Data.DataColumn columnLCFFee;
            
            private global::System.Data.DataColumn columnFPARate;
            
            private global::System.Data.DataColumn columnOtherAcres;
            
            private global::System.Data.DataColumn columnBaseAcres;
            
            private global::System.Data.DataColumn columnLCFRate;
            
            private global::System.Data.DataColumn columnTaxAmount;
            
            private global::System.Data.DataColumn columnAssessment;
            
            private global::System.Data.DataColumn columnOpenSpace;
            
            private global::System.Data.DataColumn columnOverrideAmount;
            
            private global::System.Data.DataColumn columnIsOverride;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnMinAcres;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscAssessmentTableDataTable() {
                this.TableName = "ListMiscAssessmentTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMiscAssessmentTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMiscAssessmentTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RankColumn {
                get {
                    return this.columnRank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChargeColumn {
                get {
                    return this.columnCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn {
                get {
                    return this.columnAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeesColumn {
                get {
                    return this.columnFees;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADistrictIDColumn {
                get {
                    return this.columnMADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BenefitChargeColumn {
                get {
                    return this.columnBenefitCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirePatrolAcresColumn {
                get {
                    return this.columnFirePatrolAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteAcresColumn {
                get {
                    return this.columnSiteAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessedValueColumn {
                get {
                    return this.columnAssessedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountyFeeColumn {
                get {
                    return this.columnCountyFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DryAcresColumn {
                get {
                    return this.columnDryAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrigatedAcresColumn {
                get {
                    return this.columnIrrigatedAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPAFeeColumn {
                get {
                    return this.columnFPAFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResidentialRateColumn {
                get {
                    return this.columnResidentialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberAcresColumn {
                get {
                    return this.columnTimberAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommercialRateColumn {
                get {
                    return this.columnCommercialRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFFeeColumn {
                get {
                    return this.columnLCFFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FPARateColumn {
                get {
                    return this.columnFPARate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherAcresColumn {
                get {
                    return this.columnOtherAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseAcresColumn {
                get {
                    return this.columnBaseAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LCFRateColumn {
                get {
                    return this.columnLCFRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentColumn {
                get {
                    return this.columnAssessment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpenSpaceColumn {
                get {
                    return this.columnOpenSpace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverrideAmountColumn {
                get {
                    return this.columnOverrideAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOverrideColumn {
                get {
                    return this.columnIsOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinAcresColumn {
                get {
                    return this.columnMinAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscAssessmentTableRow this[int index] {
                get {
                    return ((ListMiscAssessmentTableRow)(this.Rows[index]));
                }
            }
            
            public event ListMiscAssessmentTableRowChangeEventHandler ListMiscAssessmentTableRowChanging;
            
            public event ListMiscAssessmentTableRowChangeEventHandler ListMiscAssessmentTableRowChanged;
            
            public event ListMiscAssessmentTableRowChangeEventHandler ListMiscAssessmentTableRowDeleting;
            
            public event ListMiscAssessmentTableRowChangeEventHandler ListMiscAssessmentTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMiscAssessmentTableRow(ListMiscAssessmentTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscAssessmentTableRow AddListMiscAssessmentTableRow(
                        int Rank, 
                        string Charge, 
                        string Acres, 
                        decimal Fees, 
                        int ParcelID, 
                        int MADistrictID, 
                        string BaseFee, 
                        string BenefitCharge, 
                        string FirePatrolAcres, 
                        decimal SiteAcres, 
                        decimal Rate, 
                        decimal AssessedValue, 
                        decimal CountyFee, 
                        decimal DryAcres, 
                        decimal IrrigatedAcres, 
                        decimal FPAFee, 
                        decimal ResidentialRate, 
                        decimal TimberAcres, 
                        decimal CommercialRate, 
                        decimal LCFFee, 
                        decimal FPARate, 
                        decimal OtherAcres, 
                        decimal BaseAcres, 
                        decimal LCFRate, 
                        decimal TaxAmount, 
                        decimal Assessment, 
                        string OpenSpace, 
                        decimal OverrideAmount, 
                        bool IsOverride, 
                        bool IsExempt, 
                        int MinAcres) {
                ListMiscAssessmentTableRow rowListMiscAssessmentTableRow = ((ListMiscAssessmentTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Rank,
                        Charge,
                        Acres,
                        Fees,
                        ParcelID,
                        MADistrictID,
                        BaseFee,
                        BenefitCharge,
                        FirePatrolAcres,
                        SiteAcres,
                        Rate,
                        AssessedValue,
                        CountyFee,
                        DryAcres,
                        IrrigatedAcres,
                        FPAFee,
                        ResidentialRate,
                        TimberAcres,
                        CommercialRate,
                        LCFFee,
                        FPARate,
                        OtherAcres,
                        BaseAcres,
                        LCFRate,
                        TaxAmount,
                        Assessment,
                        OpenSpace,
                        OverrideAmount,
                        IsOverride,
                        IsExempt,
                        MinAcres};
                rowListMiscAssessmentTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMiscAssessmentTableRow);
                return rowListMiscAssessmentTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMiscAssessmentTableDataTable cln = ((ListMiscAssessmentTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMiscAssessmentTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRank = base.Columns["Rank"];
                this.columnCharge = base.Columns["Charge"];
                this.columnAcres = base.Columns["Acres"];
                this.columnFees = base.Columns["Fees"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnMADistrictID = base.Columns["MADistrictID"];
                this.columnBaseFee = base.Columns["BaseFee"];
                this.columnBenefitCharge = base.Columns["BenefitCharge"];
                this.columnFirePatrolAcres = base.Columns["FirePatrolAcres"];
                this.columnSiteAcres = base.Columns["SiteAcres"];
                this.columnRate = base.Columns["Rate"];
                this.columnAssessedValue = base.Columns["AssessedValue"];
                this.columnCountyFee = base.Columns["CountyFee"];
                this.columnDryAcres = base.Columns["DryAcres"];
                this.columnIrrigatedAcres = base.Columns["IrrigatedAcres"];
                this.columnFPAFee = base.Columns["FPAFee"];
                this.columnResidentialRate = base.Columns["ResidentialRate"];
                this.columnTimberAcres = base.Columns["TimberAcres"];
                this.columnCommercialRate = base.Columns["CommercialRate"];
                this.columnLCFFee = base.Columns["LCFFee"];
                this.columnFPARate = base.Columns["FPARate"];
                this.columnOtherAcres = base.Columns["OtherAcres"];
                this.columnBaseAcres = base.Columns["BaseAcres"];
                this.columnLCFRate = base.Columns["LCFRate"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnAssessment = base.Columns["Assessment"];
                this.columnOpenSpace = base.Columns["OpenSpace"];
                this.columnOverrideAmount = base.Columns["OverrideAmount"];
                this.columnIsOverride = base.Columns["IsOverride"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnMinAcres = base.Columns["MinAcres"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRank = new global::System.Data.DataColumn("Rank", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRank);
                this.columnCharge = new global::System.Data.DataColumn("Charge", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCharge);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnFees = new global::System.Data.DataColumn("Fees", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFees);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnMADistrictID = new global::System.Data.DataColumn("MADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADistrictID);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnBenefitCharge = new global::System.Data.DataColumn("BenefitCharge", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBenefitCharge);
                this.columnFirePatrolAcres = new global::System.Data.DataColumn("FirePatrolAcres", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirePatrolAcres);
                this.columnSiteAcres = new global::System.Data.DataColumn("SiteAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteAcres);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnAssessedValue = new global::System.Data.DataColumn("AssessedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessedValue);
                this.columnCountyFee = new global::System.Data.DataColumn("CountyFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountyFee);
                this.columnDryAcres = new global::System.Data.DataColumn("DryAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDryAcres);
                this.columnIrrigatedAcres = new global::System.Data.DataColumn("IrrigatedAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrigatedAcres);
                this.columnFPAFee = new global::System.Data.DataColumn("FPAFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPAFee);
                this.columnResidentialRate = new global::System.Data.DataColumn("ResidentialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResidentialRate);
                this.columnTimberAcres = new global::System.Data.DataColumn("TimberAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberAcres);
                this.columnCommercialRate = new global::System.Data.DataColumn("CommercialRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommercialRate);
                this.columnLCFFee = new global::System.Data.DataColumn("LCFFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFFee);
                this.columnFPARate = new global::System.Data.DataColumn("FPARate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFPARate);
                this.columnOtherAcres = new global::System.Data.DataColumn("OtherAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherAcres);
                this.columnBaseAcres = new global::System.Data.DataColumn("BaseAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAcres);
                this.columnLCFRate = new global::System.Data.DataColumn("LCFRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLCFRate);
                this.columnTaxAmount = new global::System.Data.DataColumn("TaxAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnAssessment = new global::System.Data.DataColumn("Assessment", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessment);
                this.columnOpenSpace = new global::System.Data.DataColumn("OpenSpace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenSpace);
                this.columnOverrideAmount = new global::System.Data.DataColumn("OverrideAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverrideAmount);
                this.columnIsOverride = new global::System.Data.DataColumn("IsOverride", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOverride);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnMinAcres = new global::System.Data.DataColumn("MinAcres", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinAcres);
                this.columnCharge.MaxLength = 50;
                this.columnFirePatrolAcres.MaxLength = 15;
                this.columnRate.Caption = "rate";
                this.columnOpenSpace.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscAssessmentTableRow NewListMiscAssessmentTableRow() {
                return ((ListMiscAssessmentTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMiscAssessmentTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMiscAssessmentTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMiscAssessmentTableRowChanged != null)) {
                    this.ListMiscAssessmentTableRowChanged(this, new ListMiscAssessmentTableRowChangeEvent(((ListMiscAssessmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMiscAssessmentTableRowChanging != null)) {
                    this.ListMiscAssessmentTableRowChanging(this, new ListMiscAssessmentTableRowChangeEvent(((ListMiscAssessmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMiscAssessmentTableRowDeleted != null)) {
                    this.ListMiscAssessmentTableRowDeleted(this, new ListMiscAssessmentTableRowChangeEvent(((ListMiscAssessmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMiscAssessmentTableRowDeleting != null)) {
                    this.ListMiscAssessmentTableRowDeleting(this, new ListMiscAssessmentTableRowChangeEvent(((ListMiscAssessmentTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMiscAssessmentTableRow(ListMiscAssessmentTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F27010MiscAssessmentData ds = new F27010MiscAssessmentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMiscAssessmentTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AssessmentTypeTableRow : global::System.Data.DataRow {
            
            private AssessmentTypeTableDataTable tableAssessmentTypeTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssessmentTypeTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssessmentTypeTable = ((AssessmentTypeTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tableAssessmentTypeTable.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'AssessmentTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssessmentTypeTable.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyName {
                get {
                    try {
                        return ((string)(this[this.tableAssessmentTypeTable.KeyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyName\' in table \'AssessmentTypeTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssessmentTypeTable.KeyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableAssessmentTypeTable.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableAssessmentTypeTable.KeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyNameNull() {
                return this.IsNull(this.tableAssessmentTypeTable.KeyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyNameNull() {
                this[this.tableAssessmentTypeTable.KeyNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistrictTableRow : global::System.Data.DataRow {
            
            private DistrictTableDataTable tableDistrictTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistrictTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistrictTable = ((DistrictTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tableDistrictTable.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'DistrictTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictTable.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyName {
                get {
                    try {
                        return ((string)(this[this.tableDistrictTable.KeyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyName\' in table \'DistrictTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictTable.KeyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    try {
                        return ((int)(this[this.tableDistrictTable.DistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictID\' in table \'DistrictTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistrictTable.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableDistrictTable.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableDistrictTable.KeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyNameNull() {
                return this.IsNull(this.tableDistrictTable.KeyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyNameNull() {
                this[this.tableDistrictTable.KeyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictIDNull() {
                return this.IsNull(this.tableDistrictTable.DistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictIDNull() {
                this[this.tableDistrictTable.DistrictIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMessageTableRow : global::System.Data.DataRow {
            
            private GetMessageTableDataTable tableGetMessageTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMessageTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMessageTable = ((GetMessageTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDifferent {
                get {
                    try {
                        return ((bool)(this[this.tableGetMessageTable.IsDifferentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDifferent\' in table \'GetMessageTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMessageTable.IsDifferentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TooltipText {
                get {
                    try {
                        return ((string)(this[this.tableGetMessageTable.TooltipTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TooltipText\' in table \'GetMessageTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMessageTable.TooltipTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDifferentNull() {
                return this.IsNull(this.tableGetMessageTable.IsDifferentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDifferentNull() {
                this[this.tableGetMessageTable.IsDifferentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTooltipTextNull() {
                return this.IsNull(this.tableGetMessageTable.TooltipTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTooltipTextNull() {
                this[this.tableGetMessageTable.TooltipTextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMiscAssessmentTableRow : global::System.Data.DataRow {
            
            private ListMiscAssessmentTableDataTable tableListMiscAssessmentTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMiscAssessmentTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMiscAssessmentTable = ((ListMiscAssessmentTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rank {
                get {
                    try {
                        return ((int)(this[this.tableListMiscAssessmentTable.RankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rank\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.RankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Charge {
                get {
                    try {
                        return ((string)(this[this.tableListMiscAssessmentTable.ChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Charge\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.ChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Acres {
                get {
                    try {
                        return ((string)(this[this.tableListMiscAssessmentTable.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.AcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Fees {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.FeesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fees\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.FeesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscAssessmentTable.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MADistrictID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscAssessmentTable.MADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADistrictID\' in table \'ListMiscAssessmentTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.MADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BaseFee {
                get {
                    if (this.IsBaseFeeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscAssessmentTable.BaseFeeColumn]));
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BenefitCharge {
                get {
                    try {
                        return ((string)(this[this.tableListMiscAssessmentTable.BenefitChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BenefitCharge\' in table \'ListMiscAssessmentTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.BenefitChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirePatrolAcres {
                get {
                    try {
                        return ((string)(this[this.tableListMiscAssessmentTable.FirePatrolAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirePatrolAcres\' in table \'ListMiscAssessmentTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.FirePatrolAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SiteAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.SiteAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteAcres\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.SiteAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssessedValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.AssessedValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessedValue\' in table \'ListMiscAssessmentTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.AssessedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CountyFee {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.CountyFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountyFee\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.CountyFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DryAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.DryAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DryAcres\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.DryAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrigatedAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.IrrigatedAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrigatedAcres\' in table \'ListMiscAssessmentTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.IrrigatedAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPAFee {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.FPAFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPAFee\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.FPAFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResidentialRate {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.ResidentialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResidentialRate\' in table \'ListMiscAssessmentTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.ResidentialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.TimberAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberAcres\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.TimberAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommercialRate {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.CommercialRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommercialRate\' in table \'ListMiscAssessmentTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.CommercialRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFFee {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.LCFFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFFee\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.LCFFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FPARate {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.FPARateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FPARate\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.FPARateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OtherAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.OtherAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherAcres\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.OtherAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.BaseAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseAcres\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.BaseAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LCFRate {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.LCFRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LCFRate\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.LCFRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.TaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.TaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Assessment {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.AssessmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Assessment\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.AssessmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OpenSpace {
                get {
                    try {
                        return ((string)(this[this.tableListMiscAssessmentTable.OpenSpaceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpenSpace\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.OpenSpaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverrideAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscAssessmentTable.OverrideAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverrideAmount\' in table \'ListMiscAssessmentTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.OverrideAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverride {
                get {
                    try {
                        return ((bool)(this[this.tableListMiscAssessmentTable.IsOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOverride\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.IsOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    try {
                        return ((bool)(this[this.tableListMiscAssessmentTable.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinAcres {
                get {
                    try {
                        return ((int)(this[this.tableListMiscAssessmentTable.MinAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinAcres\' in table \'ListMiscAssessmentTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscAssessmentTable.MinAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRankNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.RankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRankNull() {
                this[this.tableListMiscAssessmentTable.RankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargeNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.ChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargeNull() {
                this[this.tableListMiscAssessmentTable.ChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.AcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull() {
                this[this.tableListMiscAssessmentTable.AcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeesNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.FeesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeesNull() {
                this[this.tableListMiscAssessmentTable.FeesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableListMiscAssessmentTable.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADistrictIDNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.MADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADistrictIDNull() {
                this[this.tableListMiscAssessmentTable.MADistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tableListMiscAssessmentTable.BaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBenefitChargeNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.BenefitChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBenefitChargeNull() {
                this[this.tableListMiscAssessmentTable.BenefitChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirePatrolAcresNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.FirePatrolAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirePatrolAcresNull() {
                this[this.tableListMiscAssessmentTable.FirePatrolAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteAcresNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.SiteAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteAcresNull() {
                this[this.tableListMiscAssessmentTable.SiteAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableListMiscAssessmentTable.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessedValueNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.AssessedValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessedValueNull() {
                this[this.tableListMiscAssessmentTable.AssessedValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountyFeeNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.CountyFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountyFeeNull() {
                this[this.tableListMiscAssessmentTable.CountyFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDryAcresNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.DryAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDryAcresNull() {
                this[this.tableListMiscAssessmentTable.DryAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrigatedAcresNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.IrrigatedAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrigatedAcresNull() {
                this[this.tableListMiscAssessmentTable.IrrigatedAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPAFeeNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.FPAFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPAFeeNull() {
                this[this.tableListMiscAssessmentTable.FPAFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResidentialRateNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.ResidentialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResidentialRateNull() {
                this[this.tableListMiscAssessmentTable.ResidentialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberAcresNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.TimberAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberAcresNull() {
                this[this.tableListMiscAssessmentTable.TimberAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommercialRateNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.CommercialRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommercialRateNull() {
                this[this.tableListMiscAssessmentTable.CommercialRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFFeeNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.LCFFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFFeeNull() {
                this[this.tableListMiscAssessmentTable.LCFFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFPARateNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.FPARateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFPARateNull() {
                this[this.tableListMiscAssessmentTable.FPARateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherAcresNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.OtherAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherAcresNull() {
                this[this.tableListMiscAssessmentTable.OtherAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAcresNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.BaseAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAcresNull() {
                this[this.tableListMiscAssessmentTable.BaseAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLCFRateNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.LCFRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLCFRateNull() {
                this[this.tableListMiscAssessmentTable.LCFRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.TaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tableListMiscAssessmentTable.TaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.AssessmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentNull() {
                this[this.tableListMiscAssessmentTable.AssessmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpenSpaceNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.OpenSpaceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpenSpaceNull() {
                this[this.tableListMiscAssessmentTable.OpenSpaceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverrideAmountNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.OverrideAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverrideAmountNull() {
                this[this.tableListMiscAssessmentTable.OverrideAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOverrideNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.IsOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOverrideNull() {
                this[this.tableListMiscAssessmentTable.IsOverrideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tableListMiscAssessmentTable.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinAcresNull() {
                return this.IsNull(this.tableListMiscAssessmentTable.MinAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinAcresNull() {
                this[this.tableListMiscAssessmentTable.MinAcresColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AssessmentTypeTableRowChangeEvent : global::System.EventArgs {
            
            private AssessmentTypeTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssessmentTypeTableRowChangeEvent(AssessmentTypeTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssessmentTypeTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistrictTableRowChangeEvent : global::System.EventArgs {
            
            private DistrictTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTableRowChangeEvent(DistrictTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistrictTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMessageTableRowChangeEvent : global::System.EventArgs {
            
            private GetMessageTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMessageTableRowChangeEvent(GetMessageTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMessageTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMiscAssessmentTableRowChangeEvent : global::System.EventArgs {
            
            private ListMiscAssessmentTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscAssessmentTableRowChangeEvent(ListMiscAssessmentTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscAssessmentTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591