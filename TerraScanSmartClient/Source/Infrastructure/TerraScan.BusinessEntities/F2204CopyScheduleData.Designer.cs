//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F2204CopyScheduleData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F2204CopyScheduleData : global::System.Data.DataSet {
        
        private f25050_AssessmentTypeDataTable tablef25050_AssessmentType;
        
        private f25050_ScheduleTypeDataTable tablef25050_ScheduleType;
        
        private f25050_CreateCopyScheduleDataTable tablef25050_CreateCopySchedule;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F2204CopyScheduleData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F2204CopyScheduleData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["f25050_AssessmentType"] != null)) {
                    base.Tables.Add(new f25050_AssessmentTypeDataTable(ds.Tables["f25050_AssessmentType"]));
                }
                if ((ds.Tables["f25050_ScheduleType"] != null)) {
                    base.Tables.Add(new f25050_ScheduleTypeDataTable(ds.Tables["f25050_ScheduleType"]));
                }
                if ((ds.Tables["f25050_CreateCopySchedule"] != null)) {
                    base.Tables.Add(new f25050_CreateCopyScheduleDataTable(ds.Tables["f25050_CreateCopySchedule"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f25050_AssessmentTypeDataTable f25050_AssessmentType {
            get {
                return this.tablef25050_AssessmentType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f25050_ScheduleTypeDataTable f25050_ScheduleType {
            get {
                return this.tablef25050_ScheduleType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f25050_CreateCopyScheduleDataTable f25050_CreateCopySchedule {
            get {
                return this.tablef25050_CreateCopySchedule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F2204CopyScheduleData cln = ((F2204CopyScheduleData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["f25050_AssessmentType"] != null)) {
                    base.Tables.Add(new f25050_AssessmentTypeDataTable(ds.Tables["f25050_AssessmentType"]));
                }
                if ((ds.Tables["f25050_ScheduleType"] != null)) {
                    base.Tables.Add(new f25050_ScheduleTypeDataTable(ds.Tables["f25050_ScheduleType"]));
                }
                if ((ds.Tables["f25050_CreateCopySchedule"] != null)) {
                    base.Tables.Add(new f25050_CreateCopyScheduleDataTable(ds.Tables["f25050_CreateCopySchedule"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablef25050_AssessmentType = ((f25050_AssessmentTypeDataTable)(base.Tables["f25050_AssessmentType"]));
            if ((initTable == true)) {
                if ((this.tablef25050_AssessmentType != null)) {
                    this.tablef25050_AssessmentType.InitVars();
                }
            }
            this.tablef25050_ScheduleType = ((f25050_ScheduleTypeDataTable)(base.Tables["f25050_ScheduleType"]));
            if ((initTable == true)) {
                if ((this.tablef25050_ScheduleType != null)) {
                    this.tablef25050_ScheduleType.InitVars();
                }
            }
            this.tablef25050_CreateCopySchedule = ((f25050_CreateCopyScheduleDataTable)(base.Tables["f25050_CreateCopySchedule"]));
            if ((initTable == true)) {
                if ((this.tablef25050_CreateCopySchedule != null)) {
                    this.tablef25050_CreateCopySchedule.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F2204CopyScheduleData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F2204CopyScheduleData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablef25050_AssessmentType = new f25050_AssessmentTypeDataTable();
            base.Tables.Add(this.tablef25050_AssessmentType);
            this.tablef25050_ScheduleType = new f25050_ScheduleTypeDataTable();
            base.Tables.Add(this.tablef25050_ScheduleType);
            this.tablef25050_CreateCopySchedule = new f25050_CreateCopyScheduleDataTable();
            base.Tables.Add(this.tablef25050_CreateCopySchedule);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef25050_AssessmentType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef25050_ScheduleType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef25050_CreateCopySchedule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F2204CopyScheduleData ds = new F2204CopyScheduleData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void f25050_AssessmentTypeRowChangeEventHandler(object sender, f25050_AssessmentTypeRowChangeEvent e);
        
        public delegate void f25050_ScheduleTypeRowChangeEventHandler(object sender, f25050_ScheduleTypeRowChangeEvent e);
        
        public delegate void f25050_CreateCopyScheduleRowChangeEventHandler(object sender, f25050_CreateCopyScheduleRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f25050_AssessmentTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssessmentTypeID;
            
            private global::System.Data.DataColumn columnAssessmentType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_AssessmentTypeDataTable() {
                this.TableName = "f25050_AssessmentType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050_AssessmentTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f25050_AssessmentTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeIDColumn {
                get {
                    return this.columnAssessmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeColumn {
                get {
                    return this.columnAssessmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_AssessmentTypeRow this[int index] {
                get {
                    return ((f25050_AssessmentTypeRow)(this.Rows[index]));
                }
            }
            
            public event f25050_AssessmentTypeRowChangeEventHandler f25050_AssessmentTypeRowChanging;
            
            public event f25050_AssessmentTypeRowChangeEventHandler f25050_AssessmentTypeRowChanged;
            
            public event f25050_AssessmentTypeRowChangeEventHandler f25050_AssessmentTypeRowDeleting;
            
            public event f25050_AssessmentTypeRowChangeEventHandler f25050_AssessmentTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf25050_AssessmentTypeRow(f25050_AssessmentTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_AssessmentTypeRow Addf25050_AssessmentTypeRow(short AssessmentTypeID, string AssessmentType) {
                f25050_AssessmentTypeRow rowf25050_AssessmentTypeRow = ((f25050_AssessmentTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssessmentTypeID,
                        AssessmentType};
                rowf25050_AssessmentTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf25050_AssessmentTypeRow);
                return rowf25050_AssessmentTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f25050_AssessmentTypeDataTable cln = ((f25050_AssessmentTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f25050_AssessmentTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssessmentTypeID = base.Columns["AssessmentTypeID"];
                this.columnAssessmentType = base.Columns["AssessmentType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssessmentTypeID = new global::System.Data.DataColumn("AssessmentTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentTypeID);
                this.columnAssessmentType = new global::System.Data.DataColumn("AssessmentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentType);
                this.columnAssessmentTypeID.AllowDBNull = false;
                this.columnAssessmentType.AllowDBNull = false;
                this.columnAssessmentType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_AssessmentTypeRow Newf25050_AssessmentTypeRow() {
                return ((f25050_AssessmentTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f25050_AssessmentTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f25050_AssessmentTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f25050_AssessmentTypeRowChanged != null)) {
                    this.f25050_AssessmentTypeRowChanged(this, new f25050_AssessmentTypeRowChangeEvent(((f25050_AssessmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f25050_AssessmentTypeRowChanging != null)) {
                    this.f25050_AssessmentTypeRowChanging(this, new f25050_AssessmentTypeRowChangeEvent(((f25050_AssessmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f25050_AssessmentTypeRowDeleted != null)) {
                    this.f25050_AssessmentTypeRowDeleted(this, new f25050_AssessmentTypeRowChangeEvent(((f25050_AssessmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f25050_AssessmentTypeRowDeleting != null)) {
                    this.f25050_AssessmentTypeRowDeleting(this, new f25050_AssessmentTypeRowChangeEvent(((f25050_AssessmentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef25050_AssessmentTypeRow(f25050_AssessmentTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2204CopyScheduleData ds = new F2204CopyScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f25050_AssessmentTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f25050_ScheduleTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnScheduleTypeID;
            
            private global::System.Data.DataColumn columnScheduleType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_ScheduleTypeDataTable() {
                this.TableName = "f25050_ScheduleType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050_ScheduleTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f25050_ScheduleTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleTypeIDColumn {
                get {
                    return this.columnScheduleTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleTypeColumn {
                get {
                    return this.columnScheduleType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_ScheduleTypeRow this[int index] {
                get {
                    return ((f25050_ScheduleTypeRow)(this.Rows[index]));
                }
            }
            
            public event f25050_ScheduleTypeRowChangeEventHandler f25050_ScheduleTypeRowChanging;
            
            public event f25050_ScheduleTypeRowChangeEventHandler f25050_ScheduleTypeRowChanged;
            
            public event f25050_ScheduleTypeRowChangeEventHandler f25050_ScheduleTypeRowDeleting;
            
            public event f25050_ScheduleTypeRowChangeEventHandler f25050_ScheduleTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf25050_ScheduleTypeRow(f25050_ScheduleTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_ScheduleTypeRow Addf25050_ScheduleTypeRow(int ScheduleTypeID, string ScheduleType) {
                f25050_ScheduleTypeRow rowf25050_ScheduleTypeRow = ((f25050_ScheduleTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ScheduleTypeID,
                        ScheduleType};
                rowf25050_ScheduleTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf25050_ScheduleTypeRow);
                return rowf25050_ScheduleTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f25050_ScheduleTypeDataTable cln = ((f25050_ScheduleTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f25050_ScheduleTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScheduleTypeID = base.Columns["ScheduleTypeID"];
                this.columnScheduleType = base.Columns["ScheduleType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScheduleTypeID = new global::System.Data.DataColumn("ScheduleTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleTypeID);
                this.columnScheduleType = new global::System.Data.DataColumn("ScheduleType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleType);
                this.columnScheduleTypeID.AllowDBNull = false;
                this.columnScheduleType.AllowDBNull = false;
                this.columnScheduleType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_ScheduleTypeRow Newf25050_ScheduleTypeRow() {
                return ((f25050_ScheduleTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f25050_ScheduleTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f25050_ScheduleTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f25050_ScheduleTypeRowChanged != null)) {
                    this.f25050_ScheduleTypeRowChanged(this, new f25050_ScheduleTypeRowChangeEvent(((f25050_ScheduleTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f25050_ScheduleTypeRowChanging != null)) {
                    this.f25050_ScheduleTypeRowChanging(this, new f25050_ScheduleTypeRowChangeEvent(((f25050_ScheduleTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f25050_ScheduleTypeRowDeleted != null)) {
                    this.f25050_ScheduleTypeRowDeleted(this, new f25050_ScheduleTypeRowChangeEvent(((f25050_ScheduleTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f25050_ScheduleTypeRowDeleting != null)) {
                    this.f25050_ScheduleTypeRowDeleting(this, new f25050_ScheduleTypeRowChangeEvent(((f25050_ScheduleTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef25050_ScheduleTypeRow(f25050_ScheduleTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2204CopyScheduleData ds = new F2204CopyScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f25050_ScheduleTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f25050_CreateCopyScheduleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnScheduleNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnAssessmentTypeID;
            
            private global::System.Data.DataColumn columnScheduleTypeID;
            
            private global::System.Data.DataColumn columnCopyLineItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_CreateCopyScheduleDataTable() {
                this.TableName = "f25050_CreateCopySchedule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050_CreateCopyScheduleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f25050_CreateCopyScheduleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleNumberColumn {
                get {
                    return this.columnScheduleNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeIDColumn {
                get {
                    return this.columnAssessmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleTypeIDColumn {
                get {
                    return this.columnScheduleTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CopyLineItemColumn {
                get {
                    return this.columnCopyLineItem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_CreateCopyScheduleRow this[int index] {
                get {
                    return ((f25050_CreateCopyScheduleRow)(this.Rows[index]));
                }
            }
            
            public event f25050_CreateCopyScheduleRowChangeEventHandler f25050_CreateCopyScheduleRowChanging;
            
            public event f25050_CreateCopyScheduleRowChangeEventHandler f25050_CreateCopyScheduleRowChanged;
            
            public event f25050_CreateCopyScheduleRowChangeEventHandler f25050_CreateCopyScheduleRowDeleting;
            
            public event f25050_CreateCopyScheduleRowChangeEventHandler f25050_CreateCopyScheduleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf25050_CreateCopyScheduleRow(f25050_CreateCopyScheduleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_CreateCopyScheduleRow Addf25050_CreateCopyScheduleRow(string ScheduleNumber, string RollYear, int AssessmentTypeID, int ScheduleTypeID, string CopyLineItem) {
                f25050_CreateCopyScheduleRow rowf25050_CreateCopyScheduleRow = ((f25050_CreateCopyScheduleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ScheduleNumber,
                        RollYear,
                        AssessmentTypeID,
                        ScheduleTypeID,
                        CopyLineItem};
                rowf25050_CreateCopyScheduleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf25050_CreateCopyScheduleRow);
                return rowf25050_CreateCopyScheduleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f25050_CreateCopyScheduleDataTable cln = ((f25050_CreateCopyScheduleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f25050_CreateCopyScheduleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScheduleNumber = base.Columns["ScheduleNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnAssessmentTypeID = base.Columns["AssessmentTypeID"];
                this.columnScheduleTypeID = base.Columns["ScheduleTypeID"];
                this.columnCopyLineItem = base.Columns["CopyLineItem"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScheduleNumber = new global::System.Data.DataColumn("ScheduleNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnAssessmentTypeID = new global::System.Data.DataColumn("AssessmentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentTypeID);
                this.columnScheduleTypeID = new global::System.Data.DataColumn("ScheduleTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleTypeID);
                this.columnCopyLineItem = new global::System.Data.DataColumn("CopyLineItem", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCopyLineItem);
                this.columnScheduleNumber.AllowDBNull = false;
                this.columnRollYear.AllowDBNull = false;
                this.columnRollYear.MaxLength = 50;
                this.columnCopyLineItem.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_CreateCopyScheduleRow Newf25050_CreateCopyScheduleRow() {
                return ((f25050_CreateCopyScheduleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f25050_CreateCopyScheduleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f25050_CreateCopyScheduleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f25050_CreateCopyScheduleRowChanged != null)) {
                    this.f25050_CreateCopyScheduleRowChanged(this, new f25050_CreateCopyScheduleRowChangeEvent(((f25050_CreateCopyScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f25050_CreateCopyScheduleRowChanging != null)) {
                    this.f25050_CreateCopyScheduleRowChanging(this, new f25050_CreateCopyScheduleRowChangeEvent(((f25050_CreateCopyScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f25050_CreateCopyScheduleRowDeleted != null)) {
                    this.f25050_CreateCopyScheduleRowDeleted(this, new f25050_CreateCopyScheduleRowChangeEvent(((f25050_CreateCopyScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f25050_CreateCopyScheduleRowDeleting != null)) {
                    this.f25050_CreateCopyScheduleRowDeleting(this, new f25050_CreateCopyScheduleRowChangeEvent(((f25050_CreateCopyScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef25050_CreateCopyScheduleRow(f25050_CreateCopyScheduleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2204CopyScheduleData ds = new F2204CopyScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f25050_CreateCopyScheduleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f25050_AssessmentTypeRow : global::System.Data.DataRow {
            
            private f25050_AssessmentTypeDataTable tablef25050_AssessmentType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050_AssessmentTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef25050_AssessmentType = ((f25050_AssessmentTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AssessmentTypeID {
                get {
                    return ((short)(this[this.tablef25050_AssessmentType.AssessmentTypeIDColumn]));
                }
                set {
                    this[this.tablef25050_AssessmentType.AssessmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessmentType {
                get {
                    return ((string)(this[this.tablef25050_AssessmentType.AssessmentTypeColumn]));
                }
                set {
                    this[this.tablef25050_AssessmentType.AssessmentTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f25050_ScheduleTypeRow : global::System.Data.DataRow {
            
            private f25050_ScheduleTypeDataTable tablef25050_ScheduleType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050_ScheduleTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef25050_ScheduleType = ((f25050_ScheduleTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScheduleTypeID {
                get {
                    return ((int)(this[this.tablef25050_ScheduleType.ScheduleTypeIDColumn]));
                }
                set {
                    this[this.tablef25050_ScheduleType.ScheduleTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScheduleType {
                get {
                    return ((string)(this[this.tablef25050_ScheduleType.ScheduleTypeColumn]));
                }
                set {
                    this[this.tablef25050_ScheduleType.ScheduleTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f25050_CreateCopyScheduleRow : global::System.Data.DataRow {
            
            private f25050_CreateCopyScheduleDataTable tablef25050_CreateCopySchedule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050_CreateCopyScheduleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef25050_CreateCopySchedule = ((f25050_CreateCopyScheduleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScheduleNumber {
                get {
                    return ((string)(this[this.tablef25050_CreateCopySchedule.ScheduleNumberColumn]));
                }
                set {
                    this[this.tablef25050_CreateCopySchedule.ScheduleNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollYear {
                get {
                    return ((string)(this[this.tablef25050_CreateCopySchedule.RollYearColumn]));
                }
                set {
                    this[this.tablef25050_CreateCopySchedule.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssessmentTypeID {
                get {
                    try {
                        return ((int)(this[this.tablef25050_CreateCopySchedule.AssessmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentTypeID\' in table \'f25050_CreateCopySchedule\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablef25050_CreateCopySchedule.AssessmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScheduleTypeID {
                get {
                    try {
                        return ((int)(this[this.tablef25050_CreateCopySchedule.ScheduleTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduleTypeID\' in table \'f25050_CreateCopySchedule\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablef25050_CreateCopySchedule.ScheduleTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopyLineItem {
                get {
                    try {
                        return ((string)(this[this.tablef25050_CreateCopySchedule.CopyLineItemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CopyLineItem\' in table \'f25050_CreateCopySchedule\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablef25050_CreateCopySchedule.CopyLineItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeIDNull() {
                return this.IsNull(this.tablef25050_CreateCopySchedule.AssessmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeIDNull() {
                this[this.tablef25050_CreateCopySchedule.AssessmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduleTypeIDNull() {
                return this.IsNull(this.tablef25050_CreateCopySchedule.ScheduleTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduleTypeIDNull() {
                this[this.tablef25050_CreateCopySchedule.ScheduleTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCopyLineItemNull() {
                return this.IsNull(this.tablef25050_CreateCopySchedule.CopyLineItemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCopyLineItemNull() {
                this[this.tablef25050_CreateCopySchedule.CopyLineItemColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f25050_AssessmentTypeRowChangeEvent : global::System.EventArgs {
            
            private f25050_AssessmentTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_AssessmentTypeRowChangeEvent(f25050_AssessmentTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_AssessmentTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f25050_ScheduleTypeRowChangeEvent : global::System.EventArgs {
            
            private f25050_ScheduleTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_ScheduleTypeRowChangeEvent(f25050_ScheduleTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_ScheduleTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f25050_CreateCopyScheduleRowChangeEvent : global::System.EventArgs {
            
            private f25050_CreateCopyScheduleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_CreateCopyScheduleRowChangeEvent(f25050_CreateCopyScheduleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_CreateCopyScheduleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591