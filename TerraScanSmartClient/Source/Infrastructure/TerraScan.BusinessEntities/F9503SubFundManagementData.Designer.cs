//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F9503SubFundManagementData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F9503SubFundManagementData : global::System.Data.DataSet {
        
        private SubFundDetailsnDataTable tableSubFundDetailsn;
        
        private ListDisbursementHistoryDataTable tableListDisbursementHistory;
        
        private ListSubFundIdsDataTable tableListSubFundIds;
        
        private ListSubFundTypeDataTable tableListSubFundType;
        
        private getSubFundItemsDataTable tablegetSubFundItems;
        
        private ConfiguredStateDataTable tableConfiguredState;
        
        private SubFundDetailsDataTable tableSubFundDetails;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F9503SubFundManagementData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F9503SubFundManagementData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SubFundDetailsn"] != null)) {
                    base.Tables.Add(new SubFundDetailsnDataTable(ds.Tables["SubFundDetailsn"]));
                }
                if ((ds.Tables["ListDisbursementHistory"] != null)) {
                    base.Tables.Add(new ListDisbursementHistoryDataTable(ds.Tables["ListDisbursementHistory"]));
                }
                if ((ds.Tables["ListSubFundIds"] != null)) {
                    base.Tables.Add(new ListSubFundIdsDataTable(ds.Tables["ListSubFundIds"]));
                }
                if ((ds.Tables["ListSubFundType"] != null)) {
                    base.Tables.Add(new ListSubFundTypeDataTable(ds.Tables["ListSubFundType"]));
                }
                if ((ds.Tables["getSubFundItems"] != null)) {
                    base.Tables.Add(new getSubFundItemsDataTable(ds.Tables["getSubFundItems"]));
                }
                if ((ds.Tables["ConfiguredState"] != null)) {
                    base.Tables.Add(new ConfiguredStateDataTable(ds.Tables["ConfiguredState"]));
                }
                if ((ds.Tables["SubFundDetails"] != null)) {
                    base.Tables.Add(new SubFundDetailsDataTable(ds.Tables["SubFundDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubFundDetailsnDataTable SubFundDetailsn {
            get {
                return this.tableSubFundDetailsn;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDisbursementHistoryDataTable ListDisbursementHistory {
            get {
                return this.tableListDisbursementHistory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSubFundIdsDataTable ListSubFundIds {
            get {
                return this.tableListSubFundIds;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSubFundTypeDataTable ListSubFundType {
            get {
                return this.tableListSubFundType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public getSubFundItemsDataTable getSubFundItems {
            get {
                return this.tablegetSubFundItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConfiguredStateDataTable ConfiguredState {
            get {
                return this.tableConfiguredState;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubFundDetailsDataTable SubFundDetails {
            get {
                return this.tableSubFundDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F9503SubFundManagementData cln = ((F9503SubFundManagementData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SubFundDetailsn"] != null)) {
                    base.Tables.Add(new SubFundDetailsnDataTable(ds.Tables["SubFundDetailsn"]));
                }
                if ((ds.Tables["ListDisbursementHistory"] != null)) {
                    base.Tables.Add(new ListDisbursementHistoryDataTable(ds.Tables["ListDisbursementHistory"]));
                }
                if ((ds.Tables["ListSubFundIds"] != null)) {
                    base.Tables.Add(new ListSubFundIdsDataTable(ds.Tables["ListSubFundIds"]));
                }
                if ((ds.Tables["ListSubFundType"] != null)) {
                    base.Tables.Add(new ListSubFundTypeDataTable(ds.Tables["ListSubFundType"]));
                }
                if ((ds.Tables["getSubFundItems"] != null)) {
                    base.Tables.Add(new getSubFundItemsDataTable(ds.Tables["getSubFundItems"]));
                }
                if ((ds.Tables["ConfiguredState"] != null)) {
                    base.Tables.Add(new ConfiguredStateDataTable(ds.Tables["ConfiguredState"]));
                }
                if ((ds.Tables["SubFundDetails"] != null)) {
                    base.Tables.Add(new SubFundDetailsDataTable(ds.Tables["SubFundDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSubFundDetailsn = ((SubFundDetailsnDataTable)(base.Tables["SubFundDetailsn"]));
            if ((initTable == true)) {
                if ((this.tableSubFundDetailsn != null)) {
                    this.tableSubFundDetailsn.InitVars();
                }
            }
            this.tableListDisbursementHistory = ((ListDisbursementHistoryDataTable)(base.Tables["ListDisbursementHistory"]));
            if ((initTable == true)) {
                if ((this.tableListDisbursementHistory != null)) {
                    this.tableListDisbursementHistory.InitVars();
                }
            }
            this.tableListSubFundIds = ((ListSubFundIdsDataTable)(base.Tables["ListSubFundIds"]));
            if ((initTable == true)) {
                if ((this.tableListSubFundIds != null)) {
                    this.tableListSubFundIds.InitVars();
                }
            }
            this.tableListSubFundType = ((ListSubFundTypeDataTable)(base.Tables["ListSubFundType"]));
            if ((initTable == true)) {
                if ((this.tableListSubFundType != null)) {
                    this.tableListSubFundType.InitVars();
                }
            }
            this.tablegetSubFundItems = ((getSubFundItemsDataTable)(base.Tables["getSubFundItems"]));
            if ((initTable == true)) {
                if ((this.tablegetSubFundItems != null)) {
                    this.tablegetSubFundItems.InitVars();
                }
            }
            this.tableConfiguredState = ((ConfiguredStateDataTable)(base.Tables["ConfiguredState"]));
            if ((initTable == true)) {
                if ((this.tableConfiguredState != null)) {
                    this.tableConfiguredState.InitVars();
                }
            }
            this.tableSubFundDetails = ((SubFundDetailsDataTable)(base.Tables["SubFundDetails"]));
            if ((initTable == true)) {
                if ((this.tableSubFundDetails != null)) {
                    this.tableSubFundDetails.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F9503SubFundManagementData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F9503SubFundManagementData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSubFundDetailsn = new SubFundDetailsnDataTable();
            base.Tables.Add(this.tableSubFundDetailsn);
            this.tableListDisbursementHistory = new ListDisbursementHistoryDataTable();
            base.Tables.Add(this.tableListDisbursementHistory);
            this.tableListSubFundIds = new ListSubFundIdsDataTable();
            base.Tables.Add(this.tableListSubFundIds);
            this.tableListSubFundType = new ListSubFundTypeDataTable();
            base.Tables.Add(this.tableListSubFundType);
            this.tablegetSubFundItems = new getSubFundItemsDataTable();
            base.Tables.Add(this.tablegetSubFundItems);
            this.tableConfiguredState = new ConfiguredStateDataTable();
            base.Tables.Add(this.tableConfiguredState);
            this.tableSubFundDetails = new SubFundDetailsDataTable();
            base.Tables.Add(this.tableSubFundDetails);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubFundDetailsn() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDisbursementHistory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSubFundIds() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSubFundType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegetSubFundItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConfiguredState() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubFundDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F9503SubFundManagementData ds = new F9503SubFundManagementData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SubFundDetailsnRowChangeEventHandler(object sender, SubFundDetailsnRowChangeEvent e);
        
        public delegate void ListDisbursementHistoryRowChangeEventHandler(object sender, ListDisbursementHistoryRowChangeEvent e);
        
        public delegate void ListSubFundIdsRowChangeEventHandler(object sender, ListSubFundIdsRowChangeEvent e);
        
        public delegate void ListSubFundTypeRowChangeEventHandler(object sender, ListSubFundTypeRowChangeEvent e);
        
        public delegate void getSubFundItemsRowChangeEventHandler(object sender, getSubFundItemsRowChangeEvent e);
        
        public delegate void ConfiguredStateRowChangeEventHandler(object sender, ConfiguredStateRowChangeEvent e);
        
        public delegate void SubFundDetailsRowChangeEventHandler(object sender, SubFundDetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubFundDetailsnDataTable : global::System.Data.TypedTableBase<SubFundDetailsnRow> {
            
            private global::System.Data.DataColumn columnFundID;
            
            private global::System.Data.DataColumn columnFund;
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnSubFund;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnIsVoterApproved;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnCommissionRate;
            
            private global::System.Data.DataColumn columnFactor;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnSubFundTypeID;
            
            private global::System.Data.DataColumn columnSubFundType;
            
            private global::System.Data.DataColumn columnAgencyID;
            
            private global::System.Data.DataColumn columnAgencyName;
            
            private global::System.Data.DataColumn columnDisbursementBalance;
            
            private global::System.Data.DataColumn columnIsCash;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnAltPropTaxAcctID;
            
            private global::System.Data.DataColumn columnAltPropTaxAcctName;
            
            private global::System.Data.DataColumn columnIsSchool;
            
            private global::System.Data.DataColumn columnSchoolFieldLabel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsnDataTable() {
                this.TableName = "SubFundDetailsn";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubFundDetailsnDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubFundDetailsnDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundIDColumn {
                get {
                    return this.columnFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundColumn {
                get {
                    return this.columnFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVoterApprovedColumn {
                get {
                    return this.columnIsVoterApproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionRateColumn {
                get {
                    return this.columnCommissionRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactorColumn {
                get {
                    return this.columnFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeIDColumn {
                get {
                    return this.columnSubFundTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeColumn {
                get {
                    return this.columnSubFundType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyIDColumn {
                get {
                    return this.columnAgencyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyNameColumn {
                get {
                    return this.columnAgencyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisbursementBalanceColumn {
                get {
                    return this.columnDisbursementBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCashColumn {
                get {
                    return this.columnIsCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltPropTaxAcctIDColumn {
                get {
                    return this.columnAltPropTaxAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltPropTaxAcctNameColumn {
                get {
                    return this.columnAltPropTaxAcctName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSchoolColumn {
                get {
                    return this.columnIsSchool;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolFieldLabelColumn {
                get {
                    return this.columnSchoolFieldLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsnRow this[int index] {
                get {
                    return ((SubFundDetailsnRow)(this.Rows[index]));
                }
            }
            
            public event SubFundDetailsnRowChangeEventHandler SubFundDetailsnRowChanging;
            
            public event SubFundDetailsnRowChangeEventHandler SubFundDetailsnRowChanged;
            
            public event SubFundDetailsnRowChangeEventHandler SubFundDetailsnRowDeleting;
            
            public event SubFundDetailsnRowChangeEventHandler SubFundDetailsnRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubFundDetailsnRow(SubFundDetailsnRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsnRow AddSubFundDetailsnRow(
                        int FundID, 
                        string Fund, 
                        int SubFundID, 
                        string SubFund, 
                        short RollYear, 
                        bool IsVoterApproved, 
                        decimal Rate, 
                        decimal CommissionRate, 
                        decimal Factor, 
                        string Description, 
                        byte SubFundTypeID, 
                        string SubFundType, 
                        int AgencyID, 
                        string AgencyName, 
                        decimal DisbursementBalance, 
                        bool IsCash, 
                        bool IsActive, 
                        int AltPropTaxAcctID, 
                        string AltPropTaxAcctName, 
                        bool IsSchool, 
                        string SchoolFieldLabel) {
                SubFundDetailsnRow rowSubFundDetailsnRow = ((SubFundDetailsnRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FundID,
                        Fund,
                        SubFundID,
                        SubFund,
                        RollYear,
                        IsVoterApproved,
                        Rate,
                        CommissionRate,
                        Factor,
                        Description,
                        SubFundTypeID,
                        SubFundType,
                        AgencyID,
                        AgencyName,
                        DisbursementBalance,
                        IsCash,
                        IsActive,
                        AltPropTaxAcctID,
                        AltPropTaxAcctName,
                        IsSchool,
                        SchoolFieldLabel};
                rowSubFundDetailsnRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubFundDetailsnRow);
                return rowSubFundDetailsnRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubFundDetailsnDataTable cln = ((SubFundDetailsnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubFundDetailsnDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFundID = base.Columns["FundID"];
                this.columnFund = base.Columns["Fund"];
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnSubFund = base.Columns["SubFund"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnIsVoterApproved = base.Columns["IsVoterApproved"];
                this.columnRate = base.Columns["Rate"];
                this.columnCommissionRate = base.Columns["CommissionRate"];
                this.columnFactor = base.Columns["Factor"];
                this.columnDescription = base.Columns["Description"];
                this.columnSubFundTypeID = base.Columns["SubFundTypeID"];
                this.columnSubFundType = base.Columns["SubFundType"];
                this.columnAgencyID = base.Columns["AgencyID"];
                this.columnAgencyName = base.Columns["AgencyName"];
                this.columnDisbursementBalance = base.Columns["DisbursementBalance"];
                this.columnIsCash = base.Columns["IsCash"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnAltPropTaxAcctID = base.Columns["AltPropTaxAcctID"];
                this.columnAltPropTaxAcctName = base.Columns["AltPropTaxAcctName"];
                this.columnIsSchool = base.Columns["IsSchool"];
                this.columnSchoolFieldLabel = base.Columns["SchoolFieldLabel"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFundID = new global::System.Data.DataColumn("FundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundID);
                this.columnFund = new global::System.Data.DataColumn("Fund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFund);
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnIsVoterApproved = new global::System.Data.DataColumn("IsVoterApproved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVoterApproved);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnCommissionRate = new global::System.Data.DataColumn("CommissionRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionRate);
                this.columnFactor = new global::System.Data.DataColumn("Factor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactor);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnSubFundTypeID = new global::System.Data.DataColumn("SubFundTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundTypeID);
                this.columnSubFundType = new global::System.Data.DataColumn("SubFundType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundType);
                this.columnAgencyID = new global::System.Data.DataColumn("AgencyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyID);
                this.columnAgencyName = new global::System.Data.DataColumn("AgencyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyName);
                this.columnDisbursementBalance = new global::System.Data.DataColumn("DisbursementBalance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisbursementBalance);
                this.columnIsCash = new global::System.Data.DataColumn("IsCash", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCash);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnAltPropTaxAcctID = new global::System.Data.DataColumn("AltPropTaxAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltPropTaxAcctID);
                this.columnAltPropTaxAcctName = new global::System.Data.DataColumn("AltPropTaxAcctName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltPropTaxAcctName);
                this.columnIsSchool = new global::System.Data.DataColumn("IsSchool", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSchool);
                this.columnSchoolFieldLabel = new global::System.Data.DataColumn("SchoolFieldLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolFieldLabel);
                this.columnFundID.ReadOnly = true;
                this.columnSubFundID.ReadOnly = true;
                this.columnSubFund.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
                this.columnSubFundType.MaxLength = 50;
                this.columnAgencyID.ReadOnly = true;
                this.columnAgencyName.MaxLength = 50;
                this.columnDisbursementBalance.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsnRow NewSubFundDetailsnRow() {
                return ((SubFundDetailsnRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubFundDetailsnRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubFundDetailsnRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubFundDetailsnRowChanged != null)) {
                    this.SubFundDetailsnRowChanged(this, new SubFundDetailsnRowChangeEvent(((SubFundDetailsnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubFundDetailsnRowChanging != null)) {
                    this.SubFundDetailsnRowChanging(this, new SubFundDetailsnRowChangeEvent(((SubFundDetailsnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubFundDetailsnRowDeleted != null)) {
                    this.SubFundDetailsnRowDeleted(this, new SubFundDetailsnRowChangeEvent(((SubFundDetailsnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubFundDetailsnRowDeleting != null)) {
                    this.SubFundDetailsnRowDeleting(this, new SubFundDetailsnRowChangeEvent(((SubFundDetailsnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubFundDetailsnRow(SubFundDetailsnRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9503SubFundManagementData ds = new F9503SubFundManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubFundDetailsnDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDisbursementHistoryDataTable : global::System.Data.TypedTableBase<ListDisbursementHistoryRow> {
            
            private global::System.Data.DataColumn columnAccountName;
            
            private global::System.Data.DataColumn columnPayableTo;
            
            private global::System.Data.DataColumn columnEntryDate;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnPrimaryKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDisbursementHistoryDataTable() {
                this.TableName = "ListDisbursementHistory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDisbursementHistoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDisbursementHistoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayableToColumn {
                get {
                    return this.columnPayableTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryDateColumn {
                get {
                    return this.columnEntryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryKeyIDColumn {
                get {
                    return this.columnPrimaryKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDisbursementHistoryRow this[int index] {
                get {
                    return ((ListDisbursementHistoryRow)(this.Rows[index]));
                }
            }
            
            public event ListDisbursementHistoryRowChangeEventHandler ListDisbursementHistoryRowChanging;
            
            public event ListDisbursementHistoryRowChangeEventHandler ListDisbursementHistoryRowChanged;
            
            public event ListDisbursementHistoryRowChangeEventHandler ListDisbursementHistoryRowDeleting;
            
            public event ListDisbursementHistoryRowChangeEventHandler ListDisbursementHistoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDisbursementHistoryRow(ListDisbursementHistoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDisbursementHistoryRow AddListDisbursementHistoryRow(string AccountName, string PayableTo, System.DateTime EntryDate, decimal Amount, int SubFundID) {
                ListDisbursementHistoryRow rowListDisbursementHistoryRow = ((ListDisbursementHistoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AccountName,
                        PayableTo,
                        EntryDate,
                        Amount,
                        SubFundID,
                        null};
                rowListDisbursementHistoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDisbursementHistoryRow);
                return rowListDisbursementHistoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDisbursementHistoryDataTable cln = ((ListDisbursementHistoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDisbursementHistoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAccountName = base.Columns["AccountName"];
                this.columnPayableTo = base.Columns["PayableTo"];
                this.columnEntryDate = base.Columns["EntryDate"];
                this.columnAmount = base.Columns["Amount"];
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnPrimaryKeyID = base.Columns["PrimaryKeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAccountName = new global::System.Data.DataColumn("AccountName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnPayableTo = new global::System.Data.DataColumn("PayableTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayableTo);
                this.columnEntryDate = new global::System.Data.DataColumn("EntryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryDate);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnPrimaryKeyID = new global::System.Data.DataColumn("PrimaryKeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryKeyID);
                this.columnAccountName.AllowDBNull = false;
                this.columnAccountName.MaxLength = 100;
                this.columnPayableTo.MaxLength = 100;
                this.columnAmount.AllowDBNull = false;
                this.columnSubFundID.AllowDBNull = false;
                this.columnPrimaryKeyID.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDisbursementHistoryRow NewListDisbursementHistoryRow() {
                return ((ListDisbursementHistoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDisbursementHistoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDisbursementHistoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDisbursementHistoryRowChanged != null)) {
                    this.ListDisbursementHistoryRowChanged(this, new ListDisbursementHistoryRowChangeEvent(((ListDisbursementHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDisbursementHistoryRowChanging != null)) {
                    this.ListDisbursementHistoryRowChanging(this, new ListDisbursementHistoryRowChangeEvent(((ListDisbursementHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDisbursementHistoryRowDeleted != null)) {
                    this.ListDisbursementHistoryRowDeleted(this, new ListDisbursementHistoryRowChangeEvent(((ListDisbursementHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDisbursementHistoryRowDeleting != null)) {
                    this.ListDisbursementHistoryRowDeleting(this, new ListDisbursementHistoryRowChangeEvent(((ListDisbursementHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDisbursementHistoryRow(ListDisbursementHistoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9503SubFundManagementData ds = new F9503SubFundManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDisbursementHistoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSubFundIdsDataTable : global::System.Data.TypedTableBase<ListSubFundIdsRow> {
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnSubFund;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundIdsDataTable() {
                this.TableName = "ListSubFundIds";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSubFundIdsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSubFundIdsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundIdsRow this[int index] {
                get {
                    return ((ListSubFundIdsRow)(this.Rows[index]));
                }
            }
            
            public event ListSubFundIdsRowChangeEventHandler ListSubFundIdsRowChanging;
            
            public event ListSubFundIdsRowChangeEventHandler ListSubFundIdsRowChanged;
            
            public event ListSubFundIdsRowChangeEventHandler ListSubFundIdsRowDeleting;
            
            public event ListSubFundIdsRowChangeEventHandler ListSubFundIdsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSubFundIdsRow(ListSubFundIdsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundIdsRow AddListSubFundIdsRow(int SubFundID, string SubFund) {
                ListSubFundIdsRow rowListSubFundIdsRow = ((ListSubFundIdsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubFundID,
                        SubFund};
                rowListSubFundIdsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSubFundIdsRow);
                return rowListSubFundIdsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSubFundIdsDataTable cln = ((ListSubFundIdsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSubFundIdsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnSubFund = base.Columns["SubFund"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnSubFundID.AllowDBNull = false;
                this.columnSubFundID.ReadOnly = true;
                this.columnSubFund.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundIdsRow NewListSubFundIdsRow() {
                return ((ListSubFundIdsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSubFundIdsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSubFundIdsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSubFundIdsRowChanged != null)) {
                    this.ListSubFundIdsRowChanged(this, new ListSubFundIdsRowChangeEvent(((ListSubFundIdsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSubFundIdsRowChanging != null)) {
                    this.ListSubFundIdsRowChanging(this, new ListSubFundIdsRowChangeEvent(((ListSubFundIdsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSubFundIdsRowDeleted != null)) {
                    this.ListSubFundIdsRowDeleted(this, new ListSubFundIdsRowChangeEvent(((ListSubFundIdsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSubFundIdsRowDeleting != null)) {
                    this.ListSubFundIdsRowDeleting(this, new ListSubFundIdsRowChangeEvent(((ListSubFundIdsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSubFundIdsRow(ListSubFundIdsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9503SubFundManagementData ds = new F9503SubFundManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSubFundIdsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSubFundTypeDataTable : global::System.Data.TypedTableBase<ListSubFundTypeRow> {
            
            private global::System.Data.DataColumn columnSubFundTypeID;
            
            private global::System.Data.DataColumn columnSubFundType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundTypeDataTable() {
                this.TableName = "ListSubFundType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSubFundTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSubFundTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeIDColumn {
                get {
                    return this.columnSubFundTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeColumn {
                get {
                    return this.columnSubFundType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundTypeRow this[int index] {
                get {
                    return ((ListSubFundTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListSubFundTypeRowChangeEventHandler ListSubFundTypeRowChanging;
            
            public event ListSubFundTypeRowChangeEventHandler ListSubFundTypeRowChanged;
            
            public event ListSubFundTypeRowChangeEventHandler ListSubFundTypeRowDeleting;
            
            public event ListSubFundTypeRowChangeEventHandler ListSubFundTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSubFundTypeRow(ListSubFundTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundTypeRow AddListSubFundTypeRow(byte SubFundTypeID, string SubFundType) {
                ListSubFundTypeRow rowListSubFundTypeRow = ((ListSubFundTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubFundTypeID,
                        SubFundType};
                rowListSubFundTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSubFundTypeRow);
                return rowListSubFundTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSubFundTypeDataTable cln = ((ListSubFundTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSubFundTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubFundTypeID = base.Columns["SubFundTypeID"];
                this.columnSubFundType = base.Columns["SubFundType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubFundTypeID = new global::System.Data.DataColumn("SubFundTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundTypeID);
                this.columnSubFundType = new global::System.Data.DataColumn("SubFundType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundType);
                this.columnSubFundTypeID.AllowDBNull = false;
                this.columnSubFundType.AllowDBNull = false;
                this.columnSubFundType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundTypeRow NewListSubFundTypeRow() {
                return ((ListSubFundTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSubFundTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSubFundTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSubFundTypeRowChanged != null)) {
                    this.ListSubFundTypeRowChanged(this, new ListSubFundTypeRowChangeEvent(((ListSubFundTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSubFundTypeRowChanging != null)) {
                    this.ListSubFundTypeRowChanging(this, new ListSubFundTypeRowChangeEvent(((ListSubFundTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSubFundTypeRowDeleted != null)) {
                    this.ListSubFundTypeRowDeleted(this, new ListSubFundTypeRowChangeEvent(((ListSubFundTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSubFundTypeRowDeleting != null)) {
                    this.ListSubFundTypeRowDeleting(this, new ListSubFundTypeRowChangeEvent(((ListSubFundTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSubFundTypeRow(ListSubFundTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9503SubFundManagementData ds = new F9503SubFundManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSubFundTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class getSubFundItemsDataTable : global::System.Data.TypedTableBase<getSubFundItemsRow> {
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnFundID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnSubFund;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnIsVoterApproved;
            
            private global::System.Data.DataColumn columnCommissionRate;
            
            private global::System.Data.DataColumn columnIsCash;
            
            private global::System.Data.DataColumn columnFactor;
            
            private global::System.Data.DataColumn columnSubFundTypeID;
            
            private global::System.Data.DataColumn columnAgencyID;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnAltPropTaxAcctID;
            
            private global::System.Data.DataColumn columnIsSchool;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getSubFundItemsDataTable() {
                this.TableName = "getSubFundItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal getSubFundItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected getSubFundItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundIDColumn {
                get {
                    return this.columnFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVoterApprovedColumn {
                get {
                    return this.columnIsVoterApproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionRateColumn {
                get {
                    return this.columnCommissionRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCashColumn {
                get {
                    return this.columnIsCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactorColumn {
                get {
                    return this.columnFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeIDColumn {
                get {
                    return this.columnSubFundTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyIDColumn {
                get {
                    return this.columnAgencyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltPropTaxAcctIDColumn {
                get {
                    return this.columnAltPropTaxAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSchoolColumn {
                get {
                    return this.columnIsSchool;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getSubFundItemsRow this[int index] {
                get {
                    return ((getSubFundItemsRow)(this.Rows[index]));
                }
            }
            
            public event getSubFundItemsRowChangeEventHandler getSubFundItemsRowChanging;
            
            public event getSubFundItemsRowChangeEventHandler getSubFundItemsRowChanged;
            
            public event getSubFundItemsRowChangeEventHandler getSubFundItemsRowDeleting;
            
            public event getSubFundItemsRowChangeEventHandler getSubFundItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddgetSubFundItemsRow(getSubFundItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getSubFundItemsRow AddgetSubFundItemsRow(int SubFundID, int FundID, short RollYear, string SubFund, string Description, decimal Rate, bool IsVoterApproved, decimal CommissionRate, bool IsCash, decimal Factor, byte SubFundTypeID, int AgencyID, bool IsActive, int AltPropTaxAcctID, bool IsSchool) {
                getSubFundItemsRow rowgetSubFundItemsRow = ((getSubFundItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubFundID,
                        FundID,
                        RollYear,
                        SubFund,
                        Description,
                        Rate,
                        IsVoterApproved,
                        CommissionRate,
                        IsCash,
                        Factor,
                        SubFundTypeID,
                        AgencyID,
                        IsActive,
                        AltPropTaxAcctID,
                        IsSchool};
                rowgetSubFundItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowgetSubFundItemsRow);
                return rowgetSubFundItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                getSubFundItemsDataTable cln = ((getSubFundItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new getSubFundItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnFundID = base.Columns["FundID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnSubFund = base.Columns["SubFund"];
                this.columnDescription = base.Columns["Description"];
                this.columnRate = base.Columns["Rate"];
                this.columnIsVoterApproved = base.Columns["IsVoterApproved"];
                this.columnCommissionRate = base.Columns["CommissionRate"];
                this.columnIsCash = base.Columns["IsCash"];
                this.columnFactor = base.Columns["Factor"];
                this.columnSubFundTypeID = base.Columns["SubFundTypeID"];
                this.columnAgencyID = base.Columns["AgencyID"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnAltPropTaxAcctID = base.Columns["AltPropTaxAcctID"];
                this.columnIsSchool = base.Columns["IsSchool"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnFundID = new global::System.Data.DataColumn("FundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnIsVoterApproved = new global::System.Data.DataColumn("IsVoterApproved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVoterApproved);
                this.columnCommissionRate = new global::System.Data.DataColumn("CommissionRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionRate);
                this.columnIsCash = new global::System.Data.DataColumn("IsCash", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCash);
                this.columnFactor = new global::System.Data.DataColumn("Factor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactor);
                this.columnSubFundTypeID = new global::System.Data.DataColumn("SubFundTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundTypeID);
                this.columnAgencyID = new global::System.Data.DataColumn("AgencyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyID);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnAltPropTaxAcctID = new global::System.Data.DataColumn("AltPropTaxAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltPropTaxAcctID);
                this.columnIsSchool = new global::System.Data.DataColumn("IsSchool", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSchool);
                this.columnSubFundID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getSubFundItemsRow NewgetSubFundItemsRow() {
                return ((getSubFundItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new getSubFundItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(getSubFundItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.getSubFundItemsRowChanged != null)) {
                    this.getSubFundItemsRowChanged(this, new getSubFundItemsRowChangeEvent(((getSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.getSubFundItemsRowChanging != null)) {
                    this.getSubFundItemsRowChanging(this, new getSubFundItemsRowChangeEvent(((getSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.getSubFundItemsRowDeleted != null)) {
                    this.getSubFundItemsRowDeleted(this, new getSubFundItemsRowChangeEvent(((getSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.getSubFundItemsRowDeleting != null)) {
                    this.getSubFundItemsRowDeleting(this, new getSubFundItemsRowChangeEvent(((getSubFundItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovegetSubFundItemsRow(getSubFundItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9503SubFundManagementData ds = new F9503SubFundManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "getSubFundItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConfiguredStateDataTable : global::System.Data.TypedTableBase<ConfiguredStateRow> {
            
            private global::System.Data.DataColumn columnState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateDataTable() {
                this.TableName = "ConfiguredState";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfiguredStateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConfiguredStateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRow this[int index] {
                get {
                    return ((ConfiguredStateRow)(this.Rows[index]));
                }
            }
            
            public event ConfiguredStateRowChangeEventHandler ConfiguredStateRowChanging;
            
            public event ConfiguredStateRowChangeEventHandler ConfiguredStateRowChanged;
            
            public event ConfiguredStateRowChangeEventHandler ConfiguredStateRowDeleting;
            
            public event ConfiguredStateRowChangeEventHandler ConfiguredStateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConfiguredStateRow(ConfiguredStateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRow AddConfiguredStateRow(string State) {
                ConfiguredStateRow rowConfiguredStateRow = ((ConfiguredStateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        State};
                rowConfiguredStateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConfiguredStateRow);
                return rowConfiguredStateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConfiguredStateDataTable cln = ((ConfiguredStateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConfiguredStateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnState = base.Columns["State"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnState.ReadOnly = true;
                this.columnState.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRow NewConfiguredStateRow() {
                return ((ConfiguredStateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConfiguredStateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConfiguredStateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConfiguredStateRowChanged != null)) {
                    this.ConfiguredStateRowChanged(this, new ConfiguredStateRowChangeEvent(((ConfiguredStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConfiguredStateRowChanging != null)) {
                    this.ConfiguredStateRowChanging(this, new ConfiguredStateRowChangeEvent(((ConfiguredStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConfiguredStateRowDeleted != null)) {
                    this.ConfiguredStateRowDeleted(this, new ConfiguredStateRowChangeEvent(((ConfiguredStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConfiguredStateRowDeleting != null)) {
                    this.ConfiguredStateRowDeleting(this, new ConfiguredStateRowChangeEvent(((ConfiguredStateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConfiguredStateRow(ConfiguredStateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9503SubFundManagementData ds = new F9503SubFundManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConfiguredStateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubFundDetailsDataTable : global::System.Data.TypedTableBase<SubFundDetailsRow> {
            
            private global::System.Data.DataColumn columnFundID;
            
            private global::System.Data.DataColumn columnFund;
            
            private global::System.Data.DataColumn columnSubFundID;
            
            private global::System.Data.DataColumn columnSubFund;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnIsVoterApproved;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnCommissionRate;
            
            private global::System.Data.DataColumn columnFactor;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnSubFundTypeID;
            
            private global::System.Data.DataColumn columnSubFundType;
            
            private global::System.Data.DataColumn columnAgencyID;
            
            private global::System.Data.DataColumn columnAgencyName;
            
            private global::System.Data.DataColumn columnIsCash;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnDisbursementBalance;
            
            private global::System.Data.DataColumn columnAltPropTaxAcctID;
            
            private global::System.Data.DataColumn columnAltPropTaxAcctName;
            
            private global::System.Data.DataColumn columnIsSchool;
            
            private global::System.Data.DataColumn columnSchoolFieldLabel;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnContact;
            
            private global::System.Data.DataColumn columnSequenceNumber;
            
            private global::System.Data.DataColumn columnSchoolDistrictClass;
            
            private global::System.Data.DataColumn columnCertificateLineNumber;
            
            private global::System.Data.DataColumn columnBaseCode;
            
            private global::System.Data.DataColumn columnUnifiedLearningCommCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsDataTable() {
                this.TableName = "SubFundDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubFundDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubFundDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundIDColumn {
                get {
                    return this.columnFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FundColumn {
                get {
                    return this.columnFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundIDColumn {
                get {
                    return this.columnSubFundID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundColumn {
                get {
                    return this.columnSubFund;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVoterApprovedColumn {
                get {
                    return this.columnIsVoterApproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommissionRateColumn {
                get {
                    return this.columnCommissionRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactorColumn {
                get {
                    return this.columnFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeIDColumn {
                get {
                    return this.columnSubFundTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFundTypeColumn {
                get {
                    return this.columnSubFundType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyIDColumn {
                get {
                    return this.columnAgencyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyNameColumn {
                get {
                    return this.columnAgencyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCashColumn {
                get {
                    return this.columnIsCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisbursementBalanceColumn {
                get {
                    return this.columnDisbursementBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltPropTaxAcctIDColumn {
                get {
                    return this.columnAltPropTaxAcctID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AltPropTaxAcctNameColumn {
                get {
                    return this.columnAltPropTaxAcctName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSchoolColumn {
                get {
                    return this.columnIsSchool;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolFieldLabelColumn {
                get {
                    return this.columnSchoolFieldLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactColumn {
                get {
                    return this.columnContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceNumberColumn {
                get {
                    return this.columnSequenceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolDistrictClassColumn {
                get {
                    return this.columnSchoolDistrictClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CertificateLineNumberColumn {
                get {
                    return this.columnCertificateLineNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseCodeColumn {
                get {
                    return this.columnBaseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnifiedLearningCommCodeColumn {
                get {
                    return this.columnUnifiedLearningCommCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsRow this[int index] {
                get {
                    return ((SubFundDetailsRow)(this.Rows[index]));
                }
            }
            
            public event SubFundDetailsRowChangeEventHandler SubFundDetailsRowChanging;
            
            public event SubFundDetailsRowChangeEventHandler SubFundDetailsRowChanged;
            
            public event SubFundDetailsRowChangeEventHandler SubFundDetailsRowDeleting;
            
            public event SubFundDetailsRowChangeEventHandler SubFundDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubFundDetailsRow(SubFundDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsRow AddSubFundDetailsRow(
                        int FundID, 
                        string Fund, 
                        int SubFundID, 
                        string SubFund, 
                        short RollYear, 
                        bool IsVoterApproved, 
                        decimal Rate, 
                        decimal CommissionRate, 
                        decimal Factor, 
                        string Description, 
                        byte SubFundTypeID, 
                        string SubFundType, 
                        int AgencyID, 
                        string AgencyName, 
                        bool IsCash, 
                        bool IsActive, 
                        decimal DisbursementBalance, 
                        int AltPropTaxAcctID, 
                        string AltPropTaxAcctName, 
                        bool IsSchool, 
                        string SchoolFieldLabel, 
                        int OwnerID, 
                        string Contact, 
                        string SequenceNumber, 
                        string SchoolDistrictClass, 
                        string CertificateLineNumber, 
                        string BaseCode, 
                        string UnifiedLearningCommCode) {
                SubFundDetailsRow rowSubFundDetailsRow = ((SubFundDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FundID,
                        Fund,
                        SubFundID,
                        SubFund,
                        RollYear,
                        IsVoterApproved,
                        Rate,
                        CommissionRate,
                        Factor,
                        Description,
                        SubFundTypeID,
                        SubFundType,
                        AgencyID,
                        AgencyName,
                        IsCash,
                        IsActive,
                        DisbursementBalance,
                        AltPropTaxAcctID,
                        AltPropTaxAcctName,
                        IsSchool,
                        SchoolFieldLabel,
                        OwnerID,
                        Contact,
                        SequenceNumber,
                        SchoolDistrictClass,
                        CertificateLineNumber,
                        BaseCode,
                        UnifiedLearningCommCode};
                rowSubFundDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubFundDetailsRow);
                return rowSubFundDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubFundDetailsDataTable cln = ((SubFundDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubFundDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFundID = base.Columns["FundID"];
                this.columnFund = base.Columns["Fund"];
                this.columnSubFundID = base.Columns["SubFundID"];
                this.columnSubFund = base.Columns["SubFund"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnIsVoterApproved = base.Columns["IsVoterApproved"];
                this.columnRate = base.Columns["Rate"];
                this.columnCommissionRate = base.Columns["CommissionRate"];
                this.columnFactor = base.Columns["Factor"];
                this.columnDescription = base.Columns["Description"];
                this.columnSubFundTypeID = base.Columns["SubFundTypeID"];
                this.columnSubFundType = base.Columns["SubFundType"];
                this.columnAgencyID = base.Columns["AgencyID"];
                this.columnAgencyName = base.Columns["AgencyName"];
                this.columnIsCash = base.Columns["IsCash"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnDisbursementBalance = base.Columns["DisbursementBalance"];
                this.columnAltPropTaxAcctID = base.Columns["AltPropTaxAcctID"];
                this.columnAltPropTaxAcctName = base.Columns["AltPropTaxAcctName"];
                this.columnIsSchool = base.Columns["IsSchool"];
                this.columnSchoolFieldLabel = base.Columns["SchoolFieldLabel"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnContact = base.Columns["Contact"];
                this.columnSequenceNumber = base.Columns["SequenceNumber"];
                this.columnSchoolDistrictClass = base.Columns["SchoolDistrictClass"];
                this.columnCertificateLineNumber = base.Columns["CertificateLineNumber"];
                this.columnBaseCode = base.Columns["BaseCode"];
                this.columnUnifiedLearningCommCode = base.Columns["UnifiedLearningCommCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFundID = new global::System.Data.DataColumn("FundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFundID);
                this.columnFund = new global::System.Data.DataColumn("Fund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFund);
                this.columnSubFundID = new global::System.Data.DataColumn("SubFundID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundID);
                this.columnSubFund = new global::System.Data.DataColumn("SubFund", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFund);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnIsVoterApproved = new global::System.Data.DataColumn("IsVoterApproved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVoterApproved);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnCommissionRate = new global::System.Data.DataColumn("CommissionRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommissionRate);
                this.columnFactor = new global::System.Data.DataColumn("Factor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactor);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnSubFundTypeID = new global::System.Data.DataColumn("SubFundTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundTypeID);
                this.columnSubFundType = new global::System.Data.DataColumn("SubFundType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubFundType);
                this.columnAgencyID = new global::System.Data.DataColumn("AgencyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyID);
                this.columnAgencyName = new global::System.Data.DataColumn("AgencyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgencyName);
                this.columnIsCash = new global::System.Data.DataColumn("IsCash", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCash);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnDisbursementBalance = new global::System.Data.DataColumn("DisbursementBalance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisbursementBalance);
                this.columnAltPropTaxAcctID = new global::System.Data.DataColumn("AltPropTaxAcctID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltPropTaxAcctID);
                this.columnAltPropTaxAcctName = new global::System.Data.DataColumn("AltPropTaxAcctName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltPropTaxAcctName);
                this.columnIsSchool = new global::System.Data.DataColumn("IsSchool", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSchool);
                this.columnSchoolFieldLabel = new global::System.Data.DataColumn("SchoolFieldLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolFieldLabel);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnContact = new global::System.Data.DataColumn("Contact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact);
                this.columnSequenceNumber = new global::System.Data.DataColumn("SequenceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequenceNumber);
                this.columnSchoolDistrictClass = new global::System.Data.DataColumn("SchoolDistrictClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolDistrictClass);
                this.columnCertificateLineNumber = new global::System.Data.DataColumn("CertificateLineNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCertificateLineNumber);
                this.columnBaseCode = new global::System.Data.DataColumn("BaseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseCode);
                this.columnUnifiedLearningCommCode = new global::System.Data.DataColumn("UnifiedLearningCommCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnifiedLearningCommCode);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsRow NewSubFundDetailsRow() {
                return ((SubFundDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubFundDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubFundDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubFundDetailsRowChanged != null)) {
                    this.SubFundDetailsRowChanged(this, new SubFundDetailsRowChangeEvent(((SubFundDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubFundDetailsRowChanging != null)) {
                    this.SubFundDetailsRowChanging(this, new SubFundDetailsRowChangeEvent(((SubFundDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubFundDetailsRowDeleted != null)) {
                    this.SubFundDetailsRowDeleted(this, new SubFundDetailsRowChangeEvent(((SubFundDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubFundDetailsRowDeleting != null)) {
                    this.SubFundDetailsRowDeleting(this, new SubFundDetailsRowChangeEvent(((SubFundDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubFundDetailsRow(SubFundDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F9503SubFundManagementData ds = new F9503SubFundManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubFundDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubFundDetailsnRow : global::System.Data.DataRow {
            
            private SubFundDetailsnDataTable tableSubFundDetailsn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubFundDetailsnRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubFundDetailsn = ((SubFundDetailsnDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FundID {
                get {
                    try {
                        return ((int)(this[this.tableSubFundDetailsn.FundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundID\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.FundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fund {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetailsn.FundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fund\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.FundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    try {
                        return ((int)(this[this.tableSubFundDetailsn.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetailsn.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableSubFundDetailsn.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoterApproved {
                get {
                    try {
                        return ((bool)(this[this.tableSubFundDetailsn.IsVoterApprovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVoterApproved\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.IsVoterApprovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableSubFundDetailsn.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommissionRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSubFundDetailsn.CommissionRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommissionRate\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.CommissionRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Factor {
                get {
                    try {
                        return ((decimal)(this[this.tableSubFundDetailsn.FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factor\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetailsn.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SubFundTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableSubFundDetailsn.SubFundTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundTypeID\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.SubFundTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFundType {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetailsn.SubFundTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundType\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.SubFundTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgencyID {
                get {
                    try {
                        return ((int)(this[this.tableSubFundDetailsn.AgencyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyID\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.AgencyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgencyName {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetailsn.AgencyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyName\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.AgencyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DisbursementBalance {
                get {
                    try {
                        return ((decimal)(this[this.tableSubFundDetailsn.DisbursementBalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DisbursementBalance\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.DisbursementBalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCash {
                get {
                    try {
                        return ((bool)(this[this.tableSubFundDetailsn.IsCashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCash\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.IsCashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableSubFundDetailsn.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AltPropTaxAcctID {
                get {
                    try {
                        return ((int)(this[this.tableSubFundDetailsn.AltPropTaxAcctIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AltPropTaxAcctID\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.AltPropTaxAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AltPropTaxAcctName {
                get {
                    if (this.IsAltPropTaxAcctNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSubFundDetailsn.AltPropTaxAcctNameColumn]));
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.AltPropTaxAcctNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchool {
                get {
                    try {
                        return ((bool)(this[this.tableSubFundDetailsn.IsSchoolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSchool\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.IsSchoolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolFieldLabel {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetailsn.SchoolFieldLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolFieldLabel\' in table \'SubFundDetailsn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetailsn.SchoolFieldLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundIDNull() {
                return this.IsNull(this.tableSubFundDetailsn.FundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundIDNull() {
                this[this.tableSubFundDetailsn.FundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundNull() {
                return this.IsNull(this.tableSubFundDetailsn.FundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundNull() {
                this[this.tableSubFundDetailsn.FundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tableSubFundDetailsn.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tableSubFundDetailsn.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableSubFundDetailsn.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableSubFundDetailsn.SubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableSubFundDetailsn.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableSubFundDetailsn.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVoterApprovedNull() {
                return this.IsNull(this.tableSubFundDetailsn.IsVoterApprovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVoterApprovedNull() {
                this[this.tableSubFundDetailsn.IsVoterApprovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableSubFundDetailsn.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableSubFundDetailsn.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionRateNull() {
                return this.IsNull(this.tableSubFundDetailsn.CommissionRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionRateNull() {
                this[this.tableSubFundDetailsn.CommissionRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactorNull() {
                return this.IsNull(this.tableSubFundDetailsn.FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactorNull() {
                this[this.tableSubFundDetailsn.FactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSubFundDetailsn.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSubFundDetailsn.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundTypeIDNull() {
                return this.IsNull(this.tableSubFundDetailsn.SubFundTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundTypeIDNull() {
                this[this.tableSubFundDetailsn.SubFundTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundTypeNull() {
                return this.IsNull(this.tableSubFundDetailsn.SubFundTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundTypeNull() {
                this[this.tableSubFundDetailsn.SubFundTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyIDNull() {
                return this.IsNull(this.tableSubFundDetailsn.AgencyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyIDNull() {
                this[this.tableSubFundDetailsn.AgencyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyNameNull() {
                return this.IsNull(this.tableSubFundDetailsn.AgencyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyNameNull() {
                this[this.tableSubFundDetailsn.AgencyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisbursementBalanceNull() {
                return this.IsNull(this.tableSubFundDetailsn.DisbursementBalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisbursementBalanceNull() {
                this[this.tableSubFundDetailsn.DisbursementBalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCashNull() {
                return this.IsNull(this.tableSubFundDetailsn.IsCashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCashNull() {
                this[this.tableSubFundDetailsn.IsCashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableSubFundDetailsn.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableSubFundDetailsn.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltPropTaxAcctIDNull() {
                return this.IsNull(this.tableSubFundDetailsn.AltPropTaxAcctIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltPropTaxAcctIDNull() {
                this[this.tableSubFundDetailsn.AltPropTaxAcctIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltPropTaxAcctNameNull() {
                return this.IsNull(this.tableSubFundDetailsn.AltPropTaxAcctNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltPropTaxAcctNameNull() {
                this[this.tableSubFundDetailsn.AltPropTaxAcctNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSchoolNull() {
                return this.IsNull(this.tableSubFundDetailsn.IsSchoolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSchoolNull() {
                this[this.tableSubFundDetailsn.IsSchoolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolFieldLabelNull() {
                return this.IsNull(this.tableSubFundDetailsn.SchoolFieldLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolFieldLabelNull() {
                this[this.tableSubFundDetailsn.SchoolFieldLabelColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDisbursementHistoryRow : global::System.Data.DataRow {
            
            private ListDisbursementHistoryDataTable tableListDisbursementHistory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDisbursementHistoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDisbursementHistory = ((ListDisbursementHistoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    return ((string)(this[this.tableListDisbursementHistory.AccountNameColumn]));
                }
                set {
                    this[this.tableListDisbursementHistory.AccountNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayableTo {
                get {
                    try {
                        return ((string)(this[this.tableListDisbursementHistory.PayableToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayableTo\' in table \'ListDisbursementHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDisbursementHistory.PayableToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EntryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListDisbursementHistory.EntryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntryDate\' in table \'ListDisbursementHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDisbursementHistory.EntryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    return ((decimal)(this[this.tableListDisbursementHistory.AmountColumn]));
                }
                set {
                    this[this.tableListDisbursementHistory.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    return ((int)(this[this.tableListDisbursementHistory.SubFundIDColumn]));
                }
                set {
                    this[this.tableListDisbursementHistory.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrimaryKeyID {
                get {
                    try {
                        return ((int)(this[this.tableListDisbursementHistory.PrimaryKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryKeyID\' in table \'ListDisbursementHistory\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListDisbursementHistory.PrimaryKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayableToNull() {
                return this.IsNull(this.tableListDisbursementHistory.PayableToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayableToNull() {
                this[this.tableListDisbursementHistory.PayableToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntryDateNull() {
                return this.IsNull(this.tableListDisbursementHistory.EntryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntryDateNull() {
                this[this.tableListDisbursementHistory.EntryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryKeyIDNull() {
                return this.IsNull(this.tableListDisbursementHistory.PrimaryKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryKeyIDNull() {
                this[this.tableListDisbursementHistory.PrimaryKeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSubFundIdsRow : global::System.Data.DataRow {
            
            private ListSubFundIdsDataTable tableListSubFundIds;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSubFundIdsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSubFundIds = ((ListSubFundIdsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    return ((int)(this[this.tableListSubFundIds.SubFundIDColumn]));
                }
                set {
                    this[this.tableListSubFundIds.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableListSubFundIds.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'ListSubFundIds\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSubFundIds.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableListSubFundIds.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableListSubFundIds.SubFundColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSubFundTypeRow : global::System.Data.DataRow {
            
            private ListSubFundTypeDataTable tableListSubFundType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSubFundTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSubFundType = ((ListSubFundTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SubFundTypeID {
                get {
                    return ((byte)(this[this.tableListSubFundType.SubFundTypeIDColumn]));
                }
                set {
                    this[this.tableListSubFundType.SubFundTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFundType {
                get {
                    return ((string)(this[this.tableListSubFundType.SubFundTypeColumn]));
                }
                set {
                    this[this.tableListSubFundType.SubFundTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class getSubFundItemsRow : global::System.Data.DataRow {
            
            private getSubFundItemsDataTable tablegetSubFundItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal getSubFundItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegetSubFundItems = ((getSubFundItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    try {
                        return ((int)(this[this.tablegetSubFundItems.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FundID {
                get {
                    try {
                        return ((int)(this[this.tablegetSubFundItems.FundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundID\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.FundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tablegetSubFundItems.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tablegetSubFundItems.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablegetSubFundItems.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tablegetSubFundItems.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoterApproved {
                get {
                    try {
                        return ((bool)(this[this.tablegetSubFundItems.IsVoterApprovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVoterApproved\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.IsVoterApprovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommissionRate {
                get {
                    try {
                        return ((decimal)(this[this.tablegetSubFundItems.CommissionRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommissionRate\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.CommissionRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCash {
                get {
                    try {
                        return ((bool)(this[this.tablegetSubFundItems.IsCashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCash\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.IsCashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Factor {
                get {
                    try {
                        return ((decimal)(this[this.tablegetSubFundItems.FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factor\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SubFundTypeID {
                get {
                    try {
                        return ((byte)(this[this.tablegetSubFundItems.SubFundTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundTypeID\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.SubFundTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgencyID {
                get {
                    try {
                        return ((int)(this[this.tablegetSubFundItems.AgencyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyID\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.AgencyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tablegetSubFundItems.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AltPropTaxAcctID {
                get {
                    try {
                        return ((int)(this[this.tablegetSubFundItems.AltPropTaxAcctIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AltPropTaxAcctID\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.AltPropTaxAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchool {
                get {
                    try {
                        return ((bool)(this[this.tablegetSubFundItems.IsSchoolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSchool\' in table \'getSubFundItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegetSubFundItems.IsSchoolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tablegetSubFundItems.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tablegetSubFundItems.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundIDNull() {
                return this.IsNull(this.tablegetSubFundItems.FundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundIDNull() {
                this[this.tablegetSubFundItems.FundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tablegetSubFundItems.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tablegetSubFundItems.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tablegetSubFundItems.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tablegetSubFundItems.SubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablegetSubFundItems.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablegetSubFundItems.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tablegetSubFundItems.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tablegetSubFundItems.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVoterApprovedNull() {
                return this.IsNull(this.tablegetSubFundItems.IsVoterApprovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVoterApprovedNull() {
                this[this.tablegetSubFundItems.IsVoterApprovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionRateNull() {
                return this.IsNull(this.tablegetSubFundItems.CommissionRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionRateNull() {
                this[this.tablegetSubFundItems.CommissionRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCashNull() {
                return this.IsNull(this.tablegetSubFundItems.IsCashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCashNull() {
                this[this.tablegetSubFundItems.IsCashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactorNull() {
                return this.IsNull(this.tablegetSubFundItems.FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactorNull() {
                this[this.tablegetSubFundItems.FactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundTypeIDNull() {
                return this.IsNull(this.tablegetSubFundItems.SubFundTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundTypeIDNull() {
                this[this.tablegetSubFundItems.SubFundTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyIDNull() {
                return this.IsNull(this.tablegetSubFundItems.AgencyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyIDNull() {
                this[this.tablegetSubFundItems.AgencyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tablegetSubFundItems.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tablegetSubFundItems.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltPropTaxAcctIDNull() {
                return this.IsNull(this.tablegetSubFundItems.AltPropTaxAcctIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltPropTaxAcctIDNull() {
                this[this.tablegetSubFundItems.AltPropTaxAcctIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSchoolNull() {
                return this.IsNull(this.tablegetSubFundItems.IsSchoolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSchoolNull() {
                this[this.tablegetSubFundItems.IsSchoolColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConfiguredStateRow : global::System.Data.DataRow {
            
            private ConfiguredStateDataTable tableConfiguredState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConfiguredStateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConfiguredState = ((ConfiguredStateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableConfiguredState.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ConfiguredState\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfiguredState.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableConfiguredState.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableConfiguredState.StateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubFundDetailsRow : global::System.Data.DataRow {
            
            private SubFundDetailsDataTable tableSubFundDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubFundDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubFundDetails = ((SubFundDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FundID {
                get {
                    try {
                        return ((int)(this[this.tableSubFundDetails.FundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FundID\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.FundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fund {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.FundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fund\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.FundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubFundID {
                get {
                    try {
                        return ((int)(this[this.tableSubFundDetails.SubFundIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundID\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.SubFundIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFund {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.SubFundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFund\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.SubFundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableSubFundDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoterApproved {
                get {
                    try {
                        return ((bool)(this[this.tableSubFundDetails.IsVoterApprovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVoterApproved\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.IsVoterApprovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableSubFundDetails.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CommissionRate {
                get {
                    try {
                        return ((decimal)(this[this.tableSubFundDetails.CommissionRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommissionRate\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.CommissionRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Factor {
                get {
                    try {
                        return ((decimal)(this[this.tableSubFundDetails.FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factor\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SubFundTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableSubFundDetails.SubFundTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundTypeID\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.SubFundTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubFundType {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.SubFundTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubFundType\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.SubFundTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgencyID {
                get {
                    try {
                        return ((int)(this[this.tableSubFundDetails.AgencyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyID\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.AgencyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgencyName {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.AgencyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgencyName\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.AgencyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCash {
                get {
                    try {
                        return ((bool)(this[this.tableSubFundDetails.IsCashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCash\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.IsCashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableSubFundDetails.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DisbursementBalance {
                get {
                    try {
                        return ((decimal)(this[this.tableSubFundDetails.DisbursementBalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DisbursementBalance\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.DisbursementBalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AltPropTaxAcctID {
                get {
                    try {
                        return ((int)(this[this.tableSubFundDetails.AltPropTaxAcctIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AltPropTaxAcctID\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.AltPropTaxAcctIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AltPropTaxAcctName {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.AltPropTaxAcctNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AltPropTaxAcctName\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.AltPropTaxAcctNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchool {
                get {
                    try {
                        return ((bool)(this[this.tableSubFundDetails.IsSchoolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSchool\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.IsSchoolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolFieldLabel {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.SchoolFieldLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolFieldLabel\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.SchoolFieldLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableSubFundDetails.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.ContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.ContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SequenceNumber {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.SequenceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SequenceNumber\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.SequenceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolDistrictClass {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.SchoolDistrictClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolDistrictClass\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.SchoolDistrictClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CertificateLineNumber {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.CertificateLineNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CertificateLineNumber\' in table \'SubFundDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.CertificateLineNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BaseCode {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.BaseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseCode\' in table \'SubFundDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.BaseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnifiedLearningCommCode {
                get {
                    try {
                        return ((string)(this[this.tableSubFundDetails.UnifiedLearningCommCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnifiedLearningCommCode\' in table \'SubFundDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSubFundDetails.UnifiedLearningCommCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundIDNull() {
                return this.IsNull(this.tableSubFundDetails.FundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundIDNull() {
                this[this.tableSubFundDetails.FundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFundNull() {
                return this.IsNull(this.tableSubFundDetails.FundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFundNull() {
                this[this.tableSubFundDetails.FundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundIDNull() {
                return this.IsNull(this.tableSubFundDetails.SubFundIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundIDNull() {
                this[this.tableSubFundDetails.SubFundIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundNull() {
                return this.IsNull(this.tableSubFundDetails.SubFundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundNull() {
                this[this.tableSubFundDetails.SubFundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableSubFundDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableSubFundDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVoterApprovedNull() {
                return this.IsNull(this.tableSubFundDetails.IsVoterApprovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVoterApprovedNull() {
                this[this.tableSubFundDetails.IsVoterApprovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableSubFundDetails.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableSubFundDetails.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommissionRateNull() {
                return this.IsNull(this.tableSubFundDetails.CommissionRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommissionRateNull() {
                this[this.tableSubFundDetails.CommissionRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactorNull() {
                return this.IsNull(this.tableSubFundDetails.FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactorNull() {
                this[this.tableSubFundDetails.FactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSubFundDetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSubFundDetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundTypeIDNull() {
                return this.IsNull(this.tableSubFundDetails.SubFundTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundTypeIDNull() {
                this[this.tableSubFundDetails.SubFundTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFundTypeNull() {
                return this.IsNull(this.tableSubFundDetails.SubFundTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFundTypeNull() {
                this[this.tableSubFundDetails.SubFundTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyIDNull() {
                return this.IsNull(this.tableSubFundDetails.AgencyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyIDNull() {
                this[this.tableSubFundDetails.AgencyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyNameNull() {
                return this.IsNull(this.tableSubFundDetails.AgencyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyNameNull() {
                this[this.tableSubFundDetails.AgencyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCashNull() {
                return this.IsNull(this.tableSubFundDetails.IsCashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCashNull() {
                this[this.tableSubFundDetails.IsCashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableSubFundDetails.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableSubFundDetails.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisbursementBalanceNull() {
                return this.IsNull(this.tableSubFundDetails.DisbursementBalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisbursementBalanceNull() {
                this[this.tableSubFundDetails.DisbursementBalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltPropTaxAcctIDNull() {
                return this.IsNull(this.tableSubFundDetails.AltPropTaxAcctIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltPropTaxAcctIDNull() {
                this[this.tableSubFundDetails.AltPropTaxAcctIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltPropTaxAcctNameNull() {
                return this.IsNull(this.tableSubFundDetails.AltPropTaxAcctNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltPropTaxAcctNameNull() {
                this[this.tableSubFundDetails.AltPropTaxAcctNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSchoolNull() {
                return this.IsNull(this.tableSubFundDetails.IsSchoolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSchoolNull() {
                this[this.tableSubFundDetails.IsSchoolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolFieldLabelNull() {
                return this.IsNull(this.tableSubFundDetails.SchoolFieldLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolFieldLabelNull() {
                this[this.tableSubFundDetails.SchoolFieldLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableSubFundDetails.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableSubFundDetails.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactNull() {
                return this.IsNull(this.tableSubFundDetails.ContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactNull() {
                this[this.tableSubFundDetails.ContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequenceNumberNull() {
                return this.IsNull(this.tableSubFundDetails.SequenceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSequenceNumberNull() {
                this[this.tableSubFundDetails.SequenceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolDistrictClassNull() {
                return this.IsNull(this.tableSubFundDetails.SchoolDistrictClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolDistrictClassNull() {
                this[this.tableSubFundDetails.SchoolDistrictClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCertificateLineNumberNull() {
                return this.IsNull(this.tableSubFundDetails.CertificateLineNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCertificateLineNumberNull() {
                this[this.tableSubFundDetails.CertificateLineNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseCodeNull() {
                return this.IsNull(this.tableSubFundDetails.BaseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseCodeNull() {
                this[this.tableSubFundDetails.BaseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnifiedLearningCommCodeNull() {
                return this.IsNull(this.tableSubFundDetails.UnifiedLearningCommCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnifiedLearningCommCodeNull() {
                this[this.tableSubFundDetails.UnifiedLearningCommCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubFundDetailsnRowChangeEvent : global::System.EventArgs {
            
            private SubFundDetailsnRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsnRowChangeEvent(SubFundDetailsnRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDisbursementHistoryRowChangeEvent : global::System.EventArgs {
            
            private ListDisbursementHistoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDisbursementHistoryRowChangeEvent(ListDisbursementHistoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDisbursementHistoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSubFundIdsRowChangeEvent : global::System.EventArgs {
            
            private ListSubFundIdsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundIdsRowChangeEvent(ListSubFundIdsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundIdsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSubFundTypeRowChangeEvent : global::System.EventArgs {
            
            private ListSubFundTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundTypeRowChangeEvent(ListSubFundTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubFundTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class getSubFundItemsRowChangeEvent : global::System.EventArgs {
            
            private getSubFundItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getSubFundItemsRowChangeEvent(getSubFundItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public getSubFundItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConfiguredStateRowChangeEvent : global::System.EventArgs {
            
            private ConfiguredStateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRowChangeEvent(ConfiguredStateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConfiguredStateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubFundDetailsRowChangeEvent : global::System.EventArgs {
            
            private SubFundDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsRowChangeEvent(SubFundDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubFundDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591