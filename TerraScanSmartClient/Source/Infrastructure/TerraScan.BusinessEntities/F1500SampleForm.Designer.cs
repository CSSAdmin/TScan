//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F1500SampleForm")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F1500SampleForm : global::System.Data.DataSet {
        
        private FormSliceDetailsDataTable tableFormSliceDetails;
        
        private SampleFormApplicationIdTableDataTable tableSampleFormApplicationIdTable;
        
        private SampleFormMenuGroupTableDataTable tableSampleFormMenuGroupTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F1500SampleForm() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F1500SampleForm(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FormSliceDetails"] != null)) {
                    base.Tables.Add(new FormSliceDetailsDataTable(ds.Tables["FormSliceDetails"]));
                }
                if ((ds.Tables["SampleFormApplicationIdTable"] != null)) {
                    base.Tables.Add(new SampleFormApplicationIdTableDataTable(ds.Tables["SampleFormApplicationIdTable"]));
                }
                if ((ds.Tables["SampleFormMenuGroupTable"] != null)) {
                    base.Tables.Add(new SampleFormMenuGroupTableDataTable(ds.Tables["SampleFormMenuGroupTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormSliceDetailsDataTable FormSliceDetails {
            get {
                return this.tableFormSliceDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SampleFormApplicationIdTableDataTable SampleFormApplicationIdTable {
            get {
                return this.tableSampleFormApplicationIdTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SampleFormMenuGroupTableDataTable SampleFormMenuGroupTable {
            get {
                return this.tableSampleFormMenuGroupTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F1500SampleForm cln = ((F1500SampleForm)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FormSliceDetails"] != null)) {
                    base.Tables.Add(new FormSliceDetailsDataTable(ds.Tables["FormSliceDetails"]));
                }
                if ((ds.Tables["SampleFormApplicationIdTable"] != null)) {
                    base.Tables.Add(new SampleFormApplicationIdTableDataTable(ds.Tables["SampleFormApplicationIdTable"]));
                }
                if ((ds.Tables["SampleFormMenuGroupTable"] != null)) {
                    base.Tables.Add(new SampleFormMenuGroupTableDataTable(ds.Tables["SampleFormMenuGroupTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFormSliceDetails = ((FormSliceDetailsDataTable)(base.Tables["FormSliceDetails"]));
            if ((initTable == true)) {
                if ((this.tableFormSliceDetails != null)) {
                    this.tableFormSliceDetails.InitVars();
                }
            }
            this.tableSampleFormApplicationIdTable = ((SampleFormApplicationIdTableDataTable)(base.Tables["SampleFormApplicationIdTable"]));
            if ((initTable == true)) {
                if ((this.tableSampleFormApplicationIdTable != null)) {
                    this.tableSampleFormApplicationIdTable.InitVars();
                }
            }
            this.tableSampleFormMenuGroupTable = ((SampleFormMenuGroupTableDataTable)(base.Tables["SampleFormMenuGroupTable"]));
            if ((initTable == true)) {
                if ((this.tableSampleFormMenuGroupTable != null)) {
                    this.tableSampleFormMenuGroupTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F1500SampleForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F1500SampleForm.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFormSliceDetails = new FormSliceDetailsDataTable();
            base.Tables.Add(this.tableFormSliceDetails);
            this.tableSampleFormApplicationIdTable = new SampleFormApplicationIdTableDataTable();
            base.Tables.Add(this.tableSampleFormApplicationIdTable);
            this.tableSampleFormMenuGroupTable = new SampleFormMenuGroupTableDataTable();
            base.Tables.Add(this.tableSampleFormMenuGroupTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormSliceDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSampleFormApplicationIdTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSampleFormMenuGroupTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F1500SampleForm ds = new F1500SampleForm();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void FormSliceDetailsRowChangeEventHandler(object sender, FormSliceDetailsRowChangeEvent e);
        
        public delegate void SampleFormApplicationIdTableRowChangeEventHandler(object sender, SampleFormApplicationIdTableRowChangeEvent e);
        
        public delegate void SampleFormMenuGroupTableRowChangeEventHandler(object sender, SampleFormMenuGroupTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormSliceDetailsDataTable : global::System.Data.TypedTableBase<FormSliceDetailsRow> {
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnFormFile;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMenuName;
            
            private global::System.Data.DataColumn columnWebHeight;
            
            private global::System.Data.DataColumn columnMenuOrder;
            
            private global::System.Data.DataColumn columnMenuGroupID;
            
            private global::System.Data.DataColumn columnReport;
            
            private global::System.Data.DataColumn columnApplicationID;
            
            private global::System.Data.DataColumn columnGroupID;
            
            private global::System.Data.DataColumn columnIsPermissionMenu;
            
            private global::System.Data.DataColumn columnIsPermissionOpen;
            
            private global::System.Data.DataColumn columnIsPermissionAdd;
            
            private global::System.Data.DataColumn columnIsPermissionEdit;
            
            private global::System.Data.DataColumn columnIsPermissionDelete;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceDetailsDataTable() {
                this.TableName = "FormSliceDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSliceDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormSliceDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormFileColumn {
                get {
                    return this.columnFormFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuNameColumn {
                get {
                    return this.columnMenuName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebHeightColumn {
                get {
                    return this.columnWebHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuOrderColumn {
                get {
                    return this.columnMenuOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuGroupIDColumn {
                get {
                    return this.columnMenuGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportColumn {
                get {
                    return this.columnReport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplicationIDColumn {
                get {
                    return this.columnApplicationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionMenuColumn {
                get {
                    return this.columnIsPermissionMenu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionOpenColumn {
                get {
                    return this.columnIsPermissionOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionAddColumn {
                get {
                    return this.columnIsPermissionAdd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionEditColumn {
                get {
                    return this.columnIsPermissionEdit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionDeleteColumn {
                get {
                    return this.columnIsPermissionDelete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceDetailsRow this[int index] {
                get {
                    return ((FormSliceDetailsRow)(this.Rows[index]));
                }
            }
            
            public event FormSliceDetailsRowChangeEventHandler FormSliceDetailsRowChanging;
            
            public event FormSliceDetailsRowChangeEventHandler FormSliceDetailsRowChanged;
            
            public event FormSliceDetailsRowChangeEventHandler FormSliceDetailsRowDeleting;
            
            public event FormSliceDetailsRowChangeEventHandler FormSliceDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormSliceDetailsRow(FormSliceDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceDetailsRow AddFormSliceDetailsRow(int Form, string FormFile, string Description, string MenuName, int WebHeight, int MenuOrder, int MenuGroupID, int Report, int ApplicationID, int GroupID, bool IsPermissionMenu, bool IsPermissionOpen, bool IsPermissionAdd, bool IsPermissionEdit, bool IsPermissionDelete) {
                FormSliceDetailsRow rowFormSliceDetailsRow = ((FormSliceDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Form,
                        FormFile,
                        Description,
                        MenuName,
                        WebHeight,
                        MenuOrder,
                        MenuGroupID,
                        Report,
                        ApplicationID,
                        GroupID,
                        IsPermissionMenu,
                        IsPermissionOpen,
                        IsPermissionAdd,
                        IsPermissionEdit,
                        IsPermissionDelete};
                rowFormSliceDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFormSliceDetailsRow);
                return rowFormSliceDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FormSliceDetailsDataTable cln = ((FormSliceDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FormSliceDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnForm = base.Columns["Form"];
                this.columnFormFile = base.Columns["FormFile"];
                this.columnDescription = base.Columns["Description"];
                this.columnMenuName = base.Columns["MenuName"];
                this.columnWebHeight = base.Columns["WebHeight"];
                this.columnMenuOrder = base.Columns["MenuOrder"];
                this.columnMenuGroupID = base.Columns["MenuGroupID"];
                this.columnReport = base.Columns["Report"];
                this.columnApplicationID = base.Columns["ApplicationID"];
                this.columnGroupID = base.Columns["GroupID"];
                this.columnIsPermissionMenu = base.Columns["IsPermissionMenu"];
                this.columnIsPermissionOpen = base.Columns["IsPermissionOpen"];
                this.columnIsPermissionAdd = base.Columns["IsPermissionAdd"];
                this.columnIsPermissionEdit = base.Columns["IsPermissionEdit"];
                this.columnIsPermissionDelete = base.Columns["IsPermissionDelete"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnFormFile = new global::System.Data.DataColumn("FormFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormFile);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMenuName = new global::System.Data.DataColumn("MenuName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuName);
                this.columnWebHeight = new global::System.Data.DataColumn("WebHeight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebHeight);
                this.columnMenuOrder = new global::System.Data.DataColumn("MenuOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuOrder);
                this.columnMenuGroupID = new global::System.Data.DataColumn("MenuGroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuGroupID);
                this.columnReport = new global::System.Data.DataColumn("Report", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport);
                this.columnApplicationID = new global::System.Data.DataColumn("ApplicationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplicationID);
                this.columnGroupID = new global::System.Data.DataColumn("GroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupID);
                this.columnIsPermissionMenu = new global::System.Data.DataColumn("IsPermissionMenu", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionMenu);
                this.columnIsPermissionOpen = new global::System.Data.DataColumn("IsPermissionOpen", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionOpen);
                this.columnIsPermissionAdd = new global::System.Data.DataColumn("IsPermissionAdd", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionAdd);
                this.columnIsPermissionEdit = new global::System.Data.DataColumn("IsPermissionEdit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionEdit);
                this.columnIsPermissionDelete = new global::System.Data.DataColumn("IsPermissionDelete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionDelete);
                this.columnFormFile.MaxLength = 50;
                this.columnDescription.MaxLength = 50;
                this.columnMenuName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceDetailsRow NewFormSliceDetailsRow() {
                return ((FormSliceDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FormSliceDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FormSliceDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormSliceDetailsRowChanged != null)) {
                    this.FormSliceDetailsRowChanged(this, new FormSliceDetailsRowChangeEvent(((FormSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormSliceDetailsRowChanging != null)) {
                    this.FormSliceDetailsRowChanging(this, new FormSliceDetailsRowChangeEvent(((FormSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormSliceDetailsRowDeleted != null)) {
                    this.FormSliceDetailsRowDeleted(this, new FormSliceDetailsRowChangeEvent(((FormSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormSliceDetailsRowDeleting != null)) {
                    this.FormSliceDetailsRowDeleting(this, new FormSliceDetailsRowChangeEvent(((FormSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormSliceDetailsRow(FormSliceDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1500SampleForm ds = new F1500SampleForm();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormSliceDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SampleFormApplicationIdTableDataTable : global::System.Data.TypedTableBase<SampleFormApplicationIdTableRow> {
            
            private global::System.Data.DataColumn columnApplicationID;
            
            private global::System.Data.DataColumn columnApplication;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormApplicationIdTableDataTable() {
                this.TableName = "SampleFormApplicationIdTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SampleFormApplicationIdTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SampleFormApplicationIdTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplicationIDColumn {
                get {
                    return this.columnApplicationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplicationColumn {
                get {
                    return this.columnApplication;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormApplicationIdTableRow this[int index] {
                get {
                    return ((SampleFormApplicationIdTableRow)(this.Rows[index]));
                }
            }
            
            public event SampleFormApplicationIdTableRowChangeEventHandler SampleFormApplicationIdTableRowChanging;
            
            public event SampleFormApplicationIdTableRowChangeEventHandler SampleFormApplicationIdTableRowChanged;
            
            public event SampleFormApplicationIdTableRowChangeEventHandler SampleFormApplicationIdTableRowDeleting;
            
            public event SampleFormApplicationIdTableRowChangeEventHandler SampleFormApplicationIdTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSampleFormApplicationIdTableRow(SampleFormApplicationIdTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormApplicationIdTableRow AddSampleFormApplicationIdTableRow(byte ApplicationID, string Application) {
                SampleFormApplicationIdTableRow rowSampleFormApplicationIdTableRow = ((SampleFormApplicationIdTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ApplicationID,
                        Application};
                rowSampleFormApplicationIdTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSampleFormApplicationIdTableRow);
                return rowSampleFormApplicationIdTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SampleFormApplicationIdTableDataTable cln = ((SampleFormApplicationIdTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SampleFormApplicationIdTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnApplicationID = base.Columns["ApplicationID"];
                this.columnApplication = base.Columns["Application"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnApplicationID = new global::System.Data.DataColumn("ApplicationID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplicationID);
                this.columnApplication = new global::System.Data.DataColumn("Application", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplication);
                this.columnApplicationID.AllowDBNull = false;
                this.columnApplication.AllowDBNull = false;
                this.columnApplication.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormApplicationIdTableRow NewSampleFormApplicationIdTableRow() {
                return ((SampleFormApplicationIdTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SampleFormApplicationIdTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SampleFormApplicationIdTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SampleFormApplicationIdTableRowChanged != null)) {
                    this.SampleFormApplicationIdTableRowChanged(this, new SampleFormApplicationIdTableRowChangeEvent(((SampleFormApplicationIdTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SampleFormApplicationIdTableRowChanging != null)) {
                    this.SampleFormApplicationIdTableRowChanging(this, new SampleFormApplicationIdTableRowChangeEvent(((SampleFormApplicationIdTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SampleFormApplicationIdTableRowDeleted != null)) {
                    this.SampleFormApplicationIdTableRowDeleted(this, new SampleFormApplicationIdTableRowChangeEvent(((SampleFormApplicationIdTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SampleFormApplicationIdTableRowDeleting != null)) {
                    this.SampleFormApplicationIdTableRowDeleting(this, new SampleFormApplicationIdTableRowChangeEvent(((SampleFormApplicationIdTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSampleFormApplicationIdTableRow(SampleFormApplicationIdTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1500SampleForm ds = new F1500SampleForm();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SampleFormApplicationIdTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SampleFormMenuGroupTableDataTable : global::System.Data.TypedTableBase<SampleFormMenuGroupTableRow> {
            
            private global::System.Data.DataColumn columnMenuGroupID;
            
            private global::System.Data.DataColumn columnMenuGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormMenuGroupTableDataTable() {
                this.TableName = "SampleFormMenuGroupTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SampleFormMenuGroupTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SampleFormMenuGroupTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuGroupIDColumn {
                get {
                    return this.columnMenuGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuGroupColumn {
                get {
                    return this.columnMenuGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormMenuGroupTableRow this[int index] {
                get {
                    return ((SampleFormMenuGroupTableRow)(this.Rows[index]));
                }
            }
            
            public event SampleFormMenuGroupTableRowChangeEventHandler SampleFormMenuGroupTableRowChanging;
            
            public event SampleFormMenuGroupTableRowChangeEventHandler SampleFormMenuGroupTableRowChanged;
            
            public event SampleFormMenuGroupTableRowChangeEventHandler SampleFormMenuGroupTableRowDeleting;
            
            public event SampleFormMenuGroupTableRowChangeEventHandler SampleFormMenuGroupTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSampleFormMenuGroupTableRow(SampleFormMenuGroupTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormMenuGroupTableRow AddSampleFormMenuGroupTableRow(short MenuGroupID, string MenuGroup) {
                SampleFormMenuGroupTableRow rowSampleFormMenuGroupTableRow = ((SampleFormMenuGroupTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MenuGroupID,
                        MenuGroup};
                rowSampleFormMenuGroupTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSampleFormMenuGroupTableRow);
                return rowSampleFormMenuGroupTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SampleFormMenuGroupTableDataTable cln = ((SampleFormMenuGroupTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SampleFormMenuGroupTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMenuGroupID = base.Columns["MenuGroupID"];
                this.columnMenuGroup = base.Columns["MenuGroup"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMenuGroupID = new global::System.Data.DataColumn("MenuGroupID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuGroupID);
                this.columnMenuGroup = new global::System.Data.DataColumn("MenuGroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuGroup);
                this.columnMenuGroupID.AllowDBNull = false;
                this.columnMenuGroup.AllowDBNull = false;
                this.columnMenuGroup.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormMenuGroupTableRow NewSampleFormMenuGroupTableRow() {
                return ((SampleFormMenuGroupTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SampleFormMenuGroupTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SampleFormMenuGroupTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SampleFormMenuGroupTableRowChanged != null)) {
                    this.SampleFormMenuGroupTableRowChanged(this, new SampleFormMenuGroupTableRowChangeEvent(((SampleFormMenuGroupTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SampleFormMenuGroupTableRowChanging != null)) {
                    this.SampleFormMenuGroupTableRowChanging(this, new SampleFormMenuGroupTableRowChangeEvent(((SampleFormMenuGroupTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SampleFormMenuGroupTableRowDeleted != null)) {
                    this.SampleFormMenuGroupTableRowDeleted(this, new SampleFormMenuGroupTableRowChangeEvent(((SampleFormMenuGroupTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SampleFormMenuGroupTableRowDeleting != null)) {
                    this.SampleFormMenuGroupTableRowDeleting(this, new SampleFormMenuGroupTableRowChangeEvent(((SampleFormMenuGroupTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSampleFormMenuGroupTableRow(SampleFormMenuGroupTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F1500SampleForm ds = new F1500SampleForm();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SampleFormMenuGroupTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormSliceDetailsRow : global::System.Data.DataRow {
            
            private FormSliceDetailsDataTable tableFormSliceDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSliceDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormSliceDetails = ((FormSliceDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceDetails.FormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Form\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormFile {
                get {
                    try {
                        return ((string)(this[this.tableFormSliceDetails.FormFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormFile\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.FormFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableFormSliceDetails.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MenuName {
                get {
                    try {
                        return ((string)(this[this.tableFormSliceDetails.MenuNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MenuName\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.MenuNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebHeight {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceDetails.WebHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WebHeight\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.WebHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MenuOrder {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceDetails.MenuOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MenuOrder\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.MenuOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MenuGroupID {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceDetails.MenuGroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MenuGroupID\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.MenuGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Report {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceDetails.ReportColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.ReportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApplicationID {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceDetails.ApplicationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApplicationID\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.ApplicationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupID {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceDetails.GroupIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupID\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.GroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionMenu {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceDetails.IsPermissionMenuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionMenu\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.IsPermissionMenuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionOpen {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceDetails.IsPermissionOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionOpen\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.IsPermissionOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionAdd {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceDetails.IsPermissionAddColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionAdd\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.IsPermissionAddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionEdit {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceDetails.IsPermissionEditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionEdit\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.IsPermissionEditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionDelete {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceDetails.IsPermissionDeleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionDelete\' in table \'FormSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceDetails.IsPermissionDeleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormNull() {
                return this.IsNull(this.tableFormSliceDetails.FormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormNull() {
                this[this.tableFormSliceDetails.FormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormFileNull() {
                return this.IsNull(this.tableFormSliceDetails.FormFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormFileNull() {
                this[this.tableFormSliceDetails.FormFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableFormSliceDetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableFormSliceDetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMenuNameNull() {
                return this.IsNull(this.tableFormSliceDetails.MenuNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMenuNameNull() {
                this[this.tableFormSliceDetails.MenuNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWebHeightNull() {
                return this.IsNull(this.tableFormSliceDetails.WebHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWebHeightNull() {
                this[this.tableFormSliceDetails.WebHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMenuOrderNull() {
                return this.IsNull(this.tableFormSliceDetails.MenuOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMenuOrderNull() {
                this[this.tableFormSliceDetails.MenuOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMenuGroupIDNull() {
                return this.IsNull(this.tableFormSliceDetails.MenuGroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMenuGroupIDNull() {
                this[this.tableFormSliceDetails.MenuGroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportNull() {
                return this.IsNull(this.tableFormSliceDetails.ReportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportNull() {
                this[this.tableFormSliceDetails.ReportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplicationIDNull() {
                return this.IsNull(this.tableFormSliceDetails.ApplicationIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplicationIDNull() {
                this[this.tableFormSliceDetails.ApplicationIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupIDNull() {
                return this.IsNull(this.tableFormSliceDetails.GroupIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupIDNull() {
                this[this.tableFormSliceDetails.GroupIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionMenuNull() {
                return this.IsNull(this.tableFormSliceDetails.IsPermissionMenuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionMenuNull() {
                this[this.tableFormSliceDetails.IsPermissionMenuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionOpenNull() {
                return this.IsNull(this.tableFormSliceDetails.IsPermissionOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionOpenNull() {
                this[this.tableFormSliceDetails.IsPermissionOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionAddNull() {
                return this.IsNull(this.tableFormSliceDetails.IsPermissionAddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionAddNull() {
                this[this.tableFormSliceDetails.IsPermissionAddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionEditNull() {
                return this.IsNull(this.tableFormSliceDetails.IsPermissionEditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionEditNull() {
                this[this.tableFormSliceDetails.IsPermissionEditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionDeleteNull() {
                return this.IsNull(this.tableFormSliceDetails.IsPermissionDeleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionDeleteNull() {
                this[this.tableFormSliceDetails.IsPermissionDeleteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SampleFormApplicationIdTableRow : global::System.Data.DataRow {
            
            private SampleFormApplicationIdTableDataTable tableSampleFormApplicationIdTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SampleFormApplicationIdTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSampleFormApplicationIdTable = ((SampleFormApplicationIdTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ApplicationID {
                get {
                    return ((byte)(this[this.tableSampleFormApplicationIdTable.ApplicationIDColumn]));
                }
                set {
                    this[this.tableSampleFormApplicationIdTable.ApplicationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Application {
                get {
                    return ((string)(this[this.tableSampleFormApplicationIdTable.ApplicationColumn]));
                }
                set {
                    this[this.tableSampleFormApplicationIdTable.ApplicationColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SampleFormMenuGroupTableRow : global::System.Data.DataRow {
            
            private SampleFormMenuGroupTableDataTable tableSampleFormMenuGroupTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SampleFormMenuGroupTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSampleFormMenuGroupTable = ((SampleFormMenuGroupTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short MenuGroupID {
                get {
                    return ((short)(this[this.tableSampleFormMenuGroupTable.MenuGroupIDColumn]));
                }
                set {
                    this[this.tableSampleFormMenuGroupTable.MenuGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MenuGroup {
                get {
                    return ((string)(this[this.tableSampleFormMenuGroupTable.MenuGroupColumn]));
                }
                set {
                    this[this.tableSampleFormMenuGroupTable.MenuGroupColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormSliceDetailsRowChangeEvent : global::System.EventArgs {
            
            private FormSliceDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceDetailsRowChangeEvent(FormSliceDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SampleFormApplicationIdTableRowChangeEvent : global::System.EventArgs {
            
            private SampleFormApplicationIdTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormApplicationIdTableRowChangeEvent(SampleFormApplicationIdTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormApplicationIdTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SampleFormMenuGroupTableRowChangeEvent : global::System.EventArgs {
            
            private SampleFormMenuGroupTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormMenuGroupTableRowChangeEvent(SampleFormMenuGroupTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SampleFormMenuGroupTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591