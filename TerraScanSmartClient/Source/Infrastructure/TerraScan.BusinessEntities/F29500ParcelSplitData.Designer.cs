//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F29500ParcelSplitData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F29500ParcelSplitData : global::System.Data.DataSet {
        
        private ListParcelSplitObjectDataTable tableListParcelSplitObject;
        
        private ListParcelSplitValueSlicesDataTable tableListParcelSplitValueSlices;
        
        private ListSplitObjectDataTable tableListSplitObject;
        
        private ListSplitValuseSliceDataTable tableListSplitValuseSlice;
        
        private ListSplitDefinitionHeaderDataTable tableListSplitDefinitionHeader;
        
        private ListValueSliceSavedValueDataTable tableListValueSliceSavedValue;
        
        private ListObjectSavedValueDataTable tableListObjectSavedValue;
        
        private ListParcelSplitCropDataTable tableListParcelSplitCrop;
        
        private ListSplitCropDataTable tableListSplitCrop;
        
        private ListCropSavedValueDataTable tableListCropSavedValue;
        
        private ListSplitHeaderDetailDataTable tableListSplitHeaderDetail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F29500ParcelSplitData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F29500ParcelSplitData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListParcelSplitObject"] != null)) {
                    base.Tables.Add(new ListParcelSplitObjectDataTable(ds.Tables["ListParcelSplitObject"]));
                }
                if ((ds.Tables["ListParcelSplitValueSlices"] != null)) {
                    base.Tables.Add(new ListParcelSplitValueSlicesDataTable(ds.Tables["ListParcelSplitValueSlices"]));
                }
                if ((ds.Tables["ListSplitObject"] != null)) {
                    base.Tables.Add(new ListSplitObjectDataTable(ds.Tables["ListSplitObject"]));
                }
                if ((ds.Tables["ListSplitValuseSlice"] != null)) {
                    base.Tables.Add(new ListSplitValuseSliceDataTable(ds.Tables["ListSplitValuseSlice"]));
                }
                if ((ds.Tables["ListSplitDefinitionHeader"] != null)) {
                    base.Tables.Add(new ListSplitDefinitionHeaderDataTable(ds.Tables["ListSplitDefinitionHeader"]));
                }
                if ((ds.Tables["ListValueSliceSavedValue"] != null)) {
                    base.Tables.Add(new ListValueSliceSavedValueDataTable(ds.Tables["ListValueSliceSavedValue"]));
                }
                if ((ds.Tables["ListObjectSavedValue"] != null)) {
                    base.Tables.Add(new ListObjectSavedValueDataTable(ds.Tables["ListObjectSavedValue"]));
                }
                if ((ds.Tables["ListParcelSplitCrop"] != null)) {
                    base.Tables.Add(new ListParcelSplitCropDataTable(ds.Tables["ListParcelSplitCrop"]));
                }
                if ((ds.Tables["ListSplitCrop"] != null)) {
                    base.Tables.Add(new ListSplitCropDataTable(ds.Tables["ListSplitCrop"]));
                }
                if ((ds.Tables["ListCropSavedValue"] != null)) {
                    base.Tables.Add(new ListCropSavedValueDataTable(ds.Tables["ListCropSavedValue"]));
                }
                if ((ds.Tables["ListSplitHeaderDetail"] != null)) {
                    base.Tables.Add(new ListSplitHeaderDetailDataTable(ds.Tables["ListSplitHeaderDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListParcelSplitObjectDataTable ListParcelSplitObject {
            get {
                return this.tableListParcelSplitObject;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListParcelSplitValueSlicesDataTable ListParcelSplitValueSlices {
            get {
                return this.tableListParcelSplitValueSlices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSplitObjectDataTable ListSplitObject {
            get {
                return this.tableListSplitObject;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSplitValuseSliceDataTable ListSplitValuseSlice {
            get {
                return this.tableListSplitValuseSlice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSplitDefinitionHeaderDataTable ListSplitDefinitionHeader {
            get {
                return this.tableListSplitDefinitionHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListValueSliceSavedValueDataTable ListValueSliceSavedValue {
            get {
                return this.tableListValueSliceSavedValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListObjectSavedValueDataTable ListObjectSavedValue {
            get {
                return this.tableListObjectSavedValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListParcelSplitCropDataTable ListParcelSplitCrop {
            get {
                return this.tableListParcelSplitCrop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSplitCropDataTable ListSplitCrop {
            get {
                return this.tableListSplitCrop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListCropSavedValueDataTable ListCropSavedValue {
            get {
                return this.tableListCropSavedValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSplitHeaderDetailDataTable ListSplitHeaderDetail {
            get {
                return this.tableListSplitHeaderDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F29500ParcelSplitData cln = ((F29500ParcelSplitData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListParcelSplitObject"] != null)) {
                    base.Tables.Add(new ListParcelSplitObjectDataTable(ds.Tables["ListParcelSplitObject"]));
                }
                if ((ds.Tables["ListParcelSplitValueSlices"] != null)) {
                    base.Tables.Add(new ListParcelSplitValueSlicesDataTable(ds.Tables["ListParcelSplitValueSlices"]));
                }
                if ((ds.Tables["ListSplitObject"] != null)) {
                    base.Tables.Add(new ListSplitObjectDataTable(ds.Tables["ListSplitObject"]));
                }
                if ((ds.Tables["ListSplitValuseSlice"] != null)) {
                    base.Tables.Add(new ListSplitValuseSliceDataTable(ds.Tables["ListSplitValuseSlice"]));
                }
                if ((ds.Tables["ListSplitDefinitionHeader"] != null)) {
                    base.Tables.Add(new ListSplitDefinitionHeaderDataTable(ds.Tables["ListSplitDefinitionHeader"]));
                }
                if ((ds.Tables["ListValueSliceSavedValue"] != null)) {
                    base.Tables.Add(new ListValueSliceSavedValueDataTable(ds.Tables["ListValueSliceSavedValue"]));
                }
                if ((ds.Tables["ListObjectSavedValue"] != null)) {
                    base.Tables.Add(new ListObjectSavedValueDataTable(ds.Tables["ListObjectSavedValue"]));
                }
                if ((ds.Tables["ListParcelSplitCrop"] != null)) {
                    base.Tables.Add(new ListParcelSplitCropDataTable(ds.Tables["ListParcelSplitCrop"]));
                }
                if ((ds.Tables["ListSplitCrop"] != null)) {
                    base.Tables.Add(new ListSplitCropDataTable(ds.Tables["ListSplitCrop"]));
                }
                if ((ds.Tables["ListCropSavedValue"] != null)) {
                    base.Tables.Add(new ListCropSavedValueDataTable(ds.Tables["ListCropSavedValue"]));
                }
                if ((ds.Tables["ListSplitHeaderDetail"] != null)) {
                    base.Tables.Add(new ListSplitHeaderDetailDataTable(ds.Tables["ListSplitHeaderDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListParcelSplitObject = ((ListParcelSplitObjectDataTable)(base.Tables["ListParcelSplitObject"]));
            if ((initTable == true)) {
                if ((this.tableListParcelSplitObject != null)) {
                    this.tableListParcelSplitObject.InitVars();
                }
            }
            this.tableListParcelSplitValueSlices = ((ListParcelSplitValueSlicesDataTable)(base.Tables["ListParcelSplitValueSlices"]));
            if ((initTable == true)) {
                if ((this.tableListParcelSplitValueSlices != null)) {
                    this.tableListParcelSplitValueSlices.InitVars();
                }
            }
            this.tableListSplitObject = ((ListSplitObjectDataTable)(base.Tables["ListSplitObject"]));
            if ((initTable == true)) {
                if ((this.tableListSplitObject != null)) {
                    this.tableListSplitObject.InitVars();
                }
            }
            this.tableListSplitValuseSlice = ((ListSplitValuseSliceDataTable)(base.Tables["ListSplitValuseSlice"]));
            if ((initTable == true)) {
                if ((this.tableListSplitValuseSlice != null)) {
                    this.tableListSplitValuseSlice.InitVars();
                }
            }
            this.tableListSplitDefinitionHeader = ((ListSplitDefinitionHeaderDataTable)(base.Tables["ListSplitDefinitionHeader"]));
            if ((initTable == true)) {
                if ((this.tableListSplitDefinitionHeader != null)) {
                    this.tableListSplitDefinitionHeader.InitVars();
                }
            }
            this.tableListValueSliceSavedValue = ((ListValueSliceSavedValueDataTable)(base.Tables["ListValueSliceSavedValue"]));
            if ((initTable == true)) {
                if ((this.tableListValueSliceSavedValue != null)) {
                    this.tableListValueSliceSavedValue.InitVars();
                }
            }
            this.tableListObjectSavedValue = ((ListObjectSavedValueDataTable)(base.Tables["ListObjectSavedValue"]));
            if ((initTable == true)) {
                if ((this.tableListObjectSavedValue != null)) {
                    this.tableListObjectSavedValue.InitVars();
                }
            }
            this.tableListParcelSplitCrop = ((ListParcelSplitCropDataTable)(base.Tables["ListParcelSplitCrop"]));
            if ((initTable == true)) {
                if ((this.tableListParcelSplitCrop != null)) {
                    this.tableListParcelSplitCrop.InitVars();
                }
            }
            this.tableListSplitCrop = ((ListSplitCropDataTable)(base.Tables["ListSplitCrop"]));
            if ((initTable == true)) {
                if ((this.tableListSplitCrop != null)) {
                    this.tableListSplitCrop.InitVars();
                }
            }
            this.tableListCropSavedValue = ((ListCropSavedValueDataTable)(base.Tables["ListCropSavedValue"]));
            if ((initTable == true)) {
                if ((this.tableListCropSavedValue != null)) {
                    this.tableListCropSavedValue.InitVars();
                }
            }
            this.tableListSplitHeaderDetail = ((ListSplitHeaderDetailDataTable)(base.Tables["ListSplitHeaderDetail"]));
            if ((initTable == true)) {
                if ((this.tableListSplitHeaderDetail != null)) {
                    this.tableListSplitHeaderDetail.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F29500ParcelSplitData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F29500ParcelSplitData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListParcelSplitObject = new ListParcelSplitObjectDataTable();
            base.Tables.Add(this.tableListParcelSplitObject);
            this.tableListParcelSplitValueSlices = new ListParcelSplitValueSlicesDataTable();
            base.Tables.Add(this.tableListParcelSplitValueSlices);
            this.tableListSplitObject = new ListSplitObjectDataTable();
            base.Tables.Add(this.tableListSplitObject);
            this.tableListSplitValuseSlice = new ListSplitValuseSliceDataTable();
            base.Tables.Add(this.tableListSplitValuseSlice);
            this.tableListSplitDefinitionHeader = new ListSplitDefinitionHeaderDataTable();
            base.Tables.Add(this.tableListSplitDefinitionHeader);
            this.tableListValueSliceSavedValue = new ListValueSliceSavedValueDataTable();
            base.Tables.Add(this.tableListValueSliceSavedValue);
            this.tableListObjectSavedValue = new ListObjectSavedValueDataTable();
            base.Tables.Add(this.tableListObjectSavedValue);
            this.tableListParcelSplitCrop = new ListParcelSplitCropDataTable();
            base.Tables.Add(this.tableListParcelSplitCrop);
            this.tableListSplitCrop = new ListSplitCropDataTable();
            base.Tables.Add(this.tableListSplitCrop);
            this.tableListCropSavedValue = new ListCropSavedValueDataTable();
            base.Tables.Add(this.tableListCropSavedValue);
            this.tableListSplitHeaderDetail = new ListSplitHeaderDetailDataTable();
            base.Tables.Add(this.tableListSplitHeaderDetail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListParcelSplitObject() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListParcelSplitValueSlices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSplitObject() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSplitValuseSlice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSplitDefinitionHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListValueSliceSavedValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListObjectSavedValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListParcelSplitCrop() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSplitCrop() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListCropSavedValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSplitHeaderDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F29500ParcelSplitData ds = new F29500ParcelSplitData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListParcelSplitObjectRowChangeEventHandler(object sender, ListParcelSplitObjectRowChangeEvent e);
        
        public delegate void ListParcelSplitValueSlicesRowChangeEventHandler(object sender, ListParcelSplitValueSlicesRowChangeEvent e);
        
        public delegate void ListSplitObjectRowChangeEventHandler(object sender, ListSplitObjectRowChangeEvent e);
        
        public delegate void ListSplitValuseSliceRowChangeEventHandler(object sender, ListSplitValuseSliceRowChangeEvent e);
        
        public delegate void ListSplitDefinitionHeaderRowChangeEventHandler(object sender, ListSplitDefinitionHeaderRowChangeEvent e);
        
        public delegate void ListValueSliceSavedValueRowChangeEventHandler(object sender, ListValueSliceSavedValueRowChangeEvent e);
        
        public delegate void ListObjectSavedValueRowChangeEventHandler(object sender, ListObjectSavedValueRowChangeEvent e);
        
        public delegate void ListParcelSplitCropRowChangeEventHandler(object sender, ListParcelSplitCropRowChangeEvent e);
        
        public delegate void ListSplitCropRowChangeEventHandler(object sender, ListSplitCropRowChangeEvent e);
        
        public delegate void ListCropSavedValueRowChangeEventHandler(object sender, ListCropSavedValueRowChangeEvent e);
        
        public delegate void ListSplitHeaderDetailRowChangeEventHandler(object sender, ListSplitHeaderDetailRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListParcelSplitObjectDataTable : global::System.Data.TypedTableBase<ListParcelSplitObjectRow> {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnObjectTypeID;
            
            private global::System.Data.DataColumn columnObject;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIsRoll;
            
            private global::System.Data.DataColumn columnIsValue;
            
            private global::System.Data.DataColumn columnVSCount;
            
            private global::System.Data.DataColumn columnValueString;
            
            private global::System.Data.DataColumn columnRollString;
            
            private global::System.Data.DataColumn columnObjectString;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitObjectDataTable() {
                this.TableName = "ListParcelSplitObject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelSplitObjectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListParcelSplitObjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectTypeIDColumn {
                get {
                    return this.columnObjectTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectColumn {
                get {
                    return this.columnObject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRollColumn {
                get {
                    return this.columnIsRoll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValueColumn {
                get {
                    return this.columnIsValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSCountColumn {
                get {
                    return this.columnVSCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueStringColumn {
                get {
                    return this.columnValueString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollStringColumn {
                get {
                    return this.columnRollString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectStringColumn {
                get {
                    return this.columnObjectString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitObjectRow this[int index] {
                get {
                    return ((ListParcelSplitObjectRow)(this.Rows[index]));
                }
            }
            
            public event ListParcelSplitObjectRowChangeEventHandler ListParcelSplitObjectRowChanging;
            
            public event ListParcelSplitObjectRowChangeEventHandler ListParcelSplitObjectRowChanged;
            
            public event ListParcelSplitObjectRowChangeEventHandler ListParcelSplitObjectRowDeleting;
            
            public event ListParcelSplitObjectRowChangeEventHandler ListParcelSplitObjectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListParcelSplitObjectRow(ListParcelSplitObjectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitObjectRow AddListParcelSplitObjectRow(int ObjectID, short ObjectTypeID, string Object, string Description, bool IsRoll, bool IsValue, int VSCount, string ValueString, string RollString, string ObjectString) {
                ListParcelSplitObjectRow rowListParcelSplitObjectRow = ((ListParcelSplitObjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        ObjectTypeID,
                        Object,
                        Description,
                        IsRoll,
                        IsValue,
                        VSCount,
                        ValueString,
                        RollString,
                        ObjectString};
                rowListParcelSplitObjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListParcelSplitObjectRow);
                return rowListParcelSplitObjectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListParcelSplitObjectDataTable cln = ((ListParcelSplitObjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListParcelSplitObjectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnObjectTypeID = base.Columns["ObjectTypeID"];
                this.columnObject = base.Columns["Object"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsRoll = base.Columns["IsRoll"];
                this.columnIsValue = base.Columns["IsValue"];
                this.columnVSCount = base.Columns["VSCount"];
                this.columnValueString = base.Columns["ValueString"];
                this.columnRollString = base.Columns["RollString"];
                this.columnObjectString = base.Columns["ObjectString"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnObjectTypeID = new global::System.Data.DataColumn("ObjectTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectTypeID);
                this.columnObject = new global::System.Data.DataColumn("Object", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObject);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsRoll = new global::System.Data.DataColumn("IsRoll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRoll);
                this.columnIsValue = new global::System.Data.DataColumn("IsValue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValue);
                this.columnVSCount = new global::System.Data.DataColumn("VSCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSCount);
                this.columnValueString = new global::System.Data.DataColumn("ValueString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueString);
                this.columnRollString = new global::System.Data.DataColumn("RollString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollString);
                this.columnObjectString = new global::System.Data.DataColumn("ObjectString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectString);
                this.columnObjectID.ReadOnly = true;
                this.columnObject.MaxLength = 100;
                this.columnDescription.MaxLength = 200;
                this.columnVSCount.ReadOnly = true;
                this.columnValueString.MaxLength = 10;
                this.columnRollString.MaxLength = 10;
                this.columnObjectString.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitObjectRow NewListParcelSplitObjectRow() {
                return ((ListParcelSplitObjectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListParcelSplitObjectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListParcelSplitObjectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListParcelSplitObjectRowChanged != null)) {
                    this.ListParcelSplitObjectRowChanged(this, new ListParcelSplitObjectRowChangeEvent(((ListParcelSplitObjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListParcelSplitObjectRowChanging != null)) {
                    this.ListParcelSplitObjectRowChanging(this, new ListParcelSplitObjectRowChangeEvent(((ListParcelSplitObjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListParcelSplitObjectRowDeleted != null)) {
                    this.ListParcelSplitObjectRowDeleted(this, new ListParcelSplitObjectRowChangeEvent(((ListParcelSplitObjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListParcelSplitObjectRowDeleting != null)) {
                    this.ListParcelSplitObjectRowDeleting(this, new ListParcelSplitObjectRowChangeEvent(((ListParcelSplitObjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListParcelSplitObjectRow(ListParcelSplitObjectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListParcelSplitObjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListParcelSplitValueSlicesDataTable : global::System.Data.TypedTableBase<ListParcelSplitValueSlicesRow> {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnSliceTypeID;
            
            private global::System.Data.DataColumn columnVSObject;
            
            private global::System.Data.DataColumn columnVSDescription;
            
            private global::System.Data.DataColumn columnIsRoll;
            
            private global::System.Data.DataColumn columnIsValue;
            
            private global::System.Data.DataColumn columnValueString;
            
            private global::System.Data.DataColumn columnRollString;
            
            private global::System.Data.DataColumn columnVSString;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitValueSlicesDataTable() {
                this.TableName = "ListParcelSplitValueSlices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelSplitValueSlicesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListParcelSplitValueSlicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SliceTypeIDColumn {
                get {
                    return this.columnSliceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSObjectColumn {
                get {
                    return this.columnVSObject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSDescriptionColumn {
                get {
                    return this.columnVSDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRollColumn {
                get {
                    return this.columnIsRoll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValueColumn {
                get {
                    return this.columnIsValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueStringColumn {
                get {
                    return this.columnValueString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollStringColumn {
                get {
                    return this.columnRollString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSStringColumn {
                get {
                    return this.columnVSString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitValueSlicesRow this[int index] {
                get {
                    return ((ListParcelSplitValueSlicesRow)(this.Rows[index]));
                }
            }
            
            public event ListParcelSplitValueSlicesRowChangeEventHandler ListParcelSplitValueSlicesRowChanging;
            
            public event ListParcelSplitValueSlicesRowChangeEventHandler ListParcelSplitValueSlicesRowChanged;
            
            public event ListParcelSplitValueSlicesRowChangeEventHandler ListParcelSplitValueSlicesRowDeleting;
            
            public event ListParcelSplitValueSlicesRowChangeEventHandler ListParcelSplitValueSlicesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListParcelSplitValueSlicesRow(ListParcelSplitValueSlicesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitValueSlicesRow AddListParcelSplitValueSlicesRow(int ObjectID, int ValueSliceID, short SliceTypeID, string VSObject, string VSDescription, bool IsRoll, bool IsValue, string ValueString, string RollString, string VSString) {
                ListParcelSplitValueSlicesRow rowListParcelSplitValueSlicesRow = ((ListParcelSplitValueSlicesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        ValueSliceID,
                        SliceTypeID,
                        VSObject,
                        VSDescription,
                        IsRoll,
                        IsValue,
                        ValueString,
                        RollString,
                        VSString};
                rowListParcelSplitValueSlicesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListParcelSplitValueSlicesRow);
                return rowListParcelSplitValueSlicesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListParcelSplitValueSlicesDataTable cln = ((ListParcelSplitValueSlicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListParcelSplitValueSlicesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnSliceTypeID = base.Columns["SliceTypeID"];
                this.columnVSObject = base.Columns["VSObject"];
                this.columnVSDescription = base.Columns["VSDescription"];
                this.columnIsRoll = base.Columns["IsRoll"];
                this.columnIsValue = base.Columns["IsValue"];
                this.columnValueString = base.Columns["ValueString"];
                this.columnRollString = base.Columns["RollString"];
                this.columnVSString = base.Columns["VSString"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnSliceTypeID = new global::System.Data.DataColumn("SliceTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceTypeID);
                this.columnVSObject = new global::System.Data.DataColumn("VSObject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSObject);
                this.columnVSDescription = new global::System.Data.DataColumn("VSDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSDescription);
                this.columnIsRoll = new global::System.Data.DataColumn("IsRoll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRoll);
                this.columnIsValue = new global::System.Data.DataColumn("IsValue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValue);
                this.columnValueString = new global::System.Data.DataColumn("ValueString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueString);
                this.columnRollString = new global::System.Data.DataColumn("RollString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollString);
                this.columnVSString = new global::System.Data.DataColumn("VSString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSString);
                this.columnObjectID.ReadOnly = true;
                this.columnValueSliceID.ReadOnly = true;
                this.columnVSObject.MaxLength = 50;
                this.columnVSDescription.MaxLength = 50;
                this.columnValueString.MaxLength = 10;
                this.columnRollString.MaxLength = 10;
                this.columnVSString.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitValueSlicesRow NewListParcelSplitValueSlicesRow() {
                return ((ListParcelSplitValueSlicesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListParcelSplitValueSlicesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListParcelSplitValueSlicesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListParcelSplitValueSlicesRowChanged != null)) {
                    this.ListParcelSplitValueSlicesRowChanged(this, new ListParcelSplitValueSlicesRowChangeEvent(((ListParcelSplitValueSlicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListParcelSplitValueSlicesRowChanging != null)) {
                    this.ListParcelSplitValueSlicesRowChanging(this, new ListParcelSplitValueSlicesRowChangeEvent(((ListParcelSplitValueSlicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListParcelSplitValueSlicesRowDeleted != null)) {
                    this.ListParcelSplitValueSlicesRowDeleted(this, new ListParcelSplitValueSlicesRowChangeEvent(((ListParcelSplitValueSlicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListParcelSplitValueSlicesRowDeleting != null)) {
                    this.ListParcelSplitValueSlicesRowDeleting(this, new ListParcelSplitValueSlicesRowChangeEvent(((ListParcelSplitValueSlicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListParcelSplitValueSlicesRow(ListParcelSplitValueSlicesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListParcelSplitValueSlicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSplitObjectDataTable : global::System.Data.TypedTableBase<ListSplitObjectRow> {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnChecked1;
            
            private global::System.Data.DataColumn columnObjectString1;
            
            private global::System.Data.DataColumn columnIsValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitObjectDataTable() {
                this.TableName = "ListSplitObject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitObjectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSplitObjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Checked1Column {
                get {
                    return this.columnChecked1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectString1Column {
                get {
                    return this.columnObjectString1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValueColumn {
                get {
                    return this.columnIsValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitObjectRow this[int index] {
                get {
                    return ((ListSplitObjectRow)(this.Rows[index]));
                }
            }
            
            public event ListSplitObjectRowChangeEventHandler ListSplitObjectRowChanging;
            
            public event ListSplitObjectRowChangeEventHandler ListSplitObjectRowChanged;
            
            public event ListSplitObjectRowChangeEventHandler ListSplitObjectRowDeleting;
            
            public event ListSplitObjectRowChangeEventHandler ListSplitObjectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSplitObjectRow(ListSplitObjectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitObjectRow AddListSplitObjectRow(int ObjectID, bool Checked1, string ObjectString1, bool IsValue) {
                ListSplitObjectRow rowListSplitObjectRow = ((ListSplitObjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        Checked1,
                        ObjectString1,
                        IsValue};
                rowListSplitObjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSplitObjectRow);
                return rowListSplitObjectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSplitObjectDataTable cln = ((ListSplitObjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSplitObjectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnChecked1 = base.Columns["Checked1"];
                this.columnObjectString1 = base.Columns["ObjectString1"];
                this.columnIsValue = base.Columns["IsValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnChecked1 = new global::System.Data.DataColumn("Checked1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChecked1);
                this.columnObjectString1 = new global::System.Data.DataColumn("ObjectString1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectString1);
                this.columnIsValue = new global::System.Data.DataColumn("IsValue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValue);
                this.columnObjectID.ReadOnly = true;
                this.columnChecked1.DefaultValue = ((bool)(true));
                this.columnObjectString1.DefaultValue = ((string)("Value"));
                this.columnObjectString1.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitObjectRow NewListSplitObjectRow() {
                return ((ListSplitObjectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSplitObjectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSplitObjectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSplitObjectRowChanged != null)) {
                    this.ListSplitObjectRowChanged(this, new ListSplitObjectRowChangeEvent(((ListSplitObjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSplitObjectRowChanging != null)) {
                    this.ListSplitObjectRowChanging(this, new ListSplitObjectRowChangeEvent(((ListSplitObjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSplitObjectRowDeleted != null)) {
                    this.ListSplitObjectRowDeleted(this, new ListSplitObjectRowChangeEvent(((ListSplitObjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSplitObjectRowDeleting != null)) {
                    this.ListSplitObjectRowDeleting(this, new ListSplitObjectRowChangeEvent(((ListSplitObjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSplitObjectRow(ListSplitObjectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSplitObjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSplitValuseSliceDataTable : global::System.Data.TypedTableBase<ListSplitValuseSliceRow> {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnChecked1;
            
            private global::System.Data.DataColumn columnVSString1;
            
            private global::System.Data.DataColumn columnIsValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitValuseSliceDataTable() {
                this.TableName = "ListSplitValuseSlice";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitValuseSliceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSplitValuseSliceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Checked1Column {
                get {
                    return this.columnChecked1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSString1Column {
                get {
                    return this.columnVSString1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValueColumn {
                get {
                    return this.columnIsValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitValuseSliceRow this[int index] {
                get {
                    return ((ListSplitValuseSliceRow)(this.Rows[index]));
                }
            }
            
            public event ListSplitValuseSliceRowChangeEventHandler ListSplitValuseSliceRowChanging;
            
            public event ListSplitValuseSliceRowChangeEventHandler ListSplitValuseSliceRowChanged;
            
            public event ListSplitValuseSliceRowChangeEventHandler ListSplitValuseSliceRowDeleting;
            
            public event ListSplitValuseSliceRowChangeEventHandler ListSplitValuseSliceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSplitValuseSliceRow(ListSplitValuseSliceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitValuseSliceRow AddListSplitValuseSliceRow(int ObjectID, int ValueSliceID, bool Checked1, string VSString1, bool IsValue) {
                ListSplitValuseSliceRow rowListSplitValuseSliceRow = ((ListSplitValuseSliceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        ValueSliceID,
                        Checked1,
                        VSString1,
                        IsValue};
                rowListSplitValuseSliceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSplitValuseSliceRow);
                return rowListSplitValuseSliceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSplitValuseSliceDataTable cln = ((ListSplitValuseSliceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSplitValuseSliceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnChecked1 = base.Columns["Checked1"];
                this.columnVSString1 = base.Columns["VSString1"];
                this.columnIsValue = base.Columns["IsValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnChecked1 = new global::System.Data.DataColumn("Checked1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChecked1);
                this.columnVSString1 = new global::System.Data.DataColumn("VSString1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSString1);
                this.columnIsValue = new global::System.Data.DataColumn("IsValue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValue);
                this.columnObjectID.ReadOnly = true;
                this.columnChecked1.DefaultValue = ((bool)(true));
                this.columnVSString1.Caption = "ObjectString";
                this.columnVSString1.DefaultValue = ((string)("Value"));
                this.columnVSString1.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitValuseSliceRow NewListSplitValuseSliceRow() {
                return ((ListSplitValuseSliceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSplitValuseSliceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSplitValuseSliceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSplitValuseSliceRowChanged != null)) {
                    this.ListSplitValuseSliceRowChanged(this, new ListSplitValuseSliceRowChangeEvent(((ListSplitValuseSliceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSplitValuseSliceRowChanging != null)) {
                    this.ListSplitValuseSliceRowChanging(this, new ListSplitValuseSliceRowChangeEvent(((ListSplitValuseSliceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSplitValuseSliceRowDeleted != null)) {
                    this.ListSplitValuseSliceRowDeleted(this, new ListSplitValuseSliceRowChangeEvent(((ListSplitValuseSliceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSplitValuseSliceRowDeleting != null)) {
                    this.ListSplitValuseSliceRowDeleting(this, new ListSplitValuseSliceRowChangeEvent(((ListSplitValuseSliceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSplitValuseSliceRow(ListSplitValuseSliceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSplitValuseSliceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSplitDefinitionHeaderDataTable : global::System.Data.TypedTableBase<ListSplitDefinitionHeaderRow> {
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnNumResultingParcels;
            
            private global::System.Data.DataColumn columnIsDetails;
            
            private global::System.Data.DataColumn columnIsComments;
            
            private global::System.Data.DataColumn columnIsAttachments;
            
            private global::System.Data.DataColumn columnO3Value;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnSplitID;
            
            private global::System.Data.DataColumn columnIsSplitProcessed;
            
            private global::System.Data.DataColumn columnBaseParcelID;
            
            private global::System.Data.DataColumn columnSplitID1;
            
            private global::System.Data.DataColumn columnID1Label;
            
            private global::System.Data.DataColumn columnID1Mask;
            
            private global::System.Data.DataColumn columnDOR;
            
            private global::System.Data.DataColumn columnPSXml;
            
            private global::System.Data.DataColumn columnID2Label;
            
            private global::System.Data.DataColumn columnID2Mask;
            
            private global::System.Data.DataColumn columnConfiguredState;
            
            private global::System.Data.DataColumn columnClassCode;
            
            private global::System.Data.DataColumn columnClassCodeRGB;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitDefinitionHeaderDataTable() {
                this.TableName = "ListSplitDefinitionHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitDefinitionHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSplitDefinitionHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumResultingParcelsColumn {
                get {
                    return this.columnNumResultingParcels;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDetailsColumn {
                get {
                    return this.columnIsDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCommentsColumn {
                get {
                    return this.columnIsComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAttachmentsColumn {
                get {
                    return this.columnIsAttachments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O3ValueColumn {
                get {
                    return this.columnO3Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SplitIDColumn {
                get {
                    return this.columnSplitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSplitProcessedColumn {
                get {
                    return this.columnIsSplitProcessed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseParcelIDColumn {
                get {
                    return this.columnBaseParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SplitID1Column {
                get {
                    return this.columnSplitID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID1LabelColumn {
                get {
                    return this.columnID1Label;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID1MaskColumn {
                get {
                    return this.columnID1Mask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DORColumn {
                get {
                    return this.columnDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PSXmlColumn {
                get {
                    return this.columnPSXml;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID2LabelColumn {
                get {
                    return this.columnID2Label;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID2MaskColumn {
                get {
                    return this.columnID2Mask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfiguredStateColumn {
                get {
                    return this.columnConfiguredState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassCodeColumn {
                get {
                    return this.columnClassCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassCodeRGBColumn {
                get {
                    return this.columnClassCodeRGB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitDefinitionHeaderRow this[int index] {
                get {
                    return ((ListSplitDefinitionHeaderRow)(this.Rows[index]));
                }
            }
            
            public event ListSplitDefinitionHeaderRowChangeEventHandler ListSplitDefinitionHeaderRowChanging;
            
            public event ListSplitDefinitionHeaderRowChangeEventHandler ListSplitDefinitionHeaderRowChanged;
            
            public event ListSplitDefinitionHeaderRowChangeEventHandler ListSplitDefinitionHeaderRowDeleting;
            
            public event ListSplitDefinitionHeaderRowChangeEventHandler ListSplitDefinitionHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSplitDefinitionHeaderRow(ListSplitDefinitionHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitDefinitionHeaderRow AddListSplitDefinitionHeaderRow(
                        string ParcelNumber, 
                        short NumResultingParcels, 
                        bool IsDetails, 
                        bool IsComments, 
                        bool IsAttachments, 
                        decimal O3Value, 
                        int ParcelID, 
                        int EventID, 
                        int SplitID, 
                        string IsSplitProcessed, 
                        int BaseParcelID, 
                        int SplitID1, 
                        string ID1Label, 
                        string ID1Mask, 
                        string DOR, 
                        string PSXml, 
                        string ID2Label, 
                        string ID2Mask, 
                        string ConfiguredState, 
                        string ClassCode, 
                        string ClassCodeRGB) {
                ListSplitDefinitionHeaderRow rowListSplitDefinitionHeaderRow = ((ListSplitDefinitionHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelNumber,
                        NumResultingParcels,
                        IsDetails,
                        IsComments,
                        IsAttachments,
                        O3Value,
                        ParcelID,
                        EventID,
                        SplitID,
                        IsSplitProcessed,
                        BaseParcelID,
                        SplitID1,
                        ID1Label,
                        ID1Mask,
                        DOR,
                        PSXml,
                        ID2Label,
                        ID2Mask,
                        ConfiguredState,
                        ClassCode,
                        ClassCodeRGB};
                rowListSplitDefinitionHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSplitDefinitionHeaderRow);
                return rowListSplitDefinitionHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSplitDefinitionHeaderDataTable cln = ((ListSplitDefinitionHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSplitDefinitionHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnNumResultingParcels = base.Columns["NumResultingParcels"];
                this.columnIsDetails = base.Columns["IsDetails"];
                this.columnIsComments = base.Columns["IsComments"];
                this.columnIsAttachments = base.Columns["IsAttachments"];
                this.columnO3Value = base.Columns["O3Value"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnEventID = base.Columns["EventID"];
                this.columnSplitID = base.Columns["SplitID"];
                this.columnIsSplitProcessed = base.Columns["IsSplitProcessed"];
                this.columnBaseParcelID = base.Columns["BaseParcelID"];
                this.columnSplitID1 = base.Columns["SplitID1"];
                this.columnID1Label = base.Columns["ID1Label"];
                this.columnID1Mask = base.Columns["ID1Mask"];
                this.columnDOR = base.Columns["DOR"];
                this.columnPSXml = base.Columns["PSXml"];
                this.columnID2Label = base.Columns["ID2Label"];
                this.columnID2Mask = base.Columns["ID2Mask"];
                this.columnConfiguredState = base.Columns["ConfiguredState"];
                this.columnClassCode = base.Columns["ClassCode"];
                this.columnClassCodeRGB = base.Columns["ClassCodeRGB"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnNumResultingParcels = new global::System.Data.DataColumn("NumResultingParcels", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumResultingParcels);
                this.columnIsDetails = new global::System.Data.DataColumn("IsDetails", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDetails);
                this.columnIsComments = new global::System.Data.DataColumn("IsComments", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsComments);
                this.columnIsAttachments = new global::System.Data.DataColumn("IsAttachments", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAttachments);
                this.columnO3Value = new global::System.Data.DataColumn("O3Value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO3Value);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnSplitID = new global::System.Data.DataColumn("SplitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSplitID);
                this.columnIsSplitProcessed = new global::System.Data.DataColumn("IsSplitProcessed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSplitProcessed);
                this.columnBaseParcelID = new global::System.Data.DataColumn("BaseParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseParcelID);
                this.columnSplitID1 = new global::System.Data.DataColumn("SplitID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSplitID1);
                this.columnID1Label = new global::System.Data.DataColumn("ID1Label", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID1Label);
                this.columnID1Mask = new global::System.Data.DataColumn("ID1Mask", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID1Mask);
                this.columnDOR = new global::System.Data.DataColumn("DOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOR);
                this.columnPSXml = new global::System.Data.DataColumn("PSXml", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPSXml);
                this.columnID2Label = new global::System.Data.DataColumn("ID2Label", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID2Label);
                this.columnID2Mask = new global::System.Data.DataColumn("ID2Mask", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID2Mask);
                this.columnConfiguredState = new global::System.Data.DataColumn("ConfiguredState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfiguredState);
                this.columnClassCode = new global::System.Data.DataColumn("ClassCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassCode);
                this.columnClassCodeRGB = new global::System.Data.DataColumn("ClassCodeRGB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassCodeRGB);
                this.columnParcelNumber.MaxLength = 50;
                this.columnParcelID.ReadOnly = true;
                this.columnSplitID.ReadOnly = true;
                this.columnIsSplitProcessed.MaxLength = 50;
                this.columnBaseParcelID.ReadOnly = true;
                this.columnSplitID1.ReadOnly = true;
                this.columnID1Label.ReadOnly = true;
                this.columnID1Label.MaxLength = 1000;
                this.columnID1Mask.ReadOnly = true;
                this.columnID1Mask.MaxLength = 1000;
                this.columnDOR.MaxLength = 50;
                this.columnPSXml.ReadOnly = true;
                this.columnPSXml.MaxLength = 2147483647;
                this.columnID2Label.MaxLength = 1000;
                this.columnID2Mask.MaxLength = 1000;
                this.columnConfiguredState.MaxLength = 10;
                this.columnClassCode.MaxLength = 50;
                this.columnClassCodeRGB.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitDefinitionHeaderRow NewListSplitDefinitionHeaderRow() {
                return ((ListSplitDefinitionHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSplitDefinitionHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSplitDefinitionHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSplitDefinitionHeaderRowChanged != null)) {
                    this.ListSplitDefinitionHeaderRowChanged(this, new ListSplitDefinitionHeaderRowChangeEvent(((ListSplitDefinitionHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSplitDefinitionHeaderRowChanging != null)) {
                    this.ListSplitDefinitionHeaderRowChanging(this, new ListSplitDefinitionHeaderRowChangeEvent(((ListSplitDefinitionHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSplitDefinitionHeaderRowDeleted != null)) {
                    this.ListSplitDefinitionHeaderRowDeleted(this, new ListSplitDefinitionHeaderRowChangeEvent(((ListSplitDefinitionHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSplitDefinitionHeaderRowDeleting != null)) {
                    this.ListSplitDefinitionHeaderRowDeleting(this, new ListSplitDefinitionHeaderRowChangeEvent(((ListSplitDefinitionHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSplitDefinitionHeaderRow(ListSplitDefinitionHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSplitDefinitionHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListValueSliceSavedValueDataTable : global::System.Data.TypedTableBase<ListValueSliceSavedValueRow> {
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnIsChecked;
            
            private global::System.Data.DataColumn columnIsValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValueSliceSavedValueDataTable() {
                this.TableName = "ListValueSliceSavedValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListValueSliceSavedValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListValueSliceSavedValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckedColumn {
                get {
                    return this.columnIsChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValueColumn {
                get {
                    return this.columnIsValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValueSliceSavedValueRow this[int index] {
                get {
                    return ((ListValueSliceSavedValueRow)(this.Rows[index]));
                }
            }
            
            public event ListValueSliceSavedValueRowChangeEventHandler ListValueSliceSavedValueRowChanging;
            
            public event ListValueSliceSavedValueRowChangeEventHandler ListValueSliceSavedValueRowChanged;
            
            public event ListValueSliceSavedValueRowChangeEventHandler ListValueSliceSavedValueRowDeleting;
            
            public event ListValueSliceSavedValueRowChangeEventHandler ListValueSliceSavedValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListValueSliceSavedValueRow(ListValueSliceSavedValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValueSliceSavedValueRow AddListValueSliceSavedValueRow(int ValueSliceID, string IsChecked, bool IsValue) {
                ListValueSliceSavedValueRow rowListValueSliceSavedValueRow = ((ListValueSliceSavedValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ValueSliceID,
                        IsChecked,
                        IsValue};
                rowListValueSliceSavedValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListValueSliceSavedValueRow);
                return rowListValueSliceSavedValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListValueSliceSavedValueDataTable cln = ((ListValueSliceSavedValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListValueSliceSavedValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnIsChecked = base.Columns["IsChecked"];
                this.columnIsValue = base.Columns["IsValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnIsChecked = new global::System.Data.DataColumn("IsChecked", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsChecked);
                this.columnIsValue = new global::System.Data.DataColumn("IsValue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValue);
                this.columnIsChecked.MaxLength = 5;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValueSliceSavedValueRow NewListValueSliceSavedValueRow() {
                return ((ListValueSliceSavedValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListValueSliceSavedValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListValueSliceSavedValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListValueSliceSavedValueRowChanged != null)) {
                    this.ListValueSliceSavedValueRowChanged(this, new ListValueSliceSavedValueRowChangeEvent(((ListValueSliceSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListValueSliceSavedValueRowChanging != null)) {
                    this.ListValueSliceSavedValueRowChanging(this, new ListValueSliceSavedValueRowChangeEvent(((ListValueSliceSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListValueSliceSavedValueRowDeleted != null)) {
                    this.ListValueSliceSavedValueRowDeleted(this, new ListValueSliceSavedValueRowChangeEvent(((ListValueSliceSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListValueSliceSavedValueRowDeleting != null)) {
                    this.ListValueSliceSavedValueRowDeleting(this, new ListValueSliceSavedValueRowChangeEvent(((ListValueSliceSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListValueSliceSavedValueRow(ListValueSliceSavedValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListValueSliceSavedValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListObjectSavedValueDataTable : global::System.Data.TypedTableBase<ListObjectSavedValueRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnIsChecked;
            
            private global::System.Data.DataColumn columnIsValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectSavedValueDataTable() {
                this.TableName = "ListObjectSavedValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListObjectSavedValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListObjectSavedValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckedColumn {
                get {
                    return this.columnIsChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValueColumn {
                get {
                    return this.columnIsValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectSavedValueRow this[int index] {
                get {
                    return ((ListObjectSavedValueRow)(this.Rows[index]));
                }
            }
            
            public event ListObjectSavedValueRowChangeEventHandler ListObjectSavedValueRowChanging;
            
            public event ListObjectSavedValueRowChangeEventHandler ListObjectSavedValueRowChanged;
            
            public event ListObjectSavedValueRowChangeEventHandler ListObjectSavedValueRowDeleting;
            
            public event ListObjectSavedValueRowChangeEventHandler ListObjectSavedValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListObjectSavedValueRow(ListObjectSavedValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectSavedValueRow AddListObjectSavedValueRow(int ParcelID, int ObjectID, string IsChecked, bool IsValue) {
                ListObjectSavedValueRow rowListObjectSavedValueRow = ((ListObjectSavedValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        ObjectID,
                        IsChecked,
                        IsValue};
                rowListObjectSavedValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListObjectSavedValueRow);
                return rowListObjectSavedValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListObjectSavedValueDataTable cln = ((ListObjectSavedValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListObjectSavedValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnIsChecked = base.Columns["IsChecked"];
                this.columnIsValue = base.Columns["IsValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnIsChecked = new global::System.Data.DataColumn("IsChecked", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsChecked);
                this.columnIsValue = new global::System.Data.DataColumn("IsValue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValue);
                this.columnIsChecked.ReadOnly = true;
                this.columnIsChecked.MaxLength = 5;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectSavedValueRow NewListObjectSavedValueRow() {
                return ((ListObjectSavedValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListObjectSavedValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListObjectSavedValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListObjectSavedValueRowChanged != null)) {
                    this.ListObjectSavedValueRowChanged(this, new ListObjectSavedValueRowChangeEvent(((ListObjectSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListObjectSavedValueRowChanging != null)) {
                    this.ListObjectSavedValueRowChanging(this, new ListObjectSavedValueRowChangeEvent(((ListObjectSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListObjectSavedValueRowDeleted != null)) {
                    this.ListObjectSavedValueRowDeleted(this, new ListObjectSavedValueRowChangeEvent(((ListObjectSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListObjectSavedValueRowDeleting != null)) {
                    this.ListObjectSavedValueRowDeleting(this, new ListObjectSavedValueRowChangeEvent(((ListObjectSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListObjectSavedValueRow(ListObjectSavedValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListObjectSavedValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListParcelSplitCropDataTable : global::System.Data.TypedTableBase<ListParcelSplitCropRow> {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnSliceTypeID;
            
            private global::System.Data.DataColumn columnVSObject;
            
            private global::System.Data.DataColumn columnVSDescription;
            
            private global::System.Data.DataColumn columnIsRoll;
            
            private global::System.Data.DataColumn columnIsValue;
            
            private global::System.Data.DataColumn columnRollString;
            
            private global::System.Data.DataColumn columnValueString;
            
            private global::System.Data.DataColumn columnVSString;
            
            private global::System.Data.DataColumn columnComponentID;
            
            private global::System.Data.DataColumn columnComponentTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitCropDataTable() {
                this.TableName = "ListParcelSplitCrop";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelSplitCropDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListParcelSplitCropDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SliceTypeIDColumn {
                get {
                    return this.columnSliceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSObjectColumn {
                get {
                    return this.columnVSObject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSDescriptionColumn {
                get {
                    return this.columnVSDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRollColumn {
                get {
                    return this.columnIsRoll;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValueColumn {
                get {
                    return this.columnIsValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollStringColumn {
                get {
                    return this.columnRollString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueStringColumn {
                get {
                    return this.columnValueString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSStringColumn {
                get {
                    return this.columnVSString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentIDColumn {
                get {
                    return this.columnComponentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentTypeIDColumn {
                get {
                    return this.columnComponentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitCropRow this[int index] {
                get {
                    return ((ListParcelSplitCropRow)(this.Rows[index]));
                }
            }
            
            public event ListParcelSplitCropRowChangeEventHandler ListParcelSplitCropRowChanging;
            
            public event ListParcelSplitCropRowChangeEventHandler ListParcelSplitCropRowChanged;
            
            public event ListParcelSplitCropRowChangeEventHandler ListParcelSplitCropRowDeleting;
            
            public event ListParcelSplitCropRowChangeEventHandler ListParcelSplitCropRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListParcelSplitCropRow(ListParcelSplitCropRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitCropRow AddListParcelSplitCropRow(int ObjectID, int ValueSliceID, short SliceTypeID, string VSObject, string VSDescription, bool IsRoll, bool IsValue, string RollString, string ValueString, string VSString, int ComponentID, int ComponentTypeID) {
                ListParcelSplitCropRow rowListParcelSplitCropRow = ((ListParcelSplitCropRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        ValueSliceID,
                        SliceTypeID,
                        VSObject,
                        VSDescription,
                        IsRoll,
                        IsValue,
                        RollString,
                        ValueString,
                        VSString,
                        ComponentID,
                        ComponentTypeID};
                rowListParcelSplitCropRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListParcelSplitCropRow);
                return rowListParcelSplitCropRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListParcelSplitCropDataTable cln = ((ListParcelSplitCropDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListParcelSplitCropDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnSliceTypeID = base.Columns["SliceTypeID"];
                this.columnVSObject = base.Columns["VSObject"];
                this.columnVSDescription = base.Columns["VSDescription"];
                this.columnIsRoll = base.Columns["IsRoll"];
                this.columnIsValue = base.Columns["IsValue"];
                this.columnRollString = base.Columns["RollString"];
                this.columnValueString = base.Columns["ValueString"];
                this.columnVSString = base.Columns["VSString"];
                this.columnComponentID = base.Columns["ComponentID"];
                this.columnComponentTypeID = base.Columns["ComponentTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnSliceTypeID = new global::System.Data.DataColumn("SliceTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceTypeID);
                this.columnVSObject = new global::System.Data.DataColumn("VSObject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSObject);
                this.columnVSDescription = new global::System.Data.DataColumn("VSDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSDescription);
                this.columnIsRoll = new global::System.Data.DataColumn("IsRoll", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRoll);
                this.columnIsValue = new global::System.Data.DataColumn("IsValue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValue);
                this.columnRollString = new global::System.Data.DataColumn("RollString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollString);
                this.columnValueString = new global::System.Data.DataColumn("ValueString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueString);
                this.columnVSString = new global::System.Data.DataColumn("VSString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSString);
                this.columnComponentID = new global::System.Data.DataColumn("ComponentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponentID);
                this.columnComponentTypeID = new global::System.Data.DataColumn("ComponentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponentTypeID);
                this.columnObjectID.ReadOnly = true;
                this.columnValueSliceID.ReadOnly = true;
                this.columnSliceTypeID.ReadOnly = true;
                this.columnVSObject.ReadOnly = true;
                this.columnVSObject.MaxLength = 1;
                this.columnVSDescription.ReadOnly = true;
                this.columnVSDescription.MaxLength = 55;
                this.columnIsRoll.ReadOnly = true;
                this.columnIsValue.ReadOnly = true;
                this.columnRollString.ReadOnly = true;
                this.columnRollString.MaxLength = 1;
                this.columnValueString.ReadOnly = true;
                this.columnValueString.MaxLength = 1;
                this.columnVSString.MaxLength = 100;
                this.columnComponentID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitCropRow NewListParcelSplitCropRow() {
                return ((ListParcelSplitCropRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListParcelSplitCropRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListParcelSplitCropRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListParcelSplitCropRowChanged != null)) {
                    this.ListParcelSplitCropRowChanged(this, new ListParcelSplitCropRowChangeEvent(((ListParcelSplitCropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListParcelSplitCropRowChanging != null)) {
                    this.ListParcelSplitCropRowChanging(this, new ListParcelSplitCropRowChangeEvent(((ListParcelSplitCropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListParcelSplitCropRowDeleted != null)) {
                    this.ListParcelSplitCropRowDeleted(this, new ListParcelSplitCropRowChangeEvent(((ListParcelSplitCropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListParcelSplitCropRowDeleting != null)) {
                    this.ListParcelSplitCropRowDeleting(this, new ListParcelSplitCropRowChangeEvent(((ListParcelSplitCropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListParcelSplitCropRow(ListParcelSplitCropRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListParcelSplitCropDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSplitCropDataTable : global::System.Data.TypedTableBase<ListSplitCropRow> {
            
            private global::System.Data.DataColumn columnObjectID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnSliceTypeID;
            
            private global::System.Data.DataColumn columnChecked1;
            
            private global::System.Data.DataColumn columnVSString1;
            
            private global::System.Data.DataColumn columnIsValue1;
            
            private global::System.Data.DataColumn columnComponentID;
            
            private global::System.Data.DataColumn columnComponentTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitCropDataTable() {
                this.TableName = "ListSplitCrop";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitCropDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSplitCropDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SliceTypeIDColumn {
                get {
                    return this.columnSliceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Checked1Column {
                get {
                    return this.columnChecked1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSString1Column {
                get {
                    return this.columnVSString1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValue1Column {
                get {
                    return this.columnIsValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentIDColumn {
                get {
                    return this.columnComponentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentTypeIDColumn {
                get {
                    return this.columnComponentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitCropRow this[int index] {
                get {
                    return ((ListSplitCropRow)(this.Rows[index]));
                }
            }
            
            public event ListSplitCropRowChangeEventHandler ListSplitCropRowChanging;
            
            public event ListSplitCropRowChangeEventHandler ListSplitCropRowChanged;
            
            public event ListSplitCropRowChangeEventHandler ListSplitCropRowDeleting;
            
            public event ListSplitCropRowChangeEventHandler ListSplitCropRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSplitCropRow(ListSplitCropRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitCropRow AddListSplitCropRow(int ObjectID, int ValueSliceID, short SliceTypeID, bool Checked1, string VSString1, string IsValue1, int ComponentID, int ComponentTypeID) {
                ListSplitCropRow rowListSplitCropRow = ((ListSplitCropRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ObjectID,
                        ValueSliceID,
                        SliceTypeID,
                        Checked1,
                        VSString1,
                        IsValue1,
                        ComponentID,
                        ComponentTypeID};
                rowListSplitCropRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSplitCropRow);
                return rowListSplitCropRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSplitCropDataTable cln = ((ListSplitCropDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSplitCropDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectID = base.Columns["ObjectID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnSliceTypeID = base.Columns["SliceTypeID"];
                this.columnChecked1 = base.Columns["Checked1"];
                this.columnVSString1 = base.Columns["VSString1"];
                this.columnIsValue1 = base.Columns["IsValue1"];
                this.columnComponentID = base.Columns["ComponentID"];
                this.columnComponentTypeID = base.Columns["ComponentTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectID = new global::System.Data.DataColumn("ObjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnSliceTypeID = new global::System.Data.DataColumn("SliceTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceTypeID);
                this.columnChecked1 = new global::System.Data.DataColumn("Checked1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChecked1);
                this.columnVSString1 = new global::System.Data.DataColumn("VSString1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSString1);
                this.columnIsValue1 = new global::System.Data.DataColumn("IsValue1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValue1);
                this.columnComponentID = new global::System.Data.DataColumn("ComponentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponentID);
                this.columnComponentTypeID = new global::System.Data.DataColumn("ComponentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponentTypeID);
                this.columnObjectID.ReadOnly = true;
                this.columnValueSliceID.ReadOnly = true;
                this.columnSliceTypeID.ReadOnly = true;
                this.columnChecked1.Caption = "Checked";
                this.columnVSString1.Caption = "VSString";
                this.columnVSString1.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitCropRow NewListSplitCropRow() {
                return ((ListSplitCropRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSplitCropRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSplitCropRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSplitCropRowChanged != null)) {
                    this.ListSplitCropRowChanged(this, new ListSplitCropRowChangeEvent(((ListSplitCropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSplitCropRowChanging != null)) {
                    this.ListSplitCropRowChanging(this, new ListSplitCropRowChangeEvent(((ListSplitCropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSplitCropRowDeleted != null)) {
                    this.ListSplitCropRowDeleted(this, new ListSplitCropRowChangeEvent(((ListSplitCropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSplitCropRowDeleting != null)) {
                    this.ListSplitCropRowDeleting(this, new ListSplitCropRowChangeEvent(((ListSplitCropRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSplitCropRow(ListSplitCropRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSplitCropDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListCropSavedValueDataTable : global::System.Data.TypedTableBase<ListCropSavedValueRow> {
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnSplitComponentID;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnComponentTypeID;
            
            private global::System.Data.DataColumn columnIsChecked;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropSavedValueDataTable() {
                this.TableName = "ListCropSavedValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCropSavedValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListCropSavedValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SplitComponentIDColumn {
                get {
                    return this.columnSplitComponentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentTypeIDColumn {
                get {
                    return this.columnComponentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCheckedColumn {
                get {
                    return this.columnIsChecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropSavedValueRow this[int index] {
                get {
                    return ((ListCropSavedValueRow)(this.Rows[index]));
                }
            }
            
            public event ListCropSavedValueRowChangeEventHandler ListCropSavedValueRowChanging;
            
            public event ListCropSavedValueRowChangeEventHandler ListCropSavedValueRowChanged;
            
            public event ListCropSavedValueRowChangeEventHandler ListCropSavedValueRowDeleting;
            
            public event ListCropSavedValueRowChangeEventHandler ListCropSavedValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListCropSavedValueRow(ListCropSavedValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropSavedValueRow AddListCropSavedValueRow(int ParcelID, int ValueSliceID, int SplitComponentID, decimal Units, int ComponentTypeID, bool IsChecked) {
                ListCropSavedValueRow rowListCropSavedValueRow = ((ListCropSavedValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelID,
                        ValueSliceID,
                        SplitComponentID,
                        Units,
                        ComponentTypeID,
                        IsChecked};
                rowListCropSavedValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListCropSavedValueRow);
                return rowListCropSavedValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListCropSavedValueDataTable cln = ((ListCropSavedValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListCropSavedValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnSplitComponentID = base.Columns["SplitComponentID"];
                this.columnUnits = base.Columns["Units"];
                this.columnComponentTypeID = base.Columns["ComponentTypeID"];
                this.columnIsChecked = base.Columns["IsChecked"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnSplitComponentID = new global::System.Data.DataColumn("SplitComponentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSplitComponentID);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnComponentTypeID = new global::System.Data.DataColumn("ComponentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponentTypeID);
                this.columnIsChecked = new global::System.Data.DataColumn("IsChecked", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsChecked);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropSavedValueRow NewListCropSavedValueRow() {
                return ((ListCropSavedValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListCropSavedValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListCropSavedValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListCropSavedValueRowChanged != null)) {
                    this.ListCropSavedValueRowChanged(this, new ListCropSavedValueRowChangeEvent(((ListCropSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListCropSavedValueRowChanging != null)) {
                    this.ListCropSavedValueRowChanging(this, new ListCropSavedValueRowChangeEvent(((ListCropSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListCropSavedValueRowDeleted != null)) {
                    this.ListCropSavedValueRowDeleted(this, new ListCropSavedValueRowChangeEvent(((ListCropSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListCropSavedValueRowDeleting != null)) {
                    this.ListCropSavedValueRowDeleting(this, new ListCropSavedValueRowChangeEvent(((ListCropSavedValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListCropSavedValueRow(ListCropSavedValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListCropSavedValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSplitHeaderDetailDataTable : global::System.Data.TypedTableBase<ListSplitHeaderDetailRow> {
            
            private global::System.Data.DataColumn columnSplitParcelID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnDOR;
            
            private global::System.Data.DataColumn columnSplitID;
            
            private global::System.Data.DataColumn columnIsAttachment;
            
            private global::System.Data.DataColumn columnIsComment;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnStreetID;
            
            private global::System.Data.DataColumn columnHouseNumber;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnZipCode;
            
            private global::System.Data.DataColumn columnUnitNumber;
            
            private global::System.Data.DataColumn columnX_Coord;
            
            private global::System.Data.DataColumn columnY_Coord;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnID2;
            
            private global::System.Data.DataColumn columnID1;
            
            private global::System.Data.DataColumn columnIsPermit;
            
            private global::System.Data.DataColumn columnIsAssociation;
            
            private global::System.Data.DataColumn columnConfiguredState;
            
            private global::System.Data.DataColumn columnClassCode;
            
            private global::System.Data.DataColumn columnClassCodeRGB;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitHeaderDetailDataTable() {
                this.TableName = "ListSplitHeaderDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitHeaderDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSplitHeaderDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SplitParcelIDColumn {
                get {
                    return this.columnSplitParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DORColumn {
                get {
                    return this.columnDOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SplitIDColumn {
                get {
                    return this.columnSplitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAttachmentColumn {
                get {
                    return this.columnIsAttachment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCommentColumn {
                get {
                    return this.columnIsComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetIDColumn {
                get {
                    return this.columnStreetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HouseNumberColumn {
                get {
                    return this.columnHouseNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitNumberColumn {
                get {
                    return this.columnUnitNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn X_CoordColumn {
                get {
                    return this.columnX_Coord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Y_CoordColumn {
                get {
                    return this.columnY_Coord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID2Column {
                get {
                    return this.columnID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID1Column {
                get {
                    return this.columnID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermitColumn {
                get {
                    return this.columnIsPermit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAssociationColumn {
                get {
                    return this.columnIsAssociation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfiguredStateColumn {
                get {
                    return this.columnConfiguredState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassCodeColumn {
                get {
                    return this.columnClassCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassCodeRGBColumn {
                get {
                    return this.columnClassCodeRGB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitHeaderDetailRow this[int index] {
                get {
                    return ((ListSplitHeaderDetailRow)(this.Rows[index]));
                }
            }
            
            public event ListSplitHeaderDetailRowChangeEventHandler ListSplitHeaderDetailRowChanging;
            
            public event ListSplitHeaderDetailRowChangeEventHandler ListSplitHeaderDetailRowChanged;
            
            public event ListSplitHeaderDetailRowChangeEventHandler ListSplitHeaderDetailRowDeleting;
            
            public event ListSplitHeaderDetailRowChangeEventHandler ListSplitHeaderDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSplitHeaderDetailRow(ListSplitHeaderDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitHeaderDetailRow AddListSplitHeaderDetailRow(
                        int SplitParcelID, 
                        string ParcelNumber, 
                        string DOR, 
                        int SplitID, 
                        bool IsAttachment, 
                        bool IsComment, 
                        string Legal, 
                        string Situs, 
                        int StreetID, 
                        string HouseNumber, 
                        string City, 
                        string ZipCode, 
                        string UnitNumber, 
                        decimal X_Coord, 
                        decimal Y_Coord, 
                        int UnitID, 
                        string ID2, 
                        string ID1, 
                        bool IsPermit, 
                        bool IsAssociation, 
                        string ConfiguredState, 
                        string ClassCode, 
                        string ClassCodeRGB) {
                ListSplitHeaderDetailRow rowListSplitHeaderDetailRow = ((ListSplitHeaderDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SplitParcelID,
                        ParcelNumber,
                        DOR,
                        SplitID,
                        IsAttachment,
                        IsComment,
                        Legal,
                        Situs,
                        StreetID,
                        HouseNumber,
                        City,
                        ZipCode,
                        UnitNumber,
                        X_Coord,
                        Y_Coord,
                        UnitID,
                        ID2,
                        ID1,
                        IsPermit,
                        IsAssociation,
                        ConfiguredState,
                        ClassCode,
                        ClassCodeRGB};
                rowListSplitHeaderDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSplitHeaderDetailRow);
                return rowListSplitHeaderDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSplitHeaderDetailDataTable cln = ((ListSplitHeaderDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSplitHeaderDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSplitParcelID = base.Columns["SplitParcelID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnDOR = base.Columns["DOR"];
                this.columnSplitID = base.Columns["SplitID"];
                this.columnIsAttachment = base.Columns["IsAttachment"];
                this.columnIsComment = base.Columns["IsComment"];
                this.columnLegal = base.Columns["Legal"];
                this.columnSitus = base.Columns["Situs"];
                this.columnStreetID = base.Columns["StreetID"];
                this.columnHouseNumber = base.Columns["HouseNumber"];
                this.columnCity = base.Columns["City"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnUnitNumber = base.Columns["UnitNumber"];
                this.columnX_Coord = base.Columns["X_Coord"];
                this.columnY_Coord = base.Columns["Y_Coord"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnID2 = base.Columns["ID2"];
                this.columnID1 = base.Columns["ID1"];
                this.columnIsPermit = base.Columns["IsPermit"];
                this.columnIsAssociation = base.Columns["IsAssociation"];
                this.columnConfiguredState = base.Columns["ConfiguredState"];
                this.columnClassCode = base.Columns["ClassCode"];
                this.columnClassCodeRGB = base.Columns["ClassCodeRGB"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSplitParcelID = new global::System.Data.DataColumn("SplitParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSplitParcelID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnDOR = new global::System.Data.DataColumn("DOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOR);
                this.columnSplitID = new global::System.Data.DataColumn("SplitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSplitID);
                this.columnIsAttachment = new global::System.Data.DataColumn("IsAttachment", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAttachment);
                this.columnIsComment = new global::System.Data.DataColumn("IsComment", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsComment);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnStreetID = new global::System.Data.DataColumn("StreetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreetID);
                this.columnHouseNumber = new global::System.Data.DataColumn("HouseNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHouseNumber);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnZipCode = new global::System.Data.DataColumn("ZipCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnUnitNumber = new global::System.Data.DataColumn("UnitNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitNumber);
                this.columnX_Coord = new global::System.Data.DataColumn("X_Coord", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnX_Coord);
                this.columnY_Coord = new global::System.Data.DataColumn("Y_Coord", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnY_Coord);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnID2 = new global::System.Data.DataColumn("ID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID2);
                this.columnID1 = new global::System.Data.DataColumn("ID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID1);
                this.columnIsPermit = new global::System.Data.DataColumn("IsPermit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermit);
                this.columnIsAssociation = new global::System.Data.DataColumn("IsAssociation", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAssociation);
                this.columnConfiguredState = new global::System.Data.DataColumn("ConfiguredState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfiguredState);
                this.columnClassCode = new global::System.Data.DataColumn("ClassCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassCode);
                this.columnClassCodeRGB = new global::System.Data.DataColumn("ClassCodeRGB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassCodeRGB);
                this.columnConfiguredState.MaxLength = 10;
                this.columnClassCode.MaxLength = 50;
                this.columnClassCodeRGB.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitHeaderDetailRow NewListSplitHeaderDetailRow() {
                return ((ListSplitHeaderDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSplitHeaderDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSplitHeaderDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSplitHeaderDetailRowChanged != null)) {
                    this.ListSplitHeaderDetailRowChanged(this, new ListSplitHeaderDetailRowChangeEvent(((ListSplitHeaderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSplitHeaderDetailRowChanging != null)) {
                    this.ListSplitHeaderDetailRowChanging(this, new ListSplitHeaderDetailRowChangeEvent(((ListSplitHeaderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSplitHeaderDetailRowDeleted != null)) {
                    this.ListSplitHeaderDetailRowDeleted(this, new ListSplitHeaderDetailRowChangeEvent(((ListSplitHeaderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSplitHeaderDetailRowDeleting != null)) {
                    this.ListSplitHeaderDetailRowDeleting(this, new ListSplitHeaderDetailRowChangeEvent(((ListSplitHeaderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSplitHeaderDetailRow(ListSplitHeaderDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F29500ParcelSplitData ds = new F29500ParcelSplitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSplitHeaderDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListParcelSplitObjectRow : global::System.Data.DataRow {
            
            private ListParcelSplitObjectDataTable tableListParcelSplitObject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelSplitObjectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListParcelSplitObject = ((ListParcelSplitObjectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelSplitObject.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ObjectTypeID {
                get {
                    try {
                        return ((short)(this[this.tableListParcelSplitObject.ObjectTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectTypeID\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.ObjectTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Object {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitObject.ObjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Object\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.ObjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitObject.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoll {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelSplitObject.IsRollColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRoll\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.IsRollColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelSplitObject.IsValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValue\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.IsValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VSCount {
                get {
                    try {
                        return ((int)(this[this.tableListParcelSplitObject.VSCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSCount\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.VSCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueString {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitObject.ValueStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueString\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.ValueStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollString {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitObject.RollStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollString\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.RollStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectString {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitObject.ObjectStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectString\' in table \'ListParcelSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitObject.ObjectStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableListParcelSplitObject.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableListParcelSplitObject.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectTypeIDNull() {
                return this.IsNull(this.tableListParcelSplitObject.ObjectTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectTypeIDNull() {
                this[this.tableListParcelSplitObject.ObjectTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectNull() {
                return this.IsNull(this.tableListParcelSplitObject.ObjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectNull() {
                this[this.tableListParcelSplitObject.ObjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListParcelSplitObject.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListParcelSplitObject.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRollNull() {
                return this.IsNull(this.tableListParcelSplitObject.IsRollColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRollNull() {
                this[this.tableListParcelSplitObject.IsRollColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValueNull() {
                return this.IsNull(this.tableListParcelSplitObject.IsValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValueNull() {
                this[this.tableListParcelSplitObject.IsValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSCountNull() {
                return this.IsNull(this.tableListParcelSplitObject.VSCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSCountNull() {
                this[this.tableListParcelSplitObject.VSCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueStringNull() {
                return this.IsNull(this.tableListParcelSplitObject.ValueStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueStringNull() {
                this[this.tableListParcelSplitObject.ValueStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollStringNull() {
                return this.IsNull(this.tableListParcelSplitObject.RollStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollStringNull() {
                this[this.tableListParcelSplitObject.RollStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectStringNull() {
                return this.IsNull(this.tableListParcelSplitObject.ObjectStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectStringNull() {
                this[this.tableListParcelSplitObject.ObjectStringColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListParcelSplitValueSlicesRow : global::System.Data.DataRow {
            
            private ListParcelSplitValueSlicesDataTable tableListParcelSplitValueSlices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelSplitValueSlicesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListParcelSplitValueSlices = ((ListParcelSplitValueSlicesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelSplitValueSlices.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'ListParcelSplitValueSlices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelSplitValueSlices.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListParcelSplitValueSlices\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SliceTypeID {
                get {
                    try {
                        return ((short)(this[this.tableListParcelSplitValueSlices.SliceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SliceTypeID\' in table \'ListParcelSplitValueSlices\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.SliceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VSObject {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitValueSlices.VSObjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSObject\' in table \'ListParcelSplitValueSlices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.VSObjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VSDescription {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitValueSlices.VSDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSDescription\' in table \'ListParcelSplitValueSlices\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.VSDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoll {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelSplitValueSlices.IsRollColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRoll\' in table \'ListParcelSplitValueSlices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.IsRollColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelSplitValueSlices.IsValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValue\' in table \'ListParcelSplitValueSlices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.IsValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueString {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitValueSlices.ValueStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueString\' in table \'ListParcelSplitValueSlices\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.ValueStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollString {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitValueSlices.RollStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollString\' in table \'ListParcelSplitValueSlices\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.RollStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VSString {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitValueSlices.VSStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSString\' in table \'ListParcelSplitValueSlices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitValueSlices.VSStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableListParcelSplitValueSlices.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListParcelSplitValueSlices.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeIDNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.SliceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeIDNull() {
                this[this.tableListParcelSplitValueSlices.SliceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSObjectNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.VSObjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSObjectNull() {
                this[this.tableListParcelSplitValueSlices.VSObjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSDescriptionNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.VSDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSDescriptionNull() {
                this[this.tableListParcelSplitValueSlices.VSDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRollNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.IsRollColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRollNull() {
                this[this.tableListParcelSplitValueSlices.IsRollColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValueNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.IsValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValueNull() {
                this[this.tableListParcelSplitValueSlices.IsValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueStringNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.ValueStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueStringNull() {
                this[this.tableListParcelSplitValueSlices.ValueStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollStringNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.RollStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollStringNull() {
                this[this.tableListParcelSplitValueSlices.RollStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSStringNull() {
                return this.IsNull(this.tableListParcelSplitValueSlices.VSStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSStringNull() {
                this[this.tableListParcelSplitValueSlices.VSStringColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSplitObjectRow : global::System.Data.DataRow {
            
            private ListSplitObjectDataTable tableListSplitObject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitObjectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSplitObject = ((ListSplitObjectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitObject.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'ListSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitObject.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Checked1 {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitObject.Checked1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Checked1\' in table \'ListSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitObject.Checked1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ObjectString1 {
                get {
                    try {
                        return ((string)(this[this.tableListSplitObject.ObjectString1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectString1\' in table \'ListSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitObject.ObjectString1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitObject.IsValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValue\' in table \'ListSplitObject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitObject.IsValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableListSplitObject.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableListSplitObject.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChecked1Null() {
                return this.IsNull(this.tableListSplitObject.Checked1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChecked1Null() {
                this[this.tableListSplitObject.Checked1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectString1Null() {
                return this.IsNull(this.tableListSplitObject.ObjectString1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectString1Null() {
                this[this.tableListSplitObject.ObjectString1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValueNull() {
                return this.IsNull(this.tableListSplitObject.IsValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValueNull() {
                this[this.tableListSplitObject.IsValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSplitValuseSliceRow : global::System.Data.DataRow {
            
            private ListSplitValuseSliceDataTable tableListSplitValuseSlice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitValuseSliceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSplitValuseSlice = ((ListSplitValuseSliceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitValuseSlice.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'ListSplitValuseSlice\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitValuseSlice.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitValuseSlice.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListSplitValuseSlice\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitValuseSlice.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Checked1 {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitValuseSlice.Checked1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Checked1\' in table \'ListSplitValuseSlice\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitValuseSlice.Checked1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VSString1 {
                get {
                    try {
                        return ((string)(this[this.tableListSplitValuseSlice.VSString1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSString1\' in table \'ListSplitValuseSlice\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitValuseSlice.VSString1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitValuseSlice.IsValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValue\' in table \'ListSplitValuseSlice\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitValuseSlice.IsValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableListSplitValuseSlice.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableListSplitValuseSlice.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListSplitValuseSlice.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListSplitValuseSlice.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChecked1Null() {
                return this.IsNull(this.tableListSplitValuseSlice.Checked1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChecked1Null() {
                this[this.tableListSplitValuseSlice.Checked1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSString1Null() {
                return this.IsNull(this.tableListSplitValuseSlice.VSString1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSString1Null() {
                this[this.tableListSplitValuseSlice.VSString1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValueNull() {
                return this.IsNull(this.tableListSplitValuseSlice.IsValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValueNull() {
                this[this.tableListSplitValuseSlice.IsValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSplitDefinitionHeaderRow : global::System.Data.DataRow {
            
            private ListSplitDefinitionHeaderDataTable tableListSplitDefinitionHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitDefinitionHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSplitDefinitionHeader = ((ListSplitDefinitionHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ListSplitDefinitionHeader\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NumResultingParcels {
                get {
                    try {
                        return ((short)(this[this.tableListSplitDefinitionHeader.NumResultingParcelsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumResultingParcels\' in table \'ListSplitDefinitionHeader\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.NumResultingParcelsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetails {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitDefinitionHeader.IsDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDetails\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.IsDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComments {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitDefinitionHeader.IsCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsComments\' in table \'ListSplitDefinitionHeader\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.IsCommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttachments {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitDefinitionHeader.IsAttachmentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAttachments\' in table \'ListSplitDefinitionHeader\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.IsAttachmentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O3Value {
                get {
                    try {
                        return ((decimal)(this[this.tableListSplitDefinitionHeader.O3ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O3Value\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.O3ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitDefinitionHeader.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitDefinitionHeader.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SplitID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitDefinitionHeader.SplitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SplitID\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.SplitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsSplitProcessed {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.IsSplitProcessedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSplitProcessed\' in table \'ListSplitDefinitionHeader\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.IsSplitProcessedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseParcelID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitDefinitionHeader.BaseParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseParcelID\' in table \'ListSplitDefinitionHeader\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.BaseParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SplitID1 {
                get {
                    try {
                        return ((int)(this[this.tableListSplitDefinitionHeader.SplitID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SplitID1\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.SplitID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID1Label {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.ID1LabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID1Label\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.ID1LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID1Mask {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.ID1MaskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID1Mask\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.ID1MaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOR {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.DORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOR\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.DORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PSXml {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.PSXmlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PSXml\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.PSXmlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID2Label {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.ID2LabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID2Label\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.ID2LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID2Mask {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.ID2MaskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID2Mask\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.ID2MaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfiguredState {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.ConfiguredStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfiguredState\' in table \'ListSplitDefinitionHeader\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.ConfiguredStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassCode {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.ClassCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassCode\' in table \'ListSplitDefinitionHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.ClassCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassCodeRGB {
                get {
                    try {
                        return ((string)(this[this.tableListSplitDefinitionHeader.ClassCodeRGBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassCodeRGB\' in table \'ListSplitDefinitionHeader\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListSplitDefinitionHeader.ClassCodeRGBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableListSplitDefinitionHeader.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumResultingParcelsNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.NumResultingParcelsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumResultingParcelsNull() {
                this[this.tableListSplitDefinitionHeader.NumResultingParcelsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDetailsNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.IsDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDetailsNull() {
                this[this.tableListSplitDefinitionHeader.IsDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCommentsNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.IsCommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCommentsNull() {
                this[this.tableListSplitDefinitionHeader.IsCommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAttachmentsNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.IsAttachmentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAttachmentsNull() {
                this[this.tableListSplitDefinitionHeader.IsAttachmentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO3ValueNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.O3ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO3ValueNull() {
                this[this.tableListSplitDefinitionHeader.O3ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableListSplitDefinitionHeader.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tableListSplitDefinitionHeader.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSplitIDNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.SplitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSplitIDNull() {
                this[this.tableListSplitDefinitionHeader.SplitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSplitProcessedNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.IsSplitProcessedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSplitProcessedNull() {
                this[this.tableListSplitDefinitionHeader.IsSplitProcessedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseParcelIDNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.BaseParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseParcelIDNull() {
                this[this.tableListSplitDefinitionHeader.BaseParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSplitID1Null() {
                return this.IsNull(this.tableListSplitDefinitionHeader.SplitID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSplitID1Null() {
                this[this.tableListSplitDefinitionHeader.SplitID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID1LabelNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.ID1LabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID1LabelNull() {
                this[this.tableListSplitDefinitionHeader.ID1LabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID1MaskNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.ID1MaskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID1MaskNull() {
                this[this.tableListSplitDefinitionHeader.ID1MaskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDORNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.DORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDORNull() {
                this[this.tableListSplitDefinitionHeader.DORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPSXmlNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.PSXmlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPSXmlNull() {
                this[this.tableListSplitDefinitionHeader.PSXmlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID2LabelNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.ID2LabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID2LabelNull() {
                this[this.tableListSplitDefinitionHeader.ID2LabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID2MaskNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.ID2MaskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID2MaskNull() {
                this[this.tableListSplitDefinitionHeader.ID2MaskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfiguredStateNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.ConfiguredStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfiguredStateNull() {
                this[this.tableListSplitDefinitionHeader.ConfiguredStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassCodeNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.ClassCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassCodeNull() {
                this[this.tableListSplitDefinitionHeader.ClassCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassCodeRGBNull() {
                return this.IsNull(this.tableListSplitDefinitionHeader.ClassCodeRGBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassCodeRGBNull() {
                this[this.tableListSplitDefinitionHeader.ClassCodeRGBColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListValueSliceSavedValueRow : global::System.Data.DataRow {
            
            private ListValueSliceSavedValueDataTable tableListValueSliceSavedValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListValueSliceSavedValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListValueSliceSavedValue = ((ListValueSliceSavedValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListValueSliceSavedValue.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListValueSliceSavedValue\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListValueSliceSavedValue.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsChecked {
                get {
                    try {
                        return ((string)(this[this.tableListValueSliceSavedValue.IsCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsChecked\' in table \'ListValueSliceSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListValueSliceSavedValue.IsCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue {
                get {
                    try {
                        return ((bool)(this[this.tableListValueSliceSavedValue.IsValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValue\' in table \'ListValueSliceSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListValueSliceSavedValue.IsValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListValueSliceSavedValue.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListValueSliceSavedValue.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckedNull() {
                return this.IsNull(this.tableListValueSliceSavedValue.IsCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckedNull() {
                this[this.tableListValueSliceSavedValue.IsCheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValueNull() {
                return this.IsNull(this.tableListValueSliceSavedValue.IsValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValueNull() {
                this[this.tableListValueSliceSavedValue.IsValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListObjectSavedValueRow : global::System.Data.DataRow {
            
            private ListObjectSavedValueDataTable tableListObjectSavedValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListObjectSavedValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListObjectSavedValue = ((ListObjectSavedValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableListObjectSavedValue.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ListObjectSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListObjectSavedValue.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableListObjectSavedValue.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'ListObjectSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListObjectSavedValue.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsChecked {
                get {
                    try {
                        return ((string)(this[this.tableListObjectSavedValue.IsCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsChecked\' in table \'ListObjectSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListObjectSavedValue.IsCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue {
                get {
                    try {
                        return ((bool)(this[this.tableListObjectSavedValue.IsValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValue\' in table \'ListObjectSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListObjectSavedValue.IsValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableListObjectSavedValue.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableListObjectSavedValue.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableListObjectSavedValue.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableListObjectSavedValue.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckedNull() {
                return this.IsNull(this.tableListObjectSavedValue.IsCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckedNull() {
                this[this.tableListObjectSavedValue.IsCheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValueNull() {
                return this.IsNull(this.tableListObjectSavedValue.IsValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValueNull() {
                this[this.tableListObjectSavedValue.IsValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListParcelSplitCropRow : global::System.Data.DataRow {
            
            private ListParcelSplitCropDataTable tableListParcelSplitCrop;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListParcelSplitCropRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListParcelSplitCrop = ((ListParcelSplitCropDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelSplitCrop.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelSplitCrop.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SliceTypeID {
                get {
                    try {
                        return ((short)(this[this.tableListParcelSplitCrop.SliceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SliceTypeID\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.SliceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VSObject {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitCrop.VSObjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSObject\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.VSObjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VSDescription {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitCrop.VSDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSDescription\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.VSDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoll {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelSplitCrop.IsRollColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRoll\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.IsRollColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue {
                get {
                    try {
                        return ((bool)(this[this.tableListParcelSplitCrop.IsValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValue\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.IsValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollString {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitCrop.RollStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollString\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.RollStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueString {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitCrop.ValueStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueString\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.ValueStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VSString {
                get {
                    try {
                        return ((string)(this[this.tableListParcelSplitCrop.VSStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSString\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.VSStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ComponentID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelSplitCrop.ComponentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ComponentID\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.ComponentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ComponentTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListParcelSplitCrop.ComponentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ComponentTypeID\' in table \'ListParcelSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListParcelSplitCrop.ComponentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableListParcelSplitCrop.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableListParcelSplitCrop.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListParcelSplitCrop.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListParcelSplitCrop.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeIDNull() {
                return this.IsNull(this.tableListParcelSplitCrop.SliceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeIDNull() {
                this[this.tableListParcelSplitCrop.SliceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSObjectNull() {
                return this.IsNull(this.tableListParcelSplitCrop.VSObjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSObjectNull() {
                this[this.tableListParcelSplitCrop.VSObjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSDescriptionNull() {
                return this.IsNull(this.tableListParcelSplitCrop.VSDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSDescriptionNull() {
                this[this.tableListParcelSplitCrop.VSDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRollNull() {
                return this.IsNull(this.tableListParcelSplitCrop.IsRollColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRollNull() {
                this[this.tableListParcelSplitCrop.IsRollColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValueNull() {
                return this.IsNull(this.tableListParcelSplitCrop.IsValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValueNull() {
                this[this.tableListParcelSplitCrop.IsValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollStringNull() {
                return this.IsNull(this.tableListParcelSplitCrop.RollStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollStringNull() {
                this[this.tableListParcelSplitCrop.RollStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueStringNull() {
                return this.IsNull(this.tableListParcelSplitCrop.ValueStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueStringNull() {
                this[this.tableListParcelSplitCrop.ValueStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSStringNull() {
                return this.IsNull(this.tableListParcelSplitCrop.VSStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSStringNull() {
                this[this.tableListParcelSplitCrop.VSStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComponentIDNull() {
                return this.IsNull(this.tableListParcelSplitCrop.ComponentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComponentIDNull() {
                this[this.tableListParcelSplitCrop.ComponentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComponentTypeIDNull() {
                return this.IsNull(this.tableListParcelSplitCrop.ComponentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComponentTypeIDNull() {
                this[this.tableListParcelSplitCrop.ComponentTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSplitCropRow : global::System.Data.DataRow {
            
            private ListSplitCropDataTable tableListSplitCrop;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitCropRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSplitCrop = ((ListSplitCropDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitCrop.ObjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectID\' in table \'ListSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitCrop.ObjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitCrop.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitCrop.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SliceTypeID {
                get {
                    try {
                        return ((short)(this[this.tableListSplitCrop.SliceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SliceTypeID\' in table \'ListSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitCrop.SliceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Checked1 {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitCrop.Checked1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Checked1\' in table \'ListSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitCrop.Checked1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VSString1 {
                get {
                    try {
                        return ((string)(this[this.tableListSplitCrop.VSString1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSString1\' in table \'ListSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitCrop.VSString1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsValue1 {
                get {
                    try {
                        return ((string)(this[this.tableListSplitCrop.IsValue1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsValue1\' in table \'ListSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitCrop.IsValue1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ComponentID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitCrop.ComponentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ComponentID\' in table \'ListSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitCrop.ComponentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ComponentTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitCrop.ComponentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ComponentTypeID\' in table \'ListSplitCrop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitCrop.ComponentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectIDNull() {
                return this.IsNull(this.tableListSplitCrop.ObjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectIDNull() {
                this[this.tableListSplitCrop.ObjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListSplitCrop.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListSplitCrop.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeIDNull() {
                return this.IsNull(this.tableListSplitCrop.SliceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeIDNull() {
                this[this.tableListSplitCrop.SliceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChecked1Null() {
                return this.IsNull(this.tableListSplitCrop.Checked1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChecked1Null() {
                this[this.tableListSplitCrop.Checked1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSString1Null() {
                return this.IsNull(this.tableListSplitCrop.VSString1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSString1Null() {
                this[this.tableListSplitCrop.VSString1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsValue1Null() {
                return this.IsNull(this.tableListSplitCrop.IsValue1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsValue1Null() {
                this[this.tableListSplitCrop.IsValue1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComponentIDNull() {
                return this.IsNull(this.tableListSplitCrop.ComponentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComponentIDNull() {
                this[this.tableListSplitCrop.ComponentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComponentTypeIDNull() {
                return this.IsNull(this.tableListSplitCrop.ComponentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComponentTypeIDNull() {
                this[this.tableListSplitCrop.ComponentTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListCropSavedValueRow : global::System.Data.DataRow {
            
            private ListCropSavedValueDataTable tableListCropSavedValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListCropSavedValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListCropSavedValue = ((ListCropSavedValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableListCropSavedValue.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ListCropSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropSavedValue.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListCropSavedValue.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListCropSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropSavedValue.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SplitComponentID {
                get {
                    try {
                        return ((int)(this[this.tableListCropSavedValue.SplitComponentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SplitComponentID\' in table \'ListCropSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropSavedValue.SplitComponentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Units {
                get {
                    try {
                        return ((decimal)(this[this.tableListCropSavedValue.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'ListCropSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropSavedValue.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ComponentTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListCropSavedValue.ComponentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ComponentTypeID\' in table \'ListCropSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropSavedValue.ComponentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChecked {
                get {
                    try {
                        return ((bool)(this[this.tableListCropSavedValue.IsCheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsChecked\' in table \'ListCropSavedValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCropSavedValue.IsCheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableListCropSavedValue.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableListCropSavedValue.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListCropSavedValue.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListCropSavedValue.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSplitComponentIDNull() {
                return this.IsNull(this.tableListCropSavedValue.SplitComponentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSplitComponentIDNull() {
                this[this.tableListCropSavedValue.SplitComponentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableListCropSavedValue.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableListCropSavedValue.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComponentTypeIDNull() {
                return this.IsNull(this.tableListCropSavedValue.ComponentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComponentTypeIDNull() {
                this[this.tableListCropSavedValue.ComponentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCheckedNull() {
                return this.IsNull(this.tableListCropSavedValue.IsCheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCheckedNull() {
                this[this.tableListCropSavedValue.IsCheckedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSplitHeaderDetailRow : global::System.Data.DataRow {
            
            private ListSplitHeaderDetailDataTable tableListSplitHeaderDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSplitHeaderDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSplitHeaderDetail = ((ListSplitHeaderDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SplitParcelID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitHeaderDetail.SplitParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SplitParcelID\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.SplitParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOR {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.DORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOR\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.DORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SplitID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitHeaderDetail.SplitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SplitID\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.SplitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttachment {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitHeaderDetail.IsAttachmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAttachment\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.IsAttachmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComment {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitHeaderDetail.IsCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsComment\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.IsCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StreetID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitHeaderDetail.StreetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StreetID\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.StreetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HouseNumber {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.HouseNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HouseNumber\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.HouseNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZipCode {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.ZipCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZipCode\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.ZipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitNumber {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.UnitNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitNumber\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.UnitNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal X_Coord {
                get {
                    try {
                        return ((decimal)(this[this.tableListSplitHeaderDetail.X_CoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'X_Coord\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.X_CoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Y_Coord {
                get {
                    try {
                        return ((decimal)(this[this.tableListSplitHeaderDetail.Y_CoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Y_Coord\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.Y_CoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableListSplitHeaderDetail.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID2 {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.ID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID2\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.ID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID1 {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.ID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID1\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.ID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermit {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitHeaderDetail.IsPermitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermit\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.IsPermitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssociation {
                get {
                    try {
                        return ((bool)(this[this.tableListSplitHeaderDetail.IsAssociationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAssociation\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.IsAssociationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfiguredState {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.ConfiguredStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfiguredState\' in table \'ListSplitHeaderDetail\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.ConfiguredStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassCode {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.ClassCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassCode\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.ClassCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassCodeRGB {
                get {
                    try {
                        return ((string)(this[this.tableListSplitHeaderDetail.ClassCodeRGBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassCodeRGB\' in table \'ListSplitHeaderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSplitHeaderDetail.ClassCodeRGBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSplitParcelIDNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.SplitParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSplitParcelIDNull() {
                this[this.tableListSplitHeaderDetail.SplitParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableListSplitHeaderDetail.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDORNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.DORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDORNull() {
                this[this.tableListSplitHeaderDetail.DORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSplitIDNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.SplitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSplitIDNull() {
                this[this.tableListSplitHeaderDetail.SplitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAttachmentNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.IsAttachmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAttachmentNull() {
                this[this.tableListSplitHeaderDetail.IsAttachmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCommentNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.IsCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCommentNull() {
                this[this.tableListSplitHeaderDetail.IsCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableListSplitHeaderDetail.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableListSplitHeaderDetail.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetIDNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.StreetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetIDNull() {
                this[this.tableListSplitHeaderDetail.StreetIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHouseNumberNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.HouseNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHouseNumberNull() {
                this[this.tableListSplitHeaderDetail.HouseNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableListSplitHeaderDetail.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipCodeNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.ZipCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipCodeNull() {
                this[this.tableListSplitHeaderDetail.ZipCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNumberNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.UnitNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNumberNull() {
                this[this.tableListSplitHeaderDetail.UnitNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsX_CoordNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.X_CoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetX_CoordNull() {
                this[this.tableListSplitHeaderDetail.X_CoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsY_CoordNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.Y_CoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetY_CoordNull() {
                this[this.tableListSplitHeaderDetail.Y_CoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableListSplitHeaderDetail.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID2Null() {
                return this.IsNull(this.tableListSplitHeaderDetail.ID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID2Null() {
                this[this.tableListSplitHeaderDetail.ID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID1Null() {
                return this.IsNull(this.tableListSplitHeaderDetail.ID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID1Null() {
                this[this.tableListSplitHeaderDetail.ID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermitNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.IsPermitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermitNull() {
                this[this.tableListSplitHeaderDetail.IsPermitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAssociationNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.IsAssociationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAssociationNull() {
                this[this.tableListSplitHeaderDetail.IsAssociationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfiguredStateNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.ConfiguredStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfiguredStateNull() {
                this[this.tableListSplitHeaderDetail.ConfiguredStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassCodeNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.ClassCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassCodeNull() {
                this[this.tableListSplitHeaderDetail.ClassCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassCodeRGBNull() {
                return this.IsNull(this.tableListSplitHeaderDetail.ClassCodeRGBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassCodeRGBNull() {
                this[this.tableListSplitHeaderDetail.ClassCodeRGBColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListParcelSplitObjectRowChangeEvent : global::System.EventArgs {
            
            private ListParcelSplitObjectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitObjectRowChangeEvent(ListParcelSplitObjectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitObjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListParcelSplitValueSlicesRowChangeEvent : global::System.EventArgs {
            
            private ListParcelSplitValueSlicesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitValueSlicesRowChangeEvent(ListParcelSplitValueSlicesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitValueSlicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSplitObjectRowChangeEvent : global::System.EventArgs {
            
            private ListSplitObjectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitObjectRowChangeEvent(ListSplitObjectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitObjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSplitValuseSliceRowChangeEvent : global::System.EventArgs {
            
            private ListSplitValuseSliceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitValuseSliceRowChangeEvent(ListSplitValuseSliceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitValuseSliceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSplitDefinitionHeaderRowChangeEvent : global::System.EventArgs {
            
            private ListSplitDefinitionHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitDefinitionHeaderRowChangeEvent(ListSplitDefinitionHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitDefinitionHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListValueSliceSavedValueRowChangeEvent : global::System.EventArgs {
            
            private ListValueSliceSavedValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValueSliceSavedValueRowChangeEvent(ListValueSliceSavedValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValueSliceSavedValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListObjectSavedValueRowChangeEvent : global::System.EventArgs {
            
            private ListObjectSavedValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectSavedValueRowChangeEvent(ListObjectSavedValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListObjectSavedValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListParcelSplitCropRowChangeEvent : global::System.EventArgs {
            
            private ListParcelSplitCropRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitCropRowChangeEvent(ListParcelSplitCropRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListParcelSplitCropRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSplitCropRowChangeEvent : global::System.EventArgs {
            
            private ListSplitCropRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitCropRowChangeEvent(ListSplitCropRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitCropRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListCropSavedValueRowChangeEvent : global::System.EventArgs {
            
            private ListCropSavedValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropSavedValueRowChangeEvent(ListCropSavedValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListCropSavedValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSplitHeaderDetailRowChangeEvent : global::System.EventArgs {
            
            private ListSplitHeaderDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitHeaderDetailRowChangeEvent(ListSplitHeaderDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSplitHeaderDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591