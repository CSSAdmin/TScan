//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F36001MarshalAndSwiftCommercialData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F36001MarshalAndSwiftCommercialData : global::System.Data.DataSet {
        
        private GetMarshallSwiftCommercialDataTable tableGetMarshallSwiftCommercial;
        
        private GetEstimateDataTable tableGetEstimate;
        
        private GetOccupancyDataTable tableGetOccupancy;
        
        private GetComponentDataTable tableGetComponent;
        
        private ListDeprValueDataTableDataTable tableListDeprValueDataTable;
        
        private ListDeprTableDataTable tableListDeprTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F36001MarshalAndSwiftCommercialData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F36001MarshalAndSwiftCommercialData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetMarshallSwiftCommercial"] != null)) {
                    base.Tables.Add(new GetMarshallSwiftCommercialDataTable(ds.Tables["GetMarshallSwiftCommercial"]));
                }
                if ((ds.Tables["GetEstimate"] != null)) {
                    base.Tables.Add(new GetEstimateDataTable(ds.Tables["GetEstimate"]));
                }
                if ((ds.Tables["GetOccupancy"] != null)) {
                    base.Tables.Add(new GetOccupancyDataTable(ds.Tables["GetOccupancy"]));
                }
                if ((ds.Tables["GetComponent"] != null)) {
                    base.Tables.Add(new GetComponentDataTable(ds.Tables["GetComponent"]));
                }
                if ((ds.Tables["ListDeprValueDataTable"] != null)) {
                    base.Tables.Add(new ListDeprValueDataTableDataTable(ds.Tables["ListDeprValueDataTable"]));
                }
                if ((ds.Tables["ListDeprTable"] != null)) {
                    base.Tables.Add(new ListDeprTableDataTable(ds.Tables["ListDeprTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMarshallSwiftCommercialDataTable GetMarshallSwiftCommercial {
            get {
                return this.tableGetMarshallSwiftCommercial;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetEstimateDataTable GetEstimate {
            get {
                return this.tableGetEstimate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetOccupancyDataTable GetOccupancy {
            get {
                return this.tableGetOccupancy;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetComponentDataTable GetComponent {
            get {
                return this.tableGetComponent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDeprValueDataTableDataTable ListDeprValueDataTable {
            get {
                return this.tableListDeprValueDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDeprTableDataTable ListDeprTable {
            get {
                return this.tableListDeprTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F36001MarshalAndSwiftCommercialData cln = ((F36001MarshalAndSwiftCommercialData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetMarshallSwiftCommercial"] != null)) {
                    base.Tables.Add(new GetMarshallSwiftCommercialDataTable(ds.Tables["GetMarshallSwiftCommercial"]));
                }
                if ((ds.Tables["GetEstimate"] != null)) {
                    base.Tables.Add(new GetEstimateDataTable(ds.Tables["GetEstimate"]));
                }
                if ((ds.Tables["GetOccupancy"] != null)) {
                    base.Tables.Add(new GetOccupancyDataTable(ds.Tables["GetOccupancy"]));
                }
                if ((ds.Tables["GetComponent"] != null)) {
                    base.Tables.Add(new GetComponentDataTable(ds.Tables["GetComponent"]));
                }
                if ((ds.Tables["ListDeprValueDataTable"] != null)) {
                    base.Tables.Add(new ListDeprValueDataTableDataTable(ds.Tables["ListDeprValueDataTable"]));
                }
                if ((ds.Tables["ListDeprTable"] != null)) {
                    base.Tables.Add(new ListDeprTableDataTable(ds.Tables["ListDeprTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetMarshallSwiftCommercial = ((GetMarshallSwiftCommercialDataTable)(base.Tables["GetMarshallSwiftCommercial"]));
            if ((initTable == true)) {
                if ((this.tableGetMarshallSwiftCommercial != null)) {
                    this.tableGetMarshallSwiftCommercial.InitVars();
                }
            }
            this.tableGetEstimate = ((GetEstimateDataTable)(base.Tables["GetEstimate"]));
            if ((initTable == true)) {
                if ((this.tableGetEstimate != null)) {
                    this.tableGetEstimate.InitVars();
                }
            }
            this.tableGetOccupancy = ((GetOccupancyDataTable)(base.Tables["GetOccupancy"]));
            if ((initTable == true)) {
                if ((this.tableGetOccupancy != null)) {
                    this.tableGetOccupancy.InitVars();
                }
            }
            this.tableGetComponent = ((GetComponentDataTable)(base.Tables["GetComponent"]));
            if ((initTable == true)) {
                if ((this.tableGetComponent != null)) {
                    this.tableGetComponent.InitVars();
                }
            }
            this.tableListDeprValueDataTable = ((ListDeprValueDataTableDataTable)(base.Tables["ListDeprValueDataTable"]));
            if ((initTable == true)) {
                if ((this.tableListDeprValueDataTable != null)) {
                    this.tableListDeprValueDataTable.InitVars();
                }
            }
            this.tableListDeprTable = ((ListDeprTableDataTable)(base.Tables["ListDeprTable"]));
            if ((initTable == true)) {
                if ((this.tableListDeprTable != null)) {
                    this.tableListDeprTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F36001MarshalAndSwiftCommercialData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F36001MarshalAndSwiftCommercialData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetMarshallSwiftCommercial = new GetMarshallSwiftCommercialDataTable();
            base.Tables.Add(this.tableGetMarshallSwiftCommercial);
            this.tableGetEstimate = new GetEstimateDataTable();
            base.Tables.Add(this.tableGetEstimate);
            this.tableGetOccupancy = new GetOccupancyDataTable();
            base.Tables.Add(this.tableGetOccupancy);
            this.tableGetComponent = new GetComponentDataTable();
            base.Tables.Add(this.tableGetComponent);
            this.tableListDeprValueDataTable = new ListDeprValueDataTableDataTable();
            base.Tables.Add(this.tableListDeprValueDataTable);
            this.tableListDeprTable = new ListDeprTableDataTable();
            base.Tables.Add(this.tableListDeprTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMarshallSwiftCommercial() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetEstimate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetOccupancy() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetComponent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDeprValueDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDeprTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F36001MarshalAndSwiftCommercialData ds = new F36001MarshalAndSwiftCommercialData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetMarshallSwiftCommercialRowChangeEventHandler(object sender, GetMarshallSwiftCommercialRowChangeEvent e);
        
        public delegate void GetEstimateRowChangeEventHandler(object sender, GetEstimateRowChangeEvent e);
        
        public delegate void GetOccupancyRowChangeEventHandler(object sender, GetOccupancyRowChangeEvent e);
        
        public delegate void GetComponentRowChangeEventHandler(object sender, GetComponentRowChangeEvent e);
        
        public delegate void ListDeprValueDataTableRowChangeEventHandler(object sender, ListDeprValueDataTableRowChangeEvent e);
        
        public delegate void ListDeprTableRowChangeEventHandler(object sender, ListDeprTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMarshallSwiftCommercialDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnHTCID;
            
            private global::System.Data.DataColumn columnSliceTypeID;
            
            private global::System.Data.DataColumn columnConstructionTypeID;
            
            private global::System.Data.DataColumn columnMSVersionID;
            
            private global::System.Data.DataColumn columnEstimateID;
            
            private global::System.Data.DataColumn columnHTCXML;
            
            private global::System.Data.DataColumn columnZipCode;
            
            private global::System.Data.DataColumn columnConnectionString;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnObjectCondition;
            
            private global::System.Data.DataColumn columnEffectiveAge;
            
            private global::System.Data.DataColumn columnCostMultiplier;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarshallSwiftCommercialDataTable() {
                this.TableName = "GetMarshallSwiftCommercial";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMarshallSwiftCommercialDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMarshallSwiftCommercialDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HTCIDColumn {
                get {
                    return this.columnHTCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SliceTypeIDColumn {
                get {
                    return this.columnSliceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructionTypeIDColumn {
                get {
                    return this.columnConstructionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MSVersionIDColumn {
                get {
                    return this.columnMSVersionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstimateIDColumn {
                get {
                    return this.columnEstimateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HTCXMLColumn {
                get {
                    return this.columnHTCXML;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionStringColumn {
                get {
                    return this.columnConnectionString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectConditionColumn {
                get {
                    return this.columnObjectCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveAgeColumn {
                get {
                    return this.columnEffectiveAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostMultiplierColumn {
                get {
                    return this.columnCostMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarshallSwiftCommercialRow this[int index] {
                get {
                    return ((GetMarshallSwiftCommercialRow)(this.Rows[index]));
                }
            }
            
            public event GetMarshallSwiftCommercialRowChangeEventHandler GetMarshallSwiftCommercialRowChanging;
            
            public event GetMarshallSwiftCommercialRowChangeEventHandler GetMarshallSwiftCommercialRowChanged;
            
            public event GetMarshallSwiftCommercialRowChangeEventHandler GetMarshallSwiftCommercialRowDeleting;
            
            public event GetMarshallSwiftCommercialRowChangeEventHandler GetMarshallSwiftCommercialRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMarshallSwiftCommercialRow(GetMarshallSwiftCommercialRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarshallSwiftCommercialRow AddGetMarshallSwiftCommercialRow(int HTCID, int SliceTypeID, int ConstructionTypeID, int MSVersionID, int EstimateID, string HTCXML, string ZipCode, string ConnectionString, int RollYear, decimal ObjectCondition, byte EffectiveAge, string CostMultiplier) {
                GetMarshallSwiftCommercialRow rowGetMarshallSwiftCommercialRow = ((GetMarshallSwiftCommercialRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HTCID,
                        SliceTypeID,
                        ConstructionTypeID,
                        MSVersionID,
                        EstimateID,
                        HTCXML,
                        ZipCode,
                        ConnectionString,
                        RollYear,
                        ObjectCondition,
                        EffectiveAge,
                        CostMultiplier};
                rowGetMarshallSwiftCommercialRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMarshallSwiftCommercialRow);
                return rowGetMarshallSwiftCommercialRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMarshallSwiftCommercialDataTable cln = ((GetMarshallSwiftCommercialDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMarshallSwiftCommercialDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHTCID = base.Columns["HTCID"];
                this.columnSliceTypeID = base.Columns["SliceTypeID"];
                this.columnConstructionTypeID = base.Columns["ConstructionTypeID"];
                this.columnMSVersionID = base.Columns["MSVersionID"];
                this.columnEstimateID = base.Columns["EstimateID"];
                this.columnHTCXML = base.Columns["HTCXML"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnConnectionString = base.Columns["ConnectionString"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnObjectCondition = base.Columns["ObjectCondition"];
                this.columnEffectiveAge = base.Columns["EffectiveAge"];
                this.columnCostMultiplier = base.Columns["CostMultiplier"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHTCID = new global::System.Data.DataColumn("HTCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHTCID);
                this.columnSliceTypeID = new global::System.Data.DataColumn("SliceTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSliceTypeID);
                this.columnConstructionTypeID = new global::System.Data.DataColumn("ConstructionTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructionTypeID);
                this.columnMSVersionID = new global::System.Data.DataColumn("MSVersionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMSVersionID);
                this.columnEstimateID = new global::System.Data.DataColumn("EstimateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstimateID);
                this.columnHTCXML = new global::System.Data.DataColumn("HTCXML", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHTCXML);
                this.columnZipCode = new global::System.Data.DataColumn("ZipCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnConnectionString = new global::System.Data.DataColumn("ConnectionString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionString);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnObjectCondition = new global::System.Data.DataColumn("ObjectCondition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectCondition);
                this.columnEffectiveAge = new global::System.Data.DataColumn("EffectiveAge", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveAge);
                this.columnCostMultiplier = new global::System.Data.DataColumn("CostMultiplier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostMultiplier);
                this.columnHTCID.AllowDBNull = false;
                this.columnSliceTypeID.ReadOnly = true;
                this.columnMSVersionID.AllowDBNull = false;
                this.columnEstimateID.ReadOnly = true;
                this.columnHTCXML.ReadOnly = true;
                this.columnHTCXML.MaxLength = 2147483647;
                this.columnZipCode.ReadOnly = true;
                this.columnZipCode.MaxLength = 1000;
                this.columnConnectionString.DefaultValue = ((string)(""));
                this.columnConnectionString.MaxLength = 200;
                this.columnCostMultiplier.MaxLength = 2000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarshallSwiftCommercialRow NewGetMarshallSwiftCommercialRow() {
                return ((GetMarshallSwiftCommercialRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMarshallSwiftCommercialRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMarshallSwiftCommercialRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMarshallSwiftCommercialRowChanged != null)) {
                    this.GetMarshallSwiftCommercialRowChanged(this, new GetMarshallSwiftCommercialRowChangeEvent(((GetMarshallSwiftCommercialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMarshallSwiftCommercialRowChanging != null)) {
                    this.GetMarshallSwiftCommercialRowChanging(this, new GetMarshallSwiftCommercialRowChangeEvent(((GetMarshallSwiftCommercialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMarshallSwiftCommercialRowDeleted != null)) {
                    this.GetMarshallSwiftCommercialRowDeleted(this, new GetMarshallSwiftCommercialRowChangeEvent(((GetMarshallSwiftCommercialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMarshallSwiftCommercialRowDeleting != null)) {
                    this.GetMarshallSwiftCommercialRowDeleting(this, new GetMarshallSwiftCommercialRowChangeEvent(((GetMarshallSwiftCommercialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMarshallSwiftCommercialRow(GetMarshallSwiftCommercialRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36001MarshalAndSwiftCommercialData ds = new F36001MarshalAndSwiftCommercialData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMarshallSwiftCommercialDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetEstimateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnRcnValue;
            
            private global::System.Data.DataColumn columnLocalMultiplier;
            
            private global::System.Data.DataColumn columnArchFeePercentage;
            
            private global::System.Data.DataColumn columnRounding;
            
            private global::System.Data.DataColumn columnDefault;
            
            private global::System.Data.DataColumn columnSectionArea;
            
            private global::System.Data.DataColumn columnStorySection;
            
            private global::System.Data.DataColumn columnStoryBuilding;
            
            private global::System.Data.DataColumn columnStoryPerimeter;
            
            private global::System.Data.DataColumn columnStoryShape;
            
            private global::System.Data.DataColumn columnSectionPerSf;
            
            private global::System.Data.DataColumn columnBasementPerimeter;
            
            private global::System.Data.DataColumn columnBasementShape;
            
            private global::System.Data.DataColumn columnBasementLevel;
            
            private global::System.Data.DataColumn columnSectionID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEstimateDataTable() {
                this.TableName = "GetEstimate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetEstimateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetEstimateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RcnValueColumn {
                get {
                    return this.columnRcnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocalMultiplierColumn {
                get {
                    return this.columnLocalMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArchFeePercentageColumn {
                get {
                    return this.columnArchFeePercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoundingColumn {
                get {
                    return this.columnRounding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultColumn {
                get {
                    return this.columnDefault;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionAreaColumn {
                get {
                    return this.columnSectionArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StorySectionColumn {
                get {
                    return this.columnStorySection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryBuildingColumn {
                get {
                    return this.columnStoryBuilding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryPerimeterColumn {
                get {
                    return this.columnStoryPerimeter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoryShapeColumn {
                get {
                    return this.columnStoryShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionPerSfColumn {
                get {
                    return this.columnSectionPerSf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasementPerimeterColumn {
                get {
                    return this.columnBasementPerimeter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasementShapeColumn {
                get {
                    return this.columnBasementShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasementLevelColumn {
                get {
                    return this.columnBasementLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEstimateRow this[int index] {
                get {
                    return ((GetEstimateRow)(this.Rows[index]));
                }
            }
            
            public event GetEstimateRowChangeEventHandler GetEstimateRowChanging;
            
            public event GetEstimateRowChangeEventHandler GetEstimateRowChanged;
            
            public event GetEstimateRowChangeEventHandler GetEstimateRowDeleting;
            
            public event GetEstimateRowChangeEventHandler GetEstimateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetEstimateRow(GetEstimateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEstimateRow AddGetEstimateRow(
                        string ValueSliceID, 
                        string RcnValue, 
                        string LocalMultiplier, 
                        string ArchFeePercentage, 
                        string Rounding, 
                        string Default, 
                        string SectionArea, 
                        string StorySection, 
                        string StoryBuilding, 
                        string StoryPerimeter, 
                        string StoryShape, 
                        string SectionPerSf, 
                        string BasementPerimeter, 
                        string BasementShape, 
                        string BasementLevel, 
                        string SectionID) {
                GetEstimateRow rowGetEstimateRow = ((GetEstimateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ValueSliceID,
                        RcnValue,
                        LocalMultiplier,
                        ArchFeePercentage,
                        Rounding,
                        Default,
                        SectionArea,
                        StorySection,
                        StoryBuilding,
                        StoryPerimeter,
                        StoryShape,
                        SectionPerSf,
                        BasementPerimeter,
                        BasementShape,
                        BasementLevel,
                        SectionID};
                rowGetEstimateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetEstimateRow);
                return rowGetEstimateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetEstimateDataTable cln = ((GetEstimateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetEstimateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnRcnValue = base.Columns["RcnValue"];
                this.columnLocalMultiplier = base.Columns["LocalMultiplier"];
                this.columnArchFeePercentage = base.Columns["ArchFeePercentage"];
                this.columnRounding = base.Columns["Rounding"];
                this.columnDefault = base.Columns["Default"];
                this.columnSectionArea = base.Columns["SectionArea"];
                this.columnStorySection = base.Columns["StorySection"];
                this.columnStoryBuilding = base.Columns["StoryBuilding"];
                this.columnStoryPerimeter = base.Columns["StoryPerimeter"];
                this.columnStoryShape = base.Columns["StoryShape"];
                this.columnSectionPerSf = base.Columns["SectionPerSf"];
                this.columnBasementPerimeter = base.Columns["BasementPerimeter"];
                this.columnBasementShape = base.Columns["BasementShape"];
                this.columnBasementLevel = base.Columns["BasementLevel"];
                this.columnSectionID = base.Columns["SectionID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnRcnValue = new global::System.Data.DataColumn("RcnValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRcnValue);
                this.columnLocalMultiplier = new global::System.Data.DataColumn("LocalMultiplier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalMultiplier);
                this.columnArchFeePercentage = new global::System.Data.DataColumn("ArchFeePercentage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchFeePercentage);
                this.columnRounding = new global::System.Data.DataColumn("Rounding", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRounding);
                this.columnDefault = new global::System.Data.DataColumn("Default", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefault);
                this.columnSectionArea = new global::System.Data.DataColumn("SectionArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionArea);
                this.columnStorySection = new global::System.Data.DataColumn("StorySection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorySection);
                this.columnStoryBuilding = new global::System.Data.DataColumn("StoryBuilding", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoryBuilding);
                this.columnStoryPerimeter = new global::System.Data.DataColumn("StoryPerimeter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoryPerimeter);
                this.columnStoryShape = new global::System.Data.DataColumn("StoryShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoryShape);
                this.columnSectionPerSf = new global::System.Data.DataColumn("SectionPerSf", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionPerSf);
                this.columnBasementPerimeter = new global::System.Data.DataColumn("BasementPerimeter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasementPerimeter);
                this.columnBasementShape = new global::System.Data.DataColumn("BasementShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasementShape);
                this.columnBasementLevel = new global::System.Data.DataColumn("BasementLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasementLevel);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnValueSliceID.DefaultValue = ((string)(""));
                this.columnValueSliceID.MaxLength = 50;
                this.columnRcnValue.DefaultValue = ((string)(""));
                this.columnRcnValue.MaxLength = 20;
                this.columnLocalMultiplier.DefaultValue = ((string)(""));
                this.columnLocalMultiplier.MaxLength = 10;
                this.columnArchFeePercentage.DefaultValue = ((string)(""));
                this.columnArchFeePercentage.MaxLength = 10;
                this.columnRounding.DefaultValue = ((string)(""));
                this.columnRounding.MaxLength = 10;
                this.columnDefault.DefaultValue = ((string)(""));
                this.columnDefault.MaxLength = 10;
                this.columnSectionArea.DefaultValue = ((string)(""));
                this.columnSectionArea.MaxLength = 10;
                this.columnStorySection.DefaultValue = ((string)(""));
                this.columnStorySection.MaxLength = 10;
                this.columnStoryBuilding.DefaultValue = ((string)(""));
                this.columnStoryBuilding.MaxLength = 10;
                this.columnStoryPerimeter.DefaultValue = ((string)(""));
                this.columnStoryPerimeter.MaxLength = 10;
                this.columnStoryShape.DefaultValue = ((string)(""));
                this.columnStoryShape.MaxLength = 10;
                this.columnSectionPerSf.DefaultValue = ((string)(""));
                this.columnSectionPerSf.MaxLength = 20;
                this.columnBasementPerimeter.DefaultValue = ((string)(""));
                this.columnBasementPerimeter.MaxLength = 10;
                this.columnBasementShape.DefaultValue = ((string)(""));
                this.columnBasementShape.MaxLength = 10;
                this.columnBasementLevel.DefaultValue = ((string)(""));
                this.columnBasementLevel.MaxLength = 10;
                this.columnSectionID.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEstimateRow NewGetEstimateRow() {
                return ((GetEstimateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetEstimateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetEstimateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetEstimateRowChanged != null)) {
                    this.GetEstimateRowChanged(this, new GetEstimateRowChangeEvent(((GetEstimateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetEstimateRowChanging != null)) {
                    this.GetEstimateRowChanging(this, new GetEstimateRowChangeEvent(((GetEstimateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetEstimateRowDeleted != null)) {
                    this.GetEstimateRowDeleted(this, new GetEstimateRowChangeEvent(((GetEstimateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetEstimateRowDeleting != null)) {
                    this.GetEstimateRowDeleting(this, new GetEstimateRowChangeEvent(((GetEstimateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetEstimateRow(GetEstimateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36001MarshalAndSwiftCommercialData ds = new F36001MarshalAndSwiftCommercialData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetEstimateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetOccupancyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnSystemDescription;
            
            private global::System.Data.DataColumn columnOccupancyPercentage;
            
            private global::System.Data.DataColumn columnBasementType;
            
            private global::System.Data.DataColumn columnBasementArea;
            
            private global::System.Data.DataColumn columnClass;
            
            private global::System.Data.DataColumn columnDefaultHeight;
            
            private global::System.Data.DataColumn columnDefaultDepth;
            
            private global::System.Data.DataColumn columnQualityID;
            
            private global::System.Data.DataColumn columnQualityDescription;
            
            private global::System.Data.DataColumn columnSectionType;
            
            private global::System.Data.DataColumn columnOccupancyUniqueID;
            
            private global::System.Data.DataColumn columnTempDefaultHeight;
            
            private global::System.Data.DataColumn columnTempDefaultDepth;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOccupancyDataTable() {
                this.TableName = "GetOccupancy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetOccupancyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetOccupancyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystemDescriptionColumn {
                get {
                    return this.columnSystemDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccupancyPercentageColumn {
                get {
                    return this.columnOccupancyPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasementTypeColumn {
                get {
                    return this.columnBasementType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasementAreaColumn {
                get {
                    return this.columnBasementArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultHeightColumn {
                get {
                    return this.columnDefaultHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultDepthColumn {
                get {
                    return this.columnDefaultDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityIDColumn {
                get {
                    return this.columnQualityID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityDescriptionColumn {
                get {
                    return this.columnQualityDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionTypeColumn {
                get {
                    return this.columnSectionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccupancyUniqueIDColumn {
                get {
                    return this.columnOccupancyUniqueID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempDefaultHeightColumn {
                get {
                    return this.columnTempDefaultHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempDefaultDepthColumn {
                get {
                    return this.columnTempDefaultDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOccupancyRow this[int index] {
                get {
                    return ((GetOccupancyRow)(this.Rows[index]));
                }
            }
            
            public event GetOccupancyRowChangeEventHandler GetOccupancyRowChanging;
            
            public event GetOccupancyRowChangeEventHandler GetOccupancyRowChanged;
            
            public event GetOccupancyRowChangeEventHandler GetOccupancyRowDeleting;
            
            public event GetOccupancyRowChangeEventHandler GetOccupancyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetOccupancyRow(GetOccupancyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOccupancyRow AddGetOccupancyRow(string Code, string SystemDescription, string OccupancyPercentage, string BasementType, string BasementArea, string Class, string DefaultHeight, string DefaultDepth, string QualityID, string QualityDescription, string SectionType, string OccupancyUniqueID, string TempDefaultHeight, string TempDefaultDepth) {
                GetOccupancyRow rowGetOccupancyRow = ((GetOccupancyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Code,
                        SystemDescription,
                        OccupancyPercentage,
                        BasementType,
                        BasementArea,
                        Class,
                        DefaultHeight,
                        DefaultDepth,
                        QualityID,
                        QualityDescription,
                        SectionType,
                        OccupancyUniqueID,
                        TempDefaultHeight,
                        TempDefaultDepth};
                rowGetOccupancyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetOccupancyRow);
                return rowGetOccupancyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetOccupancyDataTable cln = ((GetOccupancyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetOccupancyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCode = base.Columns["Code"];
                this.columnSystemDescription = base.Columns["SystemDescription"];
                this.columnOccupancyPercentage = base.Columns["OccupancyPercentage"];
                this.columnBasementType = base.Columns["BasementType"];
                this.columnBasementArea = base.Columns["BasementArea"];
                this.columnClass = base.Columns["Class"];
                this.columnDefaultHeight = base.Columns["DefaultHeight"];
                this.columnDefaultDepth = base.Columns["DefaultDepth"];
                this.columnQualityID = base.Columns["QualityID"];
                this.columnQualityDescription = base.Columns["QualityDescription"];
                this.columnSectionType = base.Columns["SectionType"];
                this.columnOccupancyUniqueID = base.Columns["OccupancyUniqueID"];
                this.columnTempDefaultHeight = base.Columns["TempDefaultHeight"];
                this.columnTempDefaultDepth = base.Columns["TempDefaultDepth"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnSystemDescription = new global::System.Data.DataColumn("SystemDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemDescription);
                this.columnOccupancyPercentage = new global::System.Data.DataColumn("OccupancyPercentage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccupancyPercentage);
                this.columnBasementType = new global::System.Data.DataColumn("BasementType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasementType);
                this.columnBasementArea = new global::System.Data.DataColumn("BasementArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasementArea);
                this.columnClass = new global::System.Data.DataColumn("Class", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClass);
                this.columnDefaultHeight = new global::System.Data.DataColumn("DefaultHeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultHeight);
                this.columnDefaultDepth = new global::System.Data.DataColumn("DefaultDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultDepth);
                this.columnQualityID = new global::System.Data.DataColumn("QualityID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualityID);
                this.columnQualityDescription = new global::System.Data.DataColumn("QualityDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualityDescription);
                this.columnSectionType = new global::System.Data.DataColumn("SectionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionType);
                this.columnOccupancyUniqueID = new global::System.Data.DataColumn("OccupancyUniqueID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccupancyUniqueID);
                this.columnTempDefaultHeight = new global::System.Data.DataColumn("TempDefaultHeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempDefaultHeight);
                this.columnTempDefaultDepth = new global::System.Data.DataColumn("TempDefaultDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempDefaultDepth);
                this.columnCode.DefaultValue = ((string)(""));
                this.columnCode.MaxLength = 10;
                this.columnSystemDescription.DefaultValue = ((string)(""));
                this.columnSystemDescription.MaxLength = 50;
                this.columnOccupancyPercentage.DefaultValue = ((string)(""));
                this.columnOccupancyPercentage.MaxLength = 10;
                this.columnBasementType.DefaultValue = ((string)(""));
                this.columnBasementType.MaxLength = 20;
                this.columnBasementArea.DefaultValue = ((string)(""));
                this.columnBasementArea.MaxLength = 10;
                this.columnClass.DefaultValue = ((string)(""));
                this.columnClass.MaxLength = 2;
                this.columnDefaultHeight.DefaultValue = ((string)(""));
                this.columnDefaultHeight.MaxLength = 10;
                this.columnDefaultDepth.DefaultValue = ((string)(""));
                this.columnDefaultDepth.MaxLength = 10;
                this.columnQualityID.DefaultValue = ((string)(""));
                this.columnQualityID.MaxLength = 10;
                this.columnQualityDescription.DefaultValue = ((string)(""));
                this.columnQualityDescription.MaxLength = 50;
                this.columnSectionType.DefaultValue = ((string)(""));
                this.columnSectionType.MaxLength = 10;
                this.columnOccupancyUniqueID.DefaultValue = ((string)(""));
                this.columnOccupancyUniqueID.MaxLength = 10;
                this.columnTempDefaultHeight.DefaultValue = ((string)(""));
                this.columnTempDefaultHeight.MaxLength = 10;
                this.columnTempDefaultDepth.DefaultValue = ((string)(""));
                this.columnTempDefaultDepth.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOccupancyRow NewGetOccupancyRow() {
                return ((GetOccupancyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetOccupancyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetOccupancyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetOccupancyRowChanged != null)) {
                    this.GetOccupancyRowChanged(this, new GetOccupancyRowChangeEvent(((GetOccupancyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetOccupancyRowChanging != null)) {
                    this.GetOccupancyRowChanging(this, new GetOccupancyRowChangeEvent(((GetOccupancyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetOccupancyRowDeleted != null)) {
                    this.GetOccupancyRowDeleted(this, new GetOccupancyRowChangeEvent(((GetOccupancyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetOccupancyRowDeleting != null)) {
                    this.GetOccupancyRowDeleting(this, new GetOccupancyRowChangeEvent(((GetOccupancyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetOccupancyRow(GetOccupancyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36001MarshalAndSwiftCommercialData ds = new F36001MarshalAndSwiftCommercialData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetOccupancyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetComponentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSystemCode;
            
            private global::System.Data.DataColumn columnSelectedSystem;
            
            private global::System.Data.DataColumn columnComponent;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnPercentage;
            
            private global::System.Data.DataColumn columnOther1;
            
            private global::System.Data.DataColumn columnOther2;
            
            private global::System.Data.DataColumn columnMin_;
            
            private global::System.Data.DataColumn columnMax_;
            
            private global::System.Data.DataColumn columnPercentageAllowed;
            
            private global::System.Data.DataColumn columnUnitsAllowed;
            
            private global::System.Data.DataColumn columnOtherMin;
            
            private global::System.Data.DataColumn columnOtherMax;
            
            private global::System.Data.DataColumn columnSectionType;
            
            private global::System.Data.DataColumn columnComponentQualityID;
            
            private global::System.Data.DataColumn columnConstructionSystemID;
            
            private global::System.Data.DataColumn columnComponentUniqueID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetComponentDataTable() {
                this.TableName = "GetComponent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetComponentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetComponentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystemCodeColumn {
                get {
                    return this.columnSystemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedSystemColumn {
                get {
                    return this.columnSelectedSystem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentColumn {
                get {
                    return this.columnComponent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageColumn {
                get {
                    return this.columnPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Other1Column {
                get {
                    return this.columnOther1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Other2Column {
                get {
                    return this.columnOther2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Min_Column {
                get {
                    return this.columnMin_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Max_Column {
                get {
                    return this.columnMax_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageAllowedColumn {
                get {
                    return this.columnPercentageAllowed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsAllowedColumn {
                get {
                    return this.columnUnitsAllowed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherMinColumn {
                get {
                    return this.columnOtherMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherMaxColumn {
                get {
                    return this.columnOtherMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionTypeColumn {
                get {
                    return this.columnSectionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentQualityIDColumn {
                get {
                    return this.columnComponentQualityID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructionSystemIDColumn {
                get {
                    return this.columnConstructionSystemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ComponentUniqueIDColumn {
                get {
                    return this.columnComponentUniqueID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetComponentRow this[int index] {
                get {
                    return ((GetComponentRow)(this.Rows[index]));
                }
            }
            
            public event GetComponentRowChangeEventHandler GetComponentRowChanging;
            
            public event GetComponentRowChangeEventHandler GetComponentRowChanged;
            
            public event GetComponentRowChangeEventHandler GetComponentRowDeleting;
            
            public event GetComponentRowChangeEventHandler GetComponentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetComponentRow(GetComponentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetComponentRow AddGetComponentRow(
                        string SystemCode, 
                        string SelectedSystem, 
                        string Component, 
                        string Units, 
                        string Percentage, 
                        string Other1, 
                        string Other2, 
                        string Min_, 
                        string Max_, 
                        string PercentageAllowed, 
                        string UnitsAllowed, 
                        string OtherMin, 
                        string OtherMax, 
                        string SectionType, 
                        string ComponentQualityID, 
                        string ConstructionSystemID, 
                        string ComponentUniqueID) {
                GetComponentRow rowGetComponentRow = ((GetComponentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SystemCode,
                        SelectedSystem,
                        Component,
                        Units,
                        Percentage,
                        Other1,
                        Other2,
                        Min_,
                        Max_,
                        PercentageAllowed,
                        UnitsAllowed,
                        OtherMin,
                        OtherMax,
                        SectionType,
                        ComponentQualityID,
                        ConstructionSystemID,
                        ComponentUniqueID};
                rowGetComponentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetComponentRow);
                return rowGetComponentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetComponentDataTable cln = ((GetComponentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetComponentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSystemCode = base.Columns["SystemCode"];
                this.columnSelectedSystem = base.Columns["SelectedSystem"];
                this.columnComponent = base.Columns["Component"];
                this.columnUnits = base.Columns["Units"];
                this.columnPercentage = base.Columns["Percentage"];
                this.columnOther1 = base.Columns["Other1"];
                this.columnOther2 = base.Columns["Other2"];
                this.columnMin_ = base.Columns["Min_"];
                this.columnMax_ = base.Columns["Max_"];
                this.columnPercentageAllowed = base.Columns["PercentageAllowed"];
                this.columnUnitsAllowed = base.Columns["UnitsAllowed"];
                this.columnOtherMin = base.Columns["OtherMin"];
                this.columnOtherMax = base.Columns["OtherMax"];
                this.columnSectionType = base.Columns["SectionType"];
                this.columnComponentQualityID = base.Columns["ComponentQualityID"];
                this.columnConstructionSystemID = base.Columns["ConstructionSystemID"];
                this.columnComponentUniqueID = base.Columns["ComponentUniqueID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSystemCode = new global::System.Data.DataColumn("SystemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemCode);
                this.columnSelectedSystem = new global::System.Data.DataColumn("SelectedSystem", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectedSystem);
                this.columnComponent = new global::System.Data.DataColumn("Component", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponent);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnPercentage = new global::System.Data.DataColumn("Percentage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentage);
                this.columnOther1 = new global::System.Data.DataColumn("Other1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOther1);
                this.columnOther2 = new global::System.Data.DataColumn("Other2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOther2);
                this.columnMin_ = new global::System.Data.DataColumn("Min_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMin_);
                this.columnMax_ = new global::System.Data.DataColumn("Max_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMax_);
                this.columnPercentageAllowed = new global::System.Data.DataColumn("PercentageAllowed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentageAllowed);
                this.columnUnitsAllowed = new global::System.Data.DataColumn("UnitsAllowed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitsAllowed);
                this.columnOtherMin = new global::System.Data.DataColumn("OtherMin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherMin);
                this.columnOtherMax = new global::System.Data.DataColumn("OtherMax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherMax);
                this.columnSectionType = new global::System.Data.DataColumn("SectionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionType);
                this.columnComponentQualityID = new global::System.Data.DataColumn("ComponentQualityID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponentQualityID);
                this.columnConstructionSystemID = new global::System.Data.DataColumn("ConstructionSystemID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructionSystemID);
                this.columnComponentUniqueID = new global::System.Data.DataColumn("ComponentUniqueID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComponentUniqueID);
                this.columnSystemCode.DefaultValue = ((string)(""));
                this.columnSystemCode.MaxLength = 10;
                this.columnSelectedSystem.DefaultValue = ((string)(""));
                this.columnSelectedSystem.MaxLength = 50;
                this.columnComponent.DefaultValue = ((string)(""));
                this.columnComponent.MaxLength = 50;
                this.columnUnits.DefaultValue = ((string)(""));
                this.columnUnits.MaxLength = 10;
                this.columnPercentage.DefaultValue = ((string)(""));
                this.columnPercentage.MaxLength = 10;
                this.columnOther1.DefaultValue = ((string)(""));
                this.columnOther1.MaxLength = 8;
                this.columnOther2.DefaultValue = ((string)(""));
                this.columnOther2.MaxLength = 10;
                this.columnMin_.DefaultValue = ((string)(""));
                this.columnMin_.MaxLength = 10;
                this.columnMax_.DefaultValue = ((string)(""));
                this.columnMax_.MaxLength = 10;
                this.columnPercentageAllowed.DefaultValue = ((string)(""));
                this.columnPercentageAllowed.MaxLength = 10;
                this.columnUnitsAllowed.DefaultValue = ((string)(""));
                this.columnUnitsAllowed.MaxLength = 10;
                this.columnOtherMin.DefaultValue = ((string)(""));
                this.columnOtherMin.MaxLength = 10;
                this.columnOtherMax.DefaultValue = ((string)(""));
                this.columnOtherMax.MaxLength = 10;
                this.columnSectionType.DefaultValue = ((string)(""));
                this.columnSectionType.MaxLength = 10;
                this.columnComponentQualityID.DefaultValue = ((string)(""));
                this.columnComponentQualityID.MaxLength = 10;
                this.columnConstructionSystemID.DefaultValue = ((string)(""));
                this.columnConstructionSystemID.MaxLength = 10;
                this.columnComponentUniqueID.DefaultValue = ((string)(""));
                this.columnComponentUniqueID.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetComponentRow NewGetComponentRow() {
                return ((GetComponentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetComponentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetComponentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetComponentRowChanged != null)) {
                    this.GetComponentRowChanged(this, new GetComponentRowChangeEvent(((GetComponentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetComponentRowChanging != null)) {
                    this.GetComponentRowChanging(this, new GetComponentRowChangeEvent(((GetComponentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetComponentRowDeleted != null)) {
                    this.GetComponentRowDeleted(this, new GetComponentRowChangeEvent(((GetComponentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetComponentRowDeleting != null)) {
                    this.GetComponentRowDeleting(this, new GetComponentRowChangeEvent(((GetComponentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetComponentRow(GetComponentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36001MarshalAndSwiftCommercialData ds = new F36001MarshalAndSwiftCommercialData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetComponentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDeprValueDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnVSDeprecitionID;
            
            private global::System.Data.DataColumn columnIsByObject;
            
            private global::System.Data.DataColumn columnDeprYear;
            
            private global::System.Data.DataColumn columnAge;
            
            private global::System.Data.DataColumn columnCondition;
            
            private global::System.Data.DataColumn columnDeprTableID;
            
            private global::System.Data.DataColumn columnDeprName;
            
            private global::System.Data.DataColumn columnQuality;
            
            private global::System.Data.DataColumn columnObjectCondition;
            
            private global::System.Data.DataColumn columnDepreciationTableID;
            
            private global::System.Data.DataColumn columnDepreciationTable;
            
            private global::System.Data.DataColumn columnEffectiveAge;
            
            private global::System.Data.DataColumn columnOriginalValue;
            
            private global::System.Data.DataColumn columnDepreciationPercent;
            
            private global::System.Data.DataColumn columnDepreciationAmount;
            
            private global::System.Data.DataColumn columnAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableDataTable() {
                this.TableName = "ListDeprValueDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprValueDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDeprValueDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSDeprecitionIDColumn {
                get {
                    return this.columnVSDeprecitionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsByObjectColumn {
                get {
                    return this.columnIsByObject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprYearColumn {
                get {
                    return this.columnDeprYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionColumn {
                get {
                    return this.columnCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprTableIDColumn {
                get {
                    return this.columnDeprTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprNameColumn {
                get {
                    return this.columnDeprName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityColumn {
                get {
                    return this.columnQuality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ObjectConditionColumn {
                get {
                    return this.columnObjectCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepreciationTableIDColumn {
                get {
                    return this.columnDepreciationTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepreciationTableColumn {
                get {
                    return this.columnDepreciationTable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveAgeColumn {
                get {
                    return this.columnEffectiveAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalValueColumn {
                get {
                    return this.columnOriginalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepreciationPercentColumn {
                get {
                    return this.columnDepreciationPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepreciationAmountColumn {
                get {
                    return this.columnDepreciationAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRow this[int index] {
                get {
                    return ((ListDeprValueDataTableRow)(this.Rows[index]));
                }
            }
            
            public event ListDeprValueDataTableRowChangeEventHandler ListDeprValueDataTableRowChanging;
            
            public event ListDeprValueDataTableRowChangeEventHandler ListDeprValueDataTableRowChanged;
            
            public event ListDeprValueDataTableRowChangeEventHandler ListDeprValueDataTableRowDeleting;
            
            public event ListDeprValueDataTableRowChangeEventHandler ListDeprValueDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDeprValueDataTableRow(ListDeprValueDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRow AddListDeprValueDataTableRow(bool IsByObject, short DeprYear, int Age, decimal Condition, int DeprTableID, string DeprName, int Quality, decimal ObjectCondition, int DepreciationTableID, string DepreciationTable, byte EffectiveAge, decimal OriginalValue, decimal DepreciationPercent, decimal DepreciationAmount, decimal Amount) {
                ListDeprValueDataTableRow rowListDeprValueDataTableRow = ((ListDeprValueDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IsByObject,
                        DeprYear,
                        Age,
                        Condition,
                        DeprTableID,
                        DeprName,
                        Quality,
                        ObjectCondition,
                        DepreciationTableID,
                        DepreciationTable,
                        EffectiveAge,
                        OriginalValue,
                        DepreciationPercent,
                        DepreciationAmount,
                        Amount};
                rowListDeprValueDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDeprValueDataTableRow);
                return rowListDeprValueDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDeprValueDataTableDataTable cln = ((ListDeprValueDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDeprValueDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVSDeprecitionID = base.Columns["VSDeprecitionID"];
                this.columnIsByObject = base.Columns["IsByObject"];
                this.columnDeprYear = base.Columns["DeprYear"];
                this.columnAge = base.Columns["Age"];
                this.columnCondition = base.Columns["Condition"];
                this.columnDeprTableID = base.Columns["DeprTableID"];
                this.columnDeprName = base.Columns["DeprName"];
                this.columnQuality = base.Columns["Quality"];
                this.columnObjectCondition = base.Columns["ObjectCondition"];
                this.columnDepreciationTableID = base.Columns["DepreciationTableID"];
                this.columnDepreciationTable = base.Columns["DepreciationTable"];
                this.columnEffectiveAge = base.Columns["EffectiveAge"];
                this.columnOriginalValue = base.Columns["OriginalValue"];
                this.columnDepreciationPercent = base.Columns["DepreciationPercent"];
                this.columnDepreciationAmount = base.Columns["DepreciationAmount"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVSDeprecitionID = new global::System.Data.DataColumn("VSDeprecitionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSDeprecitionID);
                this.columnIsByObject = new global::System.Data.DataColumn("IsByObject", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsByObject);
                this.columnDeprYear = new global::System.Data.DataColumn("DeprYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprYear);
                this.columnAge = new global::System.Data.DataColumn("Age", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAge);
                this.columnCondition = new global::System.Data.DataColumn("Condition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondition);
                this.columnDeprTableID = new global::System.Data.DataColumn("DeprTableID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprTableID);
                this.columnDeprName = new global::System.Data.DataColumn("DeprName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprName);
                this.columnQuality = new global::System.Data.DataColumn("Quality", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuality);
                this.columnObjectCondition = new global::System.Data.DataColumn("ObjectCondition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectCondition);
                this.columnDepreciationTableID = new global::System.Data.DataColumn("DepreciationTableID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepreciationTableID);
                this.columnDepreciationTable = new global::System.Data.DataColumn("DepreciationTable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepreciationTable);
                this.columnEffectiveAge = new global::System.Data.DataColumn("EffectiveAge", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveAge);
                this.columnOriginalValue = new global::System.Data.DataColumn("OriginalValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalValue);
                this.columnDepreciationPercent = new global::System.Data.DataColumn("DepreciationPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepreciationPercent);
                this.columnDepreciationAmount = new global::System.Data.DataColumn("DepreciationAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepreciationAmount);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnVSDeprecitionID.AutoIncrement = true;
                this.columnVSDeprecitionID.ReadOnly = true;
                this.columnAge.ReadOnly = true;
                this.columnDeprName.MaxLength = 50;
                this.columnDepreciationTable.ReadOnly = true;
                this.columnDepreciationTable.MaxLength = 200;
                this.columnDepreciationPercent.ReadOnly = true;
                this.columnDepreciationAmount.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRow NewListDeprValueDataTableRow() {
                return ((ListDeprValueDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDeprValueDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDeprValueDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDeprValueDataTableRowChanged != null)) {
                    this.ListDeprValueDataTableRowChanged(this, new ListDeprValueDataTableRowChangeEvent(((ListDeprValueDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDeprValueDataTableRowChanging != null)) {
                    this.ListDeprValueDataTableRowChanging(this, new ListDeprValueDataTableRowChangeEvent(((ListDeprValueDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDeprValueDataTableRowDeleted != null)) {
                    this.ListDeprValueDataTableRowDeleted(this, new ListDeprValueDataTableRowChangeEvent(((ListDeprValueDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDeprValueDataTableRowDeleting != null)) {
                    this.ListDeprValueDataTableRowDeleting(this, new ListDeprValueDataTableRowChangeEvent(((ListDeprValueDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDeprValueDataTableRow(ListDeprValueDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36001MarshalAndSwiftCommercialData ds = new F36001MarshalAndSwiftCommercialData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDeprValueDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDeprTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDeprTableID;
            
            private global::System.Data.DataColumn columnDeprName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableDataTable() {
                this.TableName = "ListDeprTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDeprTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprTableIDColumn {
                get {
                    return this.columnDeprTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprNameColumn {
                get {
                    return this.columnDeprName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow this[int index] {
                get {
                    return ((ListDeprTableRow)(this.Rows[index]));
                }
            }
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowChanging;
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowChanged;
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowDeleting;
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDeprTableRow(ListDeprTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow AddListDeprTableRow(int DeprTableID, string DeprName) {
                ListDeprTableRow rowListDeprTableRow = ((ListDeprTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeprTableID,
                        DeprName};
                rowListDeprTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDeprTableRow);
                return rowListDeprTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDeprTableDataTable cln = ((ListDeprTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDeprTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeprTableID = base.Columns["DeprTableID"];
                this.columnDeprName = base.Columns["DeprName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeprTableID = new global::System.Data.DataColumn("DeprTableID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprTableID);
                this.columnDeprName = new global::System.Data.DataColumn("DeprName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprName);
                this.columnDeprTableID.ReadOnly = true;
                this.columnDeprName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow NewListDeprTableRow() {
                return ((ListDeprTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDeprTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDeprTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDeprTableRowChanged != null)) {
                    this.ListDeprTableRowChanged(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDeprTableRowChanging != null)) {
                    this.ListDeprTableRowChanging(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDeprTableRowDeleted != null)) {
                    this.ListDeprTableRowDeleted(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDeprTableRowDeleting != null)) {
                    this.ListDeprTableRowDeleting(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDeprTableRow(ListDeprTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36001MarshalAndSwiftCommercialData ds = new F36001MarshalAndSwiftCommercialData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDeprTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMarshallSwiftCommercialRow : global::System.Data.DataRow {
            
            private GetMarshallSwiftCommercialDataTable tableGetMarshallSwiftCommercial;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMarshallSwiftCommercialRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMarshallSwiftCommercial = ((GetMarshallSwiftCommercialDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HTCID {
                get {
                    return ((int)(this[this.tableGetMarshallSwiftCommercial.HTCIDColumn]));
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.HTCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SliceTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetMarshallSwiftCommercial.SliceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SliceTypeID\' in table \'GetMarshallSwiftCommercial\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.SliceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConstructionTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetMarshallSwiftCommercial.ConstructionTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConstructionTypeID\' in table \'GetMarshallSwiftCommercial\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.ConstructionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MSVersionID {
                get {
                    return ((int)(this[this.tableGetMarshallSwiftCommercial.MSVersionIDColumn]));
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.MSVersionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EstimateID {
                get {
                    try {
                        return ((int)(this[this.tableGetMarshallSwiftCommercial.EstimateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstimateID\' in table \'GetMarshallSwiftCommercial\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.EstimateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HTCXML {
                get {
                    try {
                        return ((string)(this[this.tableGetMarshallSwiftCommercial.HTCXMLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HTCXML\' in table \'GetMarshallSwiftCommercial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.HTCXMLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZipCode {
                get {
                    try {
                        return ((string)(this[this.tableGetMarshallSwiftCommercial.ZipCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZipCode\' in table \'GetMarshallSwiftCommercial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.ZipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConnectionString {
                get {
                    try {
                        return ((string)(this[this.tableGetMarshallSwiftCommercial.ConnectionStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionString\' in table \'GetMarshallSwiftCommercial\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.ConnectionStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableGetMarshallSwiftCommercial.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetMarshallSwiftCommercial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ObjectCondition {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMarshallSwiftCommercial.ObjectConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectCondition\' in table \'GetMarshallSwiftCommercial\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.ObjectConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte EffectiveAge {
                get {
                    try {
                        return ((byte)(this[this.tableGetMarshallSwiftCommercial.EffectiveAgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveAge\' in table \'GetMarshallSwiftCommercial\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.EffectiveAgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CostMultiplier {
                get {
                    try {
                        return ((string)(this[this.tableGetMarshallSwiftCommercial.CostMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostMultiplier\' in table \'GetMarshallSwiftCommercial\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetMarshallSwiftCommercial.CostMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSliceTypeIDNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.SliceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSliceTypeIDNull() {
                this[this.tableGetMarshallSwiftCommercial.SliceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructionTypeIDNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.ConstructionTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructionTypeIDNull() {
                this[this.tableGetMarshallSwiftCommercial.ConstructionTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstimateIDNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.EstimateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstimateIDNull() {
                this[this.tableGetMarshallSwiftCommercial.EstimateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHTCXMLNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.HTCXMLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHTCXMLNull() {
                this[this.tableGetMarshallSwiftCommercial.HTCXMLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipCodeNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.ZipCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipCodeNull() {
                this[this.tableGetMarshallSwiftCommercial.ZipCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConnectionStringNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.ConnectionStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConnectionStringNull() {
                this[this.tableGetMarshallSwiftCommercial.ConnectionStringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetMarshallSwiftCommercial.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectConditionNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.ObjectConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectConditionNull() {
                this[this.tableGetMarshallSwiftCommercial.ObjectConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveAgeNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.EffectiveAgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveAgeNull() {
                this[this.tableGetMarshallSwiftCommercial.EffectiveAgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostMultiplierNull() {
                return this.IsNull(this.tableGetMarshallSwiftCommercial.CostMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostMultiplierNull() {
                this[this.tableGetMarshallSwiftCommercial.CostMultiplierColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetEstimateRow : global::System.Data.DataRow {
            
            private GetEstimateDataTable tableGetEstimate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetEstimateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetEstimate = ((GetEstimateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValueSliceID {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RcnValue {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.RcnValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RcnValue\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.RcnValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocalMultiplier {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.LocalMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocalMultiplier\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.LocalMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArchFeePercentage {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.ArchFeePercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArchFeePercentage\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.ArchFeePercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rounding {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.RoundingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rounding\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.RoundingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Default {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.DefaultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Default\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.DefaultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionArea {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.SectionAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionArea\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.SectionAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StorySection {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.StorySectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StorySection\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.StorySectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoryBuilding {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.StoryBuildingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryBuilding\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.StoryBuildingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoryPerimeter {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.StoryPerimeterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryPerimeter\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.StoryPerimeterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoryShape {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.StoryShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoryShape\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.StoryShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionPerSf {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.SectionPerSfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionPerSf\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.SectionPerSfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BasementPerimeter {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.BasementPerimeterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasementPerimeter\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.BasementPerimeterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BasementShape {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.BasementShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasementShape\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.BasementShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BasementLevel {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.BasementLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasementLevel\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.BasementLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableGetEstimate.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'GetEstimate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetEstimate.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableGetEstimate.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableGetEstimate.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRcnValueNull() {
                return this.IsNull(this.tableGetEstimate.RcnValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRcnValueNull() {
                this[this.tableGetEstimate.RcnValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocalMultiplierNull() {
                return this.IsNull(this.tableGetEstimate.LocalMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocalMultiplierNull() {
                this[this.tableGetEstimate.LocalMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArchFeePercentageNull() {
                return this.IsNull(this.tableGetEstimate.ArchFeePercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArchFeePercentageNull() {
                this[this.tableGetEstimate.ArchFeePercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoundingNull() {
                return this.IsNull(this.tableGetEstimate.RoundingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoundingNull() {
                this[this.tableGetEstimate.RoundingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultNull() {
                return this.IsNull(this.tableGetEstimate.DefaultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultNull() {
                this[this.tableGetEstimate.DefaultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionAreaNull() {
                return this.IsNull(this.tableGetEstimate.SectionAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionAreaNull() {
                this[this.tableGetEstimate.SectionAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStorySectionNull() {
                return this.IsNull(this.tableGetEstimate.StorySectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStorySectionNull() {
                this[this.tableGetEstimate.StorySectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryBuildingNull() {
                return this.IsNull(this.tableGetEstimate.StoryBuildingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryBuildingNull() {
                this[this.tableGetEstimate.StoryBuildingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryPerimeterNull() {
                return this.IsNull(this.tableGetEstimate.StoryPerimeterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryPerimeterNull() {
                this[this.tableGetEstimate.StoryPerimeterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoryShapeNull() {
                return this.IsNull(this.tableGetEstimate.StoryShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoryShapeNull() {
                this[this.tableGetEstimate.StoryShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionPerSfNull() {
                return this.IsNull(this.tableGetEstimate.SectionPerSfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionPerSfNull() {
                this[this.tableGetEstimate.SectionPerSfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasementPerimeterNull() {
                return this.IsNull(this.tableGetEstimate.BasementPerimeterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasementPerimeterNull() {
                this[this.tableGetEstimate.BasementPerimeterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasementShapeNull() {
                return this.IsNull(this.tableGetEstimate.BasementShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasementShapeNull() {
                this[this.tableGetEstimate.BasementShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasementLevelNull() {
                return this.IsNull(this.tableGetEstimate.BasementLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasementLevelNull() {
                this[this.tableGetEstimate.BasementLevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableGetEstimate.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableGetEstimate.SectionIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetOccupancyRow : global::System.Data.DataRow {
            
            private GetOccupancyDataTable tableGetOccupancy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetOccupancyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetOccupancy = ((GetOccupancyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Code\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemDescription {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.SystemDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SystemDescription\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.SystemDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OccupancyPercentage {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.OccupancyPercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OccupancyPercentage\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.OccupancyPercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BasementType {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.BasementTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasementType\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.BasementTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BasementArea {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.BasementAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasementArea\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.BasementAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Class {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.ClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Class\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.ClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefaultHeight {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.DefaultHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefaultHeight\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.DefaultHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefaultDepth {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.DefaultDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefaultDepth\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.DefaultDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QualityID {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.QualityIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualityID\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.QualityIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QualityDescription {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.QualityDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualityDescription\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.QualityDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionType {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.SectionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionType\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.SectionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OccupancyUniqueID {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.OccupancyUniqueIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OccupancyUniqueID\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.OccupancyUniqueIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TempDefaultHeight {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.TempDefaultHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TempDefaultHeight\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.TempDefaultHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TempDefaultDepth {
                get {
                    try {
                        return ((string)(this[this.tableGetOccupancy.TempDefaultDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TempDefaultDepth\' in table \'GetOccupancy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetOccupancy.TempDefaultDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tableGetOccupancy.CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tableGetOccupancy.CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSystemDescriptionNull() {
                return this.IsNull(this.tableGetOccupancy.SystemDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSystemDescriptionNull() {
                this[this.tableGetOccupancy.SystemDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccupancyPercentageNull() {
                return this.IsNull(this.tableGetOccupancy.OccupancyPercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccupancyPercentageNull() {
                this[this.tableGetOccupancy.OccupancyPercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasementTypeNull() {
                return this.IsNull(this.tableGetOccupancy.BasementTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasementTypeNull() {
                this[this.tableGetOccupancy.BasementTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasementAreaNull() {
                return this.IsNull(this.tableGetOccupancy.BasementAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasementAreaNull() {
                this[this.tableGetOccupancy.BasementAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassNull() {
                return this.IsNull(this.tableGetOccupancy.ClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassNull() {
                this[this.tableGetOccupancy.ClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultHeightNull() {
                return this.IsNull(this.tableGetOccupancy.DefaultHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultHeightNull() {
                this[this.tableGetOccupancy.DefaultHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultDepthNull() {
                return this.IsNull(this.tableGetOccupancy.DefaultDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefaultDepthNull() {
                this[this.tableGetOccupancy.DefaultDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityIDNull() {
                return this.IsNull(this.tableGetOccupancy.QualityIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityIDNull() {
                this[this.tableGetOccupancy.QualityIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityDescriptionNull() {
                return this.IsNull(this.tableGetOccupancy.QualityDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityDescriptionNull() {
                this[this.tableGetOccupancy.QualityDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionTypeNull() {
                return this.IsNull(this.tableGetOccupancy.SectionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionTypeNull() {
                this[this.tableGetOccupancy.SectionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccupancyUniqueIDNull() {
                return this.IsNull(this.tableGetOccupancy.OccupancyUniqueIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccupancyUniqueIDNull() {
                this[this.tableGetOccupancy.OccupancyUniqueIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempDefaultHeightNull() {
                return this.IsNull(this.tableGetOccupancy.TempDefaultHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempDefaultHeightNull() {
                this[this.tableGetOccupancy.TempDefaultHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempDefaultDepthNull() {
                return this.IsNull(this.tableGetOccupancy.TempDefaultDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempDefaultDepthNull() {
                this[this.tableGetOccupancy.TempDefaultDepthColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetComponentRow : global::System.Data.DataRow {
            
            private GetComponentDataTable tableGetComponent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetComponentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetComponent = ((GetComponentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemCode {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.SystemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SystemCode\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.SystemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SelectedSystem {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.SelectedSystemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SelectedSystem\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.SelectedSystemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Component {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.ComponentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Component\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.ComponentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Units {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Percentage {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Percentage\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Other1 {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.Other1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Other1\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.Other1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Other2 {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.Other2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Other2\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.Other2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Min_ {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.Min_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Min_\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.Min_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Max_ {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.Max_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Max_\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.Max_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PercentageAllowed {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.PercentageAllowedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentageAllowed\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.PercentageAllowedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitsAllowed {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.UnitsAllowedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitsAllowed\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.UnitsAllowedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherMin {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.OtherMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherMin\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.OtherMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherMax {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.OtherMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherMax\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.OtherMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionType {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.SectionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionType\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.SectionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ComponentQualityID {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.ComponentQualityIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ComponentQualityID\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.ComponentQualityIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConstructionSystemID {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.ConstructionSystemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConstructionSystemID\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.ConstructionSystemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ComponentUniqueID {
                get {
                    try {
                        return ((string)(this[this.tableGetComponent.ComponentUniqueIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ComponentUniqueID\' in table \'GetComponent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetComponent.ComponentUniqueIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSystemCodeNull() {
                return this.IsNull(this.tableGetComponent.SystemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSystemCodeNull() {
                this[this.tableGetComponent.SystemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedSystemNull() {
                return this.IsNull(this.tableGetComponent.SelectedSystemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedSystemNull() {
                this[this.tableGetComponent.SelectedSystemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComponentNull() {
                return this.IsNull(this.tableGetComponent.ComponentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComponentNull() {
                this[this.tableGetComponent.ComponentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableGetComponent.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableGetComponent.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageNull() {
                return this.IsNull(this.tableGetComponent.PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageNull() {
                this[this.tableGetComponent.PercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOther1Null() {
                return this.IsNull(this.tableGetComponent.Other1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOther1Null() {
                this[this.tableGetComponent.Other1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOther2Null() {
                return this.IsNull(this.tableGetComponent.Other2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOther2Null() {
                this[this.tableGetComponent.Other2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMin_Null() {
                return this.IsNull(this.tableGetComponent.Min_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMin_Null() {
                this[this.tableGetComponent.Min_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMax_Null() {
                return this.IsNull(this.tableGetComponent.Max_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMax_Null() {
                this[this.tableGetComponent.Max_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageAllowedNull() {
                return this.IsNull(this.tableGetComponent.PercentageAllowedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageAllowedNull() {
                this[this.tableGetComponent.PercentageAllowedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsAllowedNull() {
                return this.IsNull(this.tableGetComponent.UnitsAllowedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsAllowedNull() {
                this[this.tableGetComponent.UnitsAllowedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherMinNull() {
                return this.IsNull(this.tableGetComponent.OtherMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherMinNull() {
                this[this.tableGetComponent.OtherMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherMaxNull() {
                return this.IsNull(this.tableGetComponent.OtherMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherMaxNull() {
                this[this.tableGetComponent.OtherMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionTypeNull() {
                return this.IsNull(this.tableGetComponent.SectionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionTypeNull() {
                this[this.tableGetComponent.SectionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComponentQualityIDNull() {
                return this.IsNull(this.tableGetComponent.ComponentQualityIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComponentQualityIDNull() {
                this[this.tableGetComponent.ComponentQualityIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructionSystemIDNull() {
                return this.IsNull(this.tableGetComponent.ConstructionSystemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructionSystemIDNull() {
                this[this.tableGetComponent.ConstructionSystemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComponentUniqueIDNull() {
                return this.IsNull(this.tableGetComponent.ComponentUniqueIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComponentUniqueIDNull() {
                this[this.tableGetComponent.ComponentUniqueIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDeprValueDataTableRow : global::System.Data.DataRow {
            
            private ListDeprValueDataTableDataTable tableListDeprValueDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprValueDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDeprValueDataTable = ((ListDeprValueDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VSDeprecitionID {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.VSDeprecitionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSDeprecitionID\' in table \'ListDeprValueDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.VSDeprecitionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsByObject {
                get {
                    try {
                        return ((bool)(this[this.tableListDeprValueDataTable.IsByObjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsByObject\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.IsByObjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DeprYear {
                get {
                    try {
                        return ((short)(this[this.tableListDeprValueDataTable.DeprYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprYear\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DeprYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Age {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.AgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Age\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.AgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Condition {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.ConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Condition\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.ConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeprTableID {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.DeprTableIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprTableID\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DeprTableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeprName {
                get {
                    try {
                        return ((string)(this[this.tableListDeprValueDataTable.DeprNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprName\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DeprNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Quality {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.QualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quality\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.QualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ObjectCondition {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.ObjectConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ObjectCondition\' in table \'ListDeprValueDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.ObjectConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepreciationTableID {
                get {
                    try {
                        return ((int)(this[this.tableListDeprValueDataTable.DepreciationTableIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepreciationTableID\' in table \'ListDeprValueDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DepreciationTableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepreciationTable {
                get {
                    try {
                        return ((string)(this[this.tableListDeprValueDataTable.DepreciationTableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepreciationTable\' in table \'ListDeprValueDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DepreciationTableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte EffectiveAge {
                get {
                    try {
                        return ((byte)(this[this.tableListDeprValueDataTable.EffectiveAgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveAge\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.EffectiveAgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.OriginalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalValue\' in table \'ListDeprValueDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.OriginalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DepreciationPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.DepreciationPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepreciationPercent\' in table \'ListDeprValueDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DepreciationPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DepreciationAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.DepreciationAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepreciationAmount\' in table \'ListDeprValueDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.DepreciationAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprValueDataTable.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'ListDeprValueDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprValueDataTable.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSDeprecitionIDNull() {
                return this.IsNull(this.tableListDeprValueDataTable.VSDeprecitionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSDeprecitionIDNull() {
                this[this.tableListDeprValueDataTable.VSDeprecitionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsByObjectNull() {
                return this.IsNull(this.tableListDeprValueDataTable.IsByObjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsByObjectNull() {
                this[this.tableListDeprValueDataTable.IsByObjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprYearNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DeprYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprYearNull() {
                this[this.tableListDeprValueDataTable.DeprYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeNull() {
                return this.IsNull(this.tableListDeprValueDataTable.AgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeNull() {
                this[this.tableListDeprValueDataTable.AgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionNull() {
                return this.IsNull(this.tableListDeprValueDataTable.ConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionNull() {
                this[this.tableListDeprValueDataTable.ConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprTableIDNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DeprTableIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprTableIDNull() {
                this[this.tableListDeprValueDataTable.DeprTableIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprNameNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DeprNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprNameNull() {
                this[this.tableListDeprValueDataTable.DeprNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityNull() {
                return this.IsNull(this.tableListDeprValueDataTable.QualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityNull() {
                this[this.tableListDeprValueDataTable.QualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsObjectConditionNull() {
                return this.IsNull(this.tableListDeprValueDataTable.ObjectConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetObjectConditionNull() {
                this[this.tableListDeprValueDataTable.ObjectConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepreciationTableIDNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DepreciationTableIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepreciationTableIDNull() {
                this[this.tableListDeprValueDataTable.DepreciationTableIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepreciationTableNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DepreciationTableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepreciationTableNull() {
                this[this.tableListDeprValueDataTable.DepreciationTableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveAgeNull() {
                return this.IsNull(this.tableListDeprValueDataTable.EffectiveAgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveAgeNull() {
                this[this.tableListDeprValueDataTable.EffectiveAgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalValueNull() {
                return this.IsNull(this.tableListDeprValueDataTable.OriginalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalValueNull() {
                this[this.tableListDeprValueDataTable.OriginalValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepreciationPercentNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DepreciationPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepreciationPercentNull() {
                this[this.tableListDeprValueDataTable.DepreciationPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepreciationAmountNull() {
                return this.IsNull(this.tableListDeprValueDataTable.DepreciationAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepreciationAmountNull() {
                this[this.tableListDeprValueDataTable.DepreciationAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableListDeprValueDataTable.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableListDeprValueDataTable.AmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDeprTableRow : global::System.Data.DataRow {
            
            private ListDeprTableDataTable tableListDeprTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDeprTable = ((ListDeprTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeprTableID {
                get {
                    try {
                        return ((int)(this[this.tableListDeprTable.DeprTableIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprTableID\' in table \'ListDeprTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprTable.DeprTableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeprName {
                get {
                    try {
                        return ((string)(this[this.tableListDeprTable.DeprNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprName\' in table \'ListDeprTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprTable.DeprNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprTableIDNull() {
                return this.IsNull(this.tableListDeprTable.DeprTableIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprTableIDNull() {
                this[this.tableListDeprTable.DeprTableIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprNameNull() {
                return this.IsNull(this.tableListDeprTable.DeprNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprNameNull() {
                this[this.tableListDeprTable.DeprNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMarshallSwiftCommercialRowChangeEvent : global::System.EventArgs {
            
            private GetMarshallSwiftCommercialRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarshallSwiftCommercialRowChangeEvent(GetMarshallSwiftCommercialRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMarshallSwiftCommercialRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetEstimateRowChangeEvent : global::System.EventArgs {
            
            private GetEstimateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEstimateRowChangeEvent(GetEstimateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetEstimateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetOccupancyRowChangeEvent : global::System.EventArgs {
            
            private GetOccupancyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOccupancyRowChangeEvent(GetOccupancyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOccupancyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetComponentRowChangeEvent : global::System.EventArgs {
            
            private GetComponentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetComponentRowChangeEvent(GetComponentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetComponentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDeprValueDataTableRowChangeEvent : global::System.EventArgs {
            
            private ListDeprValueDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRowChangeEvent(ListDeprValueDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprValueDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDeprTableRowChangeEvent : global::System.EventArgs {
            
            private ListDeprTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRowChangeEvent(ListDeprTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591