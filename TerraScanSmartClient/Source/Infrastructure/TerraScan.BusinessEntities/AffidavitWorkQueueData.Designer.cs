//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AffidavitWorkQueueData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AffidavitWorkQueueData : global::System.Data.DataSet {
        
        private ListExciseTaxAffidavitWorkQueueDataTable tableListExciseTaxAffidavitWorkQueue;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AffidavitWorkQueueData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AffidavitWorkQueueData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListExciseTaxAffidavitWorkQueue"] != null)) {
                    base.Tables.Add(new ListExciseTaxAffidavitWorkQueueDataTable(ds.Tables["ListExciseTaxAffidavitWorkQueue"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListExciseTaxAffidavitWorkQueueDataTable ListExciseTaxAffidavitWorkQueue {
            get {
                return this.tableListExciseTaxAffidavitWorkQueue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AffidavitWorkQueueData cln = ((AffidavitWorkQueueData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListExciseTaxAffidavitWorkQueue"] != null)) {
                    base.Tables.Add(new ListExciseTaxAffidavitWorkQueueDataTable(ds.Tables["ListExciseTaxAffidavitWorkQueue"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListExciseTaxAffidavitWorkQueue = ((ListExciseTaxAffidavitWorkQueueDataTable)(base.Tables["ListExciseTaxAffidavitWorkQueue"]));
            if ((initTable == true)) {
                if ((this.tableListExciseTaxAffidavitWorkQueue != null)) {
                    this.tableListExciseTaxAffidavitWorkQueue.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AffidavitWorkQueueData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AffidavitWorkQueueData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListExciseTaxAffidavitWorkQueue = new ListExciseTaxAffidavitWorkQueueDataTable();
            base.Tables.Add(this.tableListExciseTaxAffidavitWorkQueue);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListExciseTaxAffidavitWorkQueue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AffidavitWorkQueueData ds = new AffidavitWorkQueueData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListExciseTaxAffidavitWorkQueueRowChangeEventHandler(object sender, ListExciseTaxAffidavitWorkQueueRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListExciseTaxAffidavitWorkQueueDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnStreetAddress;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnDocumentDate;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnTaxableSalePrice;
            
            private global::System.Data.DataColumn columnTotalDue;
            
            private global::System.Data.DataColumn columnGrantor;
            
            private global::System.Data.DataColumn columnGrantee;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnTreasurer;
            
            private global::System.Data.DataColumn columnAssessor;
            
            private global::System.Data.DataColumn columnReceiptNumber;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnUseCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxAffidavitWorkQueueDataTable() {
                this.TableName = "ListExciseTaxAffidavitWorkQueue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExciseTaxAffidavitWorkQueueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListExciseTaxAffidavitWorkQueueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetAddressColumn {
                get {
                    return this.columnStreetAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDateColumn {
                get {
                    return this.columnDocumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableSalePriceColumn {
                get {
                    return this.columnTaxableSalePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDueColumn {
                get {
                    return this.columnTotalDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantorColumn {
                get {
                    return this.columnGrantor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteeColumn {
                get {
                    return this.columnGrantee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TreasurerColumn {
                get {
                    return this.columnTreasurer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessorColumn {
                get {
                    return this.columnAssessor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptNumberColumn {
                get {
                    return this.columnReceiptNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCodeColumn {
                get {
                    return this.columnUseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxAffidavitWorkQueueRow this[int index] {
                get {
                    return ((ListExciseTaxAffidavitWorkQueueRow)(this.Rows[index]));
                }
            }
            
            public event ListExciseTaxAffidavitWorkQueueRowChangeEventHandler ListExciseTaxAffidavitWorkQueueRowChanging;
            
            public event ListExciseTaxAffidavitWorkQueueRowChangeEventHandler ListExciseTaxAffidavitWorkQueueRowChanged;
            
            public event ListExciseTaxAffidavitWorkQueueRowChangeEventHandler ListExciseTaxAffidavitWorkQueueRowDeleting;
            
            public event ListExciseTaxAffidavitWorkQueueRowChangeEventHandler ListExciseTaxAffidavitWorkQueueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListExciseTaxAffidavitWorkQueueRow(ListExciseTaxAffidavitWorkQueueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxAffidavitWorkQueueRow AddListExciseTaxAffidavitWorkQueueRow(
                        int StatementID, 
                        string StatementNumber, 
                        string StreetAddress, 
                        string Location, 
                        string DocumentDate, 
                        string IsExempt, 
                        decimal TaxableSalePrice, 
                        decimal TotalDue, 
                        string Grantor, 
                        string Grantee, 
                        string ParcelNumber, 
                        string Treasurer, 
                        string Assessor, 
                        string ReceiptNumber, 
                        string Name, 
                        string UseCode) {
                ListExciseTaxAffidavitWorkQueueRow rowListExciseTaxAffidavitWorkQueueRow = ((ListExciseTaxAffidavitWorkQueueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        StatementNumber,
                        StreetAddress,
                        Location,
                        DocumentDate,
                        IsExempt,
                        TaxableSalePrice,
                        TotalDue,
                        Grantor,
                        Grantee,
                        ParcelNumber,
                        Treasurer,
                        Assessor,
                        ReceiptNumber,
                        Name,
                        UseCode};
                rowListExciseTaxAffidavitWorkQueueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListExciseTaxAffidavitWorkQueueRow);
                return rowListExciseTaxAffidavitWorkQueueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListExciseTaxAffidavitWorkQueueDataTable cln = ((ListExciseTaxAffidavitWorkQueueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListExciseTaxAffidavitWorkQueueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnStreetAddress = base.Columns["StreetAddress"];
                this.columnLocation = base.Columns["Location"];
                this.columnDocumentDate = base.Columns["DocumentDate"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnTaxableSalePrice = base.Columns["TaxableSalePrice"];
                this.columnTotalDue = base.Columns["TotalDue"];
                this.columnGrantor = base.Columns["Grantor"];
                this.columnGrantee = base.Columns["Grantee"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnTreasurer = base.Columns["Treasurer"];
                this.columnAssessor = base.Columns["Assessor"];
                this.columnReceiptNumber = base.Columns["ReceiptNumber"];
                this.columnName = base.Columns["Name"];
                this.columnUseCode = base.Columns["UseCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnStreetAddress = new global::System.Data.DataColumn("StreetAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreetAddress);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnDocumentDate = new global::System.Data.DataColumn("DocumentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDate);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnTaxableSalePrice = new global::System.Data.DataColumn("TaxableSalePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxableSalePrice);
                this.columnTotalDue = new global::System.Data.DataColumn("TotalDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDue);
                this.columnGrantor = new global::System.Data.DataColumn("Grantor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantor);
                this.columnGrantee = new global::System.Data.DataColumn("Grantee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantee);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnTreasurer = new global::System.Data.DataColumn("Treasurer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreasurer);
                this.columnAssessor = new global::System.Data.DataColumn("Assessor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessor);
                this.columnReceiptNumber = new global::System.Data.DataColumn("ReceiptNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptNumber);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnUseCode = new global::System.Data.DataColumn("UseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode);
                this.columnStatementNumber.MaxLength = 50;
                this.columnStreetAddress.MaxLength = 150;
                this.columnLocation.ReadOnly = true;
                this.columnLocation.MaxLength = 158;
                this.columnDocumentDate.ReadOnly = true;
                this.columnDocumentDate.MaxLength = 10;
                this.columnIsExempt.ReadOnly = true;
                this.columnIsExempt.MaxLength = 7;
                this.columnTotalDue.ReadOnly = true;
                this.columnGrantor.MaxLength = 350;
                this.columnGrantee.MaxLength = 350;
                this.columnParcelNumber.MaxLength = 50;
                this.columnTreasurer.MaxLength = 50;
                this.columnAssessor.MaxLength = 50;
                this.columnReceiptNumber.MaxLength = 20;
                this.columnName.MaxLength = 710;
                this.columnUseCode.ReadOnly = true;
                this.columnUseCode.MaxLength = 12;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxAffidavitWorkQueueRow NewListExciseTaxAffidavitWorkQueueRow() {
                return ((ListExciseTaxAffidavitWorkQueueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListExciseTaxAffidavitWorkQueueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListExciseTaxAffidavitWorkQueueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListExciseTaxAffidavitWorkQueueRowChanged != null)) {
                    this.ListExciseTaxAffidavitWorkQueueRowChanged(this, new ListExciseTaxAffidavitWorkQueueRowChangeEvent(((ListExciseTaxAffidavitWorkQueueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListExciseTaxAffidavitWorkQueueRowChanging != null)) {
                    this.ListExciseTaxAffidavitWorkQueueRowChanging(this, new ListExciseTaxAffidavitWorkQueueRowChangeEvent(((ListExciseTaxAffidavitWorkQueueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListExciseTaxAffidavitWorkQueueRowDeleted != null)) {
                    this.ListExciseTaxAffidavitWorkQueueRowDeleted(this, new ListExciseTaxAffidavitWorkQueueRowChangeEvent(((ListExciseTaxAffidavitWorkQueueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListExciseTaxAffidavitWorkQueueRowDeleting != null)) {
                    this.ListExciseTaxAffidavitWorkQueueRowDeleting(this, new ListExciseTaxAffidavitWorkQueueRowChangeEvent(((ListExciseTaxAffidavitWorkQueueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListExciseTaxAffidavitWorkQueueRow(ListExciseTaxAffidavitWorkQueueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AffidavitWorkQueueData ds = new AffidavitWorkQueueData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListExciseTaxAffidavitWorkQueueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListExciseTaxAffidavitWorkQueueRow : global::System.Data.DataRow {
            
            private ListExciseTaxAffidavitWorkQueueDataTable tableListExciseTaxAffidavitWorkQueue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListExciseTaxAffidavitWorkQueueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListExciseTaxAffidavitWorkQueue = ((ListExciseTaxAffidavitWorkQueueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableListExciseTaxAffidavitWorkQueue.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'ListExciseTaxAffidavitWorkQueue\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.StatementNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementNumber\' in table \'ListExciseTaxAffidavitWorkQueue\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StreetAddress {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.StreetAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StreetAddress\' in table \'ListExciseTaxAffidavitWorkQueue\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.StreetAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'ListExciseTaxAffidavitWorkQueue\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentDate {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.DocumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentDate\' in table \'ListExciseTaxAffidavitWorkQueue\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.DocumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsExempt {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'ListExciseTaxAffidavitWorkQueue\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxableSalePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableListExciseTaxAffidavitWorkQueue.TaxableSalePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxableSalePrice\' in table \'ListExciseTaxAffidavitWorkQueue" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.TaxableSalePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDue {
                get {
                    try {
                        return ((decimal)(this[this.tableListExciseTaxAffidavitWorkQueue.TotalDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDue\' in table \'ListExciseTaxAffidavitWorkQueue\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.TotalDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grantor {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.GrantorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grantor\' in table \'ListExciseTaxAffidavitWorkQueue\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.GrantorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grantee {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.GranteeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grantee\' in table \'ListExciseTaxAffidavitWorkQueue\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.GranteeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ListExciseTaxAffidavitWorkQueue\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Treasurer {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.TreasurerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Treasurer\' in table \'ListExciseTaxAffidavitWorkQueue\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.TreasurerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Assessor {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.AssessorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Assessor\' in table \'ListExciseTaxAffidavitWorkQueue\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.AssessorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptNumber {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.ReceiptNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptNumber\' in table \'ListExciseTaxAffidavitWorkQueue\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.ReceiptNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ListExciseTaxAffidavitWorkQueue\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode {
                get {
                    try {
                        return ((string)(this[this.tableListExciseTaxAffidavitWorkQueue.UseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode\' in table \'ListExciseTaxAffidavitWorkQueue\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListExciseTaxAffidavitWorkQueue.UseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetAddressNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.StreetAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetAddressNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.StreetAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentDateNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.DocumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentDateNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.DocumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxableSalePriceNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.TaxableSalePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxableSalePriceNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.TaxableSalePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDueNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.TotalDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDueNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.TotalDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantorNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.GrantorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantorNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.GrantorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteeNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.GranteeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteeNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.GranteeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreasurerNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.TreasurerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreasurerNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.TreasurerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessorNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.AssessorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessorNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.AssessorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptNumberNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.ReceiptNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptNumberNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.ReceiptNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCodeNull() {
                return this.IsNull(this.tableListExciseTaxAffidavitWorkQueue.UseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCodeNull() {
                this[this.tableListExciseTaxAffidavitWorkQueue.UseCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListExciseTaxAffidavitWorkQueueRowChangeEvent : global::System.EventArgs {
            
            private ListExciseTaxAffidavitWorkQueueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxAffidavitWorkQueueRowChangeEvent(ListExciseTaxAffidavitWorkQueueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListExciseTaxAffidavitWorkQueueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591