//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8689
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MortageImportData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MortageImportData : global::System.Data.DataSet {
        
        private ListMortgageImportFileTypeDataTable tableListMortgageImportFileType;
        
        private CheckMortgageImportCheckErrorsDataTable tableCheckMortgageImportCheckErrors;
        
        private DeleteMortgageImportEntryDataTable tableDeleteMortgageImportEntry;
        
        private CheckMortgageImportValidReceiptTestDataTable tableCheckMortgageImportValidReceiptTest;
        
        private SaveMortgageImportDataTable tableSaveMortgageImport;
        
        private DeleteMortgageImportDataTable tableDeleteMortgageImport;
        
        private CreateRecieptErrorDataTable tableCreateRecieptError;
        
        private CreateRecieptDetailsDataTable tableCreateRecieptDetails;
        
        private GetMortgageImportDetailsDataTable tableGetMortgageImportDetails;
        
        private GetMortgageImportIdsDataTable tableGetMortgageImportIds;
        
        private GetMortgageImportErrorDataTable tableGetMortgageImportError;
        
        private SaveMortgageImportEntryErrorDataTable tableSaveMortgageImportEntryError;
        
        private SaveMortgageImportEntryDataTable tableSaveMortgageImportEntry;
        
        private CheckMortgageImportErrorDetailsDataTable tableCheckMortgageImportErrorDetails;
        
        private PayListTableDataTable tablePayListTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MortageImportData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MortageImportData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListMortgageImportFileType"] != null)) {
                    base.Tables.Add(new ListMortgageImportFileTypeDataTable(ds.Tables["ListMortgageImportFileType"]));
                }
                if ((ds.Tables["CheckMortgageImportCheckErrors"] != null)) {
                    base.Tables.Add(new CheckMortgageImportCheckErrorsDataTable(ds.Tables["CheckMortgageImportCheckErrors"]));
                }
                if ((ds.Tables["DeleteMortgageImportEntry"] != null)) {
                    base.Tables.Add(new DeleteMortgageImportEntryDataTable(ds.Tables["DeleteMortgageImportEntry"]));
                }
                if ((ds.Tables["CheckMortgageImportValidReceiptTest"] != null)) {
                    base.Tables.Add(new CheckMortgageImportValidReceiptTestDataTable(ds.Tables["CheckMortgageImportValidReceiptTest"]));
                }
                if ((ds.Tables["SaveMortgageImport"] != null)) {
                    base.Tables.Add(new SaveMortgageImportDataTable(ds.Tables["SaveMortgageImport"]));
                }
                if ((ds.Tables["DeleteMortgageImport"] != null)) {
                    base.Tables.Add(new DeleteMortgageImportDataTable(ds.Tables["DeleteMortgageImport"]));
                }
                if ((ds.Tables["CreateRecieptError"] != null)) {
                    base.Tables.Add(new CreateRecieptErrorDataTable(ds.Tables["CreateRecieptError"]));
                }
                if ((ds.Tables["CreateRecieptDetails"] != null)) {
                    base.Tables.Add(new CreateRecieptDetailsDataTable(ds.Tables["CreateRecieptDetails"]));
                }
                if ((ds.Tables["GetMortgageImportDetails"] != null)) {
                    base.Tables.Add(new GetMortgageImportDetailsDataTable(ds.Tables["GetMortgageImportDetails"]));
                }
                if ((ds.Tables["GetMortgageImportIds"] != null)) {
                    base.Tables.Add(new GetMortgageImportIdsDataTable(ds.Tables["GetMortgageImportIds"]));
                }
                if ((ds.Tables["GetMortgageImportError"] != null)) {
                    base.Tables.Add(new GetMortgageImportErrorDataTable(ds.Tables["GetMortgageImportError"]));
                }
                if ((ds.Tables["SaveMortgageImportEntryError"] != null)) {
                    base.Tables.Add(new SaveMortgageImportEntryErrorDataTable(ds.Tables["SaveMortgageImportEntryError"]));
                }
                if ((ds.Tables["SaveMortgageImportEntry"] != null)) {
                    base.Tables.Add(new SaveMortgageImportEntryDataTable(ds.Tables["SaveMortgageImportEntry"]));
                }
                if ((ds.Tables["CheckMortgageImportErrorDetails"] != null)) {
                    base.Tables.Add(new CheckMortgageImportErrorDetailsDataTable(ds.Tables["CheckMortgageImportErrorDetails"]));
                }
                if ((ds.Tables["PayListTable"] != null)) {
                    base.Tables.Add(new PayListTableDataTable(ds.Tables["PayListTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMortgageImportFileTypeDataTable ListMortgageImportFileType {
            get {
                return this.tableListMortgageImportFileType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CheckMortgageImportCheckErrorsDataTable CheckMortgageImportCheckErrors {
            get {
                return this.tableCheckMortgageImportCheckErrors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeleteMortgageImportEntryDataTable DeleteMortgageImportEntry {
            get {
                return this.tableDeleteMortgageImportEntry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CheckMortgageImportValidReceiptTestDataTable CheckMortgageImportValidReceiptTest {
            get {
                return this.tableCheckMortgageImportValidReceiptTest;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveMortgageImportDataTable SaveMortgageImport {
            get {
                return this.tableSaveMortgageImport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeleteMortgageImportDataTable DeleteMortgageImport {
            get {
                return this.tableDeleteMortgageImport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CreateRecieptErrorDataTable CreateRecieptError {
            get {
                return this.tableCreateRecieptError;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CreateRecieptDetailsDataTable CreateRecieptDetails {
            get {
                return this.tableCreateRecieptDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMortgageImportDetailsDataTable GetMortgageImportDetails {
            get {
                return this.tableGetMortgageImportDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMortgageImportIdsDataTable GetMortgageImportIds {
            get {
                return this.tableGetMortgageImportIds;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetMortgageImportErrorDataTable GetMortgageImportError {
            get {
                return this.tableGetMortgageImportError;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveMortgageImportEntryErrorDataTable SaveMortgageImportEntryError {
            get {
                return this.tableSaveMortgageImportEntryError;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveMortgageImportEntryDataTable SaveMortgageImportEntry {
            get {
                return this.tableSaveMortgageImportEntry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CheckMortgageImportErrorDetailsDataTable CheckMortgageImportErrorDetails {
            get {
                return this.tableCheckMortgageImportErrorDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PayListTableDataTable PayListTable {
            get {
                return this.tablePayListTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MortageImportData cln = ((MortageImportData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListMortgageImportFileType"] != null)) {
                    base.Tables.Add(new ListMortgageImportFileTypeDataTable(ds.Tables["ListMortgageImportFileType"]));
                }
                if ((ds.Tables["CheckMortgageImportCheckErrors"] != null)) {
                    base.Tables.Add(new CheckMortgageImportCheckErrorsDataTable(ds.Tables["CheckMortgageImportCheckErrors"]));
                }
                if ((ds.Tables["DeleteMortgageImportEntry"] != null)) {
                    base.Tables.Add(new DeleteMortgageImportEntryDataTable(ds.Tables["DeleteMortgageImportEntry"]));
                }
                if ((ds.Tables["CheckMortgageImportValidReceiptTest"] != null)) {
                    base.Tables.Add(new CheckMortgageImportValidReceiptTestDataTable(ds.Tables["CheckMortgageImportValidReceiptTest"]));
                }
                if ((ds.Tables["SaveMortgageImport"] != null)) {
                    base.Tables.Add(new SaveMortgageImportDataTable(ds.Tables["SaveMortgageImport"]));
                }
                if ((ds.Tables["DeleteMortgageImport"] != null)) {
                    base.Tables.Add(new DeleteMortgageImportDataTable(ds.Tables["DeleteMortgageImport"]));
                }
                if ((ds.Tables["CreateRecieptError"] != null)) {
                    base.Tables.Add(new CreateRecieptErrorDataTable(ds.Tables["CreateRecieptError"]));
                }
                if ((ds.Tables["CreateRecieptDetails"] != null)) {
                    base.Tables.Add(new CreateRecieptDetailsDataTable(ds.Tables["CreateRecieptDetails"]));
                }
                if ((ds.Tables["GetMortgageImportDetails"] != null)) {
                    base.Tables.Add(new GetMortgageImportDetailsDataTable(ds.Tables["GetMortgageImportDetails"]));
                }
                if ((ds.Tables["GetMortgageImportIds"] != null)) {
                    base.Tables.Add(new GetMortgageImportIdsDataTable(ds.Tables["GetMortgageImportIds"]));
                }
                if ((ds.Tables["GetMortgageImportError"] != null)) {
                    base.Tables.Add(new GetMortgageImportErrorDataTable(ds.Tables["GetMortgageImportError"]));
                }
                if ((ds.Tables["SaveMortgageImportEntryError"] != null)) {
                    base.Tables.Add(new SaveMortgageImportEntryErrorDataTable(ds.Tables["SaveMortgageImportEntryError"]));
                }
                if ((ds.Tables["SaveMortgageImportEntry"] != null)) {
                    base.Tables.Add(new SaveMortgageImportEntryDataTable(ds.Tables["SaveMortgageImportEntry"]));
                }
                if ((ds.Tables["CheckMortgageImportErrorDetails"] != null)) {
                    base.Tables.Add(new CheckMortgageImportErrorDetailsDataTable(ds.Tables["CheckMortgageImportErrorDetails"]));
                }
                if ((ds.Tables["PayListTable"] != null)) {
                    base.Tables.Add(new PayListTableDataTable(ds.Tables["PayListTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListMortgageImportFileType = ((ListMortgageImportFileTypeDataTable)(base.Tables["ListMortgageImportFileType"]));
            if ((initTable == true)) {
                if ((this.tableListMortgageImportFileType != null)) {
                    this.tableListMortgageImportFileType.InitVars();
                }
            }
            this.tableCheckMortgageImportCheckErrors = ((CheckMortgageImportCheckErrorsDataTable)(base.Tables["CheckMortgageImportCheckErrors"]));
            if ((initTable == true)) {
                if ((this.tableCheckMortgageImportCheckErrors != null)) {
                    this.tableCheckMortgageImportCheckErrors.InitVars();
                }
            }
            this.tableDeleteMortgageImportEntry = ((DeleteMortgageImportEntryDataTable)(base.Tables["DeleteMortgageImportEntry"]));
            if ((initTable == true)) {
                if ((this.tableDeleteMortgageImportEntry != null)) {
                    this.tableDeleteMortgageImportEntry.InitVars();
                }
            }
            this.tableCheckMortgageImportValidReceiptTest = ((CheckMortgageImportValidReceiptTestDataTable)(base.Tables["CheckMortgageImportValidReceiptTest"]));
            if ((initTable == true)) {
                if ((this.tableCheckMortgageImportValidReceiptTest != null)) {
                    this.tableCheckMortgageImportValidReceiptTest.InitVars();
                }
            }
            this.tableSaveMortgageImport = ((SaveMortgageImportDataTable)(base.Tables["SaveMortgageImport"]));
            if ((initTable == true)) {
                if ((this.tableSaveMortgageImport != null)) {
                    this.tableSaveMortgageImport.InitVars();
                }
            }
            this.tableDeleteMortgageImport = ((DeleteMortgageImportDataTable)(base.Tables["DeleteMortgageImport"]));
            if ((initTable == true)) {
                if ((this.tableDeleteMortgageImport != null)) {
                    this.tableDeleteMortgageImport.InitVars();
                }
            }
            this.tableCreateRecieptError = ((CreateRecieptErrorDataTable)(base.Tables["CreateRecieptError"]));
            if ((initTable == true)) {
                if ((this.tableCreateRecieptError != null)) {
                    this.tableCreateRecieptError.InitVars();
                }
            }
            this.tableCreateRecieptDetails = ((CreateRecieptDetailsDataTable)(base.Tables["CreateRecieptDetails"]));
            if ((initTable == true)) {
                if ((this.tableCreateRecieptDetails != null)) {
                    this.tableCreateRecieptDetails.InitVars();
                }
            }
            this.tableGetMortgageImportDetails = ((GetMortgageImportDetailsDataTable)(base.Tables["GetMortgageImportDetails"]));
            if ((initTable == true)) {
                if ((this.tableGetMortgageImportDetails != null)) {
                    this.tableGetMortgageImportDetails.InitVars();
                }
            }
            this.tableGetMortgageImportIds = ((GetMortgageImportIdsDataTable)(base.Tables["GetMortgageImportIds"]));
            if ((initTable == true)) {
                if ((this.tableGetMortgageImportIds != null)) {
                    this.tableGetMortgageImportIds.InitVars();
                }
            }
            this.tableGetMortgageImportError = ((GetMortgageImportErrorDataTable)(base.Tables["GetMortgageImportError"]));
            if ((initTable == true)) {
                if ((this.tableGetMortgageImportError != null)) {
                    this.tableGetMortgageImportError.InitVars();
                }
            }
            this.tableSaveMortgageImportEntryError = ((SaveMortgageImportEntryErrorDataTable)(base.Tables["SaveMortgageImportEntryError"]));
            if ((initTable == true)) {
                if ((this.tableSaveMortgageImportEntryError != null)) {
                    this.tableSaveMortgageImportEntryError.InitVars();
                }
            }
            this.tableSaveMortgageImportEntry = ((SaveMortgageImportEntryDataTable)(base.Tables["SaveMortgageImportEntry"]));
            if ((initTable == true)) {
                if ((this.tableSaveMortgageImportEntry != null)) {
                    this.tableSaveMortgageImportEntry.InitVars();
                }
            }
            this.tableCheckMortgageImportErrorDetails = ((CheckMortgageImportErrorDetailsDataTable)(base.Tables["CheckMortgageImportErrorDetails"]));
            if ((initTable == true)) {
                if ((this.tableCheckMortgageImportErrorDetails != null)) {
                    this.tableCheckMortgageImportErrorDetails.InitVars();
                }
            }
            this.tablePayListTable = ((PayListTableDataTable)(base.Tables["PayListTable"]));
            if ((initTable == true)) {
                if ((this.tablePayListTable != null)) {
                    this.tablePayListTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MortageImportData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MortageImportData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListMortgageImportFileType = new ListMortgageImportFileTypeDataTable();
            base.Tables.Add(this.tableListMortgageImportFileType);
            this.tableCheckMortgageImportCheckErrors = new CheckMortgageImportCheckErrorsDataTable();
            base.Tables.Add(this.tableCheckMortgageImportCheckErrors);
            this.tableDeleteMortgageImportEntry = new DeleteMortgageImportEntryDataTable();
            base.Tables.Add(this.tableDeleteMortgageImportEntry);
            this.tableCheckMortgageImportValidReceiptTest = new CheckMortgageImportValidReceiptTestDataTable();
            base.Tables.Add(this.tableCheckMortgageImportValidReceiptTest);
            this.tableSaveMortgageImport = new SaveMortgageImportDataTable();
            base.Tables.Add(this.tableSaveMortgageImport);
            this.tableDeleteMortgageImport = new DeleteMortgageImportDataTable();
            base.Tables.Add(this.tableDeleteMortgageImport);
            this.tableCreateRecieptError = new CreateRecieptErrorDataTable();
            base.Tables.Add(this.tableCreateRecieptError);
            this.tableCreateRecieptDetails = new CreateRecieptDetailsDataTable();
            base.Tables.Add(this.tableCreateRecieptDetails);
            this.tableGetMortgageImportDetails = new GetMortgageImportDetailsDataTable();
            base.Tables.Add(this.tableGetMortgageImportDetails);
            this.tableGetMortgageImportIds = new GetMortgageImportIdsDataTable();
            base.Tables.Add(this.tableGetMortgageImportIds);
            this.tableGetMortgageImportError = new GetMortgageImportErrorDataTable();
            base.Tables.Add(this.tableGetMortgageImportError);
            this.tableSaveMortgageImportEntryError = new SaveMortgageImportEntryErrorDataTable();
            base.Tables.Add(this.tableSaveMortgageImportEntryError);
            this.tableSaveMortgageImportEntry = new SaveMortgageImportEntryDataTable();
            base.Tables.Add(this.tableSaveMortgageImportEntry);
            this.tableCheckMortgageImportErrorDetails = new CheckMortgageImportErrorDetailsDataTable();
            base.Tables.Add(this.tableCheckMortgageImportErrorDetails);
            this.tablePayListTable = new PayListTableDataTable();
            base.Tables.Add(this.tablePayListTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMortgageImportFileType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCheckMortgageImportCheckErrors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDeleteMortgageImportEntry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCheckMortgageImportValidReceiptTest() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveMortgageImport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDeleteMortgageImport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCreateRecieptError() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCreateRecieptDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMortgageImportDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMortgageImportIds() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetMortgageImportError() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveMortgageImportEntryError() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveMortgageImportEntry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCheckMortgageImportErrorDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePayListTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MortageImportData ds = new MortageImportData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListMortgageImportFileTypeRowChangeEventHandler(object sender, ListMortgageImportFileTypeRowChangeEvent e);
        
        public delegate void CheckMortgageImportCheckErrorsRowChangeEventHandler(object sender, CheckMortgageImportCheckErrorsRowChangeEvent e);
        
        public delegate void DeleteMortgageImportEntryRowChangeEventHandler(object sender, DeleteMortgageImportEntryRowChangeEvent e);
        
        public delegate void CheckMortgageImportValidReceiptTestRowChangeEventHandler(object sender, CheckMortgageImportValidReceiptTestRowChangeEvent e);
        
        public delegate void SaveMortgageImportRowChangeEventHandler(object sender, SaveMortgageImportRowChangeEvent e);
        
        public delegate void DeleteMortgageImportRowChangeEventHandler(object sender, DeleteMortgageImportRowChangeEvent e);
        
        public delegate void CreateRecieptErrorRowChangeEventHandler(object sender, CreateRecieptErrorRowChangeEvent e);
        
        public delegate void CreateRecieptDetailsRowChangeEventHandler(object sender, CreateRecieptDetailsRowChangeEvent e);
        
        public delegate void GetMortgageImportDetailsRowChangeEventHandler(object sender, GetMortgageImportDetailsRowChangeEvent e);
        
        public delegate void GetMortgageImportIdsRowChangeEventHandler(object sender, GetMortgageImportIdsRowChangeEvent e);
        
        public delegate void GetMortgageImportErrorRowChangeEventHandler(object sender, GetMortgageImportErrorRowChangeEvent e);
        
        public delegate void SaveMortgageImportEntryErrorRowChangeEventHandler(object sender, SaveMortgageImportEntryErrorRowChangeEvent e);
        
        public delegate void SaveMortgageImportEntryRowChangeEventHandler(object sender, SaveMortgageImportEntryRowChangeEvent e);
        
        public delegate void CheckMortgageImportErrorDetailsRowChangeEventHandler(object sender, CheckMortgageImportErrorDetailsRowChangeEvent e);
        
        public delegate void PayListTableRowChangeEventHandler(object sender, PayListTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMortgageImportFileTypeDataTable : global::System.Data.TypedTableBase<ListMortgageImportFileTypeRow> {
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageImportFileTypeDataTable() {
                this.TableName = "ListMortgageImportFileType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMortgageImportFileTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMortgageImportFileTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageImportFileTypeRow this[int index] {
                get {
                    return ((ListMortgageImportFileTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListMortgageImportFileTypeRowChangeEventHandler ListMortgageImportFileTypeRowChanging;
            
            public event ListMortgageImportFileTypeRowChangeEventHandler ListMortgageImportFileTypeRowChanged;
            
            public event ListMortgageImportFileTypeRowChangeEventHandler ListMortgageImportFileTypeRowDeleting;
            
            public event ListMortgageImportFileTypeRowChangeEventHandler ListMortgageImportFileTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMortgageImportFileTypeRow(ListMortgageImportFileTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageImportFileTypeRow AddListMortgageImportFileTypeRow(byte TypeID, string TypeName) {
                ListMortgageImportFileTypeRow rowListMortgageImportFileTypeRow = ((ListMortgageImportFileTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TypeID,
                        TypeName};
                rowListMortgageImportFileTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMortgageImportFileTypeRow);
                return rowListMortgageImportFileTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageImportFileTypeRow FindByTypeID(byte TypeID) {
                return ((ListMortgageImportFileTypeRow)(this.Rows.Find(new object[] {
                            TypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMortgageImportFileTypeDataTable cln = ((ListMortgageImportFileTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMortgageImportFileTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTypeID = base.Columns["TypeID"];
                this.columnTypeName = base.Columns["TypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTypeID}, true));
                this.columnTypeID.AllowDBNull = false;
                this.columnTypeID.Unique = true;
                this.columnTypeName.AllowDBNull = false;
                this.columnTypeName.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageImportFileTypeRow NewListMortgageImportFileTypeRow() {
                return ((ListMortgageImportFileTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMortgageImportFileTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMortgageImportFileTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMortgageImportFileTypeRowChanged != null)) {
                    this.ListMortgageImportFileTypeRowChanged(this, new ListMortgageImportFileTypeRowChangeEvent(((ListMortgageImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMortgageImportFileTypeRowChanging != null)) {
                    this.ListMortgageImportFileTypeRowChanging(this, new ListMortgageImportFileTypeRowChangeEvent(((ListMortgageImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMortgageImportFileTypeRowDeleted != null)) {
                    this.ListMortgageImportFileTypeRowDeleted(this, new ListMortgageImportFileTypeRowChangeEvent(((ListMortgageImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMortgageImportFileTypeRowDeleting != null)) {
                    this.ListMortgageImportFileTypeRowDeleting(this, new ListMortgageImportFileTypeRowChangeEvent(((ListMortgageImportFileTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMortgageImportFileTypeRow(ListMortgageImportFileTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMortgageImportFileTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CheckMortgageImportCheckErrorsDataTable : global::System.Data.TypedTableBase<CheckMortgageImportCheckErrorsRow> {
            
            private global::System.Data.DataColumn columnErrorMsg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportCheckErrorsDataTable() {
                this.TableName = "CheckMortgageImportCheckErrors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckMortgageImportCheckErrorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CheckMortgageImportCheckErrorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMsgColumn {
                get {
                    return this.columnErrorMsg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportCheckErrorsRow this[int index] {
                get {
                    return ((CheckMortgageImportCheckErrorsRow)(this.Rows[index]));
                }
            }
            
            public event CheckMortgageImportCheckErrorsRowChangeEventHandler CheckMortgageImportCheckErrorsRowChanging;
            
            public event CheckMortgageImportCheckErrorsRowChangeEventHandler CheckMortgageImportCheckErrorsRowChanged;
            
            public event CheckMortgageImportCheckErrorsRowChangeEventHandler CheckMortgageImportCheckErrorsRowDeleting;
            
            public event CheckMortgageImportCheckErrorsRowChangeEventHandler CheckMortgageImportCheckErrorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCheckMortgageImportCheckErrorsRow(CheckMortgageImportCheckErrorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportCheckErrorsRow AddCheckMortgageImportCheckErrorsRow(string ErrorMsg) {
                CheckMortgageImportCheckErrorsRow rowCheckMortgageImportCheckErrorsRow = ((CheckMortgageImportCheckErrorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorMsg};
                rowCheckMortgageImportCheckErrorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCheckMortgageImportCheckErrorsRow);
                return rowCheckMortgageImportCheckErrorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CheckMortgageImportCheckErrorsDataTable cln = ((CheckMortgageImportCheckErrorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CheckMortgageImportCheckErrorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorMsg = base.Columns["ErrorMsg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorMsg = new global::System.Data.DataColumn("ErrorMsg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMsg);
                this.columnErrorMsg.ReadOnly = true;
                this.columnErrorMsg.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportCheckErrorsRow NewCheckMortgageImportCheckErrorsRow() {
                return ((CheckMortgageImportCheckErrorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CheckMortgageImportCheckErrorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CheckMortgageImportCheckErrorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CheckMortgageImportCheckErrorsRowChanged != null)) {
                    this.CheckMortgageImportCheckErrorsRowChanged(this, new CheckMortgageImportCheckErrorsRowChangeEvent(((CheckMortgageImportCheckErrorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CheckMortgageImportCheckErrorsRowChanging != null)) {
                    this.CheckMortgageImportCheckErrorsRowChanging(this, new CheckMortgageImportCheckErrorsRowChangeEvent(((CheckMortgageImportCheckErrorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CheckMortgageImportCheckErrorsRowDeleted != null)) {
                    this.CheckMortgageImportCheckErrorsRowDeleted(this, new CheckMortgageImportCheckErrorsRowChangeEvent(((CheckMortgageImportCheckErrorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CheckMortgageImportCheckErrorsRowDeleting != null)) {
                    this.CheckMortgageImportCheckErrorsRowDeleting(this, new CheckMortgageImportCheckErrorsRowChangeEvent(((CheckMortgageImportCheckErrorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCheckMortgageImportCheckErrorsRow(CheckMortgageImportCheckErrorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CheckMortgageImportCheckErrorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeleteMortgageImportEntryDataTable : global::System.Data.TypedTableBase<DeleteMortgageImportEntryRow> {
            
            private global::System.Data.DataColumn columnErrorMsg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportEntryDataTable() {
                this.TableName = "DeleteMortgageImportEntry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeleteMortgageImportEntryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeleteMortgageImportEntryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMsgColumn {
                get {
                    return this.columnErrorMsg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportEntryRow this[int index] {
                get {
                    return ((DeleteMortgageImportEntryRow)(this.Rows[index]));
                }
            }
            
            public event DeleteMortgageImportEntryRowChangeEventHandler DeleteMortgageImportEntryRowChanging;
            
            public event DeleteMortgageImportEntryRowChangeEventHandler DeleteMortgageImportEntryRowChanged;
            
            public event DeleteMortgageImportEntryRowChangeEventHandler DeleteMortgageImportEntryRowDeleting;
            
            public event DeleteMortgageImportEntryRowChangeEventHandler DeleteMortgageImportEntryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeleteMortgageImportEntryRow(DeleteMortgageImportEntryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportEntryRow AddDeleteMortgageImportEntryRow(string ErrorMsg) {
                DeleteMortgageImportEntryRow rowDeleteMortgageImportEntryRow = ((DeleteMortgageImportEntryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorMsg};
                rowDeleteMortgageImportEntryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDeleteMortgageImportEntryRow);
                return rowDeleteMortgageImportEntryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DeleteMortgageImportEntryDataTable cln = ((DeleteMortgageImportEntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DeleteMortgageImportEntryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorMsg = base.Columns["ErrorMsg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorMsg = new global::System.Data.DataColumn("ErrorMsg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMsg);
                this.columnErrorMsg.ReadOnly = true;
                this.columnErrorMsg.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportEntryRow NewDeleteMortgageImportEntryRow() {
                return ((DeleteMortgageImportEntryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DeleteMortgageImportEntryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DeleteMortgageImportEntryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeleteMortgageImportEntryRowChanged != null)) {
                    this.DeleteMortgageImportEntryRowChanged(this, new DeleteMortgageImportEntryRowChangeEvent(((DeleteMortgageImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeleteMortgageImportEntryRowChanging != null)) {
                    this.DeleteMortgageImportEntryRowChanging(this, new DeleteMortgageImportEntryRowChangeEvent(((DeleteMortgageImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeleteMortgageImportEntryRowDeleted != null)) {
                    this.DeleteMortgageImportEntryRowDeleted(this, new DeleteMortgageImportEntryRowChangeEvent(((DeleteMortgageImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeleteMortgageImportEntryRowDeleting != null)) {
                    this.DeleteMortgageImportEntryRowDeleting(this, new DeleteMortgageImportEntryRowChangeEvent(((DeleteMortgageImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeleteMortgageImportEntryRow(DeleteMortgageImportEntryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeleteMortgageImportEntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CheckMortgageImportValidReceiptTestDataTable : global::System.Data.TypedTableBase<CheckMortgageImportValidReceiptTestRow> {
            
            private global::System.Data.DataColumn columnErrorMsg;
            
            private global::System.Data.DataColumn columnErrorCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportValidReceiptTestDataTable() {
                this.TableName = "CheckMortgageImportValidReceiptTest";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckMortgageImportValidReceiptTestDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CheckMortgageImportValidReceiptTestDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMsgColumn {
                get {
                    return this.columnErrorMsg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorCodeColumn {
                get {
                    return this.columnErrorCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportValidReceiptTestRow this[int index] {
                get {
                    return ((CheckMortgageImportValidReceiptTestRow)(this.Rows[index]));
                }
            }
            
            public event CheckMortgageImportValidReceiptTestRowChangeEventHandler CheckMortgageImportValidReceiptTestRowChanging;
            
            public event CheckMortgageImportValidReceiptTestRowChangeEventHandler CheckMortgageImportValidReceiptTestRowChanged;
            
            public event CheckMortgageImportValidReceiptTestRowChangeEventHandler CheckMortgageImportValidReceiptTestRowDeleting;
            
            public event CheckMortgageImportValidReceiptTestRowChangeEventHandler CheckMortgageImportValidReceiptTestRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCheckMortgageImportValidReceiptTestRow(CheckMortgageImportValidReceiptTestRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportValidReceiptTestRow AddCheckMortgageImportValidReceiptTestRow(string ErrorMsg, int ErrorCode) {
                CheckMortgageImportValidReceiptTestRow rowCheckMortgageImportValidReceiptTestRow = ((CheckMortgageImportValidReceiptTestRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorMsg,
                        ErrorCode};
                rowCheckMortgageImportValidReceiptTestRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCheckMortgageImportValidReceiptTestRow);
                return rowCheckMortgageImportValidReceiptTestRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CheckMortgageImportValidReceiptTestDataTable cln = ((CheckMortgageImportValidReceiptTestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CheckMortgageImportValidReceiptTestDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorMsg = base.Columns["ErrorMsg"];
                this.columnErrorCode = base.Columns["ErrorCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorMsg = new global::System.Data.DataColumn("ErrorMsg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMsg);
                this.columnErrorCode = new global::System.Data.DataColumn("ErrorCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorCode);
                this.columnErrorMsg.ReadOnly = true;
                this.columnErrorMsg.MaxLength = 250;
                this.columnErrorCode.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportValidReceiptTestRow NewCheckMortgageImportValidReceiptTestRow() {
                return ((CheckMortgageImportValidReceiptTestRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CheckMortgageImportValidReceiptTestRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CheckMortgageImportValidReceiptTestRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CheckMortgageImportValidReceiptTestRowChanged != null)) {
                    this.CheckMortgageImportValidReceiptTestRowChanged(this, new CheckMortgageImportValidReceiptTestRowChangeEvent(((CheckMortgageImportValidReceiptTestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CheckMortgageImportValidReceiptTestRowChanging != null)) {
                    this.CheckMortgageImportValidReceiptTestRowChanging(this, new CheckMortgageImportValidReceiptTestRowChangeEvent(((CheckMortgageImportValidReceiptTestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CheckMortgageImportValidReceiptTestRowDeleted != null)) {
                    this.CheckMortgageImportValidReceiptTestRowDeleted(this, new CheckMortgageImportValidReceiptTestRowChangeEvent(((CheckMortgageImportValidReceiptTestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CheckMortgageImportValidReceiptTestRowDeleting != null)) {
                    this.CheckMortgageImportValidReceiptTestRowDeleting(this, new CheckMortgageImportValidReceiptTestRowChangeEvent(((CheckMortgageImportValidReceiptTestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCheckMortgageImportValidReceiptTestRow(CheckMortgageImportValidReceiptTestRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CheckMortgageImportValidReceiptTestDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveMortgageImportDataTable : global::System.Data.TypedTableBase<SaveMortgageImportRow> {
            
            private global::System.Data.DataColumn columnErrorMsg;
            
            private global::System.Data.DataColumn columnImportID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportDataTable() {
                this.TableName = "SaveMortgageImport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMortgageImportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveMortgageImportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMsgColumn {
                get {
                    return this.columnErrorMsg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportIDColumn {
                get {
                    return this.columnImportID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportRow this[int index] {
                get {
                    return ((SaveMortgageImportRow)(this.Rows[index]));
                }
            }
            
            public event SaveMortgageImportRowChangeEventHandler SaveMortgageImportRowChanging;
            
            public event SaveMortgageImportRowChangeEventHandler SaveMortgageImportRowChanged;
            
            public event SaveMortgageImportRowChangeEventHandler SaveMortgageImportRowDeleting;
            
            public event SaveMortgageImportRowChangeEventHandler SaveMortgageImportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveMortgageImportRow(SaveMortgageImportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportRow AddSaveMortgageImportRow(string ErrorMsg, int ImportID) {
                SaveMortgageImportRow rowSaveMortgageImportRow = ((SaveMortgageImportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorMsg,
                        ImportID};
                rowSaveMortgageImportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveMortgageImportRow);
                return rowSaveMortgageImportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveMortgageImportDataTable cln = ((SaveMortgageImportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveMortgageImportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorMsg = base.Columns["ErrorMsg"];
                this.columnImportID = base.Columns["ImportID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorMsg = new global::System.Data.DataColumn("ErrorMsg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMsg);
                this.columnImportID = new global::System.Data.DataColumn("ImportID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportID);
                this.columnErrorMsg.ReadOnly = true;
                this.columnErrorMsg.MaxLength = 200;
                this.columnImportID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportRow NewSaveMortgageImportRow() {
                return ((SaveMortgageImportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveMortgageImportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveMortgageImportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveMortgageImportRowChanged != null)) {
                    this.SaveMortgageImportRowChanged(this, new SaveMortgageImportRowChangeEvent(((SaveMortgageImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveMortgageImportRowChanging != null)) {
                    this.SaveMortgageImportRowChanging(this, new SaveMortgageImportRowChangeEvent(((SaveMortgageImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveMortgageImportRowDeleted != null)) {
                    this.SaveMortgageImportRowDeleted(this, new SaveMortgageImportRowChangeEvent(((SaveMortgageImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveMortgageImportRowDeleting != null)) {
                    this.SaveMortgageImportRowDeleting(this, new SaveMortgageImportRowChangeEvent(((SaveMortgageImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveMortgageImportRow(SaveMortgageImportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveMortgageImportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeleteMortgageImportDataTable : global::System.Data.TypedTableBase<DeleteMortgageImportRow> {
            
            private global::System.Data.DataColumn columnErrorMsg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportDataTable() {
                this.TableName = "DeleteMortgageImport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeleteMortgageImportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DeleteMortgageImportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMsgColumn {
                get {
                    return this.columnErrorMsg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportRow this[int index] {
                get {
                    return ((DeleteMortgageImportRow)(this.Rows[index]));
                }
            }
            
            public event DeleteMortgageImportRowChangeEventHandler DeleteMortgageImportRowChanging;
            
            public event DeleteMortgageImportRowChangeEventHandler DeleteMortgageImportRowChanged;
            
            public event DeleteMortgageImportRowChangeEventHandler DeleteMortgageImportRowDeleting;
            
            public event DeleteMortgageImportRowChangeEventHandler DeleteMortgageImportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeleteMortgageImportRow(DeleteMortgageImportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportRow AddDeleteMortgageImportRow(string ErrorMsg) {
                DeleteMortgageImportRow rowDeleteMortgageImportRow = ((DeleteMortgageImportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorMsg};
                rowDeleteMortgageImportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDeleteMortgageImportRow);
                return rowDeleteMortgageImportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DeleteMortgageImportDataTable cln = ((DeleteMortgageImportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DeleteMortgageImportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorMsg = base.Columns["ErrorMsg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorMsg = new global::System.Data.DataColumn("ErrorMsg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMsg);
                this.columnErrorMsg.ReadOnly = true;
                this.columnErrorMsg.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportRow NewDeleteMortgageImportRow() {
                return ((DeleteMortgageImportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DeleteMortgageImportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DeleteMortgageImportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeleteMortgageImportRowChanged != null)) {
                    this.DeleteMortgageImportRowChanged(this, new DeleteMortgageImportRowChangeEvent(((DeleteMortgageImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeleteMortgageImportRowChanging != null)) {
                    this.DeleteMortgageImportRowChanging(this, new DeleteMortgageImportRowChangeEvent(((DeleteMortgageImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeleteMortgageImportRowDeleted != null)) {
                    this.DeleteMortgageImportRowDeleted(this, new DeleteMortgageImportRowChangeEvent(((DeleteMortgageImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeleteMortgageImportRowDeleting != null)) {
                    this.DeleteMortgageImportRowDeleting(this, new DeleteMortgageImportRowChangeEvent(((DeleteMortgageImportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeleteMortgageImportRow(DeleteMortgageImportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeleteMortgageImportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CreateRecieptErrorDataTable : global::System.Data.TypedTableBase<CreateRecieptErrorRow> {
            
            private global::System.Data.DataColumn columnErrorMsg;
            
            private global::System.Data.DataColumn columnErrorCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptErrorDataTable() {
                this.TableName = "CreateRecieptError";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CreateRecieptErrorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CreateRecieptErrorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMsgColumn {
                get {
                    return this.columnErrorMsg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorCodeColumn {
                get {
                    return this.columnErrorCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptErrorRow this[int index] {
                get {
                    return ((CreateRecieptErrorRow)(this.Rows[index]));
                }
            }
            
            public event CreateRecieptErrorRowChangeEventHandler CreateRecieptErrorRowChanging;
            
            public event CreateRecieptErrorRowChangeEventHandler CreateRecieptErrorRowChanged;
            
            public event CreateRecieptErrorRowChangeEventHandler CreateRecieptErrorRowDeleting;
            
            public event CreateRecieptErrorRowChangeEventHandler CreateRecieptErrorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCreateRecieptErrorRow(CreateRecieptErrorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptErrorRow AddCreateRecieptErrorRow(string ErrorMsg, int ErrorCode) {
                CreateRecieptErrorRow rowCreateRecieptErrorRow = ((CreateRecieptErrorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorMsg,
                        ErrorCode};
                rowCreateRecieptErrorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCreateRecieptErrorRow);
                return rowCreateRecieptErrorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CreateRecieptErrorDataTable cln = ((CreateRecieptErrorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CreateRecieptErrorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorMsg = base.Columns["ErrorMsg"];
                this.columnErrorCode = base.Columns["ErrorCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorMsg = new global::System.Data.DataColumn("ErrorMsg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMsg);
                this.columnErrorCode = new global::System.Data.DataColumn("ErrorCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorCode);
                this.columnErrorMsg.ReadOnly = true;
                this.columnErrorMsg.MaxLength = 250;
                this.columnErrorCode.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptErrorRow NewCreateRecieptErrorRow() {
                return ((CreateRecieptErrorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CreateRecieptErrorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CreateRecieptErrorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CreateRecieptErrorRowChanged != null)) {
                    this.CreateRecieptErrorRowChanged(this, new CreateRecieptErrorRowChangeEvent(((CreateRecieptErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CreateRecieptErrorRowChanging != null)) {
                    this.CreateRecieptErrorRowChanging(this, new CreateRecieptErrorRowChangeEvent(((CreateRecieptErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CreateRecieptErrorRowDeleted != null)) {
                    this.CreateRecieptErrorRowDeleted(this, new CreateRecieptErrorRowChangeEvent(((CreateRecieptErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CreateRecieptErrorRowDeleting != null)) {
                    this.CreateRecieptErrorRowDeleting(this, new CreateRecieptErrorRowChangeEvent(((CreateRecieptErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCreateRecieptErrorRow(CreateRecieptErrorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CreateRecieptErrorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CreateRecieptDetailsDataTable : global::System.Data.TypedTableBase<CreateRecieptDetailsRow> {
            
            private global::System.Data.DataColumn columnRcptCreatedBy;
            
            private global::System.Data.DataColumn columnRcptCreatedDt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptDetailsDataTable() {
                this.TableName = "CreateRecieptDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CreateRecieptDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CreateRecieptDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RcptCreatedByColumn {
                get {
                    return this.columnRcptCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RcptCreatedDtColumn {
                get {
                    return this.columnRcptCreatedDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptDetailsRow this[int index] {
                get {
                    return ((CreateRecieptDetailsRow)(this.Rows[index]));
                }
            }
            
            public event CreateRecieptDetailsRowChangeEventHandler CreateRecieptDetailsRowChanging;
            
            public event CreateRecieptDetailsRowChangeEventHandler CreateRecieptDetailsRowChanged;
            
            public event CreateRecieptDetailsRowChangeEventHandler CreateRecieptDetailsRowDeleting;
            
            public event CreateRecieptDetailsRowChangeEventHandler CreateRecieptDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCreateRecieptDetailsRow(CreateRecieptDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptDetailsRow AddCreateRecieptDetailsRow(string RcptCreatedBy, System.DateTime RcptCreatedDt) {
                CreateRecieptDetailsRow rowCreateRecieptDetailsRow = ((CreateRecieptDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RcptCreatedBy,
                        RcptCreatedDt};
                rowCreateRecieptDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCreateRecieptDetailsRow);
                return rowCreateRecieptDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CreateRecieptDetailsDataTable cln = ((CreateRecieptDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CreateRecieptDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRcptCreatedBy = base.Columns["RcptCreatedBy"];
                this.columnRcptCreatedDt = base.Columns["RcptCreatedDt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRcptCreatedBy = new global::System.Data.DataColumn("RcptCreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRcptCreatedBy);
                this.columnRcptCreatedDt = new global::System.Data.DataColumn("RcptCreatedDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRcptCreatedDt);
                this.columnRcptCreatedBy.ReadOnly = true;
                this.columnRcptCreatedBy.MaxLength = 250;
                this.columnRcptCreatedDt.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptDetailsRow NewCreateRecieptDetailsRow() {
                return ((CreateRecieptDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CreateRecieptDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CreateRecieptDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CreateRecieptDetailsRowChanged != null)) {
                    this.CreateRecieptDetailsRowChanged(this, new CreateRecieptDetailsRowChangeEvent(((CreateRecieptDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CreateRecieptDetailsRowChanging != null)) {
                    this.CreateRecieptDetailsRowChanging(this, new CreateRecieptDetailsRowChangeEvent(((CreateRecieptDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CreateRecieptDetailsRowDeleted != null)) {
                    this.CreateRecieptDetailsRowDeleted(this, new CreateRecieptDetailsRowChangeEvent(((CreateRecieptDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CreateRecieptDetailsRowDeleting != null)) {
                    this.CreateRecieptDetailsRowDeleting(this, new CreateRecieptDetailsRowChangeEvent(((CreateRecieptDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCreateRecieptDetailsRow(CreateRecieptDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CreateRecieptDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMortgageImportDetailsDataTable : global::System.Data.TypedTableBase<GetMortgageImportDetailsRow> {
            
            private global::System.Data.DataColumn columnImportID;
            
            private global::System.Data.DataColumn columnTemplateID;
            
            private global::System.Data.DataColumn columnTypeID;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnReceiptDate;
            
            private global::System.Data.DataColumn columnInterestDate;
            
            private global::System.Data.DataColumn columnTemplateName;
            
            private global::System.Data.DataColumn columnTypeName;
            
            private global::System.Data.DataColumn columnAllowPartialPmts;
            
            private global::System.Data.DataColumn columnPPaymentID;
            
            private global::System.Data.DataColumn columnImportRunBy;
            
            private global::System.Data.DataColumn columnImportRunDt;
            
            private global::System.Data.DataColumn columnErrorRunBy;
            
            private global::System.Data.DataColumn columnErrorRunDt;
            
            private global::System.Data.DataColumn columnRcptCreatedBy;
            
            private global::System.Data.DataColumn columnRcptCreatedDt;
            
            private global::System.Data.DataColumn columnRcptPrintBy;
            
            private global::System.Data.DataColumn columnRcptPrintDt;
            
            private global::System.Data.DataColumn columnEntriesTotal;
            
            private global::System.Data.DataColumn columnErrorTotal;
            
            private global::System.Data.DataColumn columnValidTotal;
            
            private global::System.Data.DataColumn columnImportedEntries;
            
            private global::System.Data.DataColumn columnErrorEntries;
            
            private global::System.Data.DataColumn columnOverUnderAmount;
            
            private global::System.Data.DataColumn columnPayCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportDetailsDataTable() {
                this.TableName = "GetMortgageImportDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMortgageImportDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMortgageImportDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportIDColumn {
                get {
                    return this.columnImportID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeIDColumn {
                get {
                    return this.columnTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptDateColumn {
                get {
                    return this.columnReceiptDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InterestDateColumn {
                get {
                    return this.columnInterestDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateNameColumn {
                get {
                    return this.columnTemplateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowPartialPmtsColumn {
                get {
                    return this.columnAllowPartialPmts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PPaymentIDColumn {
                get {
                    return this.columnPPaymentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportRunByColumn {
                get {
                    return this.columnImportRunBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportRunDtColumn {
                get {
                    return this.columnImportRunDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorRunByColumn {
                get {
                    return this.columnErrorRunBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorRunDtColumn {
                get {
                    return this.columnErrorRunDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RcptCreatedByColumn {
                get {
                    return this.columnRcptCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RcptCreatedDtColumn {
                get {
                    return this.columnRcptCreatedDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RcptPrintByColumn {
                get {
                    return this.columnRcptPrintBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RcptPrintDtColumn {
                get {
                    return this.columnRcptPrintDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntriesTotalColumn {
                get {
                    return this.columnEntriesTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorTotalColumn {
                get {
                    return this.columnErrorTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidTotalColumn {
                get {
                    return this.columnValidTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedEntriesColumn {
                get {
                    return this.columnImportedEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorEntriesColumn {
                get {
                    return this.columnErrorEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverUnderAmountColumn {
                get {
                    return this.columnOverUnderAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayCodeColumn {
                get {
                    return this.columnPayCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportDetailsRow this[int index] {
                get {
                    return ((GetMortgageImportDetailsRow)(this.Rows[index]));
                }
            }
            
            public event GetMortgageImportDetailsRowChangeEventHandler GetMortgageImportDetailsRowChanging;
            
            public event GetMortgageImportDetailsRowChangeEventHandler GetMortgageImportDetailsRowChanged;
            
            public event GetMortgageImportDetailsRowChangeEventHandler GetMortgageImportDetailsRowDeleting;
            
            public event GetMortgageImportDetailsRowChangeEventHandler GetMortgageImportDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMortgageImportDetailsRow(GetMortgageImportDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportDetailsRow AddGetMortgageImportDetailsRow(
                        int ImportID, 
                        int TemplateID, 
                        int TypeID, 
                        string FilePath, 
                        string ReceiptDate, 
                        string InterestDate, 
                        string TemplateName, 
                        string TypeName, 
                        bool AllowPartialPmts, 
                        int PPaymentID, 
                        string ImportRunBy, 
                        System.DateTime ImportRunDt, 
                        string ErrorRunBy, 
                        System.DateTime ErrorRunDt, 
                        string RcptCreatedBy, 
                        System.DateTime RcptCreatedDt, 
                        string RcptPrintBy, 
                        System.DateTime RcptPrintDt, 
                        double EntriesTotal, 
                        double ErrorTotal, 
                        double ValidTotal, 
                        int ImportedEntries, 
                        int ErrorEntries, 
                        decimal OverUnderAmount, 
                        int PayCode) {
                GetMortgageImportDetailsRow rowGetMortgageImportDetailsRow = ((GetMortgageImportDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImportID,
                        TemplateID,
                        TypeID,
                        FilePath,
                        ReceiptDate,
                        InterestDate,
                        TemplateName,
                        TypeName,
                        AllowPartialPmts,
                        PPaymentID,
                        ImportRunBy,
                        ImportRunDt,
                        ErrorRunBy,
                        ErrorRunDt,
                        RcptCreatedBy,
                        RcptCreatedDt,
                        RcptPrintBy,
                        RcptPrintDt,
                        EntriesTotal,
                        ErrorTotal,
                        ValidTotal,
                        ImportedEntries,
                        ErrorEntries,
                        OverUnderAmount,
                        PayCode};
                rowGetMortgageImportDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMortgageImportDetailsRow);
                return rowGetMortgageImportDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMortgageImportDetailsDataTable cln = ((GetMortgageImportDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMortgageImportDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImportID = base.Columns["ImportID"];
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnTypeID = base.Columns["TypeID"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnReceiptDate = base.Columns["ReceiptDate"];
                this.columnInterestDate = base.Columns["InterestDate"];
                this.columnTemplateName = base.Columns["TemplateName"];
                this.columnTypeName = base.Columns["TypeName"];
                this.columnAllowPartialPmts = base.Columns["AllowPartialPmts"];
                this.columnPPaymentID = base.Columns["PPaymentID"];
                this.columnImportRunBy = base.Columns["ImportRunBy"];
                this.columnImportRunDt = base.Columns["ImportRunDt"];
                this.columnErrorRunBy = base.Columns["ErrorRunBy"];
                this.columnErrorRunDt = base.Columns["ErrorRunDt"];
                this.columnRcptCreatedBy = base.Columns["RcptCreatedBy"];
                this.columnRcptCreatedDt = base.Columns["RcptCreatedDt"];
                this.columnRcptPrintBy = base.Columns["RcptPrintBy"];
                this.columnRcptPrintDt = base.Columns["RcptPrintDt"];
                this.columnEntriesTotal = base.Columns["EntriesTotal"];
                this.columnErrorTotal = base.Columns["ErrorTotal"];
                this.columnValidTotal = base.Columns["ValidTotal"];
                this.columnImportedEntries = base.Columns["ImportedEntries"];
                this.columnErrorEntries = base.Columns["ErrorEntries"];
                this.columnOverUnderAmount = base.Columns["OverUnderAmount"];
                this.columnPayCode = base.Columns["PayCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImportID = new global::System.Data.DataColumn("ImportID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportID);
                this.columnTemplateID = new global::System.Data.DataColumn("TemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnTypeID = new global::System.Data.DataColumn("TypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeID);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnReceiptDate = new global::System.Data.DataColumn("ReceiptDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDate);
                this.columnInterestDate = new global::System.Data.DataColumn("InterestDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestDate);
                this.columnTemplateName = new global::System.Data.DataColumn("TemplateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateName);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.columnAllowPartialPmts = new global::System.Data.DataColumn("AllowPartialPmts", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowPartialPmts);
                this.columnPPaymentID = new global::System.Data.DataColumn("PPaymentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPPaymentID);
                this.columnImportRunBy = new global::System.Data.DataColumn("ImportRunBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportRunBy);
                this.columnImportRunDt = new global::System.Data.DataColumn("ImportRunDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportRunDt);
                this.columnErrorRunBy = new global::System.Data.DataColumn("ErrorRunBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorRunBy);
                this.columnErrorRunDt = new global::System.Data.DataColumn("ErrorRunDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorRunDt);
                this.columnRcptCreatedBy = new global::System.Data.DataColumn("RcptCreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRcptCreatedBy);
                this.columnRcptCreatedDt = new global::System.Data.DataColumn("RcptCreatedDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRcptCreatedDt);
                this.columnRcptPrintBy = new global::System.Data.DataColumn("RcptPrintBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRcptPrintBy);
                this.columnRcptPrintDt = new global::System.Data.DataColumn("RcptPrintDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRcptPrintDt);
                this.columnEntriesTotal = new global::System.Data.DataColumn("EntriesTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntriesTotal);
                this.columnErrorTotal = new global::System.Data.DataColumn("ErrorTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorTotal);
                this.columnValidTotal = new global::System.Data.DataColumn("ValidTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidTotal);
                this.columnImportedEntries = new global::System.Data.DataColumn("ImportedEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportedEntries);
                this.columnErrorEntries = new global::System.Data.DataColumn("ErrorEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorEntries);
                this.columnOverUnderAmount = new global::System.Data.DataColumn("OverUnderAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverUnderAmount);
                this.columnPayCode = new global::System.Data.DataColumn("PayCode", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayCode);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportDetailsRow NewGetMortgageImportDetailsRow() {
                return ((GetMortgageImportDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMortgageImportDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMortgageImportDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMortgageImportDetailsRowChanged != null)) {
                    this.GetMortgageImportDetailsRowChanged(this, new GetMortgageImportDetailsRowChangeEvent(((GetMortgageImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMortgageImportDetailsRowChanging != null)) {
                    this.GetMortgageImportDetailsRowChanging(this, new GetMortgageImportDetailsRowChangeEvent(((GetMortgageImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMortgageImportDetailsRowDeleted != null)) {
                    this.GetMortgageImportDetailsRowDeleted(this, new GetMortgageImportDetailsRowChangeEvent(((GetMortgageImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMortgageImportDetailsRowDeleting != null)) {
                    this.GetMortgageImportDetailsRowDeleting(this, new GetMortgageImportDetailsRowChangeEvent(((GetMortgageImportDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMortgageImportDetailsRow(GetMortgageImportDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMortgageImportDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMortgageImportIdsDataTable : global::System.Data.TypedTableBase<GetMortgageImportIdsRow> {
            
            private global::System.Data.DataColumn columnImportID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportIdsDataTable() {
                this.TableName = "GetMortgageImportIds";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMortgageImportIdsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMortgageImportIdsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportIDColumn {
                get {
                    return this.columnImportID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportIdsRow this[int index] {
                get {
                    return ((GetMortgageImportIdsRow)(this.Rows[index]));
                }
            }
            
            public event GetMortgageImportIdsRowChangeEventHandler GetMortgageImportIdsRowChanging;
            
            public event GetMortgageImportIdsRowChangeEventHandler GetMortgageImportIdsRowChanged;
            
            public event GetMortgageImportIdsRowChangeEventHandler GetMortgageImportIdsRowDeleting;
            
            public event GetMortgageImportIdsRowChangeEventHandler GetMortgageImportIdsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMortgageImportIdsRow(GetMortgageImportIdsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportIdsRow AddGetMortgageImportIdsRow(int ImportID) {
                GetMortgageImportIdsRow rowGetMortgageImportIdsRow = ((GetMortgageImportIdsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImportID};
                rowGetMortgageImportIdsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMortgageImportIdsRow);
                return rowGetMortgageImportIdsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMortgageImportIdsDataTable cln = ((GetMortgageImportIdsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMortgageImportIdsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImportID = base.Columns["ImportID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImportID = new global::System.Data.DataColumn("ImportID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportIdsRow NewGetMortgageImportIdsRow() {
                return ((GetMortgageImportIdsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMortgageImportIdsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMortgageImportIdsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMortgageImportIdsRowChanged != null)) {
                    this.GetMortgageImportIdsRowChanged(this, new GetMortgageImportIdsRowChangeEvent(((GetMortgageImportIdsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMortgageImportIdsRowChanging != null)) {
                    this.GetMortgageImportIdsRowChanging(this, new GetMortgageImportIdsRowChangeEvent(((GetMortgageImportIdsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMortgageImportIdsRowDeleted != null)) {
                    this.GetMortgageImportIdsRowDeleted(this, new GetMortgageImportIdsRowChangeEvent(((GetMortgageImportIdsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMortgageImportIdsRowDeleting != null)) {
                    this.GetMortgageImportIdsRowDeleting(this, new GetMortgageImportIdsRowChangeEvent(((GetMortgageImportIdsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMortgageImportIdsRow(GetMortgageImportIdsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMortgageImportIdsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetMortgageImportErrorDataTable : global::System.Data.TypedTableBase<GetMortgageImportErrorRow> {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnBankCode;
            
            private global::System.Data.DataColumn columnErrorStatus;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnDueAmount;
            
            private global::System.Data.DataColumn columnFileLine;
            
            private global::System.Data.DataColumn columnEntryID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnStatusID;
            
            private global::System.Data.DataColumn columnPostType;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportErrorDataTable() {
                this.TableName = "GetMortgageImportError";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMortgageImportErrorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetMortgageImportErrorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankCodeColumn {
                get {
                    return this.columnBankCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorStatusColumn {
                get {
                    return this.columnErrorStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DueAmountColumn {
                get {
                    return this.columnDueAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileLineColumn {
                get {
                    return this.columnFileLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryIDColumn {
                get {
                    return this.columnEntryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusIDColumn {
                get {
                    return this.columnStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostTypeColumn {
                get {
                    return this.columnPostType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportErrorRow this[int index] {
                get {
                    return ((GetMortgageImportErrorRow)(this.Rows[index]));
                }
            }
            
            public event GetMortgageImportErrorRowChangeEventHandler GetMortgageImportErrorRowChanging;
            
            public event GetMortgageImportErrorRowChangeEventHandler GetMortgageImportErrorRowChanged;
            
            public event GetMortgageImportErrorRowChangeEventHandler GetMortgageImportErrorRowDeleting;
            
            public event GetMortgageImportErrorRowChangeEventHandler GetMortgageImportErrorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetMortgageImportErrorRow(GetMortgageImportErrorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportErrorRow AddGetMortgageImportErrorRow(int StatementID, string StatementNumber, string BankCode, string ErrorStatus, double Amount, decimal DueAmount, int FileLine, int EntryID, string ParcelNumber, int StatusID, int PostType, int OwnerID) {
                GetMortgageImportErrorRow rowGetMortgageImportErrorRow = ((GetMortgageImportErrorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        StatementNumber,
                        BankCode,
                        ErrorStatus,
                        Amount,
                        DueAmount,
                        FileLine,
                        EntryID,
                        ParcelNumber,
                        StatusID,
                        PostType,
                        OwnerID};
                rowGetMortgageImportErrorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetMortgageImportErrorRow);
                return rowGetMortgageImportErrorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetMortgageImportErrorDataTable cln = ((GetMortgageImportErrorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetMortgageImportErrorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnBankCode = base.Columns["BankCode"];
                this.columnErrorStatus = base.Columns["ErrorStatus"];
                this.columnAmount = base.Columns["Amount"];
                this.columnDueAmount = base.Columns["DueAmount"];
                this.columnFileLine = base.Columns["FileLine"];
                this.columnEntryID = base.Columns["EntryID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnStatusID = base.Columns["StatusID"];
                this.columnPostType = base.Columns["PostType"];
                this.columnOwnerID = base.Columns["OwnerID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnBankCode = new global::System.Data.DataColumn("BankCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankCode);
                this.columnErrorStatus = new global::System.Data.DataColumn("ErrorStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorStatus);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDueAmount = new global::System.Data.DataColumn("DueAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDueAmount);
                this.columnFileLine = new global::System.Data.DataColumn("FileLine", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileLine);
                this.columnEntryID = new global::System.Data.DataColumn("EntryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnStatusID = new global::System.Data.DataColumn("StatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusID);
                this.columnPostType = new global::System.Data.DataColumn("PostType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostType);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportErrorRow NewGetMortgageImportErrorRow() {
                return ((GetMortgageImportErrorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetMortgageImportErrorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetMortgageImportErrorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetMortgageImportErrorRowChanged != null)) {
                    this.GetMortgageImportErrorRowChanged(this, new GetMortgageImportErrorRowChangeEvent(((GetMortgageImportErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetMortgageImportErrorRowChanging != null)) {
                    this.GetMortgageImportErrorRowChanging(this, new GetMortgageImportErrorRowChangeEvent(((GetMortgageImportErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetMortgageImportErrorRowDeleted != null)) {
                    this.GetMortgageImportErrorRowDeleted(this, new GetMortgageImportErrorRowChangeEvent(((GetMortgageImportErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetMortgageImportErrorRowDeleting != null)) {
                    this.GetMortgageImportErrorRowDeleting(this, new GetMortgageImportErrorRowChangeEvent(((GetMortgageImportErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetMortgageImportErrorRow(GetMortgageImportErrorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetMortgageImportErrorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveMortgageImportEntryErrorDataTable : global::System.Data.TypedTableBase<SaveMortgageImportEntryErrorRow> {
            
            private global::System.Data.DataColumn columnErrorMsg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryErrorDataTable() {
                this.TableName = "SaveMortgageImportEntryError";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMortgageImportEntryErrorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveMortgageImportEntryErrorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorMsgColumn {
                get {
                    return this.columnErrorMsg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryErrorRow this[int index] {
                get {
                    return ((SaveMortgageImportEntryErrorRow)(this.Rows[index]));
                }
            }
            
            public event SaveMortgageImportEntryErrorRowChangeEventHandler SaveMortgageImportEntryErrorRowChanging;
            
            public event SaveMortgageImportEntryErrorRowChangeEventHandler SaveMortgageImportEntryErrorRowChanged;
            
            public event SaveMortgageImportEntryErrorRowChangeEventHandler SaveMortgageImportEntryErrorRowDeleting;
            
            public event SaveMortgageImportEntryErrorRowChangeEventHandler SaveMortgageImportEntryErrorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveMortgageImportEntryErrorRow(SaveMortgageImportEntryErrorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryErrorRow AddSaveMortgageImportEntryErrorRow(string ErrorMsg) {
                SaveMortgageImportEntryErrorRow rowSaveMortgageImportEntryErrorRow = ((SaveMortgageImportEntryErrorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorMsg};
                rowSaveMortgageImportEntryErrorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveMortgageImportEntryErrorRow);
                return rowSaveMortgageImportEntryErrorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveMortgageImportEntryErrorDataTable cln = ((SaveMortgageImportEntryErrorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveMortgageImportEntryErrorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorMsg = base.Columns["ErrorMsg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorMsg = new global::System.Data.DataColumn("ErrorMsg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorMsg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryErrorRow NewSaveMortgageImportEntryErrorRow() {
                return ((SaveMortgageImportEntryErrorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveMortgageImportEntryErrorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveMortgageImportEntryErrorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveMortgageImportEntryErrorRowChanged != null)) {
                    this.SaveMortgageImportEntryErrorRowChanged(this, new SaveMortgageImportEntryErrorRowChangeEvent(((SaveMortgageImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveMortgageImportEntryErrorRowChanging != null)) {
                    this.SaveMortgageImportEntryErrorRowChanging(this, new SaveMortgageImportEntryErrorRowChangeEvent(((SaveMortgageImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveMortgageImportEntryErrorRowDeleted != null)) {
                    this.SaveMortgageImportEntryErrorRowDeleted(this, new SaveMortgageImportEntryErrorRowChangeEvent(((SaveMortgageImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveMortgageImportEntryErrorRowDeleting != null)) {
                    this.SaveMortgageImportEntryErrorRowDeleting(this, new SaveMortgageImportEntryErrorRowChangeEvent(((SaveMortgageImportEntryErrorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveMortgageImportEntryErrorRow(SaveMortgageImportEntryErrorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveMortgageImportEntryErrorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveMortgageImportEntryDataTable : global::System.Data.TypedTableBase<SaveMortgageImportEntryRow> {
            
            private global::System.Data.DataColumn columnImportRunBy;
            
            private global::System.Data.DataColumn columnImportRunDt;
            
            private global::System.Data.DataColumn columnImportedEntries;
            
            private global::System.Data.DataColumn columnImportedEntriesTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryDataTable() {
                this.TableName = "SaveMortgageImportEntry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMortgageImportEntryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveMortgageImportEntryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportRunByColumn {
                get {
                    return this.columnImportRunBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportRunDtColumn {
                get {
                    return this.columnImportRunDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedEntriesColumn {
                get {
                    return this.columnImportedEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImportedEntriesTotalColumn {
                get {
                    return this.columnImportedEntriesTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryRow this[int index] {
                get {
                    return ((SaveMortgageImportEntryRow)(this.Rows[index]));
                }
            }
            
            public event SaveMortgageImportEntryRowChangeEventHandler SaveMortgageImportEntryRowChanging;
            
            public event SaveMortgageImportEntryRowChangeEventHandler SaveMortgageImportEntryRowChanged;
            
            public event SaveMortgageImportEntryRowChangeEventHandler SaveMortgageImportEntryRowDeleting;
            
            public event SaveMortgageImportEntryRowChangeEventHandler SaveMortgageImportEntryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveMortgageImportEntryRow(SaveMortgageImportEntryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryRow AddSaveMortgageImportEntryRow(string ImportRunBy, System.DateTime ImportRunDt, int ImportedEntries, decimal ImportedEntriesTotal) {
                SaveMortgageImportEntryRow rowSaveMortgageImportEntryRow = ((SaveMortgageImportEntryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ImportRunBy,
                        ImportRunDt,
                        ImportedEntries,
                        ImportedEntriesTotal};
                rowSaveMortgageImportEntryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveMortgageImportEntryRow);
                return rowSaveMortgageImportEntryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveMortgageImportEntryDataTable cln = ((SaveMortgageImportEntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveMortgageImportEntryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImportRunBy = base.Columns["ImportRunBy"];
                this.columnImportRunDt = base.Columns["ImportRunDt"];
                this.columnImportedEntries = base.Columns["ImportedEntries"];
                this.columnImportedEntriesTotal = base.Columns["ImportedEntriesTotal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImportRunBy = new global::System.Data.DataColumn("ImportRunBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportRunBy);
                this.columnImportRunDt = new global::System.Data.DataColumn("ImportRunDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportRunDt);
                this.columnImportedEntries = new global::System.Data.DataColumn("ImportedEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportedEntries);
                this.columnImportedEntriesTotal = new global::System.Data.DataColumn("ImportedEntriesTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImportedEntriesTotal);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryRow NewSaveMortgageImportEntryRow() {
                return ((SaveMortgageImportEntryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveMortgageImportEntryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveMortgageImportEntryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveMortgageImportEntryRowChanged != null)) {
                    this.SaveMortgageImportEntryRowChanged(this, new SaveMortgageImportEntryRowChangeEvent(((SaveMortgageImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveMortgageImportEntryRowChanging != null)) {
                    this.SaveMortgageImportEntryRowChanging(this, new SaveMortgageImportEntryRowChangeEvent(((SaveMortgageImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveMortgageImportEntryRowDeleted != null)) {
                    this.SaveMortgageImportEntryRowDeleted(this, new SaveMortgageImportEntryRowChangeEvent(((SaveMortgageImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveMortgageImportEntryRowDeleting != null)) {
                    this.SaveMortgageImportEntryRowDeleting(this, new SaveMortgageImportEntryRowChangeEvent(((SaveMortgageImportEntryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveMortgageImportEntryRow(SaveMortgageImportEntryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveMortgageImportEntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CheckMortgageImportErrorDetailsDataTable : global::System.Data.TypedTableBase<CheckMortgageImportErrorDetailsRow> {
            
            private global::System.Data.DataColumn columnErrorRunBy;
            
            private global::System.Data.DataColumn columnErrorRunDt;
            
            private global::System.Data.DataColumn columnEntriesTotal;
            
            private global::System.Data.DataColumn columnErrorTotal;
            
            private global::System.Data.DataColumn columnValidTotal;
            
            private global::System.Data.DataColumn columnTotalEntries;
            
            private global::System.Data.DataColumn columnErrorEntries;
            
            private global::System.Data.DataColumn columnOverUnderAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportErrorDetailsDataTable() {
                this.TableName = "CheckMortgageImportErrorDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckMortgageImportErrorDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CheckMortgageImportErrorDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorRunByColumn {
                get {
                    return this.columnErrorRunBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorRunDtColumn {
                get {
                    return this.columnErrorRunDt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntriesTotalColumn {
                get {
                    return this.columnEntriesTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorTotalColumn {
                get {
                    return this.columnErrorTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidTotalColumn {
                get {
                    return this.columnValidTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalEntriesColumn {
                get {
                    return this.columnTotalEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorEntriesColumn {
                get {
                    return this.columnErrorEntries;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OverUnderAmountColumn {
                get {
                    return this.columnOverUnderAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportErrorDetailsRow this[int index] {
                get {
                    return ((CheckMortgageImportErrorDetailsRow)(this.Rows[index]));
                }
            }
            
            public event CheckMortgageImportErrorDetailsRowChangeEventHandler CheckMortgageImportErrorDetailsRowChanging;
            
            public event CheckMortgageImportErrorDetailsRowChangeEventHandler CheckMortgageImportErrorDetailsRowChanged;
            
            public event CheckMortgageImportErrorDetailsRowChangeEventHandler CheckMortgageImportErrorDetailsRowDeleting;
            
            public event CheckMortgageImportErrorDetailsRowChangeEventHandler CheckMortgageImportErrorDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCheckMortgageImportErrorDetailsRow(CheckMortgageImportErrorDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportErrorDetailsRow AddCheckMortgageImportErrorDetailsRow(string ErrorRunBy, System.DateTime ErrorRunDt, double EntriesTotal, double ErrorTotal, double ValidTotal, int TotalEntries, int ErrorEntries, decimal OverUnderAmount) {
                CheckMortgageImportErrorDetailsRow rowCheckMortgageImportErrorDetailsRow = ((CheckMortgageImportErrorDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorRunBy,
                        ErrorRunDt,
                        EntriesTotal,
                        ErrorTotal,
                        ValidTotal,
                        TotalEntries,
                        ErrorEntries,
                        OverUnderAmount};
                rowCheckMortgageImportErrorDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCheckMortgageImportErrorDetailsRow);
                return rowCheckMortgageImportErrorDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CheckMortgageImportErrorDetailsDataTable cln = ((CheckMortgageImportErrorDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CheckMortgageImportErrorDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrorRunBy = base.Columns["ErrorRunBy"];
                this.columnErrorRunDt = base.Columns["ErrorRunDt"];
                this.columnEntriesTotal = base.Columns["EntriesTotal"];
                this.columnErrorTotal = base.Columns["ErrorTotal"];
                this.columnValidTotal = base.Columns["ValidTotal"];
                this.columnTotalEntries = base.Columns["TotalEntries"];
                this.columnErrorEntries = base.Columns["ErrorEntries"];
                this.columnOverUnderAmount = base.Columns["OverUnderAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrorRunBy = new global::System.Data.DataColumn("ErrorRunBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorRunBy);
                this.columnErrorRunDt = new global::System.Data.DataColumn("ErrorRunDt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorRunDt);
                this.columnEntriesTotal = new global::System.Data.DataColumn("EntriesTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntriesTotal);
                this.columnErrorTotal = new global::System.Data.DataColumn("ErrorTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorTotal);
                this.columnValidTotal = new global::System.Data.DataColumn("ValidTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidTotal);
                this.columnTotalEntries = new global::System.Data.DataColumn("TotalEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalEntries);
                this.columnErrorEntries = new global::System.Data.DataColumn("ErrorEntries", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorEntries);
                this.columnOverUnderAmount = new global::System.Data.DataColumn("OverUnderAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOverUnderAmount);
                this.columnErrorRunBy.Caption = "ImportRunBy";
                this.columnErrorRunDt.Caption = "ImportRunDt";
                this.columnEntriesTotal.Caption = "ImportedEntries";
                this.columnErrorTotal.Caption = "ImportedEntriesTotal";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportErrorDetailsRow NewCheckMortgageImportErrorDetailsRow() {
                return ((CheckMortgageImportErrorDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CheckMortgageImportErrorDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CheckMortgageImportErrorDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CheckMortgageImportErrorDetailsRowChanged != null)) {
                    this.CheckMortgageImportErrorDetailsRowChanged(this, new CheckMortgageImportErrorDetailsRowChangeEvent(((CheckMortgageImportErrorDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CheckMortgageImportErrorDetailsRowChanging != null)) {
                    this.CheckMortgageImportErrorDetailsRowChanging(this, new CheckMortgageImportErrorDetailsRowChangeEvent(((CheckMortgageImportErrorDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CheckMortgageImportErrorDetailsRowDeleted != null)) {
                    this.CheckMortgageImportErrorDetailsRowDeleted(this, new CheckMortgageImportErrorDetailsRowChangeEvent(((CheckMortgageImportErrorDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CheckMortgageImportErrorDetailsRowDeleting != null)) {
                    this.CheckMortgageImportErrorDetailsRowDeleting(this, new CheckMortgageImportErrorDetailsRowChangeEvent(((CheckMortgageImportErrorDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCheckMortgageImportErrorDetailsRow(CheckMortgageImportErrorDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CheckMortgageImportErrorDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PayListTableDataTable : global::System.Data.TypedTableBase<PayListTableRow> {
            
            private global::System.Data.DataColumn columnPayCode;
            
            private global::System.Data.DataColumn columnPayCodeText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayListTableDataTable() {
                this.TableName = "PayListTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PayListTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PayListTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayCodeColumn {
                get {
                    return this.columnPayCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayCodeTextColumn {
                get {
                    return this.columnPayCodeText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayListTableRow this[int index] {
                get {
                    return ((PayListTableRow)(this.Rows[index]));
                }
            }
            
            public event PayListTableRowChangeEventHandler PayListTableRowChanging;
            
            public event PayListTableRowChangeEventHandler PayListTableRowChanged;
            
            public event PayListTableRowChangeEventHandler PayListTableRowDeleting;
            
            public event PayListTableRowChangeEventHandler PayListTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPayListTableRow(PayListTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayListTableRow AddPayListTableRow(short PayCode, string PayCodeText) {
                PayListTableRow rowPayListTableRow = ((PayListTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PayCode,
                        PayCodeText};
                rowPayListTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPayListTableRow);
                return rowPayListTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PayListTableDataTable cln = ((PayListTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PayListTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPayCode = base.Columns["PayCode"];
                this.columnPayCodeText = base.Columns["PayCodeText"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPayCode = new global::System.Data.DataColumn("PayCode", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayCode);
                this.columnPayCodeText = new global::System.Data.DataColumn("PayCodeText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayCodeText);
                this.columnPayCodeText.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayListTableRow NewPayListTableRow() {
                return ((PayListTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PayListTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PayListTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PayListTableRowChanged != null)) {
                    this.PayListTableRowChanged(this, new PayListTableRowChangeEvent(((PayListTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PayListTableRowChanging != null)) {
                    this.PayListTableRowChanging(this, new PayListTableRowChangeEvent(((PayListTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PayListTableRowDeleted != null)) {
                    this.PayListTableRowDeleted(this, new PayListTableRowChangeEvent(((PayListTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PayListTableRowDeleting != null)) {
                    this.PayListTableRowDeleting(this, new PayListTableRowChangeEvent(((PayListTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePayListTableRow(PayListTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MortageImportData ds = new MortageImportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PayListTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMortgageImportFileTypeRow : global::System.Data.DataRow {
            
            private ListMortgageImportFileTypeDataTable tableListMortgageImportFileType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMortgageImportFileTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMortgageImportFileType = ((ListMortgageImportFileTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TypeID {
                get {
                    return ((byte)(this[this.tableListMortgageImportFileType.TypeIDColumn]));
                }
                set {
                    this[this.tableListMortgageImportFileType.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    return ((string)(this[this.tableListMortgageImportFileType.TypeNameColumn]));
                }
                set {
                    this[this.tableListMortgageImportFileType.TypeNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CheckMortgageImportCheckErrorsRow : global::System.Data.DataRow {
            
            private CheckMortgageImportCheckErrorsDataTable tableCheckMortgageImportCheckErrors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckMortgageImportCheckErrorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCheckMortgageImportCheckErrors = ((CheckMortgageImportCheckErrorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMsg {
                get {
                    try {
                        return ((string)(this[this.tableCheckMortgageImportCheckErrors.ErrorMsgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMsg\' in table \'CheckMortgageImportCheckErrors\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportCheckErrors.ErrorMsgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMsgNull() {
                return this.IsNull(this.tableCheckMortgageImportCheckErrors.ErrorMsgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMsgNull() {
                this[this.tableCheckMortgageImportCheckErrors.ErrorMsgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeleteMortgageImportEntryRow : global::System.Data.DataRow {
            
            private DeleteMortgageImportEntryDataTable tableDeleteMortgageImportEntry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeleteMortgageImportEntryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeleteMortgageImportEntry = ((DeleteMortgageImportEntryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMsg {
                get {
                    try {
                        return ((string)(this[this.tableDeleteMortgageImportEntry.ErrorMsgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMsg\' in table \'DeleteMortgageImportEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeleteMortgageImportEntry.ErrorMsgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMsgNull() {
                return this.IsNull(this.tableDeleteMortgageImportEntry.ErrorMsgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMsgNull() {
                this[this.tableDeleteMortgageImportEntry.ErrorMsgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CheckMortgageImportValidReceiptTestRow : global::System.Data.DataRow {
            
            private CheckMortgageImportValidReceiptTestDataTable tableCheckMortgageImportValidReceiptTest;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckMortgageImportValidReceiptTestRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCheckMortgageImportValidReceiptTest = ((CheckMortgageImportValidReceiptTestDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMsg {
                get {
                    try {
                        return ((string)(this[this.tableCheckMortgageImportValidReceiptTest.ErrorMsgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMsg\' in table \'CheckMortgageImportValidReceiptTest\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportValidReceiptTest.ErrorMsgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ErrorCode {
                get {
                    try {
                        return ((int)(this[this.tableCheckMortgageImportValidReceiptTest.ErrorCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorCode\' in table \'CheckMortgageImportValidReceiptTest\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportValidReceiptTest.ErrorCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMsgNull() {
                return this.IsNull(this.tableCheckMortgageImportValidReceiptTest.ErrorMsgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMsgNull() {
                this[this.tableCheckMortgageImportValidReceiptTest.ErrorMsgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorCodeNull() {
                return this.IsNull(this.tableCheckMortgageImportValidReceiptTest.ErrorCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorCodeNull() {
                this[this.tableCheckMortgageImportValidReceiptTest.ErrorCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveMortgageImportRow : global::System.Data.DataRow {
            
            private SaveMortgageImportDataTable tableSaveMortgageImport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMortgageImportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveMortgageImport = ((SaveMortgageImportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMsg {
                get {
                    try {
                        return ((string)(this[this.tableSaveMortgageImport.ErrorMsgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMsg\' in table \'SaveMortgageImport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMortgageImport.ErrorMsgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportID {
                get {
                    try {
                        return ((int)(this[this.tableSaveMortgageImport.ImportIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportID\' in table \'SaveMortgageImport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMortgageImport.ImportIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMsgNull() {
                return this.IsNull(this.tableSaveMortgageImport.ErrorMsgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMsgNull() {
                this[this.tableSaveMortgageImport.ErrorMsgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportIDNull() {
                return this.IsNull(this.tableSaveMortgageImport.ImportIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportIDNull() {
                this[this.tableSaveMortgageImport.ImportIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DeleteMortgageImportRow : global::System.Data.DataRow {
            
            private DeleteMortgageImportDataTable tableDeleteMortgageImport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeleteMortgageImportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeleteMortgageImport = ((DeleteMortgageImportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMsg {
                get {
                    try {
                        return ((string)(this[this.tableDeleteMortgageImport.ErrorMsgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMsg\' in table \'DeleteMortgageImport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDeleteMortgageImport.ErrorMsgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMsgNull() {
                return this.IsNull(this.tableDeleteMortgageImport.ErrorMsgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMsgNull() {
                this[this.tableDeleteMortgageImport.ErrorMsgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CreateRecieptErrorRow : global::System.Data.DataRow {
            
            private CreateRecieptErrorDataTable tableCreateRecieptError;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CreateRecieptErrorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCreateRecieptError = ((CreateRecieptErrorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMsg {
                get {
                    try {
                        return ((string)(this[this.tableCreateRecieptError.ErrorMsgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMsg\' in table \'CreateRecieptError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreateRecieptError.ErrorMsgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ErrorCode {
                get {
                    try {
                        return ((int)(this[this.tableCreateRecieptError.ErrorCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorCode\' in table \'CreateRecieptError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreateRecieptError.ErrorCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMsgNull() {
                return this.IsNull(this.tableCreateRecieptError.ErrorMsgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMsgNull() {
                this[this.tableCreateRecieptError.ErrorMsgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorCodeNull() {
                return this.IsNull(this.tableCreateRecieptError.ErrorCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorCodeNull() {
                this[this.tableCreateRecieptError.ErrorCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CreateRecieptDetailsRow : global::System.Data.DataRow {
            
            private CreateRecieptDetailsDataTable tableCreateRecieptDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CreateRecieptDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCreateRecieptDetails = ((CreateRecieptDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RcptCreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableCreateRecieptDetails.RcptCreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RcptCreatedBy\' in table \'CreateRecieptDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreateRecieptDetails.RcptCreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RcptCreatedDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCreateRecieptDetails.RcptCreatedDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RcptCreatedDt\' in table \'CreateRecieptDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreateRecieptDetails.RcptCreatedDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRcptCreatedByNull() {
                return this.IsNull(this.tableCreateRecieptDetails.RcptCreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRcptCreatedByNull() {
                this[this.tableCreateRecieptDetails.RcptCreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRcptCreatedDtNull() {
                return this.IsNull(this.tableCreateRecieptDetails.RcptCreatedDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRcptCreatedDtNull() {
                this[this.tableCreateRecieptDetails.RcptCreatedDtColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMortgageImportDetailsRow : global::System.Data.DataRow {
            
            private GetMortgageImportDetailsDataTable tableGetMortgageImportDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMortgageImportDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMortgageImportDetails = ((GetMortgageImportDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportID {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportDetails.ImportIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportID\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ImportIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateID {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportDetails.TemplateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateID\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.TemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportDetails.TypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeID\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.TypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportDetails.FilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilePath\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptDate {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportDetails.ReceiptDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptDate\' in table \'GetMortgageImportDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ReceiptDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InterestDate {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportDetails.InterestDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestDate\' in table \'GetMortgageImportDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.InterestDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateName {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportDetails.TemplateNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateName\' in table \'GetMortgageImportDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.TemplateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeName {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportDetails.TypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeName\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.TypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllowPartialPmts {
                get {
                    try {
                        return ((bool)(this[this.tableGetMortgageImportDetails.AllowPartialPmtsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllowPartialPmts\' in table \'GetMortgageImportDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.AllowPartialPmtsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PPaymentID {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportDetails.PPaymentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PPaymentID\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.PPaymentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImportRunBy {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportDetails.ImportRunByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportRunBy\' in table \'GetMortgageImportDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ImportRunByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ImportRunDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetMortgageImportDetails.ImportRunDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportRunDt\' in table \'GetMortgageImportDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ImportRunDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorRunBy {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportDetails.ErrorRunByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorRunBy\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ErrorRunByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ErrorRunDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetMortgageImportDetails.ErrorRunDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorRunDt\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ErrorRunDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RcptCreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportDetails.RcptCreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RcptCreatedBy\' in table \'GetMortgageImportDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.RcptCreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RcptCreatedDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetMortgageImportDetails.RcptCreatedDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RcptCreatedDt\' in table \'GetMortgageImportDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.RcptCreatedDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RcptPrintBy {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportDetails.RcptPrintByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RcptPrintBy\' in table \'GetMortgageImportDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.RcptPrintByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RcptPrintDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetMortgageImportDetails.RcptPrintDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RcptPrintDt\' in table \'GetMortgageImportDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.RcptPrintDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EntriesTotal {
                get {
                    try {
                        return ((double)(this[this.tableGetMortgageImportDetails.EntriesTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntriesTotal\' in table \'GetMortgageImportDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.EntriesTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ErrorTotal {
                get {
                    try {
                        return ((double)(this[this.tableGetMortgageImportDetails.ErrorTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorTotal\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ErrorTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ValidTotal {
                get {
                    try {
                        return ((double)(this[this.tableGetMortgageImportDetails.ValidTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidTotal\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ValidTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportedEntries {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportDetails.ImportedEntriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportedEntries\' in table \'GetMortgageImportDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ImportedEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ErrorEntries {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportDetails.ErrorEntriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorEntries\' in table \'GetMortgageImportDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.ErrorEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverUnderAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMortgageImportDetails.OverUnderAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverUnderAmount\' in table \'GetMortgageImportDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.OverUnderAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PayCode {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportDetails.PayCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayCode\' in table \'GetMortgageImportDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportDetails.PayCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportIDNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ImportIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportIDNull() {
                this[this.tableGetMortgageImportDetails.ImportIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateIDNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.TemplateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateIDNull() {
                this[this.tableGetMortgageImportDetails.TemplateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeIDNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.TypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeIDNull() {
                this[this.tableGetMortgageImportDetails.TypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilePathNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.FilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilePathNull() {
                this[this.tableGetMortgageImportDetails.FilePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptDateNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ReceiptDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptDateNull() {
                this[this.tableGetMortgageImportDetails.ReceiptDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInterestDateNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.InterestDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInterestDateNull() {
                this[this.tableGetMortgageImportDetails.InterestDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateNameNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.TemplateNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateNameNull() {
                this[this.tableGetMortgageImportDetails.TemplateNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNameNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.TypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNameNull() {
                this[this.tableGetMortgageImportDetails.TypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowPartialPmtsNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.AllowPartialPmtsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowPartialPmtsNull() {
                this[this.tableGetMortgageImportDetails.AllowPartialPmtsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPPaymentIDNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.PPaymentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPPaymentIDNull() {
                this[this.tableGetMortgageImportDetails.PPaymentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportRunByNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ImportRunByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportRunByNull() {
                this[this.tableGetMortgageImportDetails.ImportRunByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportRunDtNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ImportRunDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportRunDtNull() {
                this[this.tableGetMortgageImportDetails.ImportRunDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorRunByNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ErrorRunByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorRunByNull() {
                this[this.tableGetMortgageImportDetails.ErrorRunByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorRunDtNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ErrorRunDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorRunDtNull() {
                this[this.tableGetMortgageImportDetails.ErrorRunDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRcptCreatedByNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.RcptCreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRcptCreatedByNull() {
                this[this.tableGetMortgageImportDetails.RcptCreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRcptCreatedDtNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.RcptCreatedDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRcptCreatedDtNull() {
                this[this.tableGetMortgageImportDetails.RcptCreatedDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRcptPrintByNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.RcptPrintByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRcptPrintByNull() {
                this[this.tableGetMortgageImportDetails.RcptPrintByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRcptPrintDtNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.RcptPrintDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRcptPrintDtNull() {
                this[this.tableGetMortgageImportDetails.RcptPrintDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntriesTotalNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.EntriesTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntriesTotalNull() {
                this[this.tableGetMortgageImportDetails.EntriesTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorTotalNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ErrorTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorTotalNull() {
                this[this.tableGetMortgageImportDetails.ErrorTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidTotalNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ValidTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidTotalNull() {
                this[this.tableGetMortgageImportDetails.ValidTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedEntriesNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ImportedEntriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedEntriesNull() {
                this[this.tableGetMortgageImportDetails.ImportedEntriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorEntriesNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.ErrorEntriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorEntriesNull() {
                this[this.tableGetMortgageImportDetails.ErrorEntriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverUnderAmountNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.OverUnderAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverUnderAmountNull() {
                this[this.tableGetMortgageImportDetails.OverUnderAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayCodeNull() {
                return this.IsNull(this.tableGetMortgageImportDetails.PayCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayCodeNull() {
                this[this.tableGetMortgageImportDetails.PayCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMortgageImportIdsRow : global::System.Data.DataRow {
            
            private GetMortgageImportIdsDataTable tableGetMortgageImportIds;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMortgageImportIdsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMortgageImportIds = ((GetMortgageImportIdsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportID {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportIds.ImportIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportID\' in table \'GetMortgageImportIds\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportIds.ImportIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportIDNull() {
                return this.IsNull(this.tableGetMortgageImportIds.ImportIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportIDNull() {
                this[this.tableGetMortgageImportIds.ImportIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetMortgageImportErrorRow : global::System.Data.DataRow {
            
            private GetMortgageImportErrorDataTable tableGetMortgageImportError;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetMortgageImportErrorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetMortgageImportError = ((GetMortgageImportErrorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportError.StatementIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementID\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportError.StatementNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementNumber\' in table \'GetMortgageImportError\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankCode {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportError.BankCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BankCode\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.BankCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportError.ErrorStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorStatus\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.ErrorStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amount {
                get {
                    try {
                        return ((double)(this[this.tableGetMortgageImportError.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DueAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableGetMortgageImportError.DueAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DueAmount\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.DueAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileLine {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportError.FileLineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileLine\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.FileLineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntryID {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportError.EntryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntryID\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.EntryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetMortgageImportError.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatusID {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportError.StatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusID\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.StatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PostType {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportError.PostTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostType\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.PostTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableGetMortgageImportError.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'GetMortgageImportError\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetMortgageImportError.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementIDNull() {
                return this.IsNull(this.tableGetMortgageImportError.StatementIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementIDNull() {
                this[this.tableGetMortgageImportError.StatementIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableGetMortgageImportError.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableGetMortgageImportError.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankCodeNull() {
                return this.IsNull(this.tableGetMortgageImportError.BankCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankCodeNull() {
                this[this.tableGetMortgageImportError.BankCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorStatusNull() {
                return this.IsNull(this.tableGetMortgageImportError.ErrorStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorStatusNull() {
                this[this.tableGetMortgageImportError.ErrorStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableGetMortgageImportError.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableGetMortgageImportError.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDueAmountNull() {
                return this.IsNull(this.tableGetMortgageImportError.DueAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDueAmountNull() {
                this[this.tableGetMortgageImportError.DueAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileLineNull() {
                return this.IsNull(this.tableGetMortgageImportError.FileLineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileLineNull() {
                this[this.tableGetMortgageImportError.FileLineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntryIDNull() {
                return this.IsNull(this.tableGetMortgageImportError.EntryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntryIDNull() {
                this[this.tableGetMortgageImportError.EntryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableGetMortgageImportError.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableGetMortgageImportError.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusIDNull() {
                return this.IsNull(this.tableGetMortgageImportError.StatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusIDNull() {
                this[this.tableGetMortgageImportError.StatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostTypeNull() {
                return this.IsNull(this.tableGetMortgageImportError.PostTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostTypeNull() {
                this[this.tableGetMortgageImportError.PostTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableGetMortgageImportError.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableGetMortgageImportError.OwnerIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveMortgageImportEntryErrorRow : global::System.Data.DataRow {
            
            private SaveMortgageImportEntryErrorDataTable tableSaveMortgageImportEntryError;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMortgageImportEntryErrorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveMortgageImportEntryError = ((SaveMortgageImportEntryErrorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorMsg {
                get {
                    try {
                        return ((string)(this[this.tableSaveMortgageImportEntryError.ErrorMsgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorMsg\' in table \'SaveMortgageImportEntryError\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSaveMortgageImportEntryError.ErrorMsgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorMsgNull() {
                return this.IsNull(this.tableSaveMortgageImportEntryError.ErrorMsgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorMsgNull() {
                this[this.tableSaveMortgageImportEntryError.ErrorMsgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveMortgageImportEntryRow : global::System.Data.DataRow {
            
            private SaveMortgageImportEntryDataTable tableSaveMortgageImportEntry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveMortgageImportEntryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveMortgageImportEntry = ((SaveMortgageImportEntryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImportRunBy {
                get {
                    try {
                        return ((string)(this[this.tableSaveMortgageImportEntry.ImportRunByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportRunBy\' in table \'SaveMortgageImportEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMortgageImportEntry.ImportRunByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ImportRunDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSaveMortgageImportEntry.ImportRunDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportRunDt\' in table \'SaveMortgageImportEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMortgageImportEntry.ImportRunDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImportedEntries {
                get {
                    try {
                        return ((int)(this[this.tableSaveMortgageImportEntry.ImportedEntriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportedEntries\' in table \'SaveMortgageImportEntry\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSaveMortgageImportEntry.ImportedEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImportedEntriesTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableSaveMortgageImportEntry.ImportedEntriesTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImportedEntriesTotal\' in table \'SaveMortgageImportEntry\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveMortgageImportEntry.ImportedEntriesTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportRunByNull() {
                return this.IsNull(this.tableSaveMortgageImportEntry.ImportRunByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportRunByNull() {
                this[this.tableSaveMortgageImportEntry.ImportRunByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportRunDtNull() {
                return this.IsNull(this.tableSaveMortgageImportEntry.ImportRunDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportRunDtNull() {
                this[this.tableSaveMortgageImportEntry.ImportRunDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedEntriesNull() {
                return this.IsNull(this.tableSaveMortgageImportEntry.ImportedEntriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedEntriesNull() {
                this[this.tableSaveMortgageImportEntry.ImportedEntriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImportedEntriesTotalNull() {
                return this.IsNull(this.tableSaveMortgageImportEntry.ImportedEntriesTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImportedEntriesTotalNull() {
                this[this.tableSaveMortgageImportEntry.ImportedEntriesTotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CheckMortgageImportErrorDetailsRow : global::System.Data.DataRow {
            
            private CheckMortgageImportErrorDetailsDataTable tableCheckMortgageImportErrorDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckMortgageImportErrorDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCheckMortgageImportErrorDetails = ((CheckMortgageImportErrorDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorRunBy {
                get {
                    try {
                        return ((string)(this[this.tableCheckMortgageImportErrorDetails.ErrorRunByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorRunBy\' in table \'CheckMortgageImportErrorDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportErrorDetails.ErrorRunByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ErrorRunDt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCheckMortgageImportErrorDetails.ErrorRunDtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorRunDt\' in table \'CheckMortgageImportErrorDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportErrorDetails.ErrorRunDtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EntriesTotal {
                get {
                    try {
                        return ((double)(this[this.tableCheckMortgageImportErrorDetails.EntriesTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntriesTotal\' in table \'CheckMortgageImportErrorDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportErrorDetails.EntriesTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ErrorTotal {
                get {
                    try {
                        return ((double)(this[this.tableCheckMortgageImportErrorDetails.ErrorTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorTotal\' in table \'CheckMortgageImportErrorDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportErrorDetails.ErrorTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ValidTotal {
                get {
                    try {
                        return ((double)(this[this.tableCheckMortgageImportErrorDetails.ValidTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidTotal\' in table \'CheckMortgageImportErrorDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportErrorDetails.ValidTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalEntries {
                get {
                    try {
                        return ((int)(this[this.tableCheckMortgageImportErrorDetails.TotalEntriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalEntries\' in table \'CheckMortgageImportErrorDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportErrorDetails.TotalEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ErrorEntries {
                get {
                    try {
                        return ((int)(this[this.tableCheckMortgageImportErrorDetails.ErrorEntriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorEntries\' in table \'CheckMortgageImportErrorDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportErrorDetails.ErrorEntriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OverUnderAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableCheckMortgageImportErrorDetails.OverUnderAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OverUnderAmount\' in table \'CheckMortgageImportErrorDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckMortgageImportErrorDetails.OverUnderAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorRunByNull() {
                return this.IsNull(this.tableCheckMortgageImportErrorDetails.ErrorRunByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorRunByNull() {
                this[this.tableCheckMortgageImportErrorDetails.ErrorRunByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorRunDtNull() {
                return this.IsNull(this.tableCheckMortgageImportErrorDetails.ErrorRunDtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorRunDtNull() {
                this[this.tableCheckMortgageImportErrorDetails.ErrorRunDtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntriesTotalNull() {
                return this.IsNull(this.tableCheckMortgageImportErrorDetails.EntriesTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntriesTotalNull() {
                this[this.tableCheckMortgageImportErrorDetails.EntriesTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorTotalNull() {
                return this.IsNull(this.tableCheckMortgageImportErrorDetails.ErrorTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorTotalNull() {
                this[this.tableCheckMortgageImportErrorDetails.ErrorTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidTotalNull() {
                return this.IsNull(this.tableCheckMortgageImportErrorDetails.ValidTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidTotalNull() {
                this[this.tableCheckMortgageImportErrorDetails.ValidTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalEntriesNull() {
                return this.IsNull(this.tableCheckMortgageImportErrorDetails.TotalEntriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalEntriesNull() {
                this[this.tableCheckMortgageImportErrorDetails.TotalEntriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorEntriesNull() {
                return this.IsNull(this.tableCheckMortgageImportErrorDetails.ErrorEntriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorEntriesNull() {
                this[this.tableCheckMortgageImportErrorDetails.ErrorEntriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverUnderAmountNull() {
                return this.IsNull(this.tableCheckMortgageImportErrorDetails.OverUnderAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverUnderAmountNull() {
                this[this.tableCheckMortgageImportErrorDetails.OverUnderAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PayListTableRow : global::System.Data.DataRow {
            
            private PayListTableDataTable tablePayListTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PayListTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePayListTable = ((PayListTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PayCode {
                get {
                    try {
                        return ((short)(this[this.tablePayListTable.PayCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayCode\' in table \'PayListTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePayListTable.PayCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayCodeText {
                get {
                    try {
                        return ((string)(this[this.tablePayListTable.PayCodeTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayCodeText\' in table \'PayListTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePayListTable.PayCodeTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayCodeNull() {
                return this.IsNull(this.tablePayListTable.PayCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayCodeNull() {
                this[this.tablePayListTable.PayCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayCodeTextNull() {
                return this.IsNull(this.tablePayListTable.PayCodeTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayCodeTextNull() {
                this[this.tablePayListTable.PayCodeTextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMortgageImportFileTypeRowChangeEvent : global::System.EventArgs {
            
            private ListMortgageImportFileTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageImportFileTypeRowChangeEvent(ListMortgageImportFileTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageImportFileTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CheckMortgageImportCheckErrorsRowChangeEvent : global::System.EventArgs {
            
            private CheckMortgageImportCheckErrorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportCheckErrorsRowChangeEvent(CheckMortgageImportCheckErrorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportCheckErrorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeleteMortgageImportEntryRowChangeEvent : global::System.EventArgs {
            
            private DeleteMortgageImportEntryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportEntryRowChangeEvent(DeleteMortgageImportEntryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportEntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CheckMortgageImportValidReceiptTestRowChangeEvent : global::System.EventArgs {
            
            private CheckMortgageImportValidReceiptTestRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportValidReceiptTestRowChangeEvent(CheckMortgageImportValidReceiptTestRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportValidReceiptTestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveMortgageImportRowChangeEvent : global::System.EventArgs {
            
            private SaveMortgageImportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportRowChangeEvent(SaveMortgageImportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DeleteMortgageImportRowChangeEvent : global::System.EventArgs {
            
            private DeleteMortgageImportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportRowChangeEvent(DeleteMortgageImportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeleteMortgageImportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CreateRecieptErrorRowChangeEvent : global::System.EventArgs {
            
            private CreateRecieptErrorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptErrorRowChangeEvent(CreateRecieptErrorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptErrorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CreateRecieptDetailsRowChangeEvent : global::System.EventArgs {
            
            private CreateRecieptDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptDetailsRowChangeEvent(CreateRecieptDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreateRecieptDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMortgageImportDetailsRowChangeEvent : global::System.EventArgs {
            
            private GetMortgageImportDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportDetailsRowChangeEvent(GetMortgageImportDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMortgageImportIdsRowChangeEvent : global::System.EventArgs {
            
            private GetMortgageImportIdsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportIdsRowChangeEvent(GetMortgageImportIdsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportIdsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetMortgageImportErrorRowChangeEvent : global::System.EventArgs {
            
            private GetMortgageImportErrorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportErrorRowChangeEvent(GetMortgageImportErrorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetMortgageImportErrorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveMortgageImportEntryErrorRowChangeEvent : global::System.EventArgs {
            
            private SaveMortgageImportEntryErrorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryErrorRowChangeEvent(SaveMortgageImportEntryErrorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryErrorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveMortgageImportEntryRowChangeEvent : global::System.EventArgs {
            
            private SaveMortgageImportEntryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryRowChangeEvent(SaveMortgageImportEntryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveMortgageImportEntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CheckMortgageImportErrorDetailsRowChangeEvent : global::System.EventArgs {
            
            private CheckMortgageImportErrorDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportErrorDetailsRowChangeEvent(CheckMortgageImportErrorDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckMortgageImportErrorDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PayListTableRowChangeEvent : global::System.EventArgs {
            
            private PayListTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayListTableRowChangeEvent(PayListTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PayListTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TerraScan.BusinessEntities.MortageImportDataTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ListMortgageImportFileTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ListMortgageImportFileTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ListMortgageImportFileType";
            tableMapping.ColumnMappings.Add("TypeID", "TypeID");
            tableMapping.ColumnMappings.Add("TypeName", "TypeName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pclst_MortgageImportFileType";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MortageImportData.ListMortgageImportFileTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MortageImportData.ListMortgageImportFileTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MortageImportData.ListMortgageImportFileTypeDataTable dataTable = new MortageImportData.ListMortgageImportFileTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CheckMortgageImportCheckErrorsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CheckMortgageImportCheckErrorsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CheckMortgageImportCheckErrors";
            tableMapping.ColumnMappings.Add("ErrorMsg", "ErrorMsg");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pcchk_MortgageImportCheckErrors";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TemplateID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TemplateName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FilePath", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReceiptDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InterestDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PayCode", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RollYear", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PPaymentID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MortageImportData.CheckMortgageImportCheckErrorsDataTable dataTable, global::System.Nullable<int> ImportID, global::System.Nullable<int> TemplateID, string TemplateName, global::System.Nullable<int> TypeID, string FilePath, global::System.Nullable<global::System.DateTime> ReceiptDate, global::System.Nullable<global::System.DateTime> InterestDate, global::System.Nullable<int> PayCode, global::System.Nullable<int> UserID, global::System.Nullable<int> RollYear, global::System.Nullable<int> PPaymentID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TemplateID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(TemplateID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TemplateName == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(TemplateName));
            }
            if ((TypeID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(TypeID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((FilePath == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(FilePath));
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((InterestDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(InterestDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((PayCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((int)(PayCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((UserID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((int)(UserID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((RollYear.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[10].Value = ((int)(RollYear.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PPaymentID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[11].Value = ((int)(PPaymentID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MortageImportData.CheckMortgageImportCheckErrorsDataTable GetData(global::System.Nullable<int> ImportID, global::System.Nullable<int> TemplateID, string TemplateName, global::System.Nullable<int> TypeID, string FilePath, global::System.Nullable<global::System.DateTime> ReceiptDate, global::System.Nullable<global::System.DateTime> InterestDate, global::System.Nullable<int> PayCode, global::System.Nullable<int> UserID, global::System.Nullable<int> RollYear, global::System.Nullable<int> PPaymentID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TemplateID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(TemplateID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TemplateName == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(TemplateName));
            }
            if ((TypeID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(TypeID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((FilePath == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(FilePath));
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((InterestDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(InterestDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((PayCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((int)(PayCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((UserID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((int)(UserID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((RollYear.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[10].Value = ((int)(RollYear.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PPaymentID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[11].Value = ((int)(PPaymentID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            MortageImportData.CheckMortgageImportCheckErrorsDataTable dataTable = new MortageImportData.CheckMortgageImportCheckErrorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DeleteMortgageImportEntryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DeleteMortgageImportEntryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DeleteMortgageImportEntry";
            tableMapping.ColumnMappings.Add("ErrorMsg", "ErrorMsg");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pcdel_MortgageImportEntry";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MortageImportData.DeleteMortgageImportEntryDataTable dataTable, global::System.Nullable<int> ImportID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MortageImportData.DeleteMortgageImportEntryDataTable GetData(global::System.Nullable<int> ImportID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            MortageImportData.DeleteMortgageImportEntryDataTable dataTable = new MortageImportData.DeleteMortgageImportEntryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CheckMortgageImportValidReceiptTestTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CheckMortgageImportValidReceiptTestTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CheckMortgageImportValidReceiptTest";
            tableMapping.ColumnMappings.Add("ErrorMsg", "ErrorMsg");
            tableMapping.ColumnMappings.Add("ErrorCode", "ErrorCode");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pcchk_MortgageImportValidReceiptTest";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReceiptDate", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 16, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MortageImportData.CheckMortgageImportValidReceiptTestDataTable dataTable, global::System.Nullable<int> ImportID, global::System.Nullable<global::System.DateTime> ReceiptDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MortageImportData.CheckMortgageImportValidReceiptTestDataTable GetData(global::System.Nullable<int> ImportID, global::System.Nullable<global::System.DateTime> ReceiptDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            MortageImportData.CheckMortgageImportValidReceiptTestDataTable dataTable = new MortageImportData.CheckMortgageImportValidReceiptTestDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SaveMortgageImportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SaveMortgageImportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SaveMortgageImport";
            tableMapping.ColumnMappings.Add("ErrorMsg", "ErrorMsg");
            tableMapping.ColumnMappings.Add("ImportID", "ImportID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pcins_MortgageImport";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TemplateID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TemplateName", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TypeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FilePath", global::System.Data.SqlDbType.VarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReceiptDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InterestDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PayCode", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RollYear", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PPaymentID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ResetErrorCheck", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MortageImportData.SaveMortgageImportDataTable dataTable, global::System.Nullable<int> ImportID, global::System.Nullable<int> TemplateID, string TemplateName, global::System.Nullable<int> TypeID, string FilePath, global::System.Nullable<global::System.DateTime> ReceiptDate, global::System.Nullable<global::System.DateTime> InterestDate, global::System.Nullable<int> PayCode, global::System.Nullable<int> UserID, global::System.Nullable<int> RollYear, global::System.Nullable<int> PPaymentID, global::System.Nullable<bool> ResetErrorCheck) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TemplateID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(TemplateID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TemplateName == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(TemplateName));
            }
            if ((TypeID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(TypeID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((FilePath == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(FilePath));
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((InterestDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(InterestDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((PayCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((int)(PayCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((UserID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((int)(UserID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((RollYear.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[10].Value = ((int)(RollYear.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PPaymentID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[11].Value = ((int)(PPaymentID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ResetErrorCheck.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[12].Value = ((bool)(ResetErrorCheck.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MortageImportData.SaveMortgageImportDataTable GetData(global::System.Nullable<int> ImportID, global::System.Nullable<int> TemplateID, string TemplateName, global::System.Nullable<int> TypeID, string FilePath, global::System.Nullable<global::System.DateTime> ReceiptDate, global::System.Nullable<global::System.DateTime> InterestDate, global::System.Nullable<int> PayCode, global::System.Nullable<int> UserID, global::System.Nullable<int> RollYear, global::System.Nullable<int> PPaymentID, global::System.Nullable<bool> ResetErrorCheck) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TemplateID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(TemplateID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TemplateName == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(TemplateName));
            }
            if ((TypeID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(TypeID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((FilePath == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(FilePath));
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((InterestDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(InterestDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((PayCode.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((int)(PayCode.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((UserID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[9].Value = ((int)(UserID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((RollYear.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[10].Value = ((int)(RollYear.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((PPaymentID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[11].Value = ((int)(PPaymentID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ResetErrorCheck.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[12].Value = ((bool)(ResetErrorCheck.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            MortageImportData.SaveMortgageImportDataTable dataTable = new MortageImportData.SaveMortgageImportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DeleteMortgageImportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DeleteMortgageImportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DeleteMortgageImport";
            tableMapping.ColumnMappings.Add("ErrorMsg", "ErrorMsg");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pcdel_MortgageImport";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MortageImportData.DeleteMortgageImportDataTable dataTable, global::System.Nullable<int> ImportID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MortageImportData.DeleteMortgageImportDataTable GetData(global::System.Nullable<int> ImportID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            MortageImportData.DeleteMortgageImportDataTable dataTable = new MortageImportData.DeleteMortgageImportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CreateRecieptErrorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CreateRecieptErrorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CreateRecieptError";
            tableMapping.ColumnMappings.Add("ErrorMsg", "ErrorMsg");
            tableMapping.ColumnMappings.Add("ErrorCode", "ErrorCode");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pcchk_MortgageImportValidReceiptTest";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReceiptDate", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 16, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MortageImportData.CreateRecieptErrorDataTable dataTable, global::System.Nullable<int> ImportID, global::System.Nullable<global::System.DateTime> ReceiptDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MortageImportData.CreateRecieptErrorDataTable GetData(global::System.Nullable<int> ImportID, global::System.Nullable<global::System.DateTime> ReceiptDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            MortageImportData.CreateRecieptErrorDataTable dataTable = new MortageImportData.CreateRecieptErrorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CreateRecieptDetailsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CreateRecieptDetailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CreateRecieptDetails";
            tableMapping.ColumnMappings.Add("ErrorMsg", "RcptCreatedBy");
            tableMapping.ColumnMappings.Add("ErrorCode", "RcptCreatedDt");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f1010_pcchk_MortgageImportValidReceiptTest";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImportID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ReceiptDate", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 16, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MortageImportData.CreateRecieptDetailsDataTable dataTable, global::System.Nullable<int> ImportID, global::System.Nullable<global::System.DateTime> ReceiptDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MortageImportData.CreateRecieptDetailsDataTable GetData(global::System.Nullable<int> ImportID, global::System.Nullable<global::System.DateTime> ReceiptDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ImportID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ImportID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ReceiptDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(ReceiptDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            MortageImportData.CreateRecieptDetailsDataTable dataTable = new MortageImportData.CreateRecieptDetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591