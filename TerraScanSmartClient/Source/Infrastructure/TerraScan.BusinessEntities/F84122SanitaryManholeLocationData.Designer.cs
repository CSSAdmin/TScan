//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F84122SanitaryManholeLocationData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F84122SanitaryManholeLocationData : global::System.Data.DataSet {
        
        private GetSanitaryManholeLocationDataTable tableGetSanitaryManholeLocation;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F84122SanitaryManholeLocationData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F84122SanitaryManholeLocationData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetSanitaryManholeLocation"] != null)) {
                    base.Tables.Add(new GetSanitaryManholeLocationDataTable(ds.Tables["GetSanitaryManholeLocation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSanitaryManholeLocationDataTable GetSanitaryManholeLocation {
            get {
                return this.tableGetSanitaryManholeLocation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F84122SanitaryManholeLocationData cln = ((F84122SanitaryManholeLocationData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetSanitaryManholeLocation"] != null)) {
                    base.Tables.Add(new GetSanitaryManholeLocationDataTable(ds.Tables["GetSanitaryManholeLocation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetSanitaryManholeLocation = ((GetSanitaryManholeLocationDataTable)(base.Tables["GetSanitaryManholeLocation"]));
            if ((initTable == true)) {
                if ((this.tableGetSanitaryManholeLocation != null)) {
                    this.tableGetSanitaryManholeLocation.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F84122SanitaryManholeLocationData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F84122SanitaryManholeLocationData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetSanitaryManholeLocation = new GetSanitaryManholeLocationDataTable();
            base.Tables.Add(this.tableGetSanitaryManholeLocation);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSanitaryManholeLocation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F84122SanitaryManholeLocationData ds = new F84122SanitaryManholeLocationData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetSanitaryManholeLocationRowChangeEventHandler(object sender, GetSanitaryManholeLocationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSanitaryManholeLocationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGPSDate;
            
            private global::System.Data.DataColumn columnGPSByID;
            
            private global::System.Data.DataColumn columnX_Coord;
            
            private global::System.Data.DataColumn columnY_Coord;
            
            private global::System.Data.DataColumn columnAdministrativeAreaID;
            
            private global::System.Data.DataColumn columnOperationalAreaID;
            
            private global::System.Data.DataColumn columnGridID;
            
            private global::System.Data.DataColumn columnDistrict_Project;
            
            private global::System.Data.DataColumn columnN_S_StreetID;
            
            private global::System.Data.DataColumn columnE_W_StreetID;
            
            private global::System.Data.DataColumn columnLocationDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholeLocationDataTable() {
                this.TableName = "GetSanitaryManholeLocation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSanitaryManholeLocationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSanitaryManholeLocationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSDateColumn {
                get {
                    return this.columnGPSDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GPSByIDColumn {
                get {
                    return this.columnGPSByID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn X_CoordColumn {
                get {
                    return this.columnX_Coord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Y_CoordColumn {
                get {
                    return this.columnY_Coord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdministrativeAreaIDColumn {
                get {
                    return this.columnAdministrativeAreaID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperationalAreaIDColumn {
                get {
                    return this.columnOperationalAreaID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GridIDColumn {
                get {
                    return this.columnGridID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn District_ProjectColumn {
                get {
                    return this.columnDistrict_Project;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn N_S_StreetIDColumn {
                get {
                    return this.columnN_S_StreetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn E_W_StreetIDColumn {
                get {
                    return this.columnE_W_StreetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationDescriptionColumn {
                get {
                    return this.columnLocationDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholeLocationRow this[int index] {
                get {
                    return ((GetSanitaryManholeLocationRow)(this.Rows[index]));
                }
            }
            
            public event GetSanitaryManholeLocationRowChangeEventHandler GetSanitaryManholeLocationRowChanging;
            
            public event GetSanitaryManholeLocationRowChangeEventHandler GetSanitaryManholeLocationRowChanged;
            
            public event GetSanitaryManholeLocationRowChangeEventHandler GetSanitaryManholeLocationRowDeleting;
            
            public event GetSanitaryManholeLocationRowChangeEventHandler GetSanitaryManholeLocationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSanitaryManholeLocationRow(GetSanitaryManholeLocationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholeLocationRow AddGetSanitaryManholeLocationRow(string GPSDate, int GPSByID, decimal X_Coord, decimal Y_Coord, int AdministrativeAreaID, int OperationalAreaID, int GridID, string District_Project, int N_S_StreetID, int E_W_StreetID, string LocationDescription) {
                GetSanitaryManholeLocationRow rowGetSanitaryManholeLocationRow = ((GetSanitaryManholeLocationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GPSDate,
                        GPSByID,
                        X_Coord,
                        Y_Coord,
                        AdministrativeAreaID,
                        OperationalAreaID,
                        GridID,
                        District_Project,
                        N_S_StreetID,
                        E_W_StreetID,
                        LocationDescription};
                rowGetSanitaryManholeLocationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSanitaryManholeLocationRow);
                return rowGetSanitaryManholeLocationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSanitaryManholeLocationDataTable cln = ((GetSanitaryManholeLocationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSanitaryManholeLocationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGPSDate = base.Columns["GPSDate"];
                this.columnGPSByID = base.Columns["GPSByID"];
                this.columnX_Coord = base.Columns["X_Coord"];
                this.columnY_Coord = base.Columns["Y_Coord"];
                this.columnAdministrativeAreaID = base.Columns["AdministrativeAreaID"];
                this.columnOperationalAreaID = base.Columns["OperationalAreaID"];
                this.columnGridID = base.Columns["GridID"];
                this.columnDistrict_Project = base.Columns["District_Project"];
                this.columnN_S_StreetID = base.Columns["N_S_StreetID"];
                this.columnE_W_StreetID = base.Columns["E_W_StreetID"];
                this.columnLocationDescription = base.Columns["LocationDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGPSDate = new global::System.Data.DataColumn("GPSDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSDate);
                this.columnGPSByID = new global::System.Data.DataColumn("GPSByID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPSByID);
                this.columnX_Coord = new global::System.Data.DataColumn("X_Coord", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnX_Coord);
                this.columnY_Coord = new global::System.Data.DataColumn("Y_Coord", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnY_Coord);
                this.columnAdministrativeAreaID = new global::System.Data.DataColumn("AdministrativeAreaID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministrativeAreaID);
                this.columnOperationalAreaID = new global::System.Data.DataColumn("OperationalAreaID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperationalAreaID);
                this.columnGridID = new global::System.Data.DataColumn("GridID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridID);
                this.columnDistrict_Project = new global::System.Data.DataColumn("District_Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict_Project);
                this.columnN_S_StreetID = new global::System.Data.DataColumn("N_S_StreetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnN_S_StreetID);
                this.columnE_W_StreetID = new global::System.Data.DataColumn("E_W_StreetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnE_W_StreetID);
                this.columnLocationDescription = new global::System.Data.DataColumn("LocationDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationDescription);
                this.columnGPSDate.ReadOnly = true;
                this.columnGPSDate.MaxLength = 10;
                this.columnGPSByID.ReadOnly = true;
                this.columnAdministrativeAreaID.ReadOnly = true;
                this.columnOperationalAreaID.ReadOnly = true;
                this.columnGridID.ReadOnly = true;
                this.columnDistrict_Project.ReadOnly = true;
                this.columnDistrict_Project.MaxLength = 30;
                this.columnN_S_StreetID.ReadOnly = true;
                this.columnE_W_StreetID.ReadOnly = true;
                this.columnLocationDescription.ReadOnly = true;
                this.columnLocationDescription.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholeLocationRow NewGetSanitaryManholeLocationRow() {
                return ((GetSanitaryManholeLocationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSanitaryManholeLocationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSanitaryManholeLocationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSanitaryManholeLocationRowChanged != null)) {
                    this.GetSanitaryManholeLocationRowChanged(this, new GetSanitaryManholeLocationRowChangeEvent(((GetSanitaryManholeLocationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSanitaryManholeLocationRowChanging != null)) {
                    this.GetSanitaryManholeLocationRowChanging(this, new GetSanitaryManholeLocationRowChangeEvent(((GetSanitaryManholeLocationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSanitaryManholeLocationRowDeleted != null)) {
                    this.GetSanitaryManholeLocationRowDeleted(this, new GetSanitaryManholeLocationRowChangeEvent(((GetSanitaryManholeLocationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSanitaryManholeLocationRowDeleting != null)) {
                    this.GetSanitaryManholeLocationRowDeleting(this, new GetSanitaryManholeLocationRowChangeEvent(((GetSanitaryManholeLocationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSanitaryManholeLocationRow(GetSanitaryManholeLocationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F84122SanitaryManholeLocationData ds = new F84122SanitaryManholeLocationData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSanitaryManholeLocationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSanitaryManholeLocationRow : global::System.Data.DataRow {
            
            private GetSanitaryManholeLocationDataTable tableGetSanitaryManholeLocation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSanitaryManholeLocationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSanitaryManholeLocation = ((GetSanitaryManholeLocationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GPSDate {
                get {
                    try {
                        return ((string)(this[this.tableGetSanitaryManholeLocation.GPSDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSDate\' in table \'GetSanitaryManholeLocation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.GPSDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GPSByID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeLocation.GPSByIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GPSByID\' in table \'GetSanitaryManholeLocation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.GPSByIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal X_Coord {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryManholeLocation.X_CoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'X_Coord\' in table \'GetSanitaryManholeLocation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.X_CoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Y_Coord {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryManholeLocation.Y_CoordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Y_Coord\' in table \'GetSanitaryManholeLocation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.Y_CoordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdministrativeAreaID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeLocation.AdministrativeAreaIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdministrativeAreaID\' in table \'GetSanitaryManholeLocation\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.AdministrativeAreaIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperationalAreaID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeLocation.OperationalAreaIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OperationalAreaID\' in table \'GetSanitaryManholeLocation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.OperationalAreaIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GridID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeLocation.GridIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GridID\' in table \'GetSanitaryManholeLocation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.GridIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District_Project {
                get {
                    try {
                        return ((string)(this[this.tableGetSanitaryManholeLocation.District_ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District_Project\' in table \'GetSanitaryManholeLocation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.District_ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int N_S_StreetID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeLocation.N_S_StreetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'N_S_StreetID\' in table \'GetSanitaryManholeLocation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.N_S_StreetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int E_W_StreetID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeLocation.E_W_StreetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'E_W_StreetID\' in table \'GetSanitaryManholeLocation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.E_W_StreetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationDescription {
                get {
                    try {
                        return ((string)(this[this.tableGetSanitaryManholeLocation.LocationDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationDescription\' in table \'GetSanitaryManholeLocation\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeLocation.LocationDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSDateNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.GPSDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSDateNull() {
                this[this.tableGetSanitaryManholeLocation.GPSDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGPSByIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.GPSByIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGPSByIDNull() {
                this[this.tableGetSanitaryManholeLocation.GPSByIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsX_CoordNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.X_CoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetX_CoordNull() {
                this[this.tableGetSanitaryManholeLocation.X_CoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsY_CoordNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.Y_CoordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetY_CoordNull() {
                this[this.tableGetSanitaryManholeLocation.Y_CoordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdministrativeAreaIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.AdministrativeAreaIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdministrativeAreaIDNull() {
                this[this.tableGetSanitaryManholeLocation.AdministrativeAreaIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperationalAreaIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.OperationalAreaIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperationalAreaIDNull() {
                this[this.tableGetSanitaryManholeLocation.OperationalAreaIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGridIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.GridIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGridIDNull() {
                this[this.tableGetSanitaryManholeLocation.GridIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrict_ProjectNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.District_ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrict_ProjectNull() {
                this[this.tableGetSanitaryManholeLocation.District_ProjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsN_S_StreetIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.N_S_StreetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetN_S_StreetIDNull() {
                this[this.tableGetSanitaryManholeLocation.N_S_StreetIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE_W_StreetIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.E_W_StreetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE_W_StreetIDNull() {
                this[this.tableGetSanitaryManholeLocation.E_W_StreetIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationDescriptionNull() {
                return this.IsNull(this.tableGetSanitaryManholeLocation.LocationDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationDescriptionNull() {
                this[this.tableGetSanitaryManholeLocation.LocationDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSanitaryManholeLocationRowChangeEvent : global::System.EventArgs {
            
            private GetSanitaryManholeLocationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholeLocationRowChangeEvent(GetSanitaryManholeLocationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholeLocationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591