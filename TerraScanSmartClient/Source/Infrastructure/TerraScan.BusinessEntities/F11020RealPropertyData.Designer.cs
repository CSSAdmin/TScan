//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F11020RealPropertyData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F11020RealPropertyData : global::System.Data.DataSet {
        
        private GetRealPropertyStatementSummarysDataTable tableGetRealPropertyStatementSummarys;
        
        private GetRealPropertyStatementDataTable tableGetRealPropertyStatement;
        
        private ListMortgageNameDataTable tableListMortgageName;
        
        private SaveStatementDataTable tableSaveStatement;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F11020RealPropertyData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F11020RealPropertyData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetRealPropertyStatementSummarys"] != null)) {
                    base.Tables.Add(new GetRealPropertyStatementSummarysDataTable(ds.Tables["GetRealPropertyStatementSummarys"]));
                }
                if ((ds.Tables["GetRealPropertyStatement"] != null)) {
                    base.Tables.Add(new GetRealPropertyStatementDataTable(ds.Tables["GetRealPropertyStatement"]));
                }
                if ((ds.Tables["ListMortgageName"] != null)) {
                    base.Tables.Add(new ListMortgageNameDataTable(ds.Tables["ListMortgageName"]));
                }
                if ((ds.Tables["SaveStatement"] != null)) {
                    base.Tables.Add(new SaveStatementDataTable(ds.Tables["SaveStatement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetRealPropertyStatementSummarysDataTable GetRealPropertyStatementSummarys {
            get {
                return this.tableGetRealPropertyStatementSummarys;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetRealPropertyStatementDataTable GetRealPropertyStatement {
            get {
                return this.tableGetRealPropertyStatement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMortgageNameDataTable ListMortgageName {
            get {
                return this.tableListMortgageName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveStatementDataTable SaveStatement {
            get {
                return this.tableSaveStatement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F11020RealPropertyData cln = ((F11020RealPropertyData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetRealPropertyStatementSummarys"] != null)) {
                    base.Tables.Add(new GetRealPropertyStatementSummarysDataTable(ds.Tables["GetRealPropertyStatementSummarys"]));
                }
                if ((ds.Tables["GetRealPropertyStatement"] != null)) {
                    base.Tables.Add(new GetRealPropertyStatementDataTable(ds.Tables["GetRealPropertyStatement"]));
                }
                if ((ds.Tables["ListMortgageName"] != null)) {
                    base.Tables.Add(new ListMortgageNameDataTable(ds.Tables["ListMortgageName"]));
                }
                if ((ds.Tables["SaveStatement"] != null)) {
                    base.Tables.Add(new SaveStatementDataTable(ds.Tables["SaveStatement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetRealPropertyStatementSummarys = ((GetRealPropertyStatementSummarysDataTable)(base.Tables["GetRealPropertyStatementSummarys"]));
            if ((initTable == true)) {
                if ((this.tableGetRealPropertyStatementSummarys != null)) {
                    this.tableGetRealPropertyStatementSummarys.InitVars();
                }
            }
            this.tableGetRealPropertyStatement = ((GetRealPropertyStatementDataTable)(base.Tables["GetRealPropertyStatement"]));
            if ((initTable == true)) {
                if ((this.tableGetRealPropertyStatement != null)) {
                    this.tableGetRealPropertyStatement.InitVars();
                }
            }
            this.tableListMortgageName = ((ListMortgageNameDataTable)(base.Tables["ListMortgageName"]));
            if ((initTable == true)) {
                if ((this.tableListMortgageName != null)) {
                    this.tableListMortgageName.InitVars();
                }
            }
            this.tableSaveStatement = ((SaveStatementDataTable)(base.Tables["SaveStatement"]));
            if ((initTable == true)) {
                if ((this.tableSaveStatement != null)) {
                    this.tableSaveStatement.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F11020RealPropertyData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F11020RealPropertyData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetRealPropertyStatementSummarys = new GetRealPropertyStatementSummarysDataTable();
            base.Tables.Add(this.tableGetRealPropertyStatementSummarys);
            this.tableGetRealPropertyStatement = new GetRealPropertyStatementDataTable();
            base.Tables.Add(this.tableGetRealPropertyStatement);
            this.tableListMortgageName = new ListMortgageNameDataTable();
            base.Tables.Add(this.tableListMortgageName);
            this.tableSaveStatement = new SaveStatementDataTable();
            base.Tables.Add(this.tableSaveStatement);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetRealPropertyStatementSummarys() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetRealPropertyStatement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMortgageName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveStatement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F11020RealPropertyData ds = new F11020RealPropertyData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetRealPropertyStatementSummarysRowChangeEventHandler(object sender, GetRealPropertyStatementSummarysRowChangeEvent e);
        
        public delegate void GetRealPropertyStatementRowChangeEventHandler(object sender, GetRealPropertyStatementRowChangeEvent e);
        
        public delegate void ListMortgageNameRowChangeEventHandler(object sender, ListMortgageNameRowChangeEvent e);
        
        public delegate void SaveStatementRowChangeEventHandler(object sender, SaveStatementRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetRealPropertyStatementSummarysDataTable : global::System.Data.TypedTableBase<GetRealPropertyStatementSummarysRow> {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnLevyYear;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnTotalValue;
            
            private global::System.Data.DataColumn columnOriginalTax;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnTotalExemptions;
            
            private global::System.Data.DataColumn columnTotalDeductions;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnTaxableValue;
            
            private global::System.Data.DataColumn columnTaxBilled;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnMapNumber;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnDelinquentStatus;
            
            private global::System.Data.DataColumn columnDelinquentParcelStatus;
            
            private global::System.Data.DataColumn columnOwnerStatus;
            
            private global::System.Data.DataColumn columnLoanNumber;
            
            private global::System.Data.DataColumn columnMortgageName;
            
            private global::System.Data.DataColumn columnMortgageID;
            
            private global::System.Data.DataColumn columnlow;
            
            private global::System.Data.DataColumn columnHigh;
            
            private global::System.Data.DataColumn columnTurnouts;
            
            private global::System.Data.DataColumn columnAcres;
            
            private global::System.Data.DataColumn columnIrrgAcres;
            
            private global::System.Data.DataColumn columnMinimumDistrictFee;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            private global::System.Data.DataColumn columnSpecialDistrict;
            
            private global::System.Data.DataColumn columnPostName;
            
            private global::System.Data.DataColumn columnLateFilingPercent;
            
            private global::System.Data.DataColumn columnOwnerCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementSummarysDataTable() {
                this.TableName = "GetRealPropertyStatementSummarys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetRealPropertyStatementSummarysDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetRealPropertyStatementSummarysDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevyYearColumn {
                get {
                    return this.columnLevyYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalValueColumn {
                get {
                    return this.columnTotalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalTaxColumn {
                get {
                    return this.columnOriginalTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalExemptionsColumn {
                get {
                    return this.columnTotalExemptions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDeductionsColumn {
                get {
                    return this.columnTotalDeductions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableValueColumn {
                get {
                    return this.columnTaxableValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxBilledColumn {
                get {
                    return this.columnTaxBilled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNumberColumn {
                get {
                    return this.columnMapNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentStatusColumn {
                get {
                    return this.columnDelinquentStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentParcelStatusColumn {
                get {
                    return this.columnDelinquentParcelStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStatusColumn {
                get {
                    return this.columnOwnerStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanNumberColumn {
                get {
                    return this.columnLoanNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageNameColumn {
                get {
                    return this.columnMortgageName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageIDColumn {
                get {
                    return this.columnMortgageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lowColumn {
                get {
                    return this.columnlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HighColumn {
                get {
                    return this.columnHigh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TurnoutsColumn {
                get {
                    return this.columnTurnouts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn {
                get {
                    return this.columnAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrgAcresColumn {
                get {
                    return this.columnIrrgAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumDistrictFeeColumn {
                get {
                    return this.columnMinimumDistrictFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecialDistrictColumn {
                get {
                    return this.columnSpecialDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostNameColumn {
                get {
                    return this.columnPostName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateFilingPercentColumn {
                get {
                    return this.columnLateFilingPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCountColumn {
                get {
                    return this.columnOwnerCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementSummarysRow this[int index] {
                get {
                    return ((GetRealPropertyStatementSummarysRow)(this.Rows[index]));
                }
            }
            
            public event GetRealPropertyStatementSummarysRowChangeEventHandler GetRealPropertyStatementSummarysRowChanging;
            
            public event GetRealPropertyStatementSummarysRowChangeEventHandler GetRealPropertyStatementSummarysRowChanged;
            
            public event GetRealPropertyStatementSummarysRowChangeEventHandler GetRealPropertyStatementSummarysRowDeleting;
            
            public event GetRealPropertyStatementSummarysRowChangeEventHandler GetRealPropertyStatementSummarysRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetRealPropertyStatementSummarysRow(GetRealPropertyStatementSummarysRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementSummarysRow AddGetRealPropertyStatementSummarysRow(
                        string StatementNumber, 
                        short RollYear, 
                        short LevyYear, 
                        int DistrictID, 
                        string District, 
                        int TotalValue, 
                        decimal OriginalTax, 
                        string Situs, 
                        decimal TotalExemptions, 
                        decimal TotalDeductions, 
                        string Legal, 
                        decimal TaxableValue, 
                        decimal TaxBilled, 
                        int OwnerID, 
                        string OwnerName, 
                        string MapNumber, 
                        int ParcelID, 
                        string ParcelNumber, 
                        bool DelinquentStatus, 
                        bool DelinquentParcelStatus, 
                        bool OwnerStatus, 
                        string LoanNumber, 
                        string MortgageName, 
                        int MortgageID, 
                        int low, 
                        int High, 
                        int Turnouts, 
                        decimal Acres, 
                        decimal IrrgAcres, 
                        decimal MinimumDistrictFee, 
                        decimal TotalAmount, 
                        string SpecialDistrict, 
                        string PostName, 
                        decimal LateFilingPercent, 
                        int OwnerCount) {
                GetRealPropertyStatementSummarysRow rowGetRealPropertyStatementSummarysRow = ((GetRealPropertyStatementSummarysRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        StatementNumber,
                        RollYear,
                        LevyYear,
                        DistrictID,
                        District,
                        TotalValue,
                        OriginalTax,
                        Situs,
                        TotalExemptions,
                        TotalDeductions,
                        Legal,
                        TaxableValue,
                        TaxBilled,
                        OwnerID,
                        OwnerName,
                        MapNumber,
                        ParcelID,
                        ParcelNumber,
                        DelinquentStatus,
                        DelinquentParcelStatus,
                        OwnerStatus,
                        LoanNumber,
                        MortgageName,
                        MortgageID,
                        low,
                        High,
                        Turnouts,
                        Acres,
                        IrrgAcres,
                        MinimumDistrictFee,
                        TotalAmount,
                        SpecialDistrict,
                        PostName,
                        LateFilingPercent,
                        OwnerCount};
                rowGetRealPropertyStatementSummarysRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetRealPropertyStatementSummarysRow);
                return rowGetRealPropertyStatementSummarysRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementSummarysRow FindByStatementID(int StatementID) {
                return ((GetRealPropertyStatementSummarysRow)(this.Rows.Find(new object[] {
                            StatementID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetRealPropertyStatementSummarysDataTable cln = ((GetRealPropertyStatementSummarysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetRealPropertyStatementSummarysDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnLevyYear = base.Columns["LevyYear"];
                this.columnDistrictID = base.Columns["DistrictID"];
                this.columnDistrict = base.Columns["District"];
                this.columnTotalValue = base.Columns["TotalValue"];
                this.columnOriginalTax = base.Columns["OriginalTax"];
                this.columnSitus = base.Columns["Situs"];
                this.columnTotalExemptions = base.Columns["TotalExemptions"];
                this.columnTotalDeductions = base.Columns["TotalDeductions"];
                this.columnLegal = base.Columns["Legal"];
                this.columnTaxableValue = base.Columns["TaxableValue"];
                this.columnTaxBilled = base.Columns["TaxBilled"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnMapNumber = base.Columns["MapNumber"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnDelinquentStatus = base.Columns["DelinquentStatus"];
                this.columnDelinquentParcelStatus = base.Columns["DelinquentParcelStatus"];
                this.columnOwnerStatus = base.Columns["OwnerStatus"];
                this.columnLoanNumber = base.Columns["LoanNumber"];
                this.columnMortgageName = base.Columns["MortgageName"];
                this.columnMortgageID = base.Columns["MortgageID"];
                this.columnlow = base.Columns["low"];
                this.columnHigh = base.Columns["High"];
                this.columnTurnouts = base.Columns["Turnouts"];
                this.columnAcres = base.Columns["Acres"];
                this.columnIrrgAcres = base.Columns["IrrgAcres"];
                this.columnMinimumDistrictFee = base.Columns["MinimumDistrictFee"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnSpecialDistrict = base.Columns["SpecialDistrict"];
                this.columnPostName = base.Columns["PostName"];
                this.columnLateFilingPercent = base.Columns["LateFilingPercent"];
                this.columnOwnerCount = base.Columns["OwnerCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLevyYear = new global::System.Data.DataColumn("LevyYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevyYear);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnTotalValue = new global::System.Data.DataColumn("TotalValue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalValue);
                this.columnOriginalTax = new global::System.Data.DataColumn("OriginalTax", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalTax);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnTotalExemptions = new global::System.Data.DataColumn("TotalExemptions", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalExemptions);
                this.columnTotalDeductions = new global::System.Data.DataColumn("TotalDeductions", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDeductions);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnTaxableValue = new global::System.Data.DataColumn("TaxableValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxableValue);
                this.columnTaxBilled = new global::System.Data.DataColumn("TaxBilled", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxBilled);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnMapNumber = new global::System.Data.DataColumn("MapNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapNumber);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnDelinquentStatus = new global::System.Data.DataColumn("DelinquentStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentStatus);
                this.columnDelinquentParcelStatus = new global::System.Data.DataColumn("DelinquentParcelStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentParcelStatus);
                this.columnOwnerStatus = new global::System.Data.DataColumn("OwnerStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerStatus);
                this.columnLoanNumber = new global::System.Data.DataColumn("LoanNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanNumber);
                this.columnMortgageName = new global::System.Data.DataColumn("MortgageName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageName);
                this.columnMortgageID = new global::System.Data.DataColumn("MortgageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageID);
                this.columnlow = new global::System.Data.DataColumn("low", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlow);
                this.columnHigh = new global::System.Data.DataColumn("High", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHigh);
                this.columnTurnouts = new global::System.Data.DataColumn("Turnouts", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTurnouts);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnIrrgAcres = new global::System.Data.DataColumn("IrrgAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrgAcres);
                this.columnMinimumDistrictFee = new global::System.Data.DataColumn("MinimumDistrictFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumDistrictFee);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnSpecialDistrict = new global::System.Data.DataColumn("SpecialDistrict", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecialDistrict);
                this.columnPostName = new global::System.Data.DataColumn("PostName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostName);
                this.columnLateFilingPercent = new global::System.Data.DataColumn("LateFilingPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateFilingPercent);
                this.columnOwnerCount = new global::System.Data.DataColumn("OwnerCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStatementID}, true));
                this.columnStatementID.AutoIncrement = true;
                this.columnStatementID.AllowDBNull = false;
                this.columnStatementID.ReadOnly = true;
                this.columnStatementID.Unique = true;
                this.columnStatementNumber.MaxLength = 50;
                this.columnDistrict.ReadOnly = true;
                this.columnDistrict.MaxLength = 103;
                this.columnTotalValue.ReadOnly = true;
                this.columnOriginalTax.ReadOnly = true;
                this.columnSitus.MaxLength = 400;
                this.columnTotalExemptions.ReadOnly = true;
                this.columnTotalDeductions.ReadOnly = true;
                this.columnLegal.MaxLength = 5000;
                this.columnTaxableValue.ReadOnly = true;
                this.columnTaxBilled.ReadOnly = true;
                this.columnOwnerID.AllowDBNull = false;
                this.columnOwnerName.ReadOnly = true;
                this.columnOwnerName.MaxLength = 102;
                this.columnMapNumber.MaxLength = 50;
                this.columnParcelNumber.MaxLength = 50;
                this.columnDelinquentStatus.ReadOnly = true;
                this.columnDelinquentParcelStatus.ReadOnly = true;
                this.columnOwnerStatus.ReadOnly = true;
                this.columnLoanNumber.MaxLength = 50;
                this.columnMortgageName.MaxLength = 50;
                this.columnlow.ReadOnly = true;
                this.columnHigh.ReadOnly = true;
                this.columnSpecialDistrict.ReadOnly = true;
                this.columnSpecialDistrict.MaxLength = 103;
                this.columnPostName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementSummarysRow NewGetRealPropertyStatementSummarysRow() {
                return ((GetRealPropertyStatementSummarysRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetRealPropertyStatementSummarysRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetRealPropertyStatementSummarysRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetRealPropertyStatementSummarysRowChanged != null)) {
                    this.GetRealPropertyStatementSummarysRowChanged(this, new GetRealPropertyStatementSummarysRowChangeEvent(((GetRealPropertyStatementSummarysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetRealPropertyStatementSummarysRowChanging != null)) {
                    this.GetRealPropertyStatementSummarysRowChanging(this, new GetRealPropertyStatementSummarysRowChangeEvent(((GetRealPropertyStatementSummarysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetRealPropertyStatementSummarysRowDeleted != null)) {
                    this.GetRealPropertyStatementSummarysRowDeleted(this, new GetRealPropertyStatementSummarysRowChangeEvent(((GetRealPropertyStatementSummarysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetRealPropertyStatementSummarysRowDeleting != null)) {
                    this.GetRealPropertyStatementSummarysRowDeleting(this, new GetRealPropertyStatementSummarysRowChangeEvent(((GetRealPropertyStatementSummarysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetRealPropertyStatementSummarysRow(GetRealPropertyStatementSummarysRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F11020RealPropertyData ds = new F11020RealPropertyData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetRealPropertyStatementSummarysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetRealPropertyStatementDataTable : global::System.Data.TypedTableBase<GetRealPropertyStatementRow> {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnStatementNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnLevyYear;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnTotalValue;
            
            private global::System.Data.DataColumn columnOriginalTax;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnTotalExemptions;
            
            private global::System.Data.DataColumn columnTotalDeductions;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnTaxableValue;
            
            private global::System.Data.DataColumn columnTaxBilled;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnMapNumber;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnDelinquentStatus;
            
            private global::System.Data.DataColumn columnDelinquentParcelStatus;
            
            private global::System.Data.DataColumn columnOwnerStatus;
            
            private global::System.Data.DataColumn columnLoanNumber;
            
            private global::System.Data.DataColumn columnMortgageName;
            
            private global::System.Data.DataColumn columnMortgageID;
            
            private global::System.Data.DataColumn columnlow;
            
            private global::System.Data.DataColumn columnHigh;
            
            private global::System.Data.DataColumn columnTurnouts;
            
            private global::System.Data.DataColumn columnAcres;
            
            private global::System.Data.DataColumn columnIrrgAcres;
            
            private global::System.Data.DataColumn columnMinimumDistrictFee;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            private global::System.Data.DataColumn columnSpecialDistrict;
            
            private global::System.Data.DataColumn columnPostName;
            
            private global::System.Data.DataColumn columnLateFilingPercent;
            
            private global::System.Data.DataColumn columnOwnerCount;
            
            private global::System.Data.DataColumn columnFrozenLabel;
            
            private global::System.Data.DataColumn columnFrozenValue;
            
            private global::System.Data.DataColumn columnMiscAssessments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementDataTable() {
                this.TableName = "GetRealPropertyStatement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetRealPropertyStatementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetRealPropertyStatementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementNumberColumn {
                get {
                    return this.columnStatementNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LevyYearColumn {
                get {
                    return this.columnLevyYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalValueColumn {
                get {
                    return this.columnTotalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalTaxColumn {
                get {
                    return this.columnOriginalTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalExemptionsColumn {
                get {
                    return this.columnTotalExemptions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDeductionsColumn {
                get {
                    return this.columnTotalDeductions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableValueColumn {
                get {
                    return this.columnTaxableValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxBilledColumn {
                get {
                    return this.columnTaxBilled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNumberColumn {
                get {
                    return this.columnMapNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentStatusColumn {
                get {
                    return this.columnDelinquentStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentParcelStatusColumn {
                get {
                    return this.columnDelinquentParcelStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStatusColumn {
                get {
                    return this.columnOwnerStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanNumberColumn {
                get {
                    return this.columnLoanNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageNameColumn {
                get {
                    return this.columnMortgageName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageIDColumn {
                get {
                    return this.columnMortgageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lowColumn {
                get {
                    return this.columnlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HighColumn {
                get {
                    return this.columnHigh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TurnoutsColumn {
                get {
                    return this.columnTurnouts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcresColumn {
                get {
                    return this.columnAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IrrgAcresColumn {
                get {
                    return this.columnIrrgAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumDistrictFeeColumn {
                get {
                    return this.columnMinimumDistrictFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecialDistrictColumn {
                get {
                    return this.columnSpecialDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostNameColumn {
                get {
                    return this.columnPostName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateFilingPercentColumn {
                get {
                    return this.columnLateFilingPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCountColumn {
                get {
                    return this.columnOwnerCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrozenLabelColumn {
                get {
                    return this.columnFrozenLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrozenValueColumn {
                get {
                    return this.columnFrozenValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiscAssessmentsColumn {
                get {
                    return this.columnMiscAssessments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementRow this[int index] {
                get {
                    return ((GetRealPropertyStatementRow)(this.Rows[index]));
                }
            }
            
            public event GetRealPropertyStatementRowChangeEventHandler GetRealPropertyStatementRowChanging;
            
            public event GetRealPropertyStatementRowChangeEventHandler GetRealPropertyStatementRowChanged;
            
            public event GetRealPropertyStatementRowChangeEventHandler GetRealPropertyStatementRowDeleting;
            
            public event GetRealPropertyStatementRowChangeEventHandler GetRealPropertyStatementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetRealPropertyStatementRow(GetRealPropertyStatementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementRow AddGetRealPropertyStatementRow(
                        string StatementNumber, 
                        short RollYear, 
                        short LevyYear, 
                        int DistrictID, 
                        string District, 
                        int TotalValue, 
                        decimal OriginalTax, 
                        string Situs, 
                        decimal TotalExemptions, 
                        decimal TotalDeductions, 
                        string Legal, 
                        decimal TaxableValue, 
                        decimal TaxBilled, 
                        int OwnerID, 
                        string OwnerName, 
                        string MapNumber, 
                        int ParcelID, 
                        string ParcelNumber, 
                        bool DelinquentStatus, 
                        bool DelinquentParcelStatus, 
                        bool OwnerStatus, 
                        string LoanNumber, 
                        string MortgageName, 
                        int MortgageID, 
                        int low, 
                        int High, 
                        string Turnouts, 
                        decimal Acres, 
                        decimal IrrgAcres, 
                        decimal MinimumDistrictFee, 
                        decimal TotalAmount, 
                        string SpecialDistrict, 
                        string PostName, 
                        decimal LateFilingPercent, 
                        int OwnerCount, 
                        string FrozenLabel, 
                        decimal FrozenValue, 
                        decimal MiscAssessments) {
                GetRealPropertyStatementRow rowGetRealPropertyStatementRow = ((GetRealPropertyStatementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        StatementNumber,
                        RollYear,
                        LevyYear,
                        DistrictID,
                        District,
                        TotalValue,
                        OriginalTax,
                        Situs,
                        TotalExemptions,
                        TotalDeductions,
                        Legal,
                        TaxableValue,
                        TaxBilled,
                        OwnerID,
                        OwnerName,
                        MapNumber,
                        ParcelID,
                        ParcelNumber,
                        DelinquentStatus,
                        DelinquentParcelStatus,
                        OwnerStatus,
                        LoanNumber,
                        MortgageName,
                        MortgageID,
                        low,
                        High,
                        Turnouts,
                        Acres,
                        IrrgAcres,
                        MinimumDistrictFee,
                        TotalAmount,
                        SpecialDistrict,
                        PostName,
                        LateFilingPercent,
                        OwnerCount,
                        FrozenLabel,
                        FrozenValue,
                        MiscAssessments};
                rowGetRealPropertyStatementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetRealPropertyStatementRow);
                return rowGetRealPropertyStatementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementRow FindByStatementID(int StatementID) {
                return ((GetRealPropertyStatementRow)(this.Rows.Find(new object[] {
                            StatementID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetRealPropertyStatementDataTable cln = ((GetRealPropertyStatementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetRealPropertyStatementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnStatementNumber = base.Columns["StatementNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnLevyYear = base.Columns["LevyYear"];
                this.columnDistrictID = base.Columns["DistrictID"];
                this.columnDistrict = base.Columns["District"];
                this.columnTotalValue = base.Columns["TotalValue"];
                this.columnOriginalTax = base.Columns["OriginalTax"];
                this.columnSitus = base.Columns["Situs"];
                this.columnTotalExemptions = base.Columns["TotalExemptions"];
                this.columnTotalDeductions = base.Columns["TotalDeductions"];
                this.columnLegal = base.Columns["Legal"];
                this.columnTaxableValue = base.Columns["TaxableValue"];
                this.columnTaxBilled = base.Columns["TaxBilled"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnMapNumber = base.Columns["MapNumber"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnDelinquentStatus = base.Columns["DelinquentStatus"];
                this.columnDelinquentParcelStatus = base.Columns["DelinquentParcelStatus"];
                this.columnOwnerStatus = base.Columns["OwnerStatus"];
                this.columnLoanNumber = base.Columns["LoanNumber"];
                this.columnMortgageName = base.Columns["MortgageName"];
                this.columnMortgageID = base.Columns["MortgageID"];
                this.columnlow = base.Columns["low"];
                this.columnHigh = base.Columns["High"];
                this.columnTurnouts = base.Columns["Turnouts"];
                this.columnAcres = base.Columns["Acres"];
                this.columnIrrgAcres = base.Columns["IrrgAcres"];
                this.columnMinimumDistrictFee = base.Columns["MinimumDistrictFee"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnSpecialDistrict = base.Columns["SpecialDistrict"];
                this.columnPostName = base.Columns["PostName"];
                this.columnLateFilingPercent = base.Columns["LateFilingPercent"];
                this.columnOwnerCount = base.Columns["OwnerCount"];
                this.columnFrozenLabel = base.Columns["FrozenLabel"];
                this.columnFrozenValue = base.Columns["FrozenValue"];
                this.columnMiscAssessments = base.Columns["MiscAssessments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnStatementNumber = new global::System.Data.DataColumn("StatementNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLevyYear = new global::System.Data.DataColumn("LevyYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLevyYear);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnTotalValue = new global::System.Data.DataColumn("TotalValue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalValue);
                this.columnOriginalTax = new global::System.Data.DataColumn("OriginalTax", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalTax);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnTotalExemptions = new global::System.Data.DataColumn("TotalExemptions", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalExemptions);
                this.columnTotalDeductions = new global::System.Data.DataColumn("TotalDeductions", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDeductions);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnTaxableValue = new global::System.Data.DataColumn("TaxableValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxableValue);
                this.columnTaxBilled = new global::System.Data.DataColumn("TaxBilled", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxBilled);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnMapNumber = new global::System.Data.DataColumn("MapNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapNumber);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnDelinquentStatus = new global::System.Data.DataColumn("DelinquentStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentStatus);
                this.columnDelinquentParcelStatus = new global::System.Data.DataColumn("DelinquentParcelStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentParcelStatus);
                this.columnOwnerStatus = new global::System.Data.DataColumn("OwnerStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerStatus);
                this.columnLoanNumber = new global::System.Data.DataColumn("LoanNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanNumber);
                this.columnMortgageName = new global::System.Data.DataColumn("MortgageName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageName);
                this.columnMortgageID = new global::System.Data.DataColumn("MortgageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageID);
                this.columnlow = new global::System.Data.DataColumn("low", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlow);
                this.columnHigh = new global::System.Data.DataColumn("High", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHigh);
                this.columnTurnouts = new global::System.Data.DataColumn("Turnouts", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTurnouts);
                this.columnAcres = new global::System.Data.DataColumn("Acres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcres);
                this.columnIrrgAcres = new global::System.Data.DataColumn("IrrgAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIrrgAcres);
                this.columnMinimumDistrictFee = new global::System.Data.DataColumn("MinimumDistrictFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumDistrictFee);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnSpecialDistrict = new global::System.Data.DataColumn("SpecialDistrict", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecialDistrict);
                this.columnPostName = new global::System.Data.DataColumn("PostName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostName);
                this.columnLateFilingPercent = new global::System.Data.DataColumn("LateFilingPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateFilingPercent);
                this.columnOwnerCount = new global::System.Data.DataColumn("OwnerCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCount);
                this.columnFrozenLabel = new global::System.Data.DataColumn("FrozenLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrozenLabel);
                this.columnFrozenValue = new global::System.Data.DataColumn("FrozenValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrozenValue);
                this.columnMiscAssessments = new global::System.Data.DataColumn("MiscAssessments", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiscAssessments);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStatementID}, true));
                this.columnStatementID.AutoIncrement = true;
                this.columnStatementID.AllowDBNull = false;
                this.columnStatementID.ReadOnly = true;
                this.columnStatementID.Unique = true;
                this.columnStatementNumber.MaxLength = 50;
                this.columnDistrict.ReadOnly = true;
                this.columnDistrict.MaxLength = 103;
                this.columnTotalValue.ReadOnly = true;
                this.columnOriginalTax.ReadOnly = true;
                this.columnSitus.MaxLength = 400;
                this.columnTotalExemptions.ReadOnly = true;
                this.columnTotalDeductions.ReadOnly = true;
                this.columnLegal.MaxLength = 5000;
                this.columnTaxableValue.ReadOnly = true;
                this.columnTaxBilled.ReadOnly = true;
                this.columnOwnerID.AllowDBNull = false;
                this.columnOwnerName.ReadOnly = true;
                this.columnOwnerName.MaxLength = 102;
                this.columnMapNumber.MaxLength = 50;
                this.columnParcelID.ReadOnly = true;
                this.columnParcelNumber.MaxLength = 50;
                this.columnDelinquentStatus.ReadOnly = true;
                this.columnDelinquentParcelStatus.ReadOnly = true;
                this.columnOwnerStatus.ReadOnly = true;
                this.columnLoanNumber.MaxLength = 50;
                this.columnMortgageName.MaxLength = 50;
                this.columnlow.ReadOnly = true;
                this.columnHigh.ReadOnly = true;
                this.columnSpecialDistrict.ReadOnly = true;
                this.columnSpecialDistrict.MaxLength = 63;
                this.columnPostName.MaxLength = 50;
                this.columnLateFilingPercent.ReadOnly = true;
                this.columnOwnerCount.ReadOnly = true;
                this.columnFrozenLabel.ReadOnly = true;
                this.columnFrozenLabel.MaxLength = 13;
                this.columnMiscAssessments.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementRow NewGetRealPropertyStatementRow() {
                return ((GetRealPropertyStatementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetRealPropertyStatementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetRealPropertyStatementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetRealPropertyStatementRowChanged != null)) {
                    this.GetRealPropertyStatementRowChanged(this, new GetRealPropertyStatementRowChangeEvent(((GetRealPropertyStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetRealPropertyStatementRowChanging != null)) {
                    this.GetRealPropertyStatementRowChanging(this, new GetRealPropertyStatementRowChangeEvent(((GetRealPropertyStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetRealPropertyStatementRowDeleted != null)) {
                    this.GetRealPropertyStatementRowDeleted(this, new GetRealPropertyStatementRowChangeEvent(((GetRealPropertyStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetRealPropertyStatementRowDeleting != null)) {
                    this.GetRealPropertyStatementRowDeleting(this, new GetRealPropertyStatementRowChangeEvent(((GetRealPropertyStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetRealPropertyStatementRow(GetRealPropertyStatementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F11020RealPropertyData ds = new F11020RealPropertyData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetRealPropertyStatementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMortgageNameDataTable : global::System.Data.TypedTableBase<ListMortgageNameRow> {
            
            private global::System.Data.DataColumn columnMortgageID;
            
            private global::System.Data.DataColumn columnMortgageName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageNameDataTable() {
                this.TableName = "ListMortgageName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMortgageNameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMortgageNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageIDColumn {
                get {
                    return this.columnMortgageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageNameColumn {
                get {
                    return this.columnMortgageName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageNameRow this[int index] {
                get {
                    return ((ListMortgageNameRow)(this.Rows[index]));
                }
            }
            
            public event ListMortgageNameRowChangeEventHandler ListMortgageNameRowChanging;
            
            public event ListMortgageNameRowChangeEventHandler ListMortgageNameRowChanged;
            
            public event ListMortgageNameRowChangeEventHandler ListMortgageNameRowDeleting;
            
            public event ListMortgageNameRowChangeEventHandler ListMortgageNameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMortgageNameRow(ListMortgageNameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageNameRow AddListMortgageNameRow(int MortgageID, string MortgageName) {
                ListMortgageNameRow rowListMortgageNameRow = ((ListMortgageNameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MortgageID,
                        MortgageName};
                rowListMortgageNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMortgageNameRow);
                return rowListMortgageNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMortgageNameDataTable cln = ((ListMortgageNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMortgageNameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMortgageID = base.Columns["MortgageID"];
                this.columnMortgageName = base.Columns["MortgageName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMortgageID = new global::System.Data.DataColumn("MortgageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageID);
                this.columnMortgageName = new global::System.Data.DataColumn("MortgageName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageName);
                this.columnMortgageName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageNameRow NewListMortgageNameRow() {
                return ((ListMortgageNameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMortgageNameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMortgageNameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMortgageNameRowChanged != null)) {
                    this.ListMortgageNameRowChanged(this, new ListMortgageNameRowChangeEvent(((ListMortgageNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMortgageNameRowChanging != null)) {
                    this.ListMortgageNameRowChanging(this, new ListMortgageNameRowChangeEvent(((ListMortgageNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMortgageNameRowDeleted != null)) {
                    this.ListMortgageNameRowDeleted(this, new ListMortgageNameRowChangeEvent(((ListMortgageNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMortgageNameRowDeleting != null)) {
                    this.ListMortgageNameRowDeleting(this, new ListMortgageNameRowChangeEvent(((ListMortgageNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMortgageNameRow(ListMortgageNameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F11020RealPropertyData ds = new F11020RealPropertyData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMortgageNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveStatementDataTable : global::System.Data.TypedTableBase<SaveStatementRow> {
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnMortgageID;
            
            private global::System.Data.DataColumn columnLoanNumber;
            
            private global::System.Data.DataColumn columnMapNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveStatementDataTable() {
                this.TableName = "SaveStatement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveStatementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveStatementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageIDColumn {
                get {
                    return this.columnMortgageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanNumberColumn {
                get {
                    return this.columnLoanNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNumberColumn {
                get {
                    return this.columnMapNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveStatementRow this[int index] {
                get {
                    return ((SaveStatementRow)(this.Rows[index]));
                }
            }
            
            public event SaveStatementRowChangeEventHandler SaveStatementRowChanging;
            
            public event SaveStatementRowChangeEventHandler SaveStatementRowChanged;
            
            public event SaveStatementRowChangeEventHandler SaveStatementRowDeleting;
            
            public event SaveStatementRowChangeEventHandler SaveStatementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveStatementRow(SaveStatementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveStatementRow AddSaveStatementRow(string Situs, string Legal, int MortgageID, string LoanNumber, string MapNumber) {
                SaveStatementRow rowSaveStatementRow = ((SaveStatementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Situs,
                        Legal,
                        MortgageID,
                        LoanNumber,
                        MapNumber};
                rowSaveStatementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveStatementRow);
                return rowSaveStatementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveStatementDataTable cln = ((SaveStatementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveStatementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSitus = base.Columns["Situs"];
                this.columnLegal = base.Columns["Legal"];
                this.columnMortgageID = base.Columns["MortgageID"];
                this.columnLoanNumber = base.Columns["LoanNumber"];
                this.columnMapNumber = base.Columns["MapNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnMortgageID = new global::System.Data.DataColumn("MortgageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageID);
                this.columnLoanNumber = new global::System.Data.DataColumn("LoanNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanNumber);
                this.columnMapNumber = new global::System.Data.DataColumn("MapNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapNumber);
                this.columnSitus.MaxLength = 400;
                this.columnLegal.MaxLength = 5000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveStatementRow NewSaveStatementRow() {
                return ((SaveStatementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveStatementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveStatementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveStatementRowChanged != null)) {
                    this.SaveStatementRowChanged(this, new SaveStatementRowChangeEvent(((SaveStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveStatementRowChanging != null)) {
                    this.SaveStatementRowChanging(this, new SaveStatementRowChangeEvent(((SaveStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveStatementRowDeleted != null)) {
                    this.SaveStatementRowDeleted(this, new SaveStatementRowChangeEvent(((SaveStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveStatementRowDeleting != null)) {
                    this.SaveStatementRowDeleting(this, new SaveStatementRowChangeEvent(((SaveStatementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveStatementRow(SaveStatementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F11020RealPropertyData ds = new F11020RealPropertyData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveStatementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetRealPropertyStatementSummarysRow : global::System.Data.DataRow {
            
            private GetRealPropertyStatementSummarysDataTable tableGetRealPropertyStatementSummarys;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetRealPropertyStatementSummarysRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetRealPropertyStatementSummarys = ((GetRealPropertyStatementSummarysDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableGetRealPropertyStatementSummarys.StatementIDColumn]));
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.StatementNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementNumber\' in table \'GetRealPropertyStatementSummarys" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableGetRealPropertyStatementSummarys.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetRealPropertyStatementSummarys\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short LevyYear {
                get {
                    try {
                        return ((short)(this[this.tableGetRealPropertyStatementSummarys.LevyYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevyYear\' in table \'GetRealPropertyStatementSummarys\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.LevyYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatementSummarys.DistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictID\' in table \'GetRealPropertyStatementSummarys\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'GetRealPropertyStatementSummarys\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalValue {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatementSummarys.TotalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalValue\' in table \'GetRealPropertyStatementSummarys\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.TotalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalTax {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.OriginalTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalTax\' in table \'GetRealPropertyStatementSummarys\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.OriginalTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'GetRealPropertyStatementSummarys\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalExemptions {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.TotalExemptionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalExemptions\' in table \'GetRealPropertyStatementSummarys" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.TotalExemptionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDeductions {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.TotalDeductionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDeductions\' in table \'GetRealPropertyStatementSummarys" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.TotalDeductionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'GetRealPropertyStatementSummarys\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxableValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.TaxableValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxableValue\' in table \'GetRealPropertyStatementSummarys\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.TaxableValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxBilled {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.TaxBilledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxBilled\' in table \'GetRealPropertyStatementSummarys\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.TaxBilledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    return ((int)(this[this.tableGetRealPropertyStatementSummarys.OwnerIDColumn]));
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'GetRealPropertyStatementSummarys\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.MapNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapNumber\' in table \'GetRealPropertyStatementSummarys\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.MapNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatementSummarys.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'GetRealPropertyStatementSummarys\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'GetRealPropertyStatementSummarys\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DelinquentStatus {
                get {
                    try {
                        return ((bool)(this[this.tableGetRealPropertyStatementSummarys.DelinquentStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentStatus\' in table \'GetRealPropertyStatementSummary" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.DelinquentStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DelinquentParcelStatus {
                get {
                    try {
                        return ((bool)(this[this.tableGetRealPropertyStatementSummarys.DelinquentParcelStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentParcelStatus\' in table \'GetRealPropertyStatementS" +
                                "ummarys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.DelinquentParcelStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OwnerStatus {
                get {
                    try {
                        return ((bool)(this[this.tableGetRealPropertyStatementSummarys.OwnerStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerStatus\' in table \'GetRealPropertyStatementSummarys\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.OwnerStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoanNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.LoanNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanNumber\' in table \'GetRealPropertyStatementSummarys\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.LoanNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MortgageName {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.MortgageNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageName\' in table \'GetRealPropertyStatementSummarys\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.MortgageNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MortgageID {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatementSummarys.MortgageIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageID\' in table \'GetRealPropertyStatementSummarys\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.MortgageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int low {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatementSummarys.lowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'low\' in table \'GetRealPropertyStatementSummarys\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.lowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int High {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatementSummarys.HighColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'High\' in table \'GetRealPropertyStatementSummarys\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.HighColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Turnouts {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatementSummarys.TurnoutsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Turnouts\' in table \'GetRealPropertyStatementSummarys\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.TurnoutsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acres {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'GetRealPropertyStatementSummarys\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.AcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrgAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.IrrgAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrgAcres\' in table \'GetRealPropertyStatementSummarys\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.IrrgAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumDistrictFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.MinimumDistrictFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimumDistrictFee\' in table \'GetRealPropertyStatementSumma" +
                                "rys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.MinimumDistrictFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'GetRealPropertyStatementSummarys\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpecialDistrict {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.SpecialDistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecialDistrict\' in table \'GetRealPropertyStatementSummarys" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.SpecialDistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostName {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatementSummarys.PostNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostName\' in table \'GetRealPropertyStatementSummarys\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.PostNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LateFilingPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatementSummarys.LateFilingPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateFilingPercent\' in table \'GetRealPropertyStatementSummar" +
                                "ys\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.LateFilingPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerCount {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatementSummarys.OwnerCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCount\' in table \'GetRealPropertyStatementSummarys\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatementSummarys.OwnerCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableGetRealPropertyStatementSummarys.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetRealPropertyStatementSummarys.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevyYearNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.LevyYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevyYearNull() {
                this[this.tableGetRealPropertyStatementSummarys.LevyYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictIDNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.DistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictIDNull() {
                this[this.tableGetRealPropertyStatementSummarys.DistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableGetRealPropertyStatementSummarys.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalValueNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.TotalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalValueNull() {
                this[this.tableGetRealPropertyStatementSummarys.TotalValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalTaxNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.OriginalTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalTaxNull() {
                this[this.tableGetRealPropertyStatementSummarys.OriginalTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableGetRealPropertyStatementSummarys.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalExemptionsNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.TotalExemptionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalExemptionsNull() {
                this[this.tableGetRealPropertyStatementSummarys.TotalExemptionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDeductionsNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.TotalDeductionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDeductionsNull() {
                this[this.tableGetRealPropertyStatementSummarys.TotalDeductionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableGetRealPropertyStatementSummarys.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxableValueNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.TaxableValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxableValueNull() {
                this[this.tableGetRealPropertyStatementSummarys.TaxableValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxBilledNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.TaxBilledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxBilledNull() {
                this[this.tableGetRealPropertyStatementSummarys.TaxBilledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableGetRealPropertyStatementSummarys.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapNumberNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.MapNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapNumberNull() {
                this[this.tableGetRealPropertyStatementSummarys.MapNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableGetRealPropertyStatementSummarys.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableGetRealPropertyStatementSummarys.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentStatusNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.DelinquentStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentStatusNull() {
                this[this.tableGetRealPropertyStatementSummarys.DelinquentStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentParcelStatusNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.DelinquentParcelStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentParcelStatusNull() {
                this[this.tableGetRealPropertyStatementSummarys.DelinquentParcelStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStatusNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.OwnerStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStatusNull() {
                this[this.tableGetRealPropertyStatementSummarys.OwnerStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanNumberNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.LoanNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanNumberNull() {
                this[this.tableGetRealPropertyStatementSummarys.LoanNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageNameNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.MortgageNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageNameNull() {
                this[this.tableGetRealPropertyStatementSummarys.MortgageNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageIDNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.MortgageIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageIDNull() {
                this[this.tableGetRealPropertyStatementSummarys.MortgageIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslowNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.lowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlowNull() {
                this[this.tableGetRealPropertyStatementSummarys.lowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.HighColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighNull() {
                this[this.tableGetRealPropertyStatementSummarys.HighColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTurnoutsNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.TurnoutsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTurnoutsNull() {
                this[this.tableGetRealPropertyStatementSummarys.TurnoutsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.AcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull() {
                this[this.tableGetRealPropertyStatementSummarys.AcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrgAcresNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.IrrgAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrgAcresNull() {
                this[this.tableGetRealPropertyStatementSummarys.IrrgAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumDistrictFeeNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.MinimumDistrictFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumDistrictFeeNull() {
                this[this.tableGetRealPropertyStatementSummarys.MinimumDistrictFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableGetRealPropertyStatementSummarys.TotalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecialDistrictNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.SpecialDistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecialDistrictNull() {
                this[this.tableGetRealPropertyStatementSummarys.SpecialDistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostNameNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.PostNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostNameNull() {
                this[this.tableGetRealPropertyStatementSummarys.PostNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateFilingPercentNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.LateFilingPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateFilingPercentNull() {
                this[this.tableGetRealPropertyStatementSummarys.LateFilingPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCountNull() {
                return this.IsNull(this.tableGetRealPropertyStatementSummarys.OwnerCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCountNull() {
                this[this.tableGetRealPropertyStatementSummarys.OwnerCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetRealPropertyStatementRow : global::System.Data.DataRow {
            
            private GetRealPropertyStatementDataTable tableGetRealPropertyStatement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetRealPropertyStatementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetRealPropertyStatement = ((GetRealPropertyStatementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableGetRealPropertyStatement.StatementIDColumn]));
                }
                set {
                    this[this.tableGetRealPropertyStatement.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatementNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.StatementNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatementNumber\' in table \'GetRealPropertyStatement\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.StatementNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableGetRealPropertyStatement.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short LevyYear {
                get {
                    try {
                        return ((short)(this[this.tableGetRealPropertyStatement.LevyYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LevyYear\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.LevyYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatement.DistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictID\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalValue {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatement.TotalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalValue\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.TotalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalTax {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.OriginalTaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalTax\' in table \'GetRealPropertyStatement\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.OriginalTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalExemptions {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.TotalExemptionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalExemptions\' in table \'GetRealPropertyStatement\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.TotalExemptionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDeductions {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.TotalDeductionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDeductions\' in table \'GetRealPropertyStatement\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.TotalDeductionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxableValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.TaxableValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxableValue\' in table \'GetRealPropertyStatement\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.TaxableValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxBilled {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.TaxBilledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxBilled\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.TaxBilledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    return ((int)(this[this.tableGetRealPropertyStatement.OwnerIDColumn]));
                }
                set {
                    this[this.tableGetRealPropertyStatement.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.MapNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapNumber\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.MapNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatement.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'GetRealPropertyStatement\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DelinquentStatus {
                get {
                    try {
                        return ((bool)(this[this.tableGetRealPropertyStatement.DelinquentStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentStatus\' in table \'GetRealPropertyStatement\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.DelinquentStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DelinquentParcelStatus {
                get {
                    try {
                        return ((bool)(this[this.tableGetRealPropertyStatement.DelinquentParcelStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentParcelStatus\' in table \'GetRealPropertyStatement\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.DelinquentParcelStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OwnerStatus {
                get {
                    try {
                        return ((bool)(this[this.tableGetRealPropertyStatement.OwnerStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerStatus\' in table \'GetRealPropertyStatement\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.OwnerStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoanNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.LoanNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanNumber\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.LoanNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MortgageName {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.MortgageNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageName\' in table \'GetRealPropertyStatement\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.MortgageNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MortgageID {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatement.MortgageIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageID\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.MortgageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int low {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatement.lowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'low\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.lowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int High {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatement.HighColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'High\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.HighColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Turnouts {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.TurnoutsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Turnouts\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.TurnoutsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Acres {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.AcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Acres\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.AcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal IrrgAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.IrrgAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IrrgAcres\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.IrrgAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumDistrictFee {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.MinimumDistrictFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimumDistrictFee\' in table \'GetRealPropertyStatement\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.MinimumDistrictFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'GetRealPropertyStatement\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpecialDistrict {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.SpecialDistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecialDistrict\' in table \'GetRealPropertyStatement\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.SpecialDistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostName {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.PostNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostName\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.PostNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LateFilingPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.LateFilingPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateFilingPercent\' in table \'GetRealPropertyStatement\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.LateFilingPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerCount {
                get {
                    try {
                        return ((int)(this[this.tableGetRealPropertyStatement.OwnerCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCount\' in table \'GetRealPropertyStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.OwnerCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FrozenLabel {
                get {
                    try {
                        return ((string)(this[this.tableGetRealPropertyStatement.FrozenLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrozenLabel\' in table \'GetRealPropertyStatement\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.FrozenLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FrozenValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.FrozenValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrozenValue\' in table \'GetRealPropertyStatement\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.FrozenValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MiscAssessments {
                get {
                    try {
                        return ((decimal)(this[this.tableGetRealPropertyStatement.MiscAssessmentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiscAssessments\' in table \'GetRealPropertyStatement\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetRealPropertyStatement.MiscAssessmentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatementNumberNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.StatementNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatementNumberNull() {
                this[this.tableGetRealPropertyStatement.StatementNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGetRealPropertyStatement.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevyYearNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.LevyYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevyYearNull() {
                this[this.tableGetRealPropertyStatement.LevyYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictIDNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.DistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictIDNull() {
                this[this.tableGetRealPropertyStatement.DistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableGetRealPropertyStatement.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalValueNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.TotalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalValueNull() {
                this[this.tableGetRealPropertyStatement.TotalValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalTaxNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.OriginalTaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalTaxNull() {
                this[this.tableGetRealPropertyStatement.OriginalTaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableGetRealPropertyStatement.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalExemptionsNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.TotalExemptionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalExemptionsNull() {
                this[this.tableGetRealPropertyStatement.TotalExemptionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDeductionsNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.TotalDeductionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDeductionsNull() {
                this[this.tableGetRealPropertyStatement.TotalDeductionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableGetRealPropertyStatement.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxableValueNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.TaxableValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxableValueNull() {
                this[this.tableGetRealPropertyStatement.TaxableValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxBilledNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.TaxBilledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxBilledNull() {
                this[this.tableGetRealPropertyStatement.TaxBilledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableGetRealPropertyStatement.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapNumberNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.MapNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapNumberNull() {
                this[this.tableGetRealPropertyStatement.MapNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableGetRealPropertyStatement.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableGetRealPropertyStatement.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentStatusNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.DelinquentStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentStatusNull() {
                this[this.tableGetRealPropertyStatement.DelinquentStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentParcelStatusNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.DelinquentParcelStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentParcelStatusNull() {
                this[this.tableGetRealPropertyStatement.DelinquentParcelStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStatusNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.OwnerStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStatusNull() {
                this[this.tableGetRealPropertyStatement.OwnerStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanNumberNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.LoanNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanNumberNull() {
                this[this.tableGetRealPropertyStatement.LoanNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageNameNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.MortgageNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageNameNull() {
                this[this.tableGetRealPropertyStatement.MortgageNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageIDNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.MortgageIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageIDNull() {
                this[this.tableGetRealPropertyStatement.MortgageIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslowNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.lowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlowNull() {
                this[this.tableGetRealPropertyStatement.lowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.HighColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighNull() {
                this[this.tableGetRealPropertyStatement.HighColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTurnoutsNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.TurnoutsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTurnoutsNull() {
                this[this.tableGetRealPropertyStatement.TurnoutsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcresNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.AcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcresNull() {
                this[this.tableGetRealPropertyStatement.AcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIrrgAcresNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.IrrgAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIrrgAcresNull() {
                this[this.tableGetRealPropertyStatement.IrrgAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumDistrictFeeNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.MinimumDistrictFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumDistrictFeeNull() {
                this[this.tableGetRealPropertyStatement.MinimumDistrictFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableGetRealPropertyStatement.TotalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecialDistrictNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.SpecialDistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecialDistrictNull() {
                this[this.tableGetRealPropertyStatement.SpecialDistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostNameNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.PostNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostNameNull() {
                this[this.tableGetRealPropertyStatement.PostNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateFilingPercentNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.LateFilingPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateFilingPercentNull() {
                this[this.tableGetRealPropertyStatement.LateFilingPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCountNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.OwnerCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCountNull() {
                this[this.tableGetRealPropertyStatement.OwnerCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrozenLabelNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.FrozenLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrozenLabelNull() {
                this[this.tableGetRealPropertyStatement.FrozenLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrozenValueNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.FrozenValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrozenValueNull() {
                this[this.tableGetRealPropertyStatement.FrozenValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiscAssessmentsNull() {
                return this.IsNull(this.tableGetRealPropertyStatement.MiscAssessmentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiscAssessmentsNull() {
                this[this.tableGetRealPropertyStatement.MiscAssessmentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMortgageNameRow : global::System.Data.DataRow {
            
            private ListMortgageNameDataTable tableListMortgageName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMortgageNameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMortgageName = ((ListMortgageNameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MortgageID {
                get {
                    try {
                        return ((int)(this[this.tableListMortgageName.MortgageIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageID\' in table \'ListMortgageName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMortgageName.MortgageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MortgageName {
                get {
                    try {
                        return ((string)(this[this.tableListMortgageName.MortgageNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageName\' in table \'ListMortgageName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMortgageName.MortgageNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageIDNull() {
                return this.IsNull(this.tableListMortgageName.MortgageIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageIDNull() {
                this[this.tableListMortgageName.MortgageIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageNameNull() {
                return this.IsNull(this.tableListMortgageName.MortgageNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageNameNull() {
                this[this.tableListMortgageName.MortgageNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveStatementRow : global::System.Data.DataRow {
            
            private SaveStatementDataTable tableSaveStatement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveStatementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveStatement = ((SaveStatementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tableSaveStatement.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'SaveStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveStatement.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableSaveStatement.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'SaveStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveStatement.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MortgageID {
                get {
                    try {
                        return ((int)(this[this.tableSaveStatement.MortgageIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageID\' in table \'SaveStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveStatement.MortgageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoanNumber {
                get {
                    try {
                        return ((string)(this[this.tableSaveStatement.LoanNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanNumber\' in table \'SaveStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveStatement.LoanNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapNumber {
                get {
                    try {
                        return ((string)(this[this.tableSaveStatement.MapNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapNumber\' in table \'SaveStatement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveStatement.MapNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tableSaveStatement.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tableSaveStatement.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableSaveStatement.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableSaveStatement.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageIDNull() {
                return this.IsNull(this.tableSaveStatement.MortgageIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageIDNull() {
                this[this.tableSaveStatement.MortgageIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanNumberNull() {
                return this.IsNull(this.tableSaveStatement.LoanNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanNumberNull() {
                this[this.tableSaveStatement.LoanNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapNumberNull() {
                return this.IsNull(this.tableSaveStatement.MapNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapNumberNull() {
                this[this.tableSaveStatement.MapNumberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetRealPropertyStatementSummarysRowChangeEvent : global::System.EventArgs {
            
            private GetRealPropertyStatementSummarysRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementSummarysRowChangeEvent(GetRealPropertyStatementSummarysRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementSummarysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetRealPropertyStatementRowChangeEvent : global::System.EventArgs {
            
            private GetRealPropertyStatementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementRowChangeEvent(GetRealPropertyStatementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetRealPropertyStatementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMortgageNameRowChangeEvent : global::System.EventArgs {
            
            private ListMortgageNameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageNameRowChangeEvent(ListMortgageNameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMortgageNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveStatementRowChangeEvent : global::System.EventArgs {
            
            private SaveStatementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveStatementRowChangeEvent(SaveStatementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveStatementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TerraScan.BusinessEntities.F11020RealPropertyDataTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetRealPropertyStatementSummarysTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetRealPropertyStatementSummarysTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetRealPropertyStatementSummarys";
            tableMapping.ColumnMappings.Add("StatementID", "StatementID");
            tableMapping.ColumnMappings.Add("StatementNumber", "StatementNumber");
            tableMapping.ColumnMappings.Add("RollYear", "RollYear");
            tableMapping.ColumnMappings.Add("LevyYear", "LevyYear");
            tableMapping.ColumnMappings.Add("DistrictID", "DistrictID");
            tableMapping.ColumnMappings.Add("District", "District");
            tableMapping.ColumnMappings.Add("TotalValue", "TotalValue");
            tableMapping.ColumnMappings.Add("OriginalTax", "OriginalTax");
            tableMapping.ColumnMappings.Add("Situs", "Situs");
            tableMapping.ColumnMappings.Add("TotalExemptions", "TotalExemptions");
            tableMapping.ColumnMappings.Add("TotalDeductions", "TotalDeductions");
            tableMapping.ColumnMappings.Add("Legal", "Legal");
            tableMapping.ColumnMappings.Add("TaxableValue", "TaxableValue");
            tableMapping.ColumnMappings.Add("TaxBilled", "TaxBilled");
            tableMapping.ColumnMappings.Add("OwnerID", "OwnerID");
            tableMapping.ColumnMappings.Add("OwnerName", "OwnerName");
            tableMapping.ColumnMappings.Add("MapNumber", "MapNumber");
            tableMapping.ColumnMappings.Add("ParcelID", "ParcelID");
            tableMapping.ColumnMappings.Add("ParcelNumber", "ParcelNumber");
            tableMapping.ColumnMappings.Add("DelinquentStatus", "DelinquentStatus");
            tableMapping.ColumnMappings.Add("DelinquentParcelStatus", "DelinquentParcelStatus");
            tableMapping.ColumnMappings.Add("OwnerStatus", "OwnerStatus");
            tableMapping.ColumnMappings.Add("LoanNumber", "LoanNumber");
            tableMapping.ColumnMappings.Add("MortgageName", "MortgageName");
            tableMapping.ColumnMappings.Add("MortgageID", "MortgageID");
            tableMapping.ColumnMappings.Add("low", "low");
            tableMapping.ColumnMappings.Add("High", "High");
            tableMapping.ColumnMappings.Add("Turnouts", "Turnouts");
            tableMapping.ColumnMappings.Add("Acres", "Acres");
            tableMapping.ColumnMappings.Add("IrrgAcres", "IrrgAcres");
            tableMapping.ColumnMappings.Add("MinimumDistrictFee", "MinimumDistrictFee");
            tableMapping.ColumnMappings.Add("TotalAmount", "TotalAmount");
            tableMapping.ColumnMappings.Add("SpecialDistrict", "SpecialDistrict");
            tableMapping.ColumnMappings.Add("PostName", "PostName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString4;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f15021_pcget_RealPropertyStatementSummary";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StatementID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(F11020RealPropertyData.GetRealPropertyStatementSummarysDataTable dataTable, global::System.Nullable<int> StatementID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((StatementID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(StatementID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual F11020RealPropertyData.GetRealPropertyStatementSummarysDataTable GetData(global::System.Nullable<int> StatementID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((StatementID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(StatementID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            F11020RealPropertyData.GetRealPropertyStatementSummarysDataTable dataTable = new F11020RealPropertyData.GetRealPropertyStatementSummarysDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetRealPropertyStatementTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetRealPropertyStatementTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetRealPropertyStatement";
            tableMapping.ColumnMappings.Add("StatementID", "StatementID");
            tableMapping.ColumnMappings.Add("StatementNumber", "StatementNumber");
            tableMapping.ColumnMappings.Add("RollYear", "RollYear");
            tableMapping.ColumnMappings.Add("LevyYear", "LevyYear");
            tableMapping.ColumnMappings.Add("DistrictID", "DistrictID");
            tableMapping.ColumnMappings.Add("District", "District");
            tableMapping.ColumnMappings.Add("TotalValue", "TotalValue");
            tableMapping.ColumnMappings.Add("OriginalTax", "OriginalTax");
            tableMapping.ColumnMappings.Add("Situs", "Situs");
            tableMapping.ColumnMappings.Add("TotalExemptions", "TotalExemptions");
            tableMapping.ColumnMappings.Add("TotalDeductions", "TotalDeductions");
            tableMapping.ColumnMappings.Add("Legal", "Legal");
            tableMapping.ColumnMappings.Add("TaxableValue", "TaxableValue");
            tableMapping.ColumnMappings.Add("TaxBilled", "TaxBilled");
            tableMapping.ColumnMappings.Add("OwnerID", "OwnerID");
            tableMapping.ColumnMappings.Add("OwnerName", "OwnerName");
            tableMapping.ColumnMappings.Add("MapNumber", "MapNumber");
            tableMapping.ColumnMappings.Add("ParcelID", "ParcelID");
            tableMapping.ColumnMappings.Add("ParcelNumber", "ParcelNumber");
            tableMapping.ColumnMappings.Add("DelinquentStatus", "DelinquentStatus");
            tableMapping.ColumnMappings.Add("DelinquentParcelStatus", "DelinquentParcelStatus");
            tableMapping.ColumnMappings.Add("OwnerStatus", "OwnerStatus");
            tableMapping.ColumnMappings.Add("LoanNumber", "LoanNumber");
            tableMapping.ColumnMappings.Add("MortgageName", "MortgageName");
            tableMapping.ColumnMappings.Add("MortgageID", "MortgageID");
            tableMapping.ColumnMappings.Add("low", "low");
            tableMapping.ColumnMappings.Add("High", "High");
            tableMapping.ColumnMappings.Add("Turnouts", "Turnouts");
            tableMapping.ColumnMappings.Add("Acres", "Acres");
            tableMapping.ColumnMappings.Add("IrrgAcres", "IrrgAcres");
            tableMapping.ColumnMappings.Add("MinimumDistrictFee", "MinimumDistrictFee");
            tableMapping.ColumnMappings.Add("TotalAmount", "TotalAmount");
            tableMapping.ColumnMappings.Add("SpecialDistrict", "SpecialDistrict");
            tableMapping.ColumnMappings.Add("PostName", "PostName");
            tableMapping.ColumnMappings.Add("LateFilingPercent", "LateFilingPercent");
            tableMapping.ColumnMappings.Add("OwnerCount", "OwnerCount");
            tableMapping.ColumnMappings.Add("FrozenLabel", "FrozenLabel");
            tableMapping.ColumnMappings.Add("FrozenValue", "FrozenValue");
            tableMapping.ColumnMappings.Add("MiscAssessments", "MiscAssessments");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TerraScan.BusinessEntities.Properties.Settings.Default.T2TerrascanConnectionString4;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.f15021_pcget_RealPropertyStatementSummary";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StatementID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(F11020RealPropertyData.GetRealPropertyStatementDataTable dataTable, global::System.Nullable<int> StatementID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((StatementID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(StatementID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual F11020RealPropertyData.GetRealPropertyStatementDataTable GetData(global::System.Nullable<int> StatementID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((StatementID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(StatementID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            F11020RealPropertyData.GetRealPropertyStatementDataTable dataTable = new F11020RealPropertyData.GetRealPropertyStatementDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591