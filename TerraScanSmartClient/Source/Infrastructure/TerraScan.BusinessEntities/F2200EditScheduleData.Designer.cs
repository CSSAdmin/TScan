//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8689
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F2200EditScheduleData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F2200EditScheduleData : global::System.Data.DataSet {
        
        private f2200ListScheduleDataTableDataTable tablef2200ListScheduleDataTable;
        
        private List_AssessmentTypeDataTableDataTable tableList_AssessmentTypeDataTable;
        
        private f25050GetScheduleParcelDetailsTableDataTable tablef25050GetScheduleParcelDetailsTable;
        
        private ListOutputValueDataTable tableListOutputValue;
        
        private ListInputVAlueDataTable tableListInputVAlue;
        
        private f2200_GetFarmExemptAmountDataTableDataTable tablef2200_GetFarmExemptAmountDataTable;
        
        private Get259ExemptionAmountDataTable tableGet259ExemptionAmount;
        
        private f25050_pcget_ConfiguredstateDataTable tablef25050_pcget_Configuredstate;
        
        private f2200Get259ExemptionAmountDataTable tablef2200Get259ExemptionAmount;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F2200EditScheduleData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F2200EditScheduleData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["f2200ListScheduleDataTable"] != null)) {
                    base.Tables.Add(new f2200ListScheduleDataTableDataTable(ds.Tables["f2200ListScheduleDataTable"]));
                }
                if ((ds.Tables["List_AssessmentTypeDataTable"] != null)) {
                    base.Tables.Add(new List_AssessmentTypeDataTableDataTable(ds.Tables["List_AssessmentTypeDataTable"]));
                }
                if ((ds.Tables["f25050GetScheduleParcelDetailsTable"] != null)) {
                    base.Tables.Add(new f25050GetScheduleParcelDetailsTableDataTable(ds.Tables["f25050GetScheduleParcelDetailsTable"]));
                }
                if ((ds.Tables["ListOutputValue"] != null)) {
                    base.Tables.Add(new ListOutputValueDataTable(ds.Tables["ListOutputValue"]));
                }
                if ((ds.Tables["ListInputVAlue"] != null)) {
                    base.Tables.Add(new ListInputVAlueDataTable(ds.Tables["ListInputVAlue"]));
                }
                if ((ds.Tables["f2200_GetFarmExemptAmountDataTable"] != null)) {
                    base.Tables.Add(new f2200_GetFarmExemptAmountDataTableDataTable(ds.Tables["f2200_GetFarmExemptAmountDataTable"]));
                }
                if ((ds.Tables["Get259ExemptionAmount"] != null)) {
                    base.Tables.Add(new Get259ExemptionAmountDataTable(ds.Tables["Get259ExemptionAmount"]));
                }
                if ((ds.Tables["f25050_pcget_Configuredstate"] != null)) {
                    base.Tables.Add(new f25050_pcget_ConfiguredstateDataTable(ds.Tables["f25050_pcget_Configuredstate"]));
                }
                if ((ds.Tables["f2200Get259ExemptionAmount"] != null)) {
                    base.Tables.Add(new f2200Get259ExemptionAmountDataTable(ds.Tables["f2200Get259ExemptionAmount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f2200ListScheduleDataTableDataTable f2200ListScheduleDataTable {
            get {
                return this.tablef2200ListScheduleDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public List_AssessmentTypeDataTableDataTable List_AssessmentTypeDataTable {
            get {
                return this.tableList_AssessmentTypeDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f25050GetScheduleParcelDetailsTableDataTable f25050GetScheduleParcelDetailsTable {
            get {
                return this.tablef25050GetScheduleParcelDetailsTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListOutputValueDataTable ListOutputValue {
            get {
                return this.tableListOutputValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListInputVAlueDataTable ListInputVAlue {
            get {
                return this.tableListInputVAlue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f2200_GetFarmExemptAmountDataTableDataTable f2200_GetFarmExemptAmountDataTable {
            get {
                return this.tablef2200_GetFarmExemptAmountDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Get259ExemptionAmountDataTable Get259ExemptionAmount {
            get {
                return this.tableGet259ExemptionAmount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f25050_pcget_ConfiguredstateDataTable f25050_pcget_Configuredstate {
            get {
                return this.tablef25050_pcget_Configuredstate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f2200Get259ExemptionAmountDataTable f2200Get259ExemptionAmount {
            get {
                return this.tablef2200Get259ExemptionAmount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F2200EditScheduleData cln = ((F2200EditScheduleData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["f2200ListScheduleDataTable"] != null)) {
                    base.Tables.Add(new f2200ListScheduleDataTableDataTable(ds.Tables["f2200ListScheduleDataTable"]));
                }
                if ((ds.Tables["List_AssessmentTypeDataTable"] != null)) {
                    base.Tables.Add(new List_AssessmentTypeDataTableDataTable(ds.Tables["List_AssessmentTypeDataTable"]));
                }
                if ((ds.Tables["f25050GetScheduleParcelDetailsTable"] != null)) {
                    base.Tables.Add(new f25050GetScheduleParcelDetailsTableDataTable(ds.Tables["f25050GetScheduleParcelDetailsTable"]));
                }
                if ((ds.Tables["ListOutputValue"] != null)) {
                    base.Tables.Add(new ListOutputValueDataTable(ds.Tables["ListOutputValue"]));
                }
                if ((ds.Tables["ListInputVAlue"] != null)) {
                    base.Tables.Add(new ListInputVAlueDataTable(ds.Tables["ListInputVAlue"]));
                }
                if ((ds.Tables["f2200_GetFarmExemptAmountDataTable"] != null)) {
                    base.Tables.Add(new f2200_GetFarmExemptAmountDataTableDataTable(ds.Tables["f2200_GetFarmExemptAmountDataTable"]));
                }
                if ((ds.Tables["Get259ExemptionAmount"] != null)) {
                    base.Tables.Add(new Get259ExemptionAmountDataTable(ds.Tables["Get259ExemptionAmount"]));
                }
                if ((ds.Tables["f25050_pcget_Configuredstate"] != null)) {
                    base.Tables.Add(new f25050_pcget_ConfiguredstateDataTable(ds.Tables["f25050_pcget_Configuredstate"]));
                }
                if ((ds.Tables["f2200Get259ExemptionAmount"] != null)) {
                    base.Tables.Add(new f2200Get259ExemptionAmountDataTable(ds.Tables["f2200Get259ExemptionAmount"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablef2200ListScheduleDataTable = ((f2200ListScheduleDataTableDataTable)(base.Tables["f2200ListScheduleDataTable"]));
            if ((initTable == true)) {
                if ((this.tablef2200ListScheduleDataTable != null)) {
                    this.tablef2200ListScheduleDataTable.InitVars();
                }
            }
            this.tableList_AssessmentTypeDataTable = ((List_AssessmentTypeDataTableDataTable)(base.Tables["List_AssessmentTypeDataTable"]));
            if ((initTable == true)) {
                if ((this.tableList_AssessmentTypeDataTable != null)) {
                    this.tableList_AssessmentTypeDataTable.InitVars();
                }
            }
            this.tablef25050GetScheduleParcelDetailsTable = ((f25050GetScheduleParcelDetailsTableDataTable)(base.Tables["f25050GetScheduleParcelDetailsTable"]));
            if ((initTable == true)) {
                if ((this.tablef25050GetScheduleParcelDetailsTable != null)) {
                    this.tablef25050GetScheduleParcelDetailsTable.InitVars();
                }
            }
            this.tableListOutputValue = ((ListOutputValueDataTable)(base.Tables["ListOutputValue"]));
            if ((initTable == true)) {
                if ((this.tableListOutputValue != null)) {
                    this.tableListOutputValue.InitVars();
                }
            }
            this.tableListInputVAlue = ((ListInputVAlueDataTable)(base.Tables["ListInputVAlue"]));
            if ((initTable == true)) {
                if ((this.tableListInputVAlue != null)) {
                    this.tableListInputVAlue.InitVars();
                }
            }
            this.tablef2200_GetFarmExemptAmountDataTable = ((f2200_GetFarmExemptAmountDataTableDataTable)(base.Tables["f2200_GetFarmExemptAmountDataTable"]));
            if ((initTable == true)) {
                if ((this.tablef2200_GetFarmExemptAmountDataTable != null)) {
                    this.tablef2200_GetFarmExemptAmountDataTable.InitVars();
                }
            }
            this.tableGet259ExemptionAmount = ((Get259ExemptionAmountDataTable)(base.Tables["Get259ExemptionAmount"]));
            if ((initTable == true)) {
                if ((this.tableGet259ExemptionAmount != null)) {
                    this.tableGet259ExemptionAmount.InitVars();
                }
            }
            this.tablef25050_pcget_Configuredstate = ((f25050_pcget_ConfiguredstateDataTable)(base.Tables["f25050_pcget_Configuredstate"]));
            if ((initTable == true)) {
                if ((this.tablef25050_pcget_Configuredstate != null)) {
                    this.tablef25050_pcget_Configuredstate.InitVars();
                }
            }
            this.tablef2200Get259ExemptionAmount = ((f2200Get259ExemptionAmountDataTable)(base.Tables["f2200Get259ExemptionAmount"]));
            if ((initTable == true)) {
                if ((this.tablef2200Get259ExemptionAmount != null)) {
                    this.tablef2200Get259ExemptionAmount.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F2200EditScheduleData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F2200EditScheduleData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablef2200ListScheduleDataTable = new f2200ListScheduleDataTableDataTable();
            base.Tables.Add(this.tablef2200ListScheduleDataTable);
            this.tableList_AssessmentTypeDataTable = new List_AssessmentTypeDataTableDataTable();
            base.Tables.Add(this.tableList_AssessmentTypeDataTable);
            this.tablef25050GetScheduleParcelDetailsTable = new f25050GetScheduleParcelDetailsTableDataTable();
            base.Tables.Add(this.tablef25050GetScheduleParcelDetailsTable);
            this.tableListOutputValue = new ListOutputValueDataTable();
            base.Tables.Add(this.tableListOutputValue);
            this.tableListInputVAlue = new ListInputVAlueDataTable();
            base.Tables.Add(this.tableListInputVAlue);
            this.tablef2200_GetFarmExemptAmountDataTable = new f2200_GetFarmExemptAmountDataTableDataTable();
            base.Tables.Add(this.tablef2200_GetFarmExemptAmountDataTable);
            this.tableGet259ExemptionAmount = new Get259ExemptionAmountDataTable();
            base.Tables.Add(this.tableGet259ExemptionAmount);
            this.tablef25050_pcget_Configuredstate = new f25050_pcget_ConfiguredstateDataTable();
            base.Tables.Add(this.tablef25050_pcget_Configuredstate);
            this.tablef2200Get259ExemptionAmount = new f2200Get259ExemptionAmountDataTable();
            base.Tables.Add(this.tablef2200Get259ExemptionAmount);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef2200ListScheduleDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeList_AssessmentTypeDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef25050GetScheduleParcelDetailsTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListOutputValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListInputVAlue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef2200_GetFarmExemptAmountDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGet259ExemptionAmount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef25050_pcget_Configuredstate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef2200Get259ExemptionAmount() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F2200EditScheduleData ds = new F2200EditScheduleData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void f2200ListScheduleDataTableRowChangeEventHandler(object sender, f2200ListScheduleDataTableRowChangeEvent e);
        
        public delegate void List_AssessmentTypeDataTableRowChangeEventHandler(object sender, List_AssessmentTypeDataTableRowChangeEvent e);
        
        public delegate void f25050GetScheduleParcelDetailsTableRowChangeEventHandler(object sender, f25050GetScheduleParcelDetailsTableRowChangeEvent e);
        
        public delegate void ListOutputValueRowChangeEventHandler(object sender, ListOutputValueRowChangeEvent e);
        
        public delegate void ListInputVAlueRowChangeEventHandler(object sender, ListInputVAlueRowChangeEvent e);
        
        public delegate void f2200_GetFarmExemptAmountDataTableRowChangeEventHandler(object sender, f2200_GetFarmExemptAmountDataTableRowChangeEvent e);
        
        public delegate void Get259ExemptionAmountRowChangeEventHandler(object sender, Get259ExemptionAmountRowChangeEvent e);
        
        public delegate void f25050_pcget_ConfiguredstateRowChangeEventHandler(object sender, f25050_pcget_ConfiguredstateRowChangeEvent e);
        
        public delegate void f2200Get259ExemptionAmountRowChangeEventHandler(object sender, f2200Get259ExemptionAmountRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f2200ListScheduleDataTableDataTable : global::System.Data.TypedTableBase<f2200ListScheduleDataTableRow> {
            
            private global::System.Data.DataColumn columnScheduleID;
            
            private global::System.Data.DataColumn columnScheduleNumber;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnFilingType;
            
            private global::System.Data.DataColumn columnDistrictID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnPropertyType;
            
            private global::System.Data.DataColumn columnBuisnessName;
            
            private global::System.Data.DataColumn columnIsReview;
            
            private global::System.Data.DataColumn columnFilingDate;
            
            private global::System.Data.DataColumn columnO1Value;
            
            private global::System.Data.DataColumn columnO2Value;
            
            private global::System.Data.DataColumn columnPenaltyPercent;
            
            private global::System.Data.DataColumn columnPenaltyAmount;
            
            private global::System.Data.DataColumn columnStreetAddress;
            
            private global::System.Data.DataColumn columnScheduleStateCode;
            
            private global::System.Data.DataColumn columnNAICS;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnPrimaryOwner;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnParcelStateCode;
            
            private global::System.Data.DataColumn columnMapNumber;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnAssessmentTypeID;
            
            private global::System.Data.DataColumn columnAssessmentType;
            
            private global::System.Data.DataColumn columnNewConstruction;
            
            private global::System.Data.DataColumn columnScheduleTypeID;
            
            private global::System.Data.DataColumn columnScheduleType;
            
            private global::System.Data.DataColumn columnIsHeadOfHousehold;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnMID1;
            
            private global::System.Data.DataColumn columnMID2;
            
            private global::System.Data.DataColumn columnMID3;
            
            private global::System.Data.DataColumn columnMID4;
            
            private global::System.Data.DataColumn columnMID5;
            
            private global::System.Data.DataColumn columnMIDLabel1;
            
            private global::System.Data.DataColumn columnMIDLabel2;
            
            private global::System.Data.DataColumn columnMIDLabel3;
            
            private global::System.Data.DataColumn columnMIDLabel4;
            
            private global::System.Data.DataColumn columnMIDLabel5;
            
            private global::System.Data.DataColumn columnConfiguredState;
            
            private global::System.Data.DataColumn columnIsFarm;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnUserWarning;
            
            private global::System.Data.DataColumn columnIsFarmExempt;
            
            private global::System.Data.DataColumn columnFarmExemptYear;
            
            private global::System.Data.DataColumn columnFarmExemptAmount;
            
            private global::System.Data.DataColumn columnPersonalPropertyCode;
            
            private global::System.Data.DataColumn columnPersonalPropertyCodeDescription;
            
            private global::System.Data.DataColumn columnLockScheduleBy;
            
            private global::System.Data.DataColumn columnIs259Exempt;
            
            private global::System.Data.DataColumn columnExempt259Amount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200ListScheduleDataTableDataTable() {
                this.TableName = "f2200ListScheduleDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f2200ListScheduleDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f2200ListScheduleDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleIDColumn {
                get {
                    return this.columnScheduleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleNumberColumn {
                get {
                    return this.columnScheduleNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilingTypeColumn {
                get {
                    return this.columnFilingType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictIDColumn {
                get {
                    return this.columnDistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyTypeColumn {
                get {
                    return this.columnPropertyType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuisnessNameColumn {
                get {
                    return this.columnBuisnessName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsReviewColumn {
                get {
                    return this.columnIsReview;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilingDateColumn {
                get {
                    return this.columnFilingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O1ValueColumn {
                get {
                    return this.columnO1Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O2ValueColumn {
                get {
                    return this.columnO2Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PenaltyPercentColumn {
                get {
                    return this.columnPenaltyPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PenaltyAmountColumn {
                get {
                    return this.columnPenaltyAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetAddressColumn {
                get {
                    return this.columnStreetAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleStateCodeColumn {
                get {
                    return this.columnScheduleStateCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAICSColumn {
                get {
                    return this.columnNAICS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryOwnerColumn {
                get {
                    return this.columnPrimaryOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelStateCodeColumn {
                get {
                    return this.columnParcelStateCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNumberColumn {
                get {
                    return this.columnMapNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeIDColumn {
                get {
                    return this.columnAssessmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeColumn {
                get {
                    return this.columnAssessmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewConstructionColumn {
                get {
                    return this.columnNewConstruction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleTypeIDColumn {
                get {
                    return this.columnScheduleTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScheduleTypeColumn {
                get {
                    return this.columnScheduleType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsHeadOfHouseholdColumn {
                get {
                    return this.columnIsHeadOfHousehold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID1Column {
                get {
                    return this.columnMID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID2Column {
                get {
                    return this.columnMID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID3Column {
                get {
                    return this.columnMID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID4Column {
                get {
                    return this.columnMID4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MID5Column {
                get {
                    return this.columnMID5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIDLabel1Column {
                get {
                    return this.columnMIDLabel1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIDLabel2Column {
                get {
                    return this.columnMIDLabel2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIDLabel3Column {
                get {
                    return this.columnMIDLabel3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIDLabel4Column {
                get {
                    return this.columnMIDLabel4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIDLabel5Column {
                get {
                    return this.columnMIDLabel5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfiguredStateColumn {
                get {
                    return this.columnConfiguredState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFarmColumn {
                get {
                    return this.columnIsFarm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserWarningColumn {
                get {
                    return this.columnUserWarning;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFarmExemptColumn {
                get {
                    return this.columnIsFarmExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FarmExemptYearColumn {
                get {
                    return this.columnFarmExemptYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FarmExemptAmountColumn {
                get {
                    return this.columnFarmExemptAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalPropertyCodeColumn {
                get {
                    return this.columnPersonalPropertyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalPropertyCodeDescriptionColumn {
                get {
                    return this.columnPersonalPropertyCodeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockScheduleByColumn {
                get {
                    return this.columnLockScheduleBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is259ExemptColumn {
                get {
                    return this.columnIs259Exempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Exempt259AmountColumn {
                get {
                    return this.columnExempt259Amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200ListScheduleDataTableRow this[int index] {
                get {
                    return ((f2200ListScheduleDataTableRow)(this.Rows[index]));
                }
            }
            
            public event f2200ListScheduleDataTableRowChangeEventHandler f2200ListScheduleDataTableRowChanging;
            
            public event f2200ListScheduleDataTableRowChangeEventHandler f2200ListScheduleDataTableRowChanged;
            
            public event f2200ListScheduleDataTableRowChangeEventHandler f2200ListScheduleDataTableRowDeleting;
            
            public event f2200ListScheduleDataTableRowChangeEventHandler f2200ListScheduleDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf2200ListScheduleDataTableRow(f2200ListScheduleDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200ListScheduleDataTableRow Addf2200ListScheduleDataTableRow(
                        string ScheduleNumber, 
                        string RollYear, 
                        string FilingType, 
                        int DistrictID, 
                        int ParcelID, 
                        string PropertyType, 
                        string BuisnessName, 
                        string IsReview, 
                        string FilingDate, 
                        decimal O1Value, 
                        decimal O2Value, 
                        decimal PenaltyPercent, 
                        decimal PenaltyAmount, 
                        string StreetAddress, 
                        string ScheduleStateCode, 
                        string NAICS, 
                        string Description, 
                        string ParcelNumber, 
                        int OwnerID, 
                        string PrimaryOwner, 
                        string District, 
                        string ParcelStateCode, 
                        string MapNumber, 
                        string Legal, 
                        short AssessmentTypeID, 
                        string AssessmentType, 
                        decimal NewConstruction, 
                        int ScheduleTypeID, 
                        string ScheduleType, 
                        short IsHeadOfHousehold, 
                        short IsExempt, 
                        string MID1, 
                        string MID2, 
                        string MID3, 
                        string MID4, 
                        string MID5, 
                        string MIDLabel1, 
                        string MIDLabel2, 
                        string MIDLabel3, 
                        string MIDLabel4, 
                        string MIDLabel5, 
                        string ConfiguredState, 
                        short IsFarm, 
                        string Phone, 
                        string Email, 
                        string UserWarning, 
                        bool IsFarmExempt, 
                        short FarmExemptYear, 
                        decimal FarmExemptAmount, 
                        string PersonalPropertyCode, 
                        string PersonalPropertyCodeDescription, 
                        int LockScheduleBy, 
                        short Is259Exempt, 
                        decimal Exempt259Amount) {
                f2200ListScheduleDataTableRow rowf2200ListScheduleDataTableRow = ((f2200ListScheduleDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ScheduleNumber,
                        RollYear,
                        FilingType,
                        DistrictID,
                        ParcelID,
                        PropertyType,
                        BuisnessName,
                        IsReview,
                        FilingDate,
                        O1Value,
                        O2Value,
                        PenaltyPercent,
                        PenaltyAmount,
                        StreetAddress,
                        ScheduleStateCode,
                        NAICS,
                        Description,
                        ParcelNumber,
                        OwnerID,
                        PrimaryOwner,
                        District,
                        ParcelStateCode,
                        MapNumber,
                        Legal,
                        AssessmentTypeID,
                        AssessmentType,
                        NewConstruction,
                        ScheduleTypeID,
                        ScheduleType,
                        IsHeadOfHousehold,
                        IsExempt,
                        MID1,
                        MID2,
                        MID3,
                        MID4,
                        MID5,
                        MIDLabel1,
                        MIDLabel2,
                        MIDLabel3,
                        MIDLabel4,
                        MIDLabel5,
                        ConfiguredState,
                        IsFarm,
                        Phone,
                        Email,
                        UserWarning,
                        IsFarmExempt,
                        FarmExemptYear,
                        FarmExemptAmount,
                        PersonalPropertyCode,
                        PersonalPropertyCodeDescription,
                        LockScheduleBy,
                        Is259Exempt,
                        Exempt259Amount};
                rowf2200ListScheduleDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf2200ListScheduleDataTableRow);
                return rowf2200ListScheduleDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f2200ListScheduleDataTableDataTable cln = ((f2200ListScheduleDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f2200ListScheduleDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScheduleID = base.Columns["ScheduleID"];
                this.columnScheduleNumber = base.Columns["ScheduleNumber"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnFilingType = base.Columns["FilingType"];
                this.columnDistrictID = base.Columns["DistrictID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnPropertyType = base.Columns["PropertyType"];
                this.columnBuisnessName = base.Columns["BuisnessName"];
                this.columnIsReview = base.Columns["IsReview"];
                this.columnFilingDate = base.Columns["FilingDate"];
                this.columnO1Value = base.Columns["O1Value"];
                this.columnO2Value = base.Columns["O2Value"];
                this.columnPenaltyPercent = base.Columns["PenaltyPercent"];
                this.columnPenaltyAmount = base.Columns["PenaltyAmount"];
                this.columnStreetAddress = base.Columns["StreetAddress"];
                this.columnScheduleStateCode = base.Columns["ScheduleStateCode"];
                this.columnNAICS = base.Columns["NAICS"];
                this.columnDescription = base.Columns["Description"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnPrimaryOwner = base.Columns["PrimaryOwner"];
                this.columnDistrict = base.Columns["District"];
                this.columnParcelStateCode = base.Columns["ParcelStateCode"];
                this.columnMapNumber = base.Columns["MapNumber"];
                this.columnLegal = base.Columns["Legal"];
                this.columnAssessmentTypeID = base.Columns["AssessmentTypeID"];
                this.columnAssessmentType = base.Columns["AssessmentType"];
                this.columnNewConstruction = base.Columns["NewConstruction"];
                this.columnScheduleTypeID = base.Columns["ScheduleTypeID"];
                this.columnScheduleType = base.Columns["ScheduleType"];
                this.columnIsHeadOfHousehold = base.Columns["IsHeadOfHousehold"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnMID1 = base.Columns["MID1"];
                this.columnMID2 = base.Columns["MID2"];
                this.columnMID3 = base.Columns["MID3"];
                this.columnMID4 = base.Columns["MID4"];
                this.columnMID5 = base.Columns["MID5"];
                this.columnMIDLabel1 = base.Columns["MIDLabel1"];
                this.columnMIDLabel2 = base.Columns["MIDLabel2"];
                this.columnMIDLabel3 = base.Columns["MIDLabel3"];
                this.columnMIDLabel4 = base.Columns["MIDLabel4"];
                this.columnMIDLabel5 = base.Columns["MIDLabel5"];
                this.columnConfiguredState = base.Columns["ConfiguredState"];
                this.columnIsFarm = base.Columns["IsFarm"];
                this.columnPhone = base.Columns["Phone"];
                this.columnEmail = base.Columns["Email"];
                this.columnUserWarning = base.Columns["UserWarning"];
                this.columnIsFarmExempt = base.Columns["IsFarmExempt"];
                this.columnFarmExemptYear = base.Columns["FarmExemptYear"];
                this.columnFarmExemptAmount = base.Columns["FarmExemptAmount"];
                this.columnPersonalPropertyCode = base.Columns["PersonalPropertyCode"];
                this.columnPersonalPropertyCodeDescription = base.Columns["PersonalPropertyCodeDescription"];
                this.columnLockScheduleBy = base.Columns["LockScheduleBy"];
                this.columnIs259Exempt = base.Columns["Is259Exempt"];
                this.columnExempt259Amount = base.Columns["Exempt259Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScheduleID = new global::System.Data.DataColumn("ScheduleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleID);
                this.columnScheduleNumber = new global::System.Data.DataColumn("ScheduleNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleNumber);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnFilingType = new global::System.Data.DataColumn("FilingType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilingType);
                this.columnDistrictID = new global::System.Data.DataColumn("DistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrictID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnPropertyType = new global::System.Data.DataColumn("PropertyType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyType);
                this.columnBuisnessName = new global::System.Data.DataColumn("BuisnessName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuisnessName);
                this.columnIsReview = new global::System.Data.DataColumn("IsReview", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReview);
                this.columnFilingDate = new global::System.Data.DataColumn("FilingDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilingDate);
                this.columnO1Value = new global::System.Data.DataColumn("O1Value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO1Value);
                this.columnO2Value = new global::System.Data.DataColumn("O2Value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO2Value);
                this.columnPenaltyPercent = new global::System.Data.DataColumn("PenaltyPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPenaltyPercent);
                this.columnPenaltyAmount = new global::System.Data.DataColumn("PenaltyAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPenaltyAmount);
                this.columnStreetAddress = new global::System.Data.DataColumn("StreetAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreetAddress);
                this.columnScheduleStateCode = new global::System.Data.DataColumn("ScheduleStateCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleStateCode);
                this.columnNAICS = new global::System.Data.DataColumn("NAICS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAICS);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnPrimaryOwner = new global::System.Data.DataColumn("PrimaryOwner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryOwner);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnParcelStateCode = new global::System.Data.DataColumn("ParcelStateCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelStateCode);
                this.columnMapNumber = new global::System.Data.DataColumn("MapNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapNumber);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnAssessmentTypeID = new global::System.Data.DataColumn("AssessmentTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentTypeID);
                this.columnAssessmentType = new global::System.Data.DataColumn("AssessmentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentType);
                this.columnNewConstruction = new global::System.Data.DataColumn("NewConstruction", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewConstruction);
                this.columnScheduleTypeID = new global::System.Data.DataColumn("ScheduleTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleTypeID);
                this.columnScheduleType = new global::System.Data.DataColumn("ScheduleType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduleType);
                this.columnIsHeadOfHousehold = new global::System.Data.DataColumn("IsHeadOfHousehold", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsHeadOfHousehold);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnMID1 = new global::System.Data.DataColumn("MID1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID1);
                this.columnMID2 = new global::System.Data.DataColumn("MID2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID2);
                this.columnMID3 = new global::System.Data.DataColumn("MID3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID3);
                this.columnMID4 = new global::System.Data.DataColumn("MID4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID4);
                this.columnMID5 = new global::System.Data.DataColumn("MID5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID5);
                this.columnMIDLabel1 = new global::System.Data.DataColumn("MIDLabel1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIDLabel1);
                this.columnMIDLabel2 = new global::System.Data.DataColumn("MIDLabel2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIDLabel2);
                this.columnMIDLabel3 = new global::System.Data.DataColumn("MIDLabel3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIDLabel3);
                this.columnMIDLabel4 = new global::System.Data.DataColumn("MIDLabel4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIDLabel4);
                this.columnMIDLabel5 = new global::System.Data.DataColumn("MIDLabel5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIDLabel5);
                this.columnConfiguredState = new global::System.Data.DataColumn("ConfiguredState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfiguredState);
                this.columnIsFarm = new global::System.Data.DataColumn("IsFarm", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFarm);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnUserWarning = new global::System.Data.DataColumn("UserWarning", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserWarning);
                this.columnIsFarmExempt = new global::System.Data.DataColumn("IsFarmExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFarmExempt);
                this.columnFarmExemptYear = new global::System.Data.DataColumn("FarmExemptYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmExemptYear);
                this.columnFarmExemptAmount = new global::System.Data.DataColumn("FarmExemptAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmExemptAmount);
                this.columnPersonalPropertyCode = new global::System.Data.DataColumn("PersonalPropertyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalPropertyCode);
                this.columnPersonalPropertyCodeDescription = new global::System.Data.DataColumn("PersonalPropertyCodeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalPropertyCodeDescription);
                this.columnLockScheduleBy = new global::System.Data.DataColumn("LockScheduleBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockScheduleBy);
                this.columnIs259Exempt = new global::System.Data.DataColumn("Is259Exempt", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs259Exempt);
                this.columnExempt259Amount = new global::System.Data.DataColumn("Exempt259Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExempt259Amount);
                this.columnScheduleID.AutoIncrement = true;
                this.columnScheduleID.AllowDBNull = false;
                this.columnScheduleID.ReadOnly = true;
                this.columnScheduleNumber.AllowDBNull = false;
                this.columnScheduleNumber.MaxLength = 50;
                this.columnRollYear.AllowDBNull = false;
                this.columnFilingType.MaxLength = 50;
                this.columnDistrictID.ReadOnly = true;
                this.columnParcelID.ReadOnly = true;
                this.columnPropertyType.MaxLength = 50;
                this.columnBuisnessName.MaxLength = 250;
                this.columnIsReview.ReadOnly = true;
                this.columnIsReview.MaxLength = 3;
                this.columnStreetAddress.MaxLength = 250;
                this.columnScheduleStateCode.MaxLength = 50;
                this.columnNAICS.MaxLength = 50;
                this.columnDescription.MaxLength = 100;
                this.columnParcelNumber.MaxLength = 50;
                this.columnPrimaryOwner.ReadOnly = true;
                this.columnPrimaryOwner.MaxLength = 102;
                this.columnDistrict.ReadOnly = true;
                this.columnDistrict.MaxLength = 63;
                this.columnParcelStateCode.MaxLength = 50;
                this.columnMapNumber.MaxLength = 50;
                this.columnLegal.MaxLength = 5000;
                this.columnAssessmentType.MaxLength = 50;
                this.columnScheduleType.MaxLength = 50;
                this.columnIsHeadOfHousehold.ReadOnly = true;
                this.columnMID1.MaxLength = 50;
                this.columnMID2.MaxLength = 50;
                this.columnMID3.MaxLength = 50;
                this.columnMID4.MaxLength = 50;
                this.columnMID5.MaxLength = 50;
                this.columnMIDLabel1.MaxLength = 1000;
                this.columnMIDLabel2.MaxLength = 1000;
                this.columnMIDLabel3.MaxLength = 1000;
                this.columnMIDLabel4.MaxLength = 1000;
                this.columnMIDLabel5.MaxLength = 1000;
                this.columnPhone.MaxLength = 50;
                this.columnEmail.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200ListScheduleDataTableRow Newf2200ListScheduleDataTableRow() {
                return ((f2200ListScheduleDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f2200ListScheduleDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f2200ListScheduleDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f2200ListScheduleDataTableRowChanged != null)) {
                    this.f2200ListScheduleDataTableRowChanged(this, new f2200ListScheduleDataTableRowChangeEvent(((f2200ListScheduleDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f2200ListScheduleDataTableRowChanging != null)) {
                    this.f2200ListScheduleDataTableRowChanging(this, new f2200ListScheduleDataTableRowChangeEvent(((f2200ListScheduleDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f2200ListScheduleDataTableRowDeleted != null)) {
                    this.f2200ListScheduleDataTableRowDeleted(this, new f2200ListScheduleDataTableRowChangeEvent(((f2200ListScheduleDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f2200ListScheduleDataTableRowDeleting != null)) {
                    this.f2200ListScheduleDataTableRowDeleting(this, new f2200ListScheduleDataTableRowChangeEvent(((f2200ListScheduleDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef2200ListScheduleDataTableRow(f2200ListScheduleDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2200EditScheduleData ds = new F2200EditScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f2200ListScheduleDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class List_AssessmentTypeDataTableDataTable : global::System.Data.TypedTableBase<List_AssessmentTypeDataTableRow> {
            
            private global::System.Data.DataColumn columnAssessmentTypeID;
            
            private global::System.Data.DataColumn columnAssessmentType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public List_AssessmentTypeDataTableDataTable() {
                this.TableName = "List_AssessmentTypeDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal List_AssessmentTypeDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected List_AssessmentTypeDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeIDColumn {
                get {
                    return this.columnAssessmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentTypeColumn {
                get {
                    return this.columnAssessmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public List_AssessmentTypeDataTableRow this[int index] {
                get {
                    return ((List_AssessmentTypeDataTableRow)(this.Rows[index]));
                }
            }
            
            public event List_AssessmentTypeDataTableRowChangeEventHandler List_AssessmentTypeDataTableRowChanging;
            
            public event List_AssessmentTypeDataTableRowChangeEventHandler List_AssessmentTypeDataTableRowChanged;
            
            public event List_AssessmentTypeDataTableRowChangeEventHandler List_AssessmentTypeDataTableRowDeleting;
            
            public event List_AssessmentTypeDataTableRowChangeEventHandler List_AssessmentTypeDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddList_AssessmentTypeDataTableRow(List_AssessmentTypeDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public List_AssessmentTypeDataTableRow AddList_AssessmentTypeDataTableRow(short AssessmentTypeID, string AssessmentType) {
                List_AssessmentTypeDataTableRow rowList_AssessmentTypeDataTableRow = ((List_AssessmentTypeDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssessmentTypeID,
                        AssessmentType};
                rowList_AssessmentTypeDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowList_AssessmentTypeDataTableRow);
                return rowList_AssessmentTypeDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                List_AssessmentTypeDataTableDataTable cln = ((List_AssessmentTypeDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new List_AssessmentTypeDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssessmentTypeID = base.Columns["AssessmentTypeID"];
                this.columnAssessmentType = base.Columns["AssessmentType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssessmentTypeID = new global::System.Data.DataColumn("AssessmentTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentTypeID);
                this.columnAssessmentType = new global::System.Data.DataColumn("AssessmentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentType);
                this.columnAssessmentTypeID.AllowDBNull = false;
                this.columnAssessmentType.AllowDBNull = false;
                this.columnAssessmentType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public List_AssessmentTypeDataTableRow NewList_AssessmentTypeDataTableRow() {
                return ((List_AssessmentTypeDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new List_AssessmentTypeDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(List_AssessmentTypeDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.List_AssessmentTypeDataTableRowChanged != null)) {
                    this.List_AssessmentTypeDataTableRowChanged(this, new List_AssessmentTypeDataTableRowChangeEvent(((List_AssessmentTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.List_AssessmentTypeDataTableRowChanging != null)) {
                    this.List_AssessmentTypeDataTableRowChanging(this, new List_AssessmentTypeDataTableRowChangeEvent(((List_AssessmentTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.List_AssessmentTypeDataTableRowDeleted != null)) {
                    this.List_AssessmentTypeDataTableRowDeleted(this, new List_AssessmentTypeDataTableRowChangeEvent(((List_AssessmentTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.List_AssessmentTypeDataTableRowDeleting != null)) {
                    this.List_AssessmentTypeDataTableRowDeleting(this, new List_AssessmentTypeDataTableRowChangeEvent(((List_AssessmentTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveList_AssessmentTypeDataTableRow(List_AssessmentTypeDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2200EditScheduleData ds = new F2200EditScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "List_AssessmentTypeDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f25050GetScheduleParcelDetailsTableDataTable : global::System.Data.TypedTableBase<f25050GetScheduleParcelDetailsTableRow> {
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnParcelRollYear;
            
            private global::System.Data.DataColumn columnOwner_Name;
            
            private global::System.Data.DataColumn columnLegalNotes;
            
            private global::System.Data.DataColumn columnLoanNumber;
            
            private global::System.Data.DataColumn columnMortgageID;
            
            private global::System.Data.DataColumn columnMortgageName;
            
            private global::System.Data.DataColumn columnSitus;
            
            private global::System.Data.DataColumn columnMapNumber;
            
            private global::System.Data.DataColumn columnPostTypeID;
            
            private global::System.Data.DataColumn columnPostName;
            
            private global::System.Data.DataColumn columnSADistrictID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050GetScheduleParcelDetailsTableDataTable() {
                this.TableName = "f25050GetScheduleParcelDetailsTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050GetScheduleParcelDetailsTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f25050GetScheduleParcelDetailsTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelRollYearColumn {
                get {
                    return this.columnParcelRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Owner_NameColumn {
                get {
                    return this.columnOwner_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalNotesColumn {
                get {
                    return this.columnLegalNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoanNumberColumn {
                get {
                    return this.columnLoanNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageIDColumn {
                get {
                    return this.columnMortgageID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MortgageNameColumn {
                get {
                    return this.columnMortgageName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SitusColumn {
                get {
                    return this.columnSitus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapNumberColumn {
                get {
                    return this.columnMapNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostTypeIDColumn {
                get {
                    return this.columnPostTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostNameColumn {
                get {
                    return this.columnPostName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SADistrictIDColumn {
                get {
                    return this.columnSADistrictID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050GetScheduleParcelDetailsTableRow this[int index] {
                get {
                    return ((f25050GetScheduleParcelDetailsTableRow)(this.Rows[index]));
                }
            }
            
            public event f25050GetScheduleParcelDetailsTableRowChangeEventHandler f25050GetScheduleParcelDetailsTableRowChanging;
            
            public event f25050GetScheduleParcelDetailsTableRowChangeEventHandler f25050GetScheduleParcelDetailsTableRowChanged;
            
            public event f25050GetScheduleParcelDetailsTableRowChangeEventHandler f25050GetScheduleParcelDetailsTableRowDeleting;
            
            public event f25050GetScheduleParcelDetailsTableRowChangeEventHandler f25050GetScheduleParcelDetailsTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf25050GetScheduleParcelDetailsTableRow(f25050GetScheduleParcelDetailsTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050GetScheduleParcelDetailsTableRow Addf25050GetScheduleParcelDetailsTableRow(string ParcelNumber, int OwnerID, short ParcelRollYear, string Owner_Name, string LegalNotes, int LoanNumber, string MortgageName, string Situs, string MapNumber, byte PostTypeID, string PostName) {
                f25050GetScheduleParcelDetailsTableRow rowf25050GetScheduleParcelDetailsTableRow = ((f25050GetScheduleParcelDetailsTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ParcelNumber,
                        null,
                        OwnerID,
                        ParcelRollYear,
                        Owner_Name,
                        LegalNotes,
                        LoanNumber,
                        null,
                        MortgageName,
                        Situs,
                        MapNumber,
                        PostTypeID,
                        PostName,
                        null};
                rowf25050GetScheduleParcelDetailsTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf25050GetScheduleParcelDetailsTableRow);
                return rowf25050GetScheduleParcelDetailsTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f25050GetScheduleParcelDetailsTableDataTable cln = ((f25050GetScheduleParcelDetailsTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f25050GetScheduleParcelDetailsTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnParcelRollYear = base.Columns["ParcelRollYear"];
                this.columnOwner_Name = base.Columns["Owner_Name"];
                this.columnLegalNotes = base.Columns["LegalNotes"];
                this.columnLoanNumber = base.Columns["LoanNumber"];
                this.columnMortgageID = base.Columns["MortgageID"];
                this.columnMortgageName = base.Columns["MortgageName"];
                this.columnSitus = base.Columns["Situs"];
                this.columnMapNumber = base.Columns["MapNumber"];
                this.columnPostTypeID = base.Columns["PostTypeID"];
                this.columnPostName = base.Columns["PostName"];
                this.columnSADistrictID = base.Columns["SADistrictID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnParcelRollYear = new global::System.Data.DataColumn("ParcelRollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelRollYear);
                this.columnOwner_Name = new global::System.Data.DataColumn("Owner_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwner_Name);
                this.columnLegalNotes = new global::System.Data.DataColumn("LegalNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegalNotes);
                this.columnLoanNumber = new global::System.Data.DataColumn("LoanNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoanNumber);
                this.columnMortgageID = new global::System.Data.DataColumn("MortgageID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageID);
                this.columnMortgageName = new global::System.Data.DataColumn("MortgageName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMortgageName);
                this.columnSitus = new global::System.Data.DataColumn("Situs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSitus);
                this.columnMapNumber = new global::System.Data.DataColumn("MapNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapNumber);
                this.columnPostTypeID = new global::System.Data.DataColumn("PostTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostTypeID);
                this.columnPostName = new global::System.Data.DataColumn("PostName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostName);
                this.columnSADistrictID = new global::System.Data.DataColumn("SADistrictID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSADistrictID);
                this.columnParcelNumber.AllowDBNull = false;
                this.columnParcelNumber.MaxLength = 50;
                this.columnParcelID.AutoIncrement = true;
                this.columnParcelID.AllowDBNull = false;
                this.columnParcelID.ReadOnly = true;
                this.columnOwner_Name.ReadOnly = true;
                this.columnOwner_Name.MaxLength = 102;
                this.columnLegalNotes.ReadOnly = true;
                this.columnLegalNotes.MaxLength = 5000;
                this.columnMortgageID.AutoIncrement = true;
                this.columnMortgageID.ReadOnly = true;
                this.columnMortgageName.MaxLength = 50;
                this.columnSitus.ReadOnly = true;
                this.columnSitus.MaxLength = 400;
                this.columnMapNumber.MaxLength = 50;
                this.columnPostName.MaxLength = 50;
                this.columnSADistrictID.AutoIncrement = true;
                this.columnSADistrictID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050GetScheduleParcelDetailsTableRow Newf25050GetScheduleParcelDetailsTableRow() {
                return ((f25050GetScheduleParcelDetailsTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f25050GetScheduleParcelDetailsTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f25050GetScheduleParcelDetailsTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f25050GetScheduleParcelDetailsTableRowChanged != null)) {
                    this.f25050GetScheduleParcelDetailsTableRowChanged(this, new f25050GetScheduleParcelDetailsTableRowChangeEvent(((f25050GetScheduleParcelDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f25050GetScheduleParcelDetailsTableRowChanging != null)) {
                    this.f25050GetScheduleParcelDetailsTableRowChanging(this, new f25050GetScheduleParcelDetailsTableRowChangeEvent(((f25050GetScheduleParcelDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f25050GetScheduleParcelDetailsTableRowDeleted != null)) {
                    this.f25050GetScheduleParcelDetailsTableRowDeleted(this, new f25050GetScheduleParcelDetailsTableRowChangeEvent(((f25050GetScheduleParcelDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f25050GetScheduleParcelDetailsTableRowDeleting != null)) {
                    this.f25050GetScheduleParcelDetailsTableRowDeleting(this, new f25050GetScheduleParcelDetailsTableRowChangeEvent(((f25050GetScheduleParcelDetailsTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef25050GetScheduleParcelDetailsTableRow(f25050GetScheduleParcelDetailsTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2200EditScheduleData ds = new F2200EditScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f25050GetScheduleParcelDetailsTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListOutputValueDataTable : global::System.Data.TypedTableBase<ListOutputValueRow> {
            
            private global::System.Data.DataColumn columnPrimaryKeyID;
            
            private global::System.Data.DataColumn columnIsError;
            
            private global::System.Data.DataColumn columnMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOutputValueDataTable() {
                this.TableName = "ListOutputValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOutputValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListOutputValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrimaryKeyIDColumn {
                get {
                    return this.columnPrimaryKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsErrorColumn {
                get {
                    return this.columnIsError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageColumn {
                get {
                    return this.columnMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOutputValueRow this[int index] {
                get {
                    return ((ListOutputValueRow)(this.Rows[index]));
                }
            }
            
            public event ListOutputValueRowChangeEventHandler ListOutputValueRowChanging;
            
            public event ListOutputValueRowChangeEventHandler ListOutputValueRowChanged;
            
            public event ListOutputValueRowChangeEventHandler ListOutputValueRowDeleting;
            
            public event ListOutputValueRowChangeEventHandler ListOutputValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListOutputValueRow(ListOutputValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOutputValueRow AddListOutputValueRow(int PrimaryKeyID, bool IsError, string Message) {
                ListOutputValueRow rowListOutputValueRow = ((ListOutputValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PrimaryKeyID,
                        IsError,
                        Message};
                rowListOutputValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListOutputValueRow);
                return rowListOutputValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListOutputValueDataTable cln = ((ListOutputValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListOutputValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPrimaryKeyID = base.Columns["PrimaryKeyID"];
                this.columnIsError = base.Columns["IsError"];
                this.columnMessage = base.Columns["Message"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPrimaryKeyID = new global::System.Data.DataColumn("PrimaryKeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrimaryKeyID);
                this.columnIsError = new global::System.Data.DataColumn("IsError", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsError);
                this.columnMessage = new global::System.Data.DataColumn("Message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOutputValueRow NewListOutputValueRow() {
                return ((ListOutputValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListOutputValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListOutputValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListOutputValueRowChanged != null)) {
                    this.ListOutputValueRowChanged(this, new ListOutputValueRowChangeEvent(((ListOutputValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListOutputValueRowChanging != null)) {
                    this.ListOutputValueRowChanging(this, new ListOutputValueRowChangeEvent(((ListOutputValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListOutputValueRowDeleted != null)) {
                    this.ListOutputValueRowDeleted(this, new ListOutputValueRowChangeEvent(((ListOutputValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListOutputValueRowDeleting != null)) {
                    this.ListOutputValueRowDeleting(this, new ListOutputValueRowChangeEvent(((ListOutputValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListOutputValueRow(ListOutputValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2200EditScheduleData ds = new F2200EditScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListOutputValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListInputVAlueDataTable : global::System.Data.TypedTableBase<ListInputVAlueRow> {
            
            private global::System.Data.DataColumn columnKey;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnDataType;
            
            private global::System.Data.DataColumn columnMaxSize;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueDataTable() {
                this.TableName = "ListInputVAlue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInputVAlueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListInputVAlueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyColumn {
                get {
                    return this.columnKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataTypeColumn {
                get {
                    return this.columnDataType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxSizeColumn {
                get {
                    return this.columnMaxSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRow this[int index] {
                get {
                    return ((ListInputVAlueRow)(this.Rows[index]));
                }
            }
            
            public event ListInputVAlueRowChangeEventHandler ListInputVAlueRowChanging;
            
            public event ListInputVAlueRowChangeEventHandler ListInputVAlueRowChanged;
            
            public event ListInputVAlueRowChangeEventHandler ListInputVAlueRowDeleting;
            
            public event ListInputVAlueRowChangeEventHandler ListInputVAlueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListInputVAlueRow(ListInputVAlueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRow AddListInputVAlueRow(string Key, string Value, string DataType, long MaxSize) {
                ListInputVAlueRow rowListInputVAlueRow = ((ListInputVAlueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Key,
                        Value,
                        DataType,
                        MaxSize};
                rowListInputVAlueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListInputVAlueRow);
                return rowListInputVAlueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListInputVAlueDataTable cln = ((ListInputVAlueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListInputVAlueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKey = base.Columns["Key"];
                this.columnValue = base.Columns["Value"];
                this.columnDataType = base.Columns["DataType"];
                this.columnMaxSize = base.Columns["MaxSize"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKey = new global::System.Data.DataColumn("Key", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKey);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnDataType = new global::System.Data.DataColumn("DataType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataType);
                this.columnMaxSize = new global::System.Data.DataColumn("MaxSize", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxSize);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRow NewListInputVAlueRow() {
                return ((ListInputVAlueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListInputVAlueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListInputVAlueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListInputVAlueRowChanged != null)) {
                    this.ListInputVAlueRowChanged(this, new ListInputVAlueRowChangeEvent(((ListInputVAlueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListInputVAlueRowChanging != null)) {
                    this.ListInputVAlueRowChanging(this, new ListInputVAlueRowChangeEvent(((ListInputVAlueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListInputVAlueRowDeleted != null)) {
                    this.ListInputVAlueRowDeleted(this, new ListInputVAlueRowChangeEvent(((ListInputVAlueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListInputVAlueRowDeleting != null)) {
                    this.ListInputVAlueRowDeleting(this, new ListInputVAlueRowChangeEvent(((ListInputVAlueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListInputVAlueRow(ListInputVAlueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2200EditScheduleData ds = new F2200EditScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListInputVAlueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f2200_GetFarmExemptAmountDataTableDataTable : global::System.Data.TypedTableBase<f2200_GetFarmExemptAmountDataTableRow> {
            
            private global::System.Data.DataColumn columnFarmExemptAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200_GetFarmExemptAmountDataTableDataTable() {
                this.TableName = "f2200_GetFarmExemptAmountDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f2200_GetFarmExemptAmountDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f2200_GetFarmExemptAmountDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FarmExemptAmountColumn {
                get {
                    return this.columnFarmExemptAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200_GetFarmExemptAmountDataTableRow this[int index] {
                get {
                    return ((f2200_GetFarmExemptAmountDataTableRow)(this.Rows[index]));
                }
            }
            
            public event f2200_GetFarmExemptAmountDataTableRowChangeEventHandler f2200_GetFarmExemptAmountDataTableRowChanging;
            
            public event f2200_GetFarmExemptAmountDataTableRowChangeEventHandler f2200_GetFarmExemptAmountDataTableRowChanged;
            
            public event f2200_GetFarmExemptAmountDataTableRowChangeEventHandler f2200_GetFarmExemptAmountDataTableRowDeleting;
            
            public event f2200_GetFarmExemptAmountDataTableRowChangeEventHandler f2200_GetFarmExemptAmountDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf2200_GetFarmExemptAmountDataTableRow(f2200_GetFarmExemptAmountDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200_GetFarmExemptAmountDataTableRow Addf2200_GetFarmExemptAmountDataTableRow(string FarmExemptAmount) {
                f2200_GetFarmExemptAmountDataTableRow rowf2200_GetFarmExemptAmountDataTableRow = ((f2200_GetFarmExemptAmountDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FarmExemptAmount};
                rowf2200_GetFarmExemptAmountDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf2200_GetFarmExemptAmountDataTableRow);
                return rowf2200_GetFarmExemptAmountDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f2200_GetFarmExemptAmountDataTableDataTable cln = ((f2200_GetFarmExemptAmountDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f2200_GetFarmExemptAmountDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFarmExemptAmount = base.Columns["FarmExemptAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFarmExemptAmount = new global::System.Data.DataColumn("FarmExemptAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmExemptAmount);
                this.columnFarmExemptAmount.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200_GetFarmExemptAmountDataTableRow Newf2200_GetFarmExemptAmountDataTableRow() {
                return ((f2200_GetFarmExemptAmountDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f2200_GetFarmExemptAmountDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f2200_GetFarmExemptAmountDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f2200_GetFarmExemptAmountDataTableRowChanged != null)) {
                    this.f2200_GetFarmExemptAmountDataTableRowChanged(this, new f2200_GetFarmExemptAmountDataTableRowChangeEvent(((f2200_GetFarmExemptAmountDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f2200_GetFarmExemptAmountDataTableRowChanging != null)) {
                    this.f2200_GetFarmExemptAmountDataTableRowChanging(this, new f2200_GetFarmExemptAmountDataTableRowChangeEvent(((f2200_GetFarmExemptAmountDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f2200_GetFarmExemptAmountDataTableRowDeleted != null)) {
                    this.f2200_GetFarmExemptAmountDataTableRowDeleted(this, new f2200_GetFarmExemptAmountDataTableRowChangeEvent(((f2200_GetFarmExemptAmountDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f2200_GetFarmExemptAmountDataTableRowDeleting != null)) {
                    this.f2200_GetFarmExemptAmountDataTableRowDeleting(this, new f2200_GetFarmExemptAmountDataTableRowChangeEvent(((f2200_GetFarmExemptAmountDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef2200_GetFarmExemptAmountDataTableRow(f2200_GetFarmExemptAmountDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2200EditScheduleData ds = new F2200EditScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f2200_GetFarmExemptAmountDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Get259ExemptionAmountDataTable : global::System.Data.TypedTableBase<Get259ExemptionAmountRow> {
            
            private global::System.Data.DataColumn columnExempt259Amount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get259ExemptionAmountDataTable() {
                this.TableName = "Get259ExemptionAmount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get259ExemptionAmountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Get259ExemptionAmountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Exempt259AmountColumn {
                get {
                    return this.columnExempt259Amount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get259ExemptionAmountRow this[int index] {
                get {
                    return ((Get259ExemptionAmountRow)(this.Rows[index]));
                }
            }
            
            public event Get259ExemptionAmountRowChangeEventHandler Get259ExemptionAmountRowChanging;
            
            public event Get259ExemptionAmountRowChangeEventHandler Get259ExemptionAmountRowChanged;
            
            public event Get259ExemptionAmountRowChangeEventHandler Get259ExemptionAmountRowDeleting;
            
            public event Get259ExemptionAmountRowChangeEventHandler Get259ExemptionAmountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGet259ExemptionAmountRow(Get259ExemptionAmountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get259ExemptionAmountRow AddGet259ExemptionAmountRow(string Exempt259Amount) {
                Get259ExemptionAmountRow rowGet259ExemptionAmountRow = ((Get259ExemptionAmountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Exempt259Amount};
                rowGet259ExemptionAmountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGet259ExemptionAmountRow);
                return rowGet259ExemptionAmountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Get259ExemptionAmountDataTable cln = ((Get259ExemptionAmountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Get259ExemptionAmountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExempt259Amount = base.Columns["Exempt259Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExempt259Amount = new global::System.Data.DataColumn("Exempt259Amount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExempt259Amount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get259ExemptionAmountRow NewGet259ExemptionAmountRow() {
                return ((Get259ExemptionAmountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Get259ExemptionAmountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Get259ExemptionAmountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Get259ExemptionAmountRowChanged != null)) {
                    this.Get259ExemptionAmountRowChanged(this, new Get259ExemptionAmountRowChangeEvent(((Get259ExemptionAmountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Get259ExemptionAmountRowChanging != null)) {
                    this.Get259ExemptionAmountRowChanging(this, new Get259ExemptionAmountRowChangeEvent(((Get259ExemptionAmountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Get259ExemptionAmountRowDeleted != null)) {
                    this.Get259ExemptionAmountRowDeleted(this, new Get259ExemptionAmountRowChangeEvent(((Get259ExemptionAmountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Get259ExemptionAmountRowDeleting != null)) {
                    this.Get259ExemptionAmountRowDeleting(this, new Get259ExemptionAmountRowChangeEvent(((Get259ExemptionAmountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGet259ExemptionAmountRow(Get259ExemptionAmountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2200EditScheduleData ds = new F2200EditScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Get259ExemptionAmountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f25050_pcget_ConfiguredstateDataTable : global::System.Data.TypedTableBase<f25050_pcget_ConfiguredstateRow> {
            
            private global::System.Data.DataColumn columnConfiguredState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_pcget_ConfiguredstateDataTable() {
                this.TableName = "f25050_pcget_Configuredstate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050_pcget_ConfiguredstateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f25050_pcget_ConfiguredstateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfiguredStateColumn {
                get {
                    return this.columnConfiguredState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_pcget_ConfiguredstateRow this[int index] {
                get {
                    return ((f25050_pcget_ConfiguredstateRow)(this.Rows[index]));
                }
            }
            
            public event f25050_pcget_ConfiguredstateRowChangeEventHandler f25050_pcget_ConfiguredstateRowChanging;
            
            public event f25050_pcget_ConfiguredstateRowChangeEventHandler f25050_pcget_ConfiguredstateRowChanged;
            
            public event f25050_pcget_ConfiguredstateRowChangeEventHandler f25050_pcget_ConfiguredstateRowDeleting;
            
            public event f25050_pcget_ConfiguredstateRowChangeEventHandler f25050_pcget_ConfiguredstateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf25050_pcget_ConfiguredstateRow(f25050_pcget_ConfiguredstateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_pcget_ConfiguredstateRow Addf25050_pcget_ConfiguredstateRow(string ConfiguredState) {
                f25050_pcget_ConfiguredstateRow rowf25050_pcget_ConfiguredstateRow = ((f25050_pcget_ConfiguredstateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConfiguredState};
                rowf25050_pcget_ConfiguredstateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf25050_pcget_ConfiguredstateRow);
                return rowf25050_pcget_ConfiguredstateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f25050_pcget_ConfiguredstateDataTable cln = ((f25050_pcget_ConfiguredstateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f25050_pcget_ConfiguredstateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConfiguredState = base.Columns["ConfiguredState"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConfiguredState = new global::System.Data.DataColumn("ConfiguredState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfiguredState);
                this.columnConfiguredState.ReadOnly = true;
                this.columnConfiguredState.Caption = "Column1";
                this.columnConfiguredState.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_pcget_ConfiguredstateRow Newf25050_pcget_ConfiguredstateRow() {
                return ((f25050_pcget_ConfiguredstateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f25050_pcget_ConfiguredstateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f25050_pcget_ConfiguredstateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f25050_pcget_ConfiguredstateRowChanged != null)) {
                    this.f25050_pcget_ConfiguredstateRowChanged(this, new f25050_pcget_ConfiguredstateRowChangeEvent(((f25050_pcget_ConfiguredstateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f25050_pcget_ConfiguredstateRowChanging != null)) {
                    this.f25050_pcget_ConfiguredstateRowChanging(this, new f25050_pcget_ConfiguredstateRowChangeEvent(((f25050_pcget_ConfiguredstateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f25050_pcget_ConfiguredstateRowDeleted != null)) {
                    this.f25050_pcget_ConfiguredstateRowDeleted(this, new f25050_pcget_ConfiguredstateRowChangeEvent(((f25050_pcget_ConfiguredstateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f25050_pcget_ConfiguredstateRowDeleting != null)) {
                    this.f25050_pcget_ConfiguredstateRowDeleting(this, new f25050_pcget_ConfiguredstateRowChangeEvent(((f25050_pcget_ConfiguredstateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef25050_pcget_ConfiguredstateRow(f25050_pcget_ConfiguredstateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2200EditScheduleData ds = new F2200EditScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f25050_pcget_ConfiguredstateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f2200Get259ExemptionAmountDataTable : global::System.Data.TypedTableBase<f2200Get259ExemptionAmountRow> {
            
            private global::System.Data.DataColumn columnO1Value;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200Get259ExemptionAmountDataTable() {
                this.TableName = "f2200Get259ExemptionAmount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f2200Get259ExemptionAmountDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f2200Get259ExemptionAmountDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn O1ValueColumn {
                get {
                    return this.columnO1Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200Get259ExemptionAmountRow this[int index] {
                get {
                    return ((f2200Get259ExemptionAmountRow)(this.Rows[index]));
                }
            }
            
            public event f2200Get259ExemptionAmountRowChangeEventHandler f2200Get259ExemptionAmountRowChanging;
            
            public event f2200Get259ExemptionAmountRowChangeEventHandler f2200Get259ExemptionAmountRowChanged;
            
            public event f2200Get259ExemptionAmountRowChangeEventHandler f2200Get259ExemptionAmountRowDeleting;
            
            public event f2200Get259ExemptionAmountRowChangeEventHandler f2200Get259ExemptionAmountRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf2200Get259ExemptionAmountRow(f2200Get259ExemptionAmountRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200Get259ExemptionAmountRow Addf2200Get259ExemptionAmountRow(string O1Value) {
                f2200Get259ExemptionAmountRow rowf2200Get259ExemptionAmountRow = ((f2200Get259ExemptionAmountRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        O1Value};
                rowf2200Get259ExemptionAmountRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf2200Get259ExemptionAmountRow);
                return rowf2200Get259ExemptionAmountRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f2200Get259ExemptionAmountDataTable cln = ((f2200Get259ExemptionAmountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f2200Get259ExemptionAmountDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnO1Value = base.Columns["O1Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnO1Value = new global::System.Data.DataColumn("O1Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnO1Value);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200Get259ExemptionAmountRow Newf2200Get259ExemptionAmountRow() {
                return ((f2200Get259ExemptionAmountRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f2200Get259ExemptionAmountRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f2200Get259ExemptionAmountRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f2200Get259ExemptionAmountRowChanged != null)) {
                    this.f2200Get259ExemptionAmountRowChanged(this, new f2200Get259ExemptionAmountRowChangeEvent(((f2200Get259ExemptionAmountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f2200Get259ExemptionAmountRowChanging != null)) {
                    this.f2200Get259ExemptionAmountRowChanging(this, new f2200Get259ExemptionAmountRowChangeEvent(((f2200Get259ExemptionAmountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f2200Get259ExemptionAmountRowDeleted != null)) {
                    this.f2200Get259ExemptionAmountRowDeleted(this, new f2200Get259ExemptionAmountRowChangeEvent(((f2200Get259ExemptionAmountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f2200Get259ExemptionAmountRowDeleting != null)) {
                    this.f2200Get259ExemptionAmountRowDeleting(this, new f2200Get259ExemptionAmountRowChangeEvent(((f2200Get259ExemptionAmountRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef2200Get259ExemptionAmountRow(f2200Get259ExemptionAmountRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F2200EditScheduleData ds = new F2200EditScheduleData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f2200Get259ExemptionAmountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f2200ListScheduleDataTableRow : global::System.Data.DataRow {
            
            private f2200ListScheduleDataTableDataTable tablef2200ListScheduleDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f2200ListScheduleDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef2200ListScheduleDataTable = ((f2200ListScheduleDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScheduleID {
                get {
                    return ((int)(this[this.tablef2200ListScheduleDataTable.ScheduleIDColumn]));
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.ScheduleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScheduleNumber {
                get {
                    return ((string)(this[this.tablef2200ListScheduleDataTable.ScheduleNumberColumn]));
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.ScheduleNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RollYear {
                get {
                    return ((string)(this[this.tablef2200ListScheduleDataTable.RollYearColumn]));
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilingType {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.FilingTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilingType\' in table \'f2200ListScheduleDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.FilingTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistrictID {
                get {
                    try {
                        return ((int)(this[this.tablef2200ListScheduleDataTable.DistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistrictID\' in table \'f2200ListScheduleDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.DistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tablef2200ListScheduleDataTable.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PropertyType {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.PropertyTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropertyType\' in table \'f2200ListScheduleDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.PropertyTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuisnessName {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.BuisnessNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuisnessName\' in table \'f2200ListScheduleDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.BuisnessNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsReview {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.IsReviewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsReview\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.IsReviewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilingDate {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.FilingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilingDate\' in table \'f2200ListScheduleDataTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.FilingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O1Value {
                get {
                    try {
                        return ((decimal)(this[this.tablef2200ListScheduleDataTable.O1ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O1Value\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.O1ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal O2Value {
                get {
                    try {
                        return ((decimal)(this[this.tablef2200ListScheduleDataTable.O2ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O2Value\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.O2ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PenaltyPercent {
                get {
                    try {
                        return ((decimal)(this[this.tablef2200ListScheduleDataTable.PenaltyPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PenaltyPercent\' in table \'f2200ListScheduleDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.PenaltyPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PenaltyAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablef2200ListScheduleDataTable.PenaltyAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PenaltyAmount\' in table \'f2200ListScheduleDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.PenaltyAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StreetAddress {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.StreetAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StreetAddress\' in table \'f2200ListScheduleDataTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.StreetAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScheduleStateCode {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.ScheduleStateCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduleStateCode\' in table \'f2200ListScheduleDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.ScheduleStateCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAICS {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.NAICSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAICS\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.NAICSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'f2200ListScheduleDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'f2200ListScheduleDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tablef2200ListScheduleDataTable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrimaryOwner {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.PrimaryOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryOwner\' in table \'f2200ListScheduleDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.PrimaryOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelStateCode {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.ParcelStateCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelStateCode\' in table \'f2200ListScheduleDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.ParcelStateCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapNumber {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MapNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapNumber\' in table \'f2200ListScheduleDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MapNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AssessmentTypeID {
                get {
                    try {
                        return ((short)(this[this.tablef2200ListScheduleDataTable.AssessmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentTypeID\' in table \'f2200ListScheduleDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.AssessmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessmentType {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.AssessmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentType\' in table \'f2200ListScheduleDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.AssessmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NewConstruction {
                get {
                    try {
                        return ((decimal)(this[this.tablef2200ListScheduleDataTable.NewConstructionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewConstruction\' in table \'f2200ListScheduleDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.NewConstructionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScheduleTypeID {
                get {
                    try {
                        return ((int)(this[this.tablef2200ListScheduleDataTable.ScheduleTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduleTypeID\' in table \'f2200ListScheduleDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.ScheduleTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScheduleType {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.ScheduleTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScheduleType\' in table \'f2200ListScheduleDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.ScheduleTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsHeadOfHousehold {
                get {
                    try {
                        return ((short)(this[this.tablef2200ListScheduleDataTable.IsHeadOfHouseholdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsHeadOfHousehold\' in table \'f2200ListScheduleDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.IsHeadOfHouseholdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsExempt {
                get {
                    try {
                        return ((short)(this[this.tablef2200ListScheduleDataTable.IsExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExempt\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID1 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID1\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID2 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID2\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID3 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID3\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID4 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MID4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID4\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MID4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MID5 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MID5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID5\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MID5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIDLabel1 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MIDLabel1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIDLabel1\' in table \'f2200ListScheduleDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MIDLabel1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIDLabel2 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MIDLabel2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIDLabel2\' in table \'f2200ListScheduleDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MIDLabel2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIDLabel3 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MIDLabel3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIDLabel3\' in table \'f2200ListScheduleDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MIDLabel3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIDLabel4 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MIDLabel4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIDLabel4\' in table \'f2200ListScheduleDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MIDLabel4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIDLabel5 {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.MIDLabel5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIDLabel5\' in table \'f2200ListScheduleDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.MIDLabel5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfiguredState {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.ConfiguredStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfiguredState\' in table \'f2200ListScheduleDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.ConfiguredStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IsFarm {
                get {
                    try {
                        return ((short)(this[this.tablef2200ListScheduleDataTable.IsFarmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFarm\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.IsFarmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'f2200ListScheduleDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserWarning {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.UserWarningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserWarning\' in table \'f2200ListScheduleDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.UserWarningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFarmExempt {
                get {
                    try {
                        return ((bool)(this[this.tablef2200ListScheduleDataTable.IsFarmExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFarmExempt\' in table \'f2200ListScheduleDataTable\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.IsFarmExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short FarmExemptYear {
                get {
                    try {
                        return ((short)(this[this.tablef2200ListScheduleDataTable.FarmExemptYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FarmExemptYear\' in table \'f2200ListScheduleDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.FarmExemptYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FarmExemptAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablef2200ListScheduleDataTable.FarmExemptAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FarmExemptAmount\' in table \'f2200ListScheduleDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.FarmExemptAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonalPropertyCode {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.PersonalPropertyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalPropertyCode\' in table \'f2200ListScheduleDataTable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.PersonalPropertyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonalPropertyCodeDescription {
                get {
                    try {
                        return ((string)(this[this.tablef2200ListScheduleDataTable.PersonalPropertyCodeDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalPropertyCodeDescription\' in table \'f2200ListSchedul" +
                                "eDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.PersonalPropertyCodeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LockScheduleBy {
                get {
                    try {
                        return ((int)(this[this.tablef2200ListScheduleDataTable.LockScheduleByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LockScheduleBy\' in table \'f2200ListScheduleDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.LockScheduleByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Is259Exempt {
                get {
                    try {
                        return ((short)(this[this.tablef2200ListScheduleDataTable.Is259ExemptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is259Exempt\' in table \'f2200ListScheduleDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.Is259ExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Exempt259Amount {
                get {
                    try {
                        return ((decimal)(this[this.tablef2200ListScheduleDataTable.Exempt259AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exempt259Amount\' in table \'f2200ListScheduleDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablef2200ListScheduleDataTable.Exempt259AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilingTypeNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.FilingTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilingTypeNull() {
                this[this.tablef2200ListScheduleDataTable.FilingTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictIDNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.DistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictIDNull() {
                this[this.tablef2200ListScheduleDataTable.DistrictIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tablef2200ListScheduleDataTable.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyTypeNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.PropertyTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyTypeNull() {
                this[this.tablef2200ListScheduleDataTable.PropertyTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuisnessNameNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.BuisnessNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuisnessNameNull() {
                this[this.tablef2200ListScheduleDataTable.BuisnessNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsReviewNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.IsReviewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsReviewNull() {
                this[this.tablef2200ListScheduleDataTable.IsReviewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilingDateNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.FilingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilingDateNull() {
                this[this.tablef2200ListScheduleDataTable.FilingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO1ValueNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.O1ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO1ValueNull() {
                this[this.tablef2200ListScheduleDataTable.O1ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO2ValueNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.O2ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO2ValueNull() {
                this[this.tablef2200ListScheduleDataTable.O2ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPenaltyPercentNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.PenaltyPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPenaltyPercentNull() {
                this[this.tablef2200ListScheduleDataTable.PenaltyPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPenaltyAmountNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.PenaltyAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPenaltyAmountNull() {
                this[this.tablef2200ListScheduleDataTable.PenaltyAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetAddressNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.StreetAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetAddressNull() {
                this[this.tablef2200ListScheduleDataTable.StreetAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduleStateCodeNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.ScheduleStateCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduleStateCodeNull() {
                this[this.tablef2200ListScheduleDataTable.ScheduleStateCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAICSNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.NAICSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAICSNull() {
                this[this.tablef2200ListScheduleDataTable.NAICSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablef2200ListScheduleDataTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tablef2200ListScheduleDataTable.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tablef2200ListScheduleDataTable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryOwnerNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.PrimaryOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryOwnerNull() {
                this[this.tablef2200ListScheduleDataTable.PrimaryOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tablef2200ListScheduleDataTable.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelStateCodeNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.ParcelStateCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelStateCodeNull() {
                this[this.tablef2200ListScheduleDataTable.ParcelStateCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapNumberNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MapNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapNumberNull() {
                this[this.tablef2200ListScheduleDataTable.MapNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tablef2200ListScheduleDataTable.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeIDNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.AssessmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeIDNull() {
                this[this.tablef2200ListScheduleDataTable.AssessmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentTypeNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.AssessmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentTypeNull() {
                this[this.tablef2200ListScheduleDataTable.AssessmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewConstructionNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.NewConstructionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewConstructionNull() {
                this[this.tablef2200ListScheduleDataTable.NewConstructionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduleTypeIDNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.ScheduleTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduleTypeIDNull() {
                this[this.tablef2200ListScheduleDataTable.ScheduleTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduleTypeNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.ScheduleTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduleTypeNull() {
                this[this.tablef2200ListScheduleDataTable.ScheduleTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsHeadOfHouseholdNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.IsHeadOfHouseholdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsHeadOfHouseholdNull() {
                this[this.tablef2200ListScheduleDataTable.IsHeadOfHouseholdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExemptNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.IsExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExemptNull() {
                this[this.tablef2200ListScheduleDataTable.IsExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID1Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID1Null() {
                this[this.tablef2200ListScheduleDataTable.MID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID2Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID2Null() {
                this[this.tablef2200ListScheduleDataTable.MID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID3Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID3Null() {
                this[this.tablef2200ListScheduleDataTable.MID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID4Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MID4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID4Null() {
                this[this.tablef2200ListScheduleDataTable.MID4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMID5Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MID5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMID5Null() {
                this[this.tablef2200ListScheduleDataTable.MID5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIDLabel1Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MIDLabel1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIDLabel1Null() {
                this[this.tablef2200ListScheduleDataTable.MIDLabel1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIDLabel2Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MIDLabel2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIDLabel2Null() {
                this[this.tablef2200ListScheduleDataTable.MIDLabel2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIDLabel3Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MIDLabel3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIDLabel3Null() {
                this[this.tablef2200ListScheduleDataTable.MIDLabel3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIDLabel4Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MIDLabel4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIDLabel4Null() {
                this[this.tablef2200ListScheduleDataTable.MIDLabel4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIDLabel5Null() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.MIDLabel5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIDLabel5Null() {
                this[this.tablef2200ListScheduleDataTable.MIDLabel5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfiguredStateNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.ConfiguredStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfiguredStateNull() {
                this[this.tablef2200ListScheduleDataTable.ConfiguredStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFarmNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.IsFarmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFarmNull() {
                this[this.tablef2200ListScheduleDataTable.IsFarmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tablef2200ListScheduleDataTable.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tablef2200ListScheduleDataTable.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserWarningNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.UserWarningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserWarningNull() {
                this[this.tablef2200ListScheduleDataTable.UserWarningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFarmExemptNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.IsFarmExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFarmExemptNull() {
                this[this.tablef2200ListScheduleDataTable.IsFarmExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFarmExemptYearNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.FarmExemptYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFarmExemptYearNull() {
                this[this.tablef2200ListScheduleDataTable.FarmExemptYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFarmExemptAmountNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.FarmExemptAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFarmExemptAmountNull() {
                this[this.tablef2200ListScheduleDataTable.FarmExemptAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalPropertyCodeNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.PersonalPropertyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalPropertyCodeNull() {
                this[this.tablef2200ListScheduleDataTable.PersonalPropertyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalPropertyCodeDescriptionNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.PersonalPropertyCodeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalPropertyCodeDescriptionNull() {
                this[this.tablef2200ListScheduleDataTable.PersonalPropertyCodeDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLockScheduleByNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.LockScheduleByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLockScheduleByNull() {
                this[this.tablef2200ListScheduleDataTable.LockScheduleByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs259ExemptNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.Is259ExemptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs259ExemptNull() {
                this[this.tablef2200ListScheduleDataTable.Is259ExemptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt259AmountNull() {
                return this.IsNull(this.tablef2200ListScheduleDataTable.Exempt259AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExempt259AmountNull() {
                this[this.tablef2200ListScheduleDataTable.Exempt259AmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class List_AssessmentTypeDataTableRow : global::System.Data.DataRow {
            
            private List_AssessmentTypeDataTableDataTable tableList_AssessmentTypeDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal List_AssessmentTypeDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableList_AssessmentTypeDataTable = ((List_AssessmentTypeDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short AssessmentTypeID {
                get {
                    return ((short)(this[this.tableList_AssessmentTypeDataTable.AssessmentTypeIDColumn]));
                }
                set {
                    this[this.tableList_AssessmentTypeDataTable.AssessmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssessmentType {
                get {
                    return ((string)(this[this.tableList_AssessmentTypeDataTable.AssessmentTypeColumn]));
                }
                set {
                    this[this.tableList_AssessmentTypeDataTable.AssessmentTypeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f25050GetScheduleParcelDetailsTableRow : global::System.Data.DataRow {
            
            private f25050GetScheduleParcelDetailsTableDataTable tablef25050GetScheduleParcelDetailsTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050GetScheduleParcelDetailsTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef25050GetScheduleParcelDetailsTable = ((f25050GetScheduleParcelDetailsTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    return ((string)(this[this.tablef25050GetScheduleParcelDetailsTable.ParcelNumberColumn]));
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    return ((int)(this[this.tablef25050GetScheduleParcelDetailsTable.ParcelIDColumn]));
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tablef25050GetScheduleParcelDetailsTable.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'f25050GetScheduleParcelDetailsTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ParcelRollYear {
                get {
                    try {
                        return ((short)(this[this.tablef25050GetScheduleParcelDetailsTable.ParcelRollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelRollYear\' in table \'f25050GetScheduleParcelDetailsTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.ParcelRollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Owner_Name {
                get {
                    try {
                        return ((string)(this[this.tablef25050GetScheduleParcelDetailsTable.Owner_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Owner_Name\' in table \'f25050GetScheduleParcelDetailsTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.Owner_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LegalNotes {
                get {
                    try {
                        return ((string)(this[this.tablef25050GetScheduleParcelDetailsTable.LegalNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LegalNotes\' in table \'f25050GetScheduleParcelDetailsTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.LegalNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LoanNumber {
                get {
                    try {
                        return ((int)(this[this.tablef25050GetScheduleParcelDetailsTable.LoanNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoanNumber\' in table \'f25050GetScheduleParcelDetailsTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.LoanNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MortgageID {
                get {
                    try {
                        return ((int)(this[this.tablef25050GetScheduleParcelDetailsTable.MortgageIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageID\' in table \'f25050GetScheduleParcelDetailsTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.MortgageIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MortgageName {
                get {
                    try {
                        return ((string)(this[this.tablef25050GetScheduleParcelDetailsTable.MortgageNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MortgageName\' in table \'f25050GetScheduleParcelDetailsTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.MortgageNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Situs {
                get {
                    try {
                        return ((string)(this[this.tablef25050GetScheduleParcelDetailsTable.SitusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Situs\' in table \'f25050GetScheduleParcelDetailsTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.SitusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapNumber {
                get {
                    try {
                        return ((string)(this[this.tablef25050GetScheduleParcelDetailsTable.MapNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapNumber\' in table \'f25050GetScheduleParcelDetailsTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.MapNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PostTypeID {
                get {
                    try {
                        return ((byte)(this[this.tablef25050GetScheduleParcelDetailsTable.PostTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostTypeID\' in table \'f25050GetScheduleParcelDetailsTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.PostTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostName {
                get {
                    try {
                        return ((string)(this[this.tablef25050GetScheduleParcelDetailsTable.PostNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostName\' in table \'f25050GetScheduleParcelDetailsTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.PostNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SADistrictID {
                get {
                    try {
                        return ((int)(this[this.tablef25050GetScheduleParcelDetailsTable.SADistrictIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SADistrictID\' in table \'f25050GetScheduleParcelDetailsTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050GetScheduleParcelDetailsTable.SADistrictIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelRollYearNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.ParcelRollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelRollYearNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.ParcelRollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwner_NameNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.Owner_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwner_NameNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.Owner_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNotesNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.LegalNotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNotesNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.LegalNotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoanNumberNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.LoanNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoanNumberNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.LoanNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageIDNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.MortgageIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageIDNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.MortgageIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMortgageNameNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.MortgageNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMortgageNameNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.MortgageNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSitusNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.SitusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSitusNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.SitusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapNumberNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.MapNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapNumberNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.MapNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostTypeIDNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.PostTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostTypeIDNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.PostTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostNameNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.PostNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostNameNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.PostNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSADistrictIDNull() {
                return this.IsNull(this.tablef25050GetScheduleParcelDetailsTable.SADistrictIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSADistrictIDNull() {
                this[this.tablef25050GetScheduleParcelDetailsTable.SADistrictIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListOutputValueRow : global::System.Data.DataRow {
            
            private ListOutputValueDataTable tableListOutputValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOutputValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListOutputValue = ((ListOutputValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrimaryKeyID {
                get {
                    try {
                        return ((int)(this[this.tableListOutputValue.PrimaryKeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrimaryKeyID\' in table \'ListOutputValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOutputValue.PrimaryKeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsError {
                get {
                    try {
                        return ((bool)(this[this.tableListOutputValue.IsErrorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsError\' in table \'ListOutputValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOutputValue.IsErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message {
                get {
                    try {
                        return ((string)(this[this.tableListOutputValue.MessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Message\' in table \'ListOutputValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOutputValue.MessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryKeyIDNull() {
                return this.IsNull(this.tableListOutputValue.PrimaryKeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrimaryKeyIDNull() {
                this[this.tableListOutputValue.PrimaryKeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsErrorNull() {
                return this.IsNull(this.tableListOutputValue.IsErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsErrorNull() {
                this[this.tableListOutputValue.IsErrorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageNull() {
                return this.IsNull(this.tableListOutputValue.MessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageNull() {
                this[this.tableListOutputValue.MessageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListInputVAlueRow : global::System.Data.DataRow {
            
            private ListInputVAlueDataTable tableListInputVAlue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInputVAlueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListInputVAlue = ((ListInputVAlueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Key {
                get {
                    try {
                        return ((string)(this[this.tableListInputVAlue.KeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Key\' in table \'ListInputVAlue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInputVAlue.KeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableListInputVAlue.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'ListInputVAlue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInputVAlue.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataType {
                get {
                    try {
                        return ((string)(this[this.tableListInputVAlue.DataTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataType\' in table \'ListInputVAlue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInputVAlue.DataTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MaxSize {
                get {
                    try {
                        return ((long)(this[this.tableListInputVAlue.MaxSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxSize\' in table \'ListInputVAlue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInputVAlue.MaxSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyNull() {
                return this.IsNull(this.tableListInputVAlue.KeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyNull() {
                this[this.tableListInputVAlue.KeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableListInputVAlue.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableListInputVAlue.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataTypeNull() {
                return this.IsNull(this.tableListInputVAlue.DataTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataTypeNull() {
                this[this.tableListInputVAlue.DataTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxSizeNull() {
                return this.IsNull(this.tableListInputVAlue.MaxSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxSizeNull() {
                this[this.tableListInputVAlue.MaxSizeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f2200_GetFarmExemptAmountDataTableRow : global::System.Data.DataRow {
            
            private f2200_GetFarmExemptAmountDataTableDataTable tablef2200_GetFarmExemptAmountDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f2200_GetFarmExemptAmountDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef2200_GetFarmExemptAmountDataTable = ((f2200_GetFarmExemptAmountDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmExemptAmount {
                get {
                    try {
                        return ((string)(this[this.tablef2200_GetFarmExemptAmountDataTable.FarmExemptAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FarmExemptAmount\' in table \'f2200_GetFarmExemptAmountDataTa" +
                                "ble\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200_GetFarmExemptAmountDataTable.FarmExemptAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFarmExemptAmountNull() {
                return this.IsNull(this.tablef2200_GetFarmExemptAmountDataTable.FarmExemptAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFarmExemptAmountNull() {
                this[this.tablef2200_GetFarmExemptAmountDataTable.FarmExemptAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Get259ExemptionAmountRow : global::System.Data.DataRow {
            
            private Get259ExemptionAmountDataTable tableGet259ExemptionAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get259ExemptionAmountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGet259ExemptionAmount = ((Get259ExemptionAmountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exempt259Amount {
                get {
                    try {
                        return ((string)(this[this.tableGet259ExemptionAmount.Exempt259AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exempt259Amount\' in table \'Get259ExemptionAmount\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGet259ExemptionAmount.Exempt259AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt259AmountNull() {
                return this.IsNull(this.tableGet259ExemptionAmount.Exempt259AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExempt259AmountNull() {
                this[this.tableGet259ExemptionAmount.Exempt259AmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f25050_pcget_ConfiguredstateRow : global::System.Data.DataRow {
            
            private f25050_pcget_ConfiguredstateDataTable tablef25050_pcget_Configuredstate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f25050_pcget_ConfiguredstateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef25050_pcget_Configuredstate = ((f25050_pcget_ConfiguredstateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfiguredState {
                get {
                    try {
                        return ((string)(this[this.tablef25050_pcget_Configuredstate.ConfiguredStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfiguredState\' in table \'f25050_pcget_Configuredstate\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablef25050_pcget_Configuredstate.ConfiguredStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfiguredStateNull() {
                return this.IsNull(this.tablef25050_pcget_Configuredstate.ConfiguredStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfiguredStateNull() {
                this[this.tablef25050_pcget_Configuredstate.ConfiguredStateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f2200Get259ExemptionAmountRow : global::System.Data.DataRow {
            
            private f2200Get259ExemptionAmountDataTable tablef2200Get259ExemptionAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f2200Get259ExemptionAmountRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef2200Get259ExemptionAmount = ((f2200Get259ExemptionAmountDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string O1Value {
                get {
                    try {
                        return ((string)(this[this.tablef2200Get259ExemptionAmount.O1ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'O1Value\' in table \'f2200Get259ExemptionAmount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef2200Get259ExemptionAmount.O1ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsO1ValueNull() {
                return this.IsNull(this.tablef2200Get259ExemptionAmount.O1ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetO1ValueNull() {
                this[this.tablef2200Get259ExemptionAmount.O1ValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f2200ListScheduleDataTableRowChangeEvent : global::System.EventArgs {
            
            private f2200ListScheduleDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200ListScheduleDataTableRowChangeEvent(f2200ListScheduleDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200ListScheduleDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class List_AssessmentTypeDataTableRowChangeEvent : global::System.EventArgs {
            
            private List_AssessmentTypeDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public List_AssessmentTypeDataTableRowChangeEvent(List_AssessmentTypeDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public List_AssessmentTypeDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f25050GetScheduleParcelDetailsTableRowChangeEvent : global::System.EventArgs {
            
            private f25050GetScheduleParcelDetailsTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050GetScheduleParcelDetailsTableRowChangeEvent(f25050GetScheduleParcelDetailsTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050GetScheduleParcelDetailsTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListOutputValueRowChangeEvent : global::System.EventArgs {
            
            private ListOutputValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOutputValueRowChangeEvent(ListOutputValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOutputValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListInputVAlueRowChangeEvent : global::System.EventArgs {
            
            private ListInputVAlueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRowChangeEvent(ListInputVAlueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInputVAlueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f2200_GetFarmExemptAmountDataTableRowChangeEvent : global::System.EventArgs {
            
            private f2200_GetFarmExemptAmountDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200_GetFarmExemptAmountDataTableRowChangeEvent(f2200_GetFarmExemptAmountDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200_GetFarmExemptAmountDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Get259ExemptionAmountRowChangeEvent : global::System.EventArgs {
            
            private Get259ExemptionAmountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get259ExemptionAmountRowChangeEvent(Get259ExemptionAmountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get259ExemptionAmountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f25050_pcget_ConfiguredstateRowChangeEvent : global::System.EventArgs {
            
            private f25050_pcget_ConfiguredstateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_pcget_ConfiguredstateRowChangeEvent(f25050_pcget_ConfiguredstateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f25050_pcget_ConfiguredstateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f2200Get259ExemptionAmountRowChangeEvent : global::System.EventArgs {
            
            private f2200Get259ExemptionAmountRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200Get259ExemptionAmountRowChangeEvent(f2200Get259ExemptionAmountRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f2200Get259ExemptionAmountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591