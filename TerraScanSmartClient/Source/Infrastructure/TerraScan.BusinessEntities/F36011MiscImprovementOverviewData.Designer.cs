//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F36011MiscImprovementOverviewData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F36011MiscImprovementOverviewData : global::System.Data.DataSet {
        
        private ListMiscImprovementsDataTable tableListMiscImprovements;
        
        private ListMICodeDataTable tableListMICode;
        
        private ListValidValueSliceIDDataTable tableListValidValueSliceID;
        
        private ListMICodeComboboxDatatableDataTable tableListMICodeComboboxDatatable;
        
        private ListQualityCommDataTable tableListQualityComm;
        
        private ListQualityResDataTable tableListQualityRes;
        
        private ListConditionDataTable tableListCondition;
        
        private ListDeprFuncCategoryDataTable tableListDeprFuncCategory;
        
        private ListMiscCatalogChoiceDataTable tableListMiscCatalogChoice;
        
        private ListMICodeNewDataTable tableListMICodeNew;
        
        private ListMiscImprovementsNewDataTable tableListMiscImprovementsNew;
        
        private ListDeprTableDataTable tableListDeprTable;
        
        private RecalcMiscImprovementDataTable tableRecalcMiscImprovement;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F36011MiscImprovementOverviewData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F36011MiscImprovementOverviewData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListMiscImprovements"] != null)) {
                    base.Tables.Add(new ListMiscImprovementsDataTable(ds.Tables["ListMiscImprovements"]));
                }
                if ((ds.Tables["ListMICode"] != null)) {
                    base.Tables.Add(new ListMICodeDataTable(ds.Tables["ListMICode"]));
                }
                if ((ds.Tables["ListValidValueSliceID"] != null)) {
                    base.Tables.Add(new ListValidValueSliceIDDataTable(ds.Tables["ListValidValueSliceID"]));
                }
                if ((ds.Tables["ListMICodeComboboxDatatable"] != null)) {
                    base.Tables.Add(new ListMICodeComboboxDatatableDataTable(ds.Tables["ListMICodeComboboxDatatable"]));
                }
                if ((ds.Tables["ListQualityComm"] != null)) {
                    base.Tables.Add(new ListQualityCommDataTable(ds.Tables["ListQualityComm"]));
                }
                if ((ds.Tables["ListQualityRes"] != null)) {
                    base.Tables.Add(new ListQualityResDataTable(ds.Tables["ListQualityRes"]));
                }
                if ((ds.Tables["ListCondition"] != null)) {
                    base.Tables.Add(new ListConditionDataTable(ds.Tables["ListCondition"]));
                }
                if ((ds.Tables["ListDeprFuncCategory"] != null)) {
                    base.Tables.Add(new ListDeprFuncCategoryDataTable(ds.Tables["ListDeprFuncCategory"]));
                }
                if ((ds.Tables["ListMiscCatalogChoice"] != null)) {
                    base.Tables.Add(new ListMiscCatalogChoiceDataTable(ds.Tables["ListMiscCatalogChoice"]));
                }
                if ((ds.Tables["ListMICodeNew"] != null)) {
                    base.Tables.Add(new ListMICodeNewDataTable(ds.Tables["ListMICodeNew"]));
                }
                if ((ds.Tables["ListMiscImprovementsNew"] != null)) {
                    base.Tables.Add(new ListMiscImprovementsNewDataTable(ds.Tables["ListMiscImprovementsNew"]));
                }
                if ((ds.Tables["ListDeprTable"] != null)) {
                    base.Tables.Add(new ListDeprTableDataTable(ds.Tables["ListDeprTable"]));
                }
                if ((ds.Tables["RecalcMiscImprovement"] != null)) {
                    base.Tables.Add(new RecalcMiscImprovementDataTable(ds.Tables["RecalcMiscImprovement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMiscImprovementsDataTable ListMiscImprovements {
            get {
                return this.tableListMiscImprovements;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMICodeDataTable ListMICode {
            get {
                return this.tableListMICode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListValidValueSliceIDDataTable ListValidValueSliceID {
            get {
                return this.tableListValidValueSliceID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMICodeComboboxDatatableDataTable ListMICodeComboboxDatatable {
            get {
                return this.tableListMICodeComboboxDatatable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListQualityCommDataTable ListQualityComm {
            get {
                return this.tableListQualityComm;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListQualityResDataTable ListQualityRes {
            get {
                return this.tableListQualityRes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListConditionDataTable ListCondition {
            get {
                return this.tableListCondition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDeprFuncCategoryDataTable ListDeprFuncCategory {
            get {
                return this.tableListDeprFuncCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMiscCatalogChoiceDataTable ListMiscCatalogChoice {
            get {
                return this.tableListMiscCatalogChoice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMICodeNewDataTable ListMICodeNew {
            get {
                return this.tableListMICodeNew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListMiscImprovementsNewDataTable ListMiscImprovementsNew {
            get {
                return this.tableListMiscImprovementsNew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListDeprTableDataTable ListDeprTable {
            get {
                return this.tableListDeprTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecalcMiscImprovementDataTable RecalcMiscImprovement {
            get {
                return this.tableRecalcMiscImprovement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F36011MiscImprovementOverviewData cln = ((F36011MiscImprovementOverviewData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListMiscImprovements"] != null)) {
                    base.Tables.Add(new ListMiscImprovementsDataTable(ds.Tables["ListMiscImprovements"]));
                }
                if ((ds.Tables["ListMICode"] != null)) {
                    base.Tables.Add(new ListMICodeDataTable(ds.Tables["ListMICode"]));
                }
                if ((ds.Tables["ListValidValueSliceID"] != null)) {
                    base.Tables.Add(new ListValidValueSliceIDDataTable(ds.Tables["ListValidValueSliceID"]));
                }
                if ((ds.Tables["ListMICodeComboboxDatatable"] != null)) {
                    base.Tables.Add(new ListMICodeComboboxDatatableDataTable(ds.Tables["ListMICodeComboboxDatatable"]));
                }
                if ((ds.Tables["ListQualityComm"] != null)) {
                    base.Tables.Add(new ListQualityCommDataTable(ds.Tables["ListQualityComm"]));
                }
                if ((ds.Tables["ListQualityRes"] != null)) {
                    base.Tables.Add(new ListQualityResDataTable(ds.Tables["ListQualityRes"]));
                }
                if ((ds.Tables["ListCondition"] != null)) {
                    base.Tables.Add(new ListConditionDataTable(ds.Tables["ListCondition"]));
                }
                if ((ds.Tables["ListDeprFuncCategory"] != null)) {
                    base.Tables.Add(new ListDeprFuncCategoryDataTable(ds.Tables["ListDeprFuncCategory"]));
                }
                if ((ds.Tables["ListMiscCatalogChoice"] != null)) {
                    base.Tables.Add(new ListMiscCatalogChoiceDataTable(ds.Tables["ListMiscCatalogChoice"]));
                }
                if ((ds.Tables["ListMICodeNew"] != null)) {
                    base.Tables.Add(new ListMICodeNewDataTable(ds.Tables["ListMICodeNew"]));
                }
                if ((ds.Tables["ListMiscImprovementsNew"] != null)) {
                    base.Tables.Add(new ListMiscImprovementsNewDataTable(ds.Tables["ListMiscImprovementsNew"]));
                }
                if ((ds.Tables["ListDeprTable"] != null)) {
                    base.Tables.Add(new ListDeprTableDataTable(ds.Tables["ListDeprTable"]));
                }
                if ((ds.Tables["RecalcMiscImprovement"] != null)) {
                    base.Tables.Add(new RecalcMiscImprovementDataTable(ds.Tables["RecalcMiscImprovement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListMiscImprovements = ((ListMiscImprovementsDataTable)(base.Tables["ListMiscImprovements"]));
            if ((initTable == true)) {
                if ((this.tableListMiscImprovements != null)) {
                    this.tableListMiscImprovements.InitVars();
                }
            }
            this.tableListMICode = ((ListMICodeDataTable)(base.Tables["ListMICode"]));
            if ((initTable == true)) {
                if ((this.tableListMICode != null)) {
                    this.tableListMICode.InitVars();
                }
            }
            this.tableListValidValueSliceID = ((ListValidValueSliceIDDataTable)(base.Tables["ListValidValueSliceID"]));
            if ((initTable == true)) {
                if ((this.tableListValidValueSliceID != null)) {
                    this.tableListValidValueSliceID.InitVars();
                }
            }
            this.tableListMICodeComboboxDatatable = ((ListMICodeComboboxDatatableDataTable)(base.Tables["ListMICodeComboboxDatatable"]));
            if ((initTable == true)) {
                if ((this.tableListMICodeComboboxDatatable != null)) {
                    this.tableListMICodeComboboxDatatable.InitVars();
                }
            }
            this.tableListQualityComm = ((ListQualityCommDataTable)(base.Tables["ListQualityComm"]));
            if ((initTable == true)) {
                if ((this.tableListQualityComm != null)) {
                    this.tableListQualityComm.InitVars();
                }
            }
            this.tableListQualityRes = ((ListQualityResDataTable)(base.Tables["ListQualityRes"]));
            if ((initTable == true)) {
                if ((this.tableListQualityRes != null)) {
                    this.tableListQualityRes.InitVars();
                }
            }
            this.tableListCondition = ((ListConditionDataTable)(base.Tables["ListCondition"]));
            if ((initTable == true)) {
                if ((this.tableListCondition != null)) {
                    this.tableListCondition.InitVars();
                }
            }
            this.tableListDeprFuncCategory = ((ListDeprFuncCategoryDataTable)(base.Tables["ListDeprFuncCategory"]));
            if ((initTable == true)) {
                if ((this.tableListDeprFuncCategory != null)) {
                    this.tableListDeprFuncCategory.InitVars();
                }
            }
            this.tableListMiscCatalogChoice = ((ListMiscCatalogChoiceDataTable)(base.Tables["ListMiscCatalogChoice"]));
            if ((initTable == true)) {
                if ((this.tableListMiscCatalogChoice != null)) {
                    this.tableListMiscCatalogChoice.InitVars();
                }
            }
            this.tableListMICodeNew = ((ListMICodeNewDataTable)(base.Tables["ListMICodeNew"]));
            if ((initTable == true)) {
                if ((this.tableListMICodeNew != null)) {
                    this.tableListMICodeNew.InitVars();
                }
            }
            this.tableListMiscImprovementsNew = ((ListMiscImprovementsNewDataTable)(base.Tables["ListMiscImprovementsNew"]));
            if ((initTable == true)) {
                if ((this.tableListMiscImprovementsNew != null)) {
                    this.tableListMiscImprovementsNew.InitVars();
                }
            }
            this.tableListDeprTable = ((ListDeprTableDataTable)(base.Tables["ListDeprTable"]));
            if ((initTable == true)) {
                if ((this.tableListDeprTable != null)) {
                    this.tableListDeprTable.InitVars();
                }
            }
            this.tableRecalcMiscImprovement = ((RecalcMiscImprovementDataTable)(base.Tables["RecalcMiscImprovement"]));
            if ((initTable == true)) {
                if ((this.tableRecalcMiscImprovement != null)) {
                    this.tableRecalcMiscImprovement.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F36011MiscImprovementOverviewData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F36011MiscImprovementOverviewData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListMiscImprovements = new ListMiscImprovementsDataTable();
            base.Tables.Add(this.tableListMiscImprovements);
            this.tableListMICode = new ListMICodeDataTable();
            base.Tables.Add(this.tableListMICode);
            this.tableListValidValueSliceID = new ListValidValueSliceIDDataTable();
            base.Tables.Add(this.tableListValidValueSliceID);
            this.tableListMICodeComboboxDatatable = new ListMICodeComboboxDatatableDataTable();
            base.Tables.Add(this.tableListMICodeComboboxDatatable);
            this.tableListQualityComm = new ListQualityCommDataTable();
            base.Tables.Add(this.tableListQualityComm);
            this.tableListQualityRes = new ListQualityResDataTable();
            base.Tables.Add(this.tableListQualityRes);
            this.tableListCondition = new ListConditionDataTable();
            base.Tables.Add(this.tableListCondition);
            this.tableListDeprFuncCategory = new ListDeprFuncCategoryDataTable();
            base.Tables.Add(this.tableListDeprFuncCategory);
            this.tableListMiscCatalogChoice = new ListMiscCatalogChoiceDataTable();
            base.Tables.Add(this.tableListMiscCatalogChoice);
            this.tableListMICodeNew = new ListMICodeNewDataTable();
            base.Tables.Add(this.tableListMICodeNew);
            this.tableListMiscImprovementsNew = new ListMiscImprovementsNewDataTable();
            base.Tables.Add(this.tableListMiscImprovementsNew);
            this.tableListDeprTable = new ListDeprTableDataTable();
            base.Tables.Add(this.tableListDeprTable);
            this.tableRecalcMiscImprovement = new RecalcMiscImprovementDataTable();
            base.Tables.Add(this.tableRecalcMiscImprovement);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMiscImprovements() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMICode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListValidValueSliceID() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMICodeComboboxDatatable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListQualityComm() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListQualityRes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListCondition() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDeprFuncCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMiscCatalogChoice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMICodeNew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListMiscImprovementsNew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListDeprTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecalcMiscImprovement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListMiscImprovementsRowChangeEventHandler(object sender, ListMiscImprovementsRowChangeEvent e);
        
        public delegate void ListMICodeRowChangeEventHandler(object sender, ListMICodeRowChangeEvent e);
        
        public delegate void ListValidValueSliceIDRowChangeEventHandler(object sender, ListValidValueSliceIDRowChangeEvent e);
        
        public delegate void ListMICodeComboboxDatatableRowChangeEventHandler(object sender, ListMICodeComboboxDatatableRowChangeEvent e);
        
        public delegate void ListQualityCommRowChangeEventHandler(object sender, ListQualityCommRowChangeEvent e);
        
        public delegate void ListQualityResRowChangeEventHandler(object sender, ListQualityResRowChangeEvent e);
        
        public delegate void ListConditionRowChangeEventHandler(object sender, ListConditionRowChangeEvent e);
        
        public delegate void ListDeprFuncCategoryRowChangeEventHandler(object sender, ListDeprFuncCategoryRowChangeEvent e);
        
        public delegate void ListMiscCatalogChoiceRowChangeEventHandler(object sender, ListMiscCatalogChoiceRowChangeEvent e);
        
        public delegate void ListMICodeNewRowChangeEventHandler(object sender, ListMICodeNewRowChangeEvent e);
        
        public delegate void ListMiscImprovementsNewRowChangeEventHandler(object sender, ListMiscImprovementsNewRowChangeEvent e);
        
        public delegate void ListDeprTableRowChangeEventHandler(object sender, ListDeprTableRowChangeEvent e);
        
        public delegate void RecalcMiscImprovementRowChangeEventHandler(object sender, RecalcMiscImprovementRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMiscImprovementsDataTable : global::System.Data.TypedTableBase<ListMiscImprovementsRow> {
            
            private global::System.Data.DataColumn columnMID;
            
            private global::System.Data.DataColumn columnMICodeID;
            
            private global::System.Data.DataColumn columnMICode;
            
            private global::System.Data.DataColumn columnValueCalc;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnDepr;
            
            private global::System.Data.DataColumn columnValueOverride;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnDeprYear;
            
            private global::System.Data.DataColumn columnDeprTableID;
            
            private global::System.Data.DataColumn columnDeprName;
            
            private global::System.Data.DataColumn columnDeprCondition;
            
            private global::System.Data.DataColumn columnDeprByObject;
            
            private global::System.Data.DataColumn columnL01;
            
            private global::System.Data.DataColumn columnD01;
            
            private global::System.Data.DataColumn columnF01;
            
            private global::System.Data.DataColumn columnL02;
            
            private global::System.Data.DataColumn columnD02;
            
            private global::System.Data.DataColumn columnF02;
            
            private global::System.Data.DataColumn columnL03;
            
            private global::System.Data.DataColumn columnD03;
            
            private global::System.Data.DataColumn columnF03;
            
            private global::System.Data.DataColumn columnL04;
            
            private global::System.Data.DataColumn columnD04;
            
            private global::System.Data.DataColumn columnF04;
            
            private global::System.Data.DataColumn columnL05;
            
            private global::System.Data.DataColumn columnD05;
            
            private global::System.Data.DataColumn columnF05;
            
            private global::System.Data.DataColumn columnL06;
            
            private global::System.Data.DataColumn columnD06;
            
            private global::System.Data.DataColumn columnF06;
            
            private global::System.Data.DataColumn columnL07;
            
            private global::System.Data.DataColumn columnD07;
            
            private global::System.Data.DataColumn columnF07;
            
            private global::System.Data.DataColumn columnL08;
            
            private global::System.Data.DataColumn columnD08;
            
            private global::System.Data.DataColumn columnF08;
            
            private global::System.Data.DataColumn columnL09;
            
            private global::System.Data.DataColumn columnD09;
            
            private global::System.Data.DataColumn columnF09;
            
            private global::System.Data.DataColumn columnL10;
            
            private global::System.Data.DataColumn columnD10;
            
            private global::System.Data.DataColumn columnF10;
            
            private global::System.Data.DataColumn columnV01;
            
            private global::System.Data.DataColumn columnV02;
            
            private global::System.Data.DataColumn columnV03;
            
            private global::System.Data.DataColumn columnV04;
            
            private global::System.Data.DataColumn columnV05;
            
            private global::System.Data.DataColumn columnV06;
            
            private global::System.Data.DataColumn columnV07;
            
            private global::System.Data.DataColumn columnV08;
            
            private global::System.Data.DataColumn columnV09;
            
            private global::System.Data.DataColumn columnV10;
            
            private global::System.Data.DataColumn columnVFormula;
            
            private global::System.Data.DataColumn columnDeprPercent;
            
            private global::System.Data.DataColumn columnS01;
            
            private global::System.Data.DataColumn columnS10;
            
            private global::System.Data.DataColumn columnS09;
            
            private global::System.Data.DataColumn columnS08;
            
            private global::System.Data.DataColumn columnS07;
            
            private global::System.Data.DataColumn columnS06;
            
            private global::System.Data.DataColumn columnS05;
            
            private global::System.Data.DataColumn columnS04;
            
            private global::System.Data.DataColumn columnS03;
            
            private global::System.Data.DataColumn columnS02;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsDataTable() {
                this.TableName = "ListMiscImprovements";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMiscImprovementsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMiscImprovementsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIDColumn {
                get {
                    return this.columnMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeIDColumn {
                get {
                    return this.columnMICodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeColumn {
                get {
                    return this.columnMICode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueCalcColumn {
                get {
                    return this.columnValueCalc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprColumn {
                get {
                    return this.columnDepr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueOverrideColumn {
                get {
                    return this.columnValueOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprYearColumn {
                get {
                    return this.columnDeprYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprTableIDColumn {
                get {
                    return this.columnDeprTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprNameColumn {
                get {
                    return this.columnDeprName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprConditionColumn {
                get {
                    return this.columnDeprCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprByObjectColumn {
                get {
                    return this.columnDeprByObject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L01Column {
                get {
                    return this.columnL01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D01Column {
                get {
                    return this.columnD01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F01Column {
                get {
                    return this.columnF01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L02Column {
                get {
                    return this.columnL02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D02Column {
                get {
                    return this.columnD02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F02Column {
                get {
                    return this.columnF02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L03Column {
                get {
                    return this.columnL03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D03Column {
                get {
                    return this.columnD03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F03Column {
                get {
                    return this.columnF03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L04Column {
                get {
                    return this.columnL04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D04Column {
                get {
                    return this.columnD04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F04Column {
                get {
                    return this.columnF04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L05Column {
                get {
                    return this.columnL05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D05Column {
                get {
                    return this.columnD05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F05Column {
                get {
                    return this.columnF05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L06Column {
                get {
                    return this.columnL06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D06Column {
                get {
                    return this.columnD06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F06Column {
                get {
                    return this.columnF06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L07Column {
                get {
                    return this.columnL07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D07Column {
                get {
                    return this.columnD07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F07Column {
                get {
                    return this.columnF07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L08Column {
                get {
                    return this.columnL08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D08Column {
                get {
                    return this.columnD08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F08Column {
                get {
                    return this.columnF08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L09Column {
                get {
                    return this.columnL09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D09Column {
                get {
                    return this.columnD09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F09Column {
                get {
                    return this.columnF09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L10Column {
                get {
                    return this.columnL10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D10Column {
                get {
                    return this.columnD10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F10Column {
                get {
                    return this.columnF10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V01Column {
                get {
                    return this.columnV01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V02Column {
                get {
                    return this.columnV02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V03Column {
                get {
                    return this.columnV03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V04Column {
                get {
                    return this.columnV04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V05Column {
                get {
                    return this.columnV05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V06Column {
                get {
                    return this.columnV06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V07Column {
                get {
                    return this.columnV07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V08Column {
                get {
                    return this.columnV08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V09Column {
                get {
                    return this.columnV09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V10Column {
                get {
                    return this.columnV10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VFormulaColumn {
                get {
                    return this.columnVFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprPercentColumn {
                get {
                    return this.columnDeprPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S01Column {
                get {
                    return this.columnS01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S10Column {
                get {
                    return this.columnS10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S09Column {
                get {
                    return this.columnS09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S08Column {
                get {
                    return this.columnS08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S07Column {
                get {
                    return this.columnS07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S06Column {
                get {
                    return this.columnS06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S05Column {
                get {
                    return this.columnS05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S04Column {
                get {
                    return this.columnS04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S03Column {
                get {
                    return this.columnS03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S02Column {
                get {
                    return this.columnS02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsRow this[int index] {
                get {
                    return ((ListMiscImprovementsRow)(this.Rows[index]));
                }
            }
            
            public event ListMiscImprovementsRowChangeEventHandler ListMiscImprovementsRowChanging;
            
            public event ListMiscImprovementsRowChangeEventHandler ListMiscImprovementsRowChanged;
            
            public event ListMiscImprovementsRowChangeEventHandler ListMiscImprovementsRowDeleting;
            
            public event ListMiscImprovementsRowChangeEventHandler ListMiscImprovementsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMiscImprovementsRow(ListMiscImprovementsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsRow AddListMiscImprovementsRow(
                        int MID, 
                        int MICodeID, 
                        string MICode, 
                        decimal ValueCalc, 
                        string Description, 
                        decimal Depr, 
                        decimal ValueOverride, 
                        int ValueSliceID, 
                        short DeprYear, 
                        int DeprTableID, 
                        string DeprName, 
                        decimal DeprCondition, 
                        bool DeprByObject, 
                        string L01, 
                        byte D01, 
                        string F01, 
                        string L02, 
                        byte D02, 
                        string F02, 
                        string L03, 
                        byte D03, 
                        string F03, 
                        string L04, 
                        byte D04, 
                        string F04, 
                        string L05, 
                        byte D05, 
                        string F05, 
                        string L06, 
                        byte D06, 
                        string F06, 
                        string L07, 
                        byte D07, 
                        string F07, 
                        string L08, 
                        byte D08, 
                        string F08, 
                        string L09, 
                        byte D09, 
                        string F09, 
                        string L10, 
                        byte D10, 
                        string F10, 
                        decimal V01, 
                        decimal V02, 
                        decimal V03, 
                        decimal V04, 
                        decimal V05, 
                        decimal V06, 
                        decimal V07, 
                        decimal V08, 
                        decimal V09, 
                        decimal V10, 
                        string VFormula, 
                        decimal DeprPercent, 
                        short S01, 
                        short S10, 
                        short S09, 
                        short S08, 
                        short S07, 
                        short S06, 
                        short S05, 
                        short S04, 
                        short S03, 
                        short S02) {
                ListMiscImprovementsRow rowListMiscImprovementsRow = ((ListMiscImprovementsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MID,
                        MICodeID,
                        MICode,
                        ValueCalc,
                        Description,
                        Depr,
                        ValueOverride,
                        ValueSliceID,
                        DeprYear,
                        DeprTableID,
                        DeprName,
                        DeprCondition,
                        DeprByObject,
                        L01,
                        D01,
                        F01,
                        L02,
                        D02,
                        F02,
                        L03,
                        D03,
                        F03,
                        L04,
                        D04,
                        F04,
                        L05,
                        D05,
                        F05,
                        L06,
                        D06,
                        F06,
                        L07,
                        D07,
                        F07,
                        L08,
                        D08,
                        F08,
                        L09,
                        D09,
                        F09,
                        L10,
                        D10,
                        F10,
                        V01,
                        V02,
                        V03,
                        V04,
                        V05,
                        V06,
                        V07,
                        V08,
                        V09,
                        V10,
                        VFormula,
                        DeprPercent,
                        S01,
                        S10,
                        S09,
                        S08,
                        S07,
                        S06,
                        S05,
                        S04,
                        S03,
                        S02};
                rowListMiscImprovementsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMiscImprovementsRow);
                return rowListMiscImprovementsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMiscImprovementsDataTable cln = ((ListMiscImprovementsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMiscImprovementsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMID = base.Columns["MID"];
                this.columnMICodeID = base.Columns["MICodeID"];
                this.columnMICode = base.Columns["MICode"];
                this.columnValueCalc = base.Columns["ValueCalc"];
                this.columnDescription = base.Columns["Description"];
                this.columnDepr = base.Columns["Depr"];
                this.columnValueOverride = base.Columns["ValueOverride"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnDeprYear = base.Columns["DeprYear"];
                this.columnDeprTableID = base.Columns["DeprTableID"];
                this.columnDeprName = base.Columns["DeprName"];
                this.columnDeprCondition = base.Columns["DeprCondition"];
                this.columnDeprByObject = base.Columns["DeprByObject"];
                this.columnL01 = base.Columns["L01"];
                this.columnD01 = base.Columns["D01"];
                this.columnF01 = base.Columns["F01"];
                this.columnL02 = base.Columns["L02"];
                this.columnD02 = base.Columns["D02"];
                this.columnF02 = base.Columns["F02"];
                this.columnL03 = base.Columns["L03"];
                this.columnD03 = base.Columns["D03"];
                this.columnF03 = base.Columns["F03"];
                this.columnL04 = base.Columns["L04"];
                this.columnD04 = base.Columns["D04"];
                this.columnF04 = base.Columns["F04"];
                this.columnL05 = base.Columns["L05"];
                this.columnD05 = base.Columns["D05"];
                this.columnF05 = base.Columns["F05"];
                this.columnL06 = base.Columns["L06"];
                this.columnD06 = base.Columns["D06"];
                this.columnF06 = base.Columns["F06"];
                this.columnL07 = base.Columns["L07"];
                this.columnD07 = base.Columns["D07"];
                this.columnF07 = base.Columns["F07"];
                this.columnL08 = base.Columns["L08"];
                this.columnD08 = base.Columns["D08"];
                this.columnF08 = base.Columns["F08"];
                this.columnL09 = base.Columns["L09"];
                this.columnD09 = base.Columns["D09"];
                this.columnF09 = base.Columns["F09"];
                this.columnL10 = base.Columns["L10"];
                this.columnD10 = base.Columns["D10"];
                this.columnF10 = base.Columns["F10"];
                this.columnV01 = base.Columns["V01"];
                this.columnV02 = base.Columns["V02"];
                this.columnV03 = base.Columns["V03"];
                this.columnV04 = base.Columns["V04"];
                this.columnV05 = base.Columns["V05"];
                this.columnV06 = base.Columns["V06"];
                this.columnV07 = base.Columns["V07"];
                this.columnV08 = base.Columns["V08"];
                this.columnV09 = base.Columns["V09"];
                this.columnV10 = base.Columns["V10"];
                this.columnVFormula = base.Columns["VFormula"];
                this.columnDeprPercent = base.Columns["DeprPercent"];
                this.columnS01 = base.Columns["S01"];
                this.columnS10 = base.Columns["S10"];
                this.columnS09 = base.Columns["S09"];
                this.columnS08 = base.Columns["S08"];
                this.columnS07 = base.Columns["S07"];
                this.columnS06 = base.Columns["S06"];
                this.columnS05 = base.Columns["S05"];
                this.columnS04 = base.Columns["S04"];
                this.columnS03 = base.Columns["S03"];
                this.columnS02 = base.Columns["S02"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMID = new global::System.Data.DataColumn("MID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID);
                this.columnMICodeID = new global::System.Data.DataColumn("MICodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICodeID);
                this.columnMICode = new global::System.Data.DataColumn("MICode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICode);
                this.columnValueCalc = new global::System.Data.DataColumn("ValueCalc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueCalc);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDepr = new global::System.Data.DataColumn("Depr", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepr);
                this.columnValueOverride = new global::System.Data.DataColumn("ValueOverride", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueOverride);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnDeprYear = new global::System.Data.DataColumn("DeprYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprYear);
                this.columnDeprTableID = new global::System.Data.DataColumn("DeprTableID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprTableID);
                this.columnDeprName = new global::System.Data.DataColumn("DeprName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprName);
                this.columnDeprCondition = new global::System.Data.DataColumn("DeprCondition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprCondition);
                this.columnDeprByObject = new global::System.Data.DataColumn("DeprByObject", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprByObject);
                this.columnL01 = new global::System.Data.DataColumn("L01", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL01);
                this.columnD01 = new global::System.Data.DataColumn("D01", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD01);
                this.columnF01 = new global::System.Data.DataColumn("F01", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF01);
                this.columnL02 = new global::System.Data.DataColumn("L02", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL02);
                this.columnD02 = new global::System.Data.DataColumn("D02", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD02);
                this.columnF02 = new global::System.Data.DataColumn("F02", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF02);
                this.columnL03 = new global::System.Data.DataColumn("L03", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL03);
                this.columnD03 = new global::System.Data.DataColumn("D03", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD03);
                this.columnF03 = new global::System.Data.DataColumn("F03", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF03);
                this.columnL04 = new global::System.Data.DataColumn("L04", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL04);
                this.columnD04 = new global::System.Data.DataColumn("D04", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD04);
                this.columnF04 = new global::System.Data.DataColumn("F04", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF04);
                this.columnL05 = new global::System.Data.DataColumn("L05", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL05);
                this.columnD05 = new global::System.Data.DataColumn("D05", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD05);
                this.columnF05 = new global::System.Data.DataColumn("F05", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF05);
                this.columnL06 = new global::System.Data.DataColumn("L06", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL06);
                this.columnD06 = new global::System.Data.DataColumn("D06", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD06);
                this.columnF06 = new global::System.Data.DataColumn("F06", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF06);
                this.columnL07 = new global::System.Data.DataColumn("L07", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL07);
                this.columnD07 = new global::System.Data.DataColumn("D07", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD07);
                this.columnF07 = new global::System.Data.DataColumn("F07", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF07);
                this.columnL08 = new global::System.Data.DataColumn("L08", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL08);
                this.columnD08 = new global::System.Data.DataColumn("D08", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD08);
                this.columnF08 = new global::System.Data.DataColumn("F08", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF08);
                this.columnL09 = new global::System.Data.DataColumn("L09", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL09);
                this.columnD09 = new global::System.Data.DataColumn("D09", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD09);
                this.columnF09 = new global::System.Data.DataColumn("F09", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF09);
                this.columnL10 = new global::System.Data.DataColumn("L10", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL10);
                this.columnD10 = new global::System.Data.DataColumn("D10", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD10);
                this.columnF10 = new global::System.Data.DataColumn("F10", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF10);
                this.columnV01 = new global::System.Data.DataColumn("V01", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV01);
                this.columnV02 = new global::System.Data.DataColumn("V02", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV02);
                this.columnV03 = new global::System.Data.DataColumn("V03", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV03);
                this.columnV04 = new global::System.Data.DataColumn("V04", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV04);
                this.columnV05 = new global::System.Data.DataColumn("V05", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV05);
                this.columnV06 = new global::System.Data.DataColumn("V06", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV06);
                this.columnV07 = new global::System.Data.DataColumn("V07", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV07);
                this.columnV08 = new global::System.Data.DataColumn("V08", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV08);
                this.columnV09 = new global::System.Data.DataColumn("V09", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV09);
                this.columnV10 = new global::System.Data.DataColumn("V10", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV10);
                this.columnVFormula = new global::System.Data.DataColumn("VFormula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVFormula);
                this.columnDeprPercent = new global::System.Data.DataColumn("DeprPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprPercent);
                this.columnS01 = new global::System.Data.DataColumn("S01", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS01);
                this.columnS10 = new global::System.Data.DataColumn("S10", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS10);
                this.columnS09 = new global::System.Data.DataColumn("S09", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS09);
                this.columnS08 = new global::System.Data.DataColumn("S08", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS08);
                this.columnS07 = new global::System.Data.DataColumn("S07", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS07);
                this.columnS06 = new global::System.Data.DataColumn("S06", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS06);
                this.columnS05 = new global::System.Data.DataColumn("S05", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS05);
                this.columnS04 = new global::System.Data.DataColumn("S04", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS04);
                this.columnS03 = new global::System.Data.DataColumn("S03", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS03);
                this.columnS02 = new global::System.Data.DataColumn("S02", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS02);
                this.columnMID.ReadOnly = true;
                this.columnMICode.MaxLength = 6;
                this.columnDescription.MaxLength = 40;
                this.columnDeprName.MaxLength = 50;
                this.columnL01.MaxLength = 12;
                this.columnF01.MaxLength = 1500;
                this.columnL02.MaxLength = 12;
                this.columnF02.MaxLength = 1500;
                this.columnL03.MaxLength = 12;
                this.columnF03.MaxLength = 1500;
                this.columnL04.MaxLength = 12;
                this.columnF04.MaxLength = 1500;
                this.columnL05.MaxLength = 12;
                this.columnF05.MaxLength = 1500;
                this.columnL06.MaxLength = 12;
                this.columnF06.MaxLength = 1500;
                this.columnL07.MaxLength = 12;
                this.columnF07.MaxLength = 1500;
                this.columnL08.MaxLength = 12;
                this.columnF08.MaxLength = 1500;
                this.columnL09.MaxLength = 12;
                this.columnF09.MaxLength = 1500;
                this.columnL10.MaxLength = 12;
                this.columnF10.MaxLength = 1500;
                this.columnVFormula.MaxLength = 1500;
                this.columnDeprPercent.ReadOnly = true;
                this.columnS01.ReadOnly = true;
                this.columnS10.ReadOnly = true;
                this.columnS09.ReadOnly = true;
                this.columnS08.ReadOnly = true;
                this.columnS07.ReadOnly = true;
                this.columnS06.ReadOnly = true;
                this.columnS05.ReadOnly = true;
                this.columnS04.ReadOnly = true;
                this.columnS03.ReadOnly = true;
                this.columnS02.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsRow NewListMiscImprovementsRow() {
                return ((ListMiscImprovementsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMiscImprovementsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMiscImprovementsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMiscImprovementsRowChanged != null)) {
                    this.ListMiscImprovementsRowChanged(this, new ListMiscImprovementsRowChangeEvent(((ListMiscImprovementsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMiscImprovementsRowChanging != null)) {
                    this.ListMiscImprovementsRowChanging(this, new ListMiscImprovementsRowChangeEvent(((ListMiscImprovementsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMiscImprovementsRowDeleted != null)) {
                    this.ListMiscImprovementsRowDeleted(this, new ListMiscImprovementsRowChangeEvent(((ListMiscImprovementsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMiscImprovementsRowDeleting != null)) {
                    this.ListMiscImprovementsRowDeleting(this, new ListMiscImprovementsRowChangeEvent(((ListMiscImprovementsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMiscImprovementsRow(ListMiscImprovementsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMiscImprovementsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMICodeDataTable : global::System.Data.TypedTableBase<ListMICodeRow> {
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnMID;
            
            private global::System.Data.DataColumn columnMICodeID;
            
            private global::System.Data.DataColumn columnMICode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnValueCalc;
            
            private global::System.Data.DataColumn columnDepr;
            
            private global::System.Data.DataColumn columnValueOverride;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnTotalValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeDataTable() {
                this.TableName = "ListMICode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMICodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMICodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIDColumn {
                get {
                    return this.columnMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeIDColumn {
                get {
                    return this.columnMICodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeColumn {
                get {
                    return this.columnMICode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueCalcColumn {
                get {
                    return this.columnValueCalc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprColumn {
                get {
                    return this.columnDepr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueOverrideColumn {
                get {
                    return this.columnValueOverride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalValueColumn {
                get {
                    return this.columnTotalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeRow this[int index] {
                get {
                    return ((ListMICodeRow)(this.Rows[index]));
                }
            }
            
            public event ListMICodeRowChangeEventHandler ListMICodeRowChanging;
            
            public event ListMICodeRowChangeEventHandler ListMICodeRowChanged;
            
            public event ListMICodeRowChangeEventHandler ListMICodeRowDeleting;
            
            public event ListMICodeRowChangeEventHandler ListMICodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMICodeRow(ListMICodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeRow AddListMICodeRow(int ValueSliceID, int MID, int MICodeID, string MICode, string Description, decimal ValueCalc, decimal Depr, decimal ValueOverride, short RollYear, decimal TotalValue) {
                ListMICodeRow rowListMICodeRow = ((ListMICodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ValueSliceID,
                        MID,
                        MICodeID,
                        MICode,
                        Description,
                        ValueCalc,
                        Depr,
                        ValueOverride,
                        RollYear,
                        TotalValue};
                rowListMICodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMICodeRow);
                return rowListMICodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMICodeDataTable cln = ((ListMICodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMICodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnMID = base.Columns["MID"];
                this.columnMICodeID = base.Columns["MICodeID"];
                this.columnMICode = base.Columns["MICode"];
                this.columnDescription = base.Columns["Description"];
                this.columnValueCalc = base.Columns["ValueCalc"];
                this.columnDepr = base.Columns["Depr"];
                this.columnValueOverride = base.Columns["ValueOverride"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnTotalValue = base.Columns["TotalValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnMID = new global::System.Data.DataColumn("MID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID);
                this.columnMICodeID = new global::System.Data.DataColumn("MICodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICodeID);
                this.columnMICode = new global::System.Data.DataColumn("MICode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnValueCalc = new global::System.Data.DataColumn("ValueCalc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueCalc);
                this.columnDepr = new global::System.Data.DataColumn("Depr", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepr);
                this.columnValueOverride = new global::System.Data.DataColumn("ValueOverride", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueOverride);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnTotalValue = new global::System.Data.DataColumn("TotalValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalValue);
                this.columnValueSliceID.ReadOnly = true;
                this.columnMID.ReadOnly = true;
                this.columnMICode.MaxLength = 10;
                this.columnDescription.MaxLength = 40;
                this.columnTotalValue.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeRow NewListMICodeRow() {
                return ((ListMICodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMICodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMICodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMICodeRowChanged != null)) {
                    this.ListMICodeRowChanged(this, new ListMICodeRowChangeEvent(((ListMICodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMICodeRowChanging != null)) {
                    this.ListMICodeRowChanging(this, new ListMICodeRowChangeEvent(((ListMICodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMICodeRowDeleted != null)) {
                    this.ListMICodeRowDeleted(this, new ListMICodeRowChangeEvent(((ListMICodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMICodeRowDeleting != null)) {
                    this.ListMICodeRowDeleting(this, new ListMICodeRowChangeEvent(((ListMICodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMICodeRow(ListMICodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMICodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListValidValueSliceIDDataTable : global::System.Data.TypedTableBase<ListValidValueSliceIDRow> {
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidValueSliceIDDataTable() {
                this.TableName = "ListValidValueSliceID";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListValidValueSliceIDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListValidValueSliceIDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidValueSliceIDRow this[int index] {
                get {
                    return ((ListValidValueSliceIDRow)(this.Rows[index]));
                }
            }
            
            public event ListValidValueSliceIDRowChangeEventHandler ListValidValueSliceIDRowChanging;
            
            public event ListValidValueSliceIDRowChangeEventHandler ListValidValueSliceIDRowChanged;
            
            public event ListValidValueSliceIDRowChangeEventHandler ListValidValueSliceIDRowDeleting;
            
            public event ListValidValueSliceIDRowChangeEventHandler ListValidValueSliceIDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListValidValueSliceIDRow(ListValidValueSliceIDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidValueSliceIDRow AddListValidValueSliceIDRow(int ValueSliceID) {
                ListValidValueSliceIDRow rowListValidValueSliceIDRow = ((ListValidValueSliceIDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ValueSliceID};
                rowListValidValueSliceIDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListValidValueSliceIDRow);
                return rowListValidValueSliceIDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListValidValueSliceIDDataTable cln = ((ListValidValueSliceIDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListValidValueSliceIDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValueSliceID = base.Columns["ValueSliceID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnValueSliceID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidValueSliceIDRow NewListValidValueSliceIDRow() {
                return ((ListValidValueSliceIDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListValidValueSliceIDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListValidValueSliceIDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListValidValueSliceIDRowChanged != null)) {
                    this.ListValidValueSliceIDRowChanged(this, new ListValidValueSliceIDRowChangeEvent(((ListValidValueSliceIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListValidValueSliceIDRowChanging != null)) {
                    this.ListValidValueSliceIDRowChanging(this, new ListValidValueSliceIDRowChangeEvent(((ListValidValueSliceIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListValidValueSliceIDRowDeleted != null)) {
                    this.ListValidValueSliceIDRowDeleted(this, new ListValidValueSliceIDRowChangeEvent(((ListValidValueSliceIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListValidValueSliceIDRowDeleting != null)) {
                    this.ListValidValueSliceIDRowDeleting(this, new ListValidValueSliceIDRowChangeEvent(((ListValidValueSliceIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListValidValueSliceIDRow(ListValidValueSliceIDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListValidValueSliceIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMICodeComboboxDatatableDataTable : global::System.Data.TypedTableBase<ListMICodeComboboxDatatableRow> {
            
            private global::System.Data.DataColumn columnMICodeID;
            
            private global::System.Data.DataColumn columnMICode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeComboboxDatatableDataTable() {
                this.TableName = "ListMICodeComboboxDatatable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMICodeComboboxDatatableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMICodeComboboxDatatableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeIDColumn {
                get {
                    return this.columnMICodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeColumn {
                get {
                    return this.columnMICode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeComboboxDatatableRow this[int index] {
                get {
                    return ((ListMICodeComboboxDatatableRow)(this.Rows[index]));
                }
            }
            
            public event ListMICodeComboboxDatatableRowChangeEventHandler ListMICodeComboboxDatatableRowChanging;
            
            public event ListMICodeComboboxDatatableRowChangeEventHandler ListMICodeComboboxDatatableRowChanged;
            
            public event ListMICodeComboboxDatatableRowChangeEventHandler ListMICodeComboboxDatatableRowDeleting;
            
            public event ListMICodeComboboxDatatableRowChangeEventHandler ListMICodeComboboxDatatableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMICodeComboboxDatatableRow(ListMICodeComboboxDatatableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeComboboxDatatableRow AddListMICodeComboboxDatatableRow(int MICodeID, string MICode, string Description, short RollYear) {
                ListMICodeComboboxDatatableRow rowListMICodeComboboxDatatableRow = ((ListMICodeComboboxDatatableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MICodeID,
                        MICode,
                        Description,
                        RollYear};
                rowListMICodeComboboxDatatableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMICodeComboboxDatatableRow);
                return rowListMICodeComboboxDatatableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMICodeComboboxDatatableDataTable cln = ((ListMICodeComboboxDatatableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMICodeComboboxDatatableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMICodeID = base.Columns["MICodeID"];
                this.columnMICode = base.Columns["MICode"];
                this.columnDescription = base.Columns["Description"];
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMICodeID = new global::System.Data.DataColumn("MICodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICodeID);
                this.columnMICode = new global::System.Data.DataColumn("MICode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnMICodeID.ReadOnly = true;
                this.columnMICode.MaxLength = 60;
                this.columnDescription.MaxLength = 40;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeComboboxDatatableRow NewListMICodeComboboxDatatableRow() {
                return ((ListMICodeComboboxDatatableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMICodeComboboxDatatableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMICodeComboboxDatatableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMICodeComboboxDatatableRowChanged != null)) {
                    this.ListMICodeComboboxDatatableRowChanged(this, new ListMICodeComboboxDatatableRowChangeEvent(((ListMICodeComboboxDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMICodeComboboxDatatableRowChanging != null)) {
                    this.ListMICodeComboboxDatatableRowChanging(this, new ListMICodeComboboxDatatableRowChangeEvent(((ListMICodeComboboxDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMICodeComboboxDatatableRowDeleted != null)) {
                    this.ListMICodeComboboxDatatableRowDeleted(this, new ListMICodeComboboxDatatableRowChangeEvent(((ListMICodeComboboxDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMICodeComboboxDatatableRowDeleting != null)) {
                    this.ListMICodeComboboxDatatableRowDeleting(this, new ListMICodeComboboxDatatableRowChangeEvent(((ListMICodeComboboxDatatableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMICodeComboboxDatatableRow(ListMICodeComboboxDatatableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMICodeComboboxDatatableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListQualityCommDataTable : global::System.Data.TypedTableBase<ListQualityCommRow> {
            
            private global::System.Data.DataColumn columnQuality;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityCommDataTable() {
                this.TableName = "ListQualityComm";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQualityCommDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListQualityCommDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityColumn {
                get {
                    return this.columnQuality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityCommRow this[int index] {
                get {
                    return ((ListQualityCommRow)(this.Rows[index]));
                }
            }
            
            public event ListQualityCommRowChangeEventHandler ListQualityCommRowChanging;
            
            public event ListQualityCommRowChangeEventHandler ListQualityCommRowChanged;
            
            public event ListQualityCommRowChangeEventHandler ListQualityCommRowDeleting;
            
            public event ListQualityCommRowChangeEventHandler ListQualityCommRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListQualityCommRow(ListQualityCommRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityCommRow AddListQualityCommRow(decimal Quality, string Description) {
                ListQualityCommRow rowListQualityCommRow = ((ListQualityCommRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Quality,
                        Description};
                rowListQualityCommRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListQualityCommRow);
                return rowListQualityCommRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListQualityCommDataTable cln = ((ListQualityCommDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListQualityCommDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnQuality = base.Columns["Quality"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnQuality = new global::System.Data.DataColumn("Quality", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuality);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDescription.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityCommRow NewListQualityCommRow() {
                return ((ListQualityCommRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListQualityCommRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListQualityCommRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListQualityCommRowChanged != null)) {
                    this.ListQualityCommRowChanged(this, new ListQualityCommRowChangeEvent(((ListQualityCommRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListQualityCommRowChanging != null)) {
                    this.ListQualityCommRowChanging(this, new ListQualityCommRowChangeEvent(((ListQualityCommRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListQualityCommRowDeleted != null)) {
                    this.ListQualityCommRowDeleted(this, new ListQualityCommRowChangeEvent(((ListQualityCommRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListQualityCommRowDeleting != null)) {
                    this.ListQualityCommRowDeleting(this, new ListQualityCommRowChangeEvent(((ListQualityCommRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListQualityCommRow(ListQualityCommRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListQualityCommDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListQualityResDataTable : global::System.Data.TypedTableBase<ListQualityResRow> {
            
            private global::System.Data.DataColumn columnQuality;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityResDataTable() {
                this.TableName = "ListQualityRes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQualityResDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListQualityResDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityColumn {
                get {
                    return this.columnQuality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityResRow this[int index] {
                get {
                    return ((ListQualityResRow)(this.Rows[index]));
                }
            }
            
            public event ListQualityResRowChangeEventHandler ListQualityResRowChanging;
            
            public event ListQualityResRowChangeEventHandler ListQualityResRowChanged;
            
            public event ListQualityResRowChangeEventHandler ListQualityResRowDeleting;
            
            public event ListQualityResRowChangeEventHandler ListQualityResRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListQualityResRow(ListQualityResRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityResRow AddListQualityResRow(decimal Quality, string Description) {
                ListQualityResRow rowListQualityResRow = ((ListQualityResRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Quality,
                        Description};
                rowListQualityResRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListQualityResRow);
                return rowListQualityResRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListQualityResDataTable cln = ((ListQualityResDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListQualityResDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnQuality = base.Columns["Quality"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnQuality = new global::System.Data.DataColumn("Quality", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuality);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDescription.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityResRow NewListQualityResRow() {
                return ((ListQualityResRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListQualityResRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListQualityResRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListQualityResRowChanged != null)) {
                    this.ListQualityResRowChanged(this, new ListQualityResRowChangeEvent(((ListQualityResRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListQualityResRowChanging != null)) {
                    this.ListQualityResRowChanging(this, new ListQualityResRowChangeEvent(((ListQualityResRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListQualityResRowDeleted != null)) {
                    this.ListQualityResRowDeleted(this, new ListQualityResRowChangeEvent(((ListQualityResRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListQualityResRowDeleting != null)) {
                    this.ListQualityResRowDeleting(this, new ListQualityResRowChangeEvent(((ListQualityResRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListQualityResRow(ListQualityResRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListQualityResDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListConditionDataTable : global::System.Data.TypedTableBase<ListConditionRow> {
            
            private global::System.Data.DataColumn columnCondition;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListConditionDataTable() {
                this.TableName = "ListCondition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListConditionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListConditionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionColumn {
                get {
                    return this.columnCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListConditionRow this[int index] {
                get {
                    return ((ListConditionRow)(this.Rows[index]));
                }
            }
            
            public event ListConditionRowChangeEventHandler ListConditionRowChanging;
            
            public event ListConditionRowChangeEventHandler ListConditionRowChanged;
            
            public event ListConditionRowChangeEventHandler ListConditionRowDeleting;
            
            public event ListConditionRowChangeEventHandler ListConditionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListConditionRow(ListConditionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListConditionRow AddListConditionRow(decimal Condition, string Description) {
                ListConditionRow rowListConditionRow = ((ListConditionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Condition,
                        Description};
                rowListConditionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListConditionRow);
                return rowListConditionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListConditionDataTable cln = ((ListConditionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListConditionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCondition = base.Columns["Condition"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCondition = new global::System.Data.DataColumn("Condition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondition);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDescription.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListConditionRow NewListConditionRow() {
                return ((ListConditionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListConditionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListConditionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListConditionRowChanged != null)) {
                    this.ListConditionRowChanged(this, new ListConditionRowChangeEvent(((ListConditionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListConditionRowChanging != null)) {
                    this.ListConditionRowChanging(this, new ListConditionRowChangeEvent(((ListConditionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListConditionRowDeleted != null)) {
                    this.ListConditionRowDeleted(this, new ListConditionRowChangeEvent(((ListConditionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListConditionRowDeleting != null)) {
                    this.ListConditionRowDeleting(this, new ListConditionRowChangeEvent(((ListConditionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListConditionRow(ListConditionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListConditionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDeprFuncCategoryDataTable : global::System.Data.TypedTableBase<ListDeprFuncCategoryRow> {
            
            private global::System.Data.DataColumn columnDeprFuncID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnFuncPercent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprFuncCategoryDataTable() {
                this.TableName = "ListDeprFuncCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprFuncCategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDeprFuncCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprFuncIDColumn {
                get {
                    return this.columnDeprFuncID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuncPercentColumn {
                get {
                    return this.columnFuncPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprFuncCategoryRow this[int index] {
                get {
                    return ((ListDeprFuncCategoryRow)(this.Rows[index]));
                }
            }
            
            public event ListDeprFuncCategoryRowChangeEventHandler ListDeprFuncCategoryRowChanging;
            
            public event ListDeprFuncCategoryRowChangeEventHandler ListDeprFuncCategoryRowChanged;
            
            public event ListDeprFuncCategoryRowChangeEventHandler ListDeprFuncCategoryRowDeleting;
            
            public event ListDeprFuncCategoryRowChangeEventHandler ListDeprFuncCategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDeprFuncCategoryRow(ListDeprFuncCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprFuncCategoryRow AddListDeprFuncCategoryRow(byte DeprFuncID, string Description, decimal FuncPercent) {
                ListDeprFuncCategoryRow rowListDeprFuncCategoryRow = ((ListDeprFuncCategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeprFuncID,
                        Description,
                        FuncPercent};
                rowListDeprFuncCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDeprFuncCategoryRow);
                return rowListDeprFuncCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDeprFuncCategoryDataTable cln = ((ListDeprFuncCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDeprFuncCategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeprFuncID = base.Columns["DeprFuncID"];
                this.columnDescription = base.Columns["Description"];
                this.columnFuncPercent = base.Columns["FuncPercent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeprFuncID = new global::System.Data.DataColumn("DeprFuncID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprFuncID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnFuncPercent = new global::System.Data.DataColumn("FuncPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuncPercent);
                this.columnDeprFuncID.ReadOnly = true;
                this.columnDescription.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprFuncCategoryRow NewListDeprFuncCategoryRow() {
                return ((ListDeprFuncCategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDeprFuncCategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDeprFuncCategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDeprFuncCategoryRowChanged != null)) {
                    this.ListDeprFuncCategoryRowChanged(this, new ListDeprFuncCategoryRowChangeEvent(((ListDeprFuncCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDeprFuncCategoryRowChanging != null)) {
                    this.ListDeprFuncCategoryRowChanging(this, new ListDeprFuncCategoryRowChangeEvent(((ListDeprFuncCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDeprFuncCategoryRowDeleted != null)) {
                    this.ListDeprFuncCategoryRowDeleted(this, new ListDeprFuncCategoryRowChangeEvent(((ListDeprFuncCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDeprFuncCategoryRowDeleting != null)) {
                    this.ListDeprFuncCategoryRowDeleting(this, new ListDeprFuncCategoryRowChangeEvent(((ListDeprFuncCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDeprFuncCategoryRow(ListDeprFuncCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDeprFuncCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMiscCatalogChoiceDataTable : global::System.Data.TypedTableBase<ListMiscCatalogChoiceRow> {
            
            private global::System.Data.DataColumn columnMIChoiceID;
            
            private global::System.Data.DataColumn columnItemName;
            
            private global::System.Data.DataColumn columnItemValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscCatalogChoiceDataTable() {
                this.TableName = "ListMiscCatalogChoice";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMiscCatalogChoiceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMiscCatalogChoiceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceIDColumn {
                get {
                    return this.columnMIChoiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemValueColumn {
                get {
                    return this.columnItemValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscCatalogChoiceRow this[int index] {
                get {
                    return ((ListMiscCatalogChoiceRow)(this.Rows[index]));
                }
            }
            
            public event ListMiscCatalogChoiceRowChangeEventHandler ListMiscCatalogChoiceRowChanging;
            
            public event ListMiscCatalogChoiceRowChangeEventHandler ListMiscCatalogChoiceRowChanged;
            
            public event ListMiscCatalogChoiceRowChangeEventHandler ListMiscCatalogChoiceRowDeleting;
            
            public event ListMiscCatalogChoiceRowChangeEventHandler ListMiscCatalogChoiceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMiscCatalogChoiceRow(ListMiscCatalogChoiceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscCatalogChoiceRow AddListMiscCatalogChoiceRow(int MIChoiceID, string ItemName, decimal ItemValue) {
                ListMiscCatalogChoiceRow rowListMiscCatalogChoiceRow = ((ListMiscCatalogChoiceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MIChoiceID,
                        ItemName,
                        ItemValue};
                rowListMiscCatalogChoiceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMiscCatalogChoiceRow);
                return rowListMiscCatalogChoiceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMiscCatalogChoiceDataTable cln = ((ListMiscCatalogChoiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMiscCatalogChoiceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMIChoiceID = base.Columns["MIChoiceID"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnItemValue = base.Columns["ItemValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMIChoiceID = new global::System.Data.DataColumn("MIChoiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID);
                this.columnItemName = new global::System.Data.DataColumn("ItemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnItemValue = new global::System.Data.DataColumn("ItemValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemValue);
                this.columnMIChoiceID.ReadOnly = true;
                this.columnItemName.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscCatalogChoiceRow NewListMiscCatalogChoiceRow() {
                return ((ListMiscCatalogChoiceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMiscCatalogChoiceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMiscCatalogChoiceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMiscCatalogChoiceRowChanged != null)) {
                    this.ListMiscCatalogChoiceRowChanged(this, new ListMiscCatalogChoiceRowChangeEvent(((ListMiscCatalogChoiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMiscCatalogChoiceRowChanging != null)) {
                    this.ListMiscCatalogChoiceRowChanging(this, new ListMiscCatalogChoiceRowChangeEvent(((ListMiscCatalogChoiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMiscCatalogChoiceRowDeleted != null)) {
                    this.ListMiscCatalogChoiceRowDeleted(this, new ListMiscCatalogChoiceRowChangeEvent(((ListMiscCatalogChoiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMiscCatalogChoiceRowDeleting != null)) {
                    this.ListMiscCatalogChoiceRowDeleting(this, new ListMiscCatalogChoiceRowChangeEvent(((ListMiscCatalogChoiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMiscCatalogChoiceRow(ListMiscCatalogChoiceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMiscCatalogChoiceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMICodeNewDataTable : global::System.Data.TypedTableBase<ListMICodeNewRow> {
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnMID;
            
            private global::System.Data.DataColumn columnMICodeID;
            
            private global::System.Data.DataColumn columnMICode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnValueBase;
            
            private global::System.Data.DataColumn columnPhysDepr;
            
            private global::System.Data.DataColumn columnFuncDepr;
            
            private global::System.Data.DataColumn columnValueOveride;
            
            private global::System.Data.DataColumn columnDeprCondition;
            
            private global::System.Data.DataColumn columnTotalValue;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnIsMiscConfigured;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeNewDataTable() {
                this.TableName = "ListMICodeNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMICodeNewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMICodeNewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIDColumn {
                get {
                    return this.columnMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeIDColumn {
                get {
                    return this.columnMICodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeColumn {
                get {
                    return this.columnMICode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueBaseColumn {
                get {
                    return this.columnValueBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhysDeprColumn {
                get {
                    return this.columnPhysDepr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuncDeprColumn {
                get {
                    return this.columnFuncDepr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueOverideColumn {
                get {
                    return this.columnValueOveride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprConditionColumn {
                get {
                    return this.columnDeprCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalValueColumn {
                get {
                    return this.columnTotalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMiscConfiguredColumn {
                get {
                    return this.columnIsMiscConfigured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeNewRow this[int index] {
                get {
                    return ((ListMICodeNewRow)(this.Rows[index]));
                }
            }
            
            public event ListMICodeNewRowChangeEventHandler ListMICodeNewRowChanging;
            
            public event ListMICodeNewRowChangeEventHandler ListMICodeNewRowChanged;
            
            public event ListMICodeNewRowChangeEventHandler ListMICodeNewRowDeleting;
            
            public event ListMICodeNewRowChangeEventHandler ListMICodeNewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMICodeNewRow(ListMICodeNewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeNewRow AddListMICodeNewRow(int ValueSliceID, int MID, int MICodeID, string MICode, string Description, int ValueBase, int PhysDepr, int FuncDepr, int ValueOveride, decimal DeprCondition, int TotalValue, short RollYear, bool IsMiscConfigured) {
                ListMICodeNewRow rowListMICodeNewRow = ((ListMICodeNewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ValueSliceID,
                        MID,
                        MICodeID,
                        MICode,
                        Description,
                        ValueBase,
                        PhysDepr,
                        FuncDepr,
                        ValueOveride,
                        DeprCondition,
                        TotalValue,
                        RollYear,
                        IsMiscConfigured};
                rowListMICodeNewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMICodeNewRow);
                return rowListMICodeNewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMICodeNewDataTable cln = ((ListMICodeNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMICodeNewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnMID = base.Columns["MID"];
                this.columnMICodeID = base.Columns["MICodeID"];
                this.columnMICode = base.Columns["MICode"];
                this.columnDescription = base.Columns["Description"];
                this.columnValueBase = base.Columns["ValueBase"];
                this.columnPhysDepr = base.Columns["PhysDepr"];
                this.columnFuncDepr = base.Columns["FuncDepr"];
                this.columnValueOveride = base.Columns["ValueOveride"];
                this.columnDeprCondition = base.Columns["DeprCondition"];
                this.columnTotalValue = base.Columns["TotalValue"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnIsMiscConfigured = base.Columns["IsMiscConfigured"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnMID = new global::System.Data.DataColumn("MID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID);
                this.columnMICodeID = new global::System.Data.DataColumn("MICodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICodeID);
                this.columnMICode = new global::System.Data.DataColumn("MICode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnValueBase = new global::System.Data.DataColumn("ValueBase", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueBase);
                this.columnPhysDepr = new global::System.Data.DataColumn("PhysDepr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhysDepr);
                this.columnFuncDepr = new global::System.Data.DataColumn("FuncDepr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuncDepr);
                this.columnValueOveride = new global::System.Data.DataColumn("ValueOveride", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueOveride);
                this.columnDeprCondition = new global::System.Data.DataColumn("DeprCondition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprCondition);
                this.columnTotalValue = new global::System.Data.DataColumn("TotalValue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalValue);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnIsMiscConfigured = new global::System.Data.DataColumn("IsMiscConfigured", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMiscConfigured);
                this.columnMID.ReadOnly = true;
                this.columnMICode.MaxLength = 10;
                this.columnDescription.MaxLength = 40;
                this.columnTotalValue.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeNewRow NewListMICodeNewRow() {
                return ((ListMICodeNewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMICodeNewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMICodeNewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMICodeNewRowChanged != null)) {
                    this.ListMICodeNewRowChanged(this, new ListMICodeNewRowChangeEvent(((ListMICodeNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMICodeNewRowChanging != null)) {
                    this.ListMICodeNewRowChanging(this, new ListMICodeNewRowChangeEvent(((ListMICodeNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMICodeNewRowDeleted != null)) {
                    this.ListMICodeNewRowDeleted(this, new ListMICodeNewRowChangeEvent(((ListMICodeNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMICodeNewRowDeleting != null)) {
                    this.ListMICodeNewRowDeleting(this, new ListMICodeNewRowChangeEvent(((ListMICodeNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMICodeNewRow(ListMICodeNewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMICodeNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListMiscImprovementsNewDataTable : global::System.Data.TypedTableBase<ListMiscImprovementsNewRow> {
            
            private global::System.Data.DataColumn columnMID;
            
            private global::System.Data.DataColumn columnMICodeID;
            
            private global::System.Data.DataColumn columnMICode;
            
            private global::System.Data.DataColumn columnValueBase;
            
            private global::System.Data.DataColumn columnPhysDepr;
            
            private global::System.Data.DataColumn columnFuncDepr;
            
            private global::System.Data.DataColumn columnValueOveride;
            
            private global::System.Data.DataColumn columnValueFinal;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnDeprYearin;
            
            private global::System.Data.DataColumn columnDeprTableID;
            
            private global::System.Data.DataColumn columnDeprCondition;
            
            private global::System.Data.DataColumn columnCondition;
            
            private global::System.Data.DataColumn columnDeprName;
            
            private global::System.Data.DataColumn columnDeprWithPrimary;
            
            private global::System.Data.DataColumn columnDeprQuality;
            
            private global::System.Data.DataColumn columnQuality;
            
            private global::System.Data.DataColumn columnDeprEconLife;
            
            private global::System.Data.DataColumn columnDeprEAge;
            
            private global::System.Data.DataColumn columnDeprFuncID;
            
            private global::System.Data.DataColumn columnDescription1;
            
            private global::System.Data.DataColumn columnDeprFuncPercent;
            
            private global::System.Data.DataColumn columnL01;
            
            private global::System.Data.DataColumn columnD01;
            
            private global::System.Data.DataColumn columnF01;
            
            private global::System.Data.DataColumn columnC01;
            
            private global::System.Data.DataColumn columnL02;
            
            private global::System.Data.DataColumn columnD02;
            
            private global::System.Data.DataColumn columnF02;
            
            private global::System.Data.DataColumn columnC02;
            
            private global::System.Data.DataColumn columnL03;
            
            private global::System.Data.DataColumn columnD03;
            
            private global::System.Data.DataColumn columnF03;
            
            private global::System.Data.DataColumn columnC03;
            
            private global::System.Data.DataColumn columnL04;
            
            private global::System.Data.DataColumn columnD04;
            
            private global::System.Data.DataColumn columnF04;
            
            private global::System.Data.DataColumn columnC04;
            
            private global::System.Data.DataColumn columnL05;
            
            private global::System.Data.DataColumn columnD05;
            
            private global::System.Data.DataColumn columnF05;
            
            private global::System.Data.DataColumn columnC05;
            
            private global::System.Data.DataColumn columnL06;
            
            private global::System.Data.DataColumn columnD06;
            
            private global::System.Data.DataColumn columnF06;
            
            private global::System.Data.DataColumn columnC06;
            
            private global::System.Data.DataColumn columnL07;
            
            private global::System.Data.DataColumn columnD07;
            
            private global::System.Data.DataColumn columnF07;
            
            private global::System.Data.DataColumn columnC07;
            
            private global::System.Data.DataColumn columnL08;
            
            private global::System.Data.DataColumn columnD08;
            
            private global::System.Data.DataColumn columnF08;
            
            private global::System.Data.DataColumn columnC08;
            
            private global::System.Data.DataColumn columnL09;
            
            private global::System.Data.DataColumn columnD09;
            
            private global::System.Data.DataColumn columnF09;
            
            private global::System.Data.DataColumn columnC09;
            
            private global::System.Data.DataColumn columnL10;
            
            private global::System.Data.DataColumn columnD10;
            
            private global::System.Data.DataColumn columnF10;
            
            private global::System.Data.DataColumn columnC10;
            
            private global::System.Data.DataColumn columnL11;
            
            private global::System.Data.DataColumn columnD11;
            
            private global::System.Data.DataColumn columnF11;
            
            private global::System.Data.DataColumn columnC11;
            
            private global::System.Data.DataColumn columnL12;
            
            private global::System.Data.DataColumn columnD12;
            
            private global::System.Data.DataColumn columnF12;
            
            private global::System.Data.DataColumn columnC12;
            
            private global::System.Data.DataColumn columnV01;
            
            private global::System.Data.DataColumn columnV02;
            
            private global::System.Data.DataColumn columnV03;
            
            private global::System.Data.DataColumn columnV04;
            
            private global::System.Data.DataColumn columnV05;
            
            private global::System.Data.DataColumn columnV06;
            
            private global::System.Data.DataColumn columnV07;
            
            private global::System.Data.DataColumn columnV08;
            
            private global::System.Data.DataColumn columnV09;
            
            private global::System.Data.DataColumn columnV10;
            
            private global::System.Data.DataColumn columnV11;
            
            private global::System.Data.DataColumn columnV12;
            
            private global::System.Data.DataColumn columnVFormula;
            
            private global::System.Data.DataColumn columnDeprPercent;
            
            private global::System.Data.DataColumn columnS01;
            
            private global::System.Data.DataColumn columnS02;
            
            private global::System.Data.DataColumn columnS03;
            
            private global::System.Data.DataColumn columnS04;
            
            private global::System.Data.DataColumn columnS05;
            
            private global::System.Data.DataColumn columnS06;
            
            private global::System.Data.DataColumn columnS07;
            
            private global::System.Data.DataColumn columnS08;
            
            private global::System.Data.DataColumn columnS09;
            
            private global::System.Data.DataColumn columnS10;
            
            private global::System.Data.DataColumn columnS11;
            
            private global::System.Data.DataColumn columnS12;
            
            private global::System.Data.DataColumn columnMIChoiceID01;
            
            private global::System.Data.DataColumn columnMIChoice01Name;
            
            private global::System.Data.DataColumn columnMIChoiceID02;
            
            private global::System.Data.DataColumn columnMIChoice02Name;
            
            private global::System.Data.DataColumn columnMIChoiceID03;
            
            private global::System.Data.DataColumn columnMIChoice03Name;
            
            private global::System.Data.DataColumn columnMIChoiceID04;
            
            private global::System.Data.DataColumn columnMIChoice04Name;
            
            private global::System.Data.DataColumn columnMIChoiceID05;
            
            private global::System.Data.DataColumn columnMIChoice05Name;
            
            private global::System.Data.DataColumn columnMIChoiceID06;
            
            private global::System.Data.DataColumn columnMIChoice06Name;
            
            private global::System.Data.DataColumn columnMIChoiceID07;
            
            private global::System.Data.DataColumn columnMIChoice07Name;
            
            private global::System.Data.DataColumn columnMIChoiceID08;
            
            private global::System.Data.DataColumn columnMIChoice08Name;
            
            private global::System.Data.DataColumn columnMIChoiceID09;
            
            private global::System.Data.DataColumn columnMIChoice09Name;
            
            private global::System.Data.DataColumn columnMIChoiceID10;
            
            private global::System.Data.DataColumn columnMIChoice10Name;
            
            private global::System.Data.DataColumn columnMIChoiceID11;
            
            private global::System.Data.DataColumn columnMIChoice11Name;
            
            private global::System.Data.DataColumn columnMIChoiceID12;
            
            private global::System.Data.DataColumn columnMIChoice12Name;
            
            private global::System.Data.DataColumn columnPolygonID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsNewDataTable() {
                this.TableName = "ListMiscImprovementsNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMiscImprovementsNewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListMiscImprovementsNewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIDColumn {
                get {
                    return this.columnMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeIDColumn {
                get {
                    return this.columnMICodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MICodeColumn {
                get {
                    return this.columnMICode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueBaseColumn {
                get {
                    return this.columnValueBase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhysDeprColumn {
                get {
                    return this.columnPhysDepr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuncDeprColumn {
                get {
                    return this.columnFuncDepr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueOverideColumn {
                get {
                    return this.columnValueOveride;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueFinalColumn {
                get {
                    return this.columnValueFinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprYearinColumn {
                get {
                    return this.columnDeprYearin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprTableIDColumn {
                get {
                    return this.columnDeprTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprConditionColumn {
                get {
                    return this.columnDeprCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionColumn {
                get {
                    return this.columnCondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprNameColumn {
                get {
                    return this.columnDeprName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprWithPrimaryColumn {
                get {
                    return this.columnDeprWithPrimary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprQualityColumn {
                get {
                    return this.columnDeprQuality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityColumn {
                get {
                    return this.columnQuality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprEconLifeColumn {
                get {
                    return this.columnDeprEconLife;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprEAgeColumn {
                get {
                    return this.columnDeprEAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprFuncIDColumn {
                get {
                    return this.columnDeprFuncID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Description1Column {
                get {
                    return this.columnDescription1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprFuncPercentColumn {
                get {
                    return this.columnDeprFuncPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L01Column {
                get {
                    return this.columnL01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D01Column {
                get {
                    return this.columnD01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F01Column {
                get {
                    return this.columnF01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C01Column {
                get {
                    return this.columnC01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L02Column {
                get {
                    return this.columnL02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D02Column {
                get {
                    return this.columnD02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F02Column {
                get {
                    return this.columnF02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C02Column {
                get {
                    return this.columnC02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L03Column {
                get {
                    return this.columnL03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D03Column {
                get {
                    return this.columnD03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F03Column {
                get {
                    return this.columnF03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C03Column {
                get {
                    return this.columnC03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L04Column {
                get {
                    return this.columnL04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D04Column {
                get {
                    return this.columnD04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F04Column {
                get {
                    return this.columnF04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C04Column {
                get {
                    return this.columnC04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L05Column {
                get {
                    return this.columnL05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D05Column {
                get {
                    return this.columnD05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F05Column {
                get {
                    return this.columnF05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C05Column {
                get {
                    return this.columnC05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L06Column {
                get {
                    return this.columnL06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D06Column {
                get {
                    return this.columnD06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F06Column {
                get {
                    return this.columnF06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C06Column {
                get {
                    return this.columnC06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L07Column {
                get {
                    return this.columnL07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D07Column {
                get {
                    return this.columnD07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F07Column {
                get {
                    return this.columnF07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C07Column {
                get {
                    return this.columnC07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L08Column {
                get {
                    return this.columnL08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D08Column {
                get {
                    return this.columnD08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F08Column {
                get {
                    return this.columnF08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C08Column {
                get {
                    return this.columnC08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L09Column {
                get {
                    return this.columnL09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D09Column {
                get {
                    return this.columnD09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F09Column {
                get {
                    return this.columnF09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C09Column {
                get {
                    return this.columnC09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L10Column {
                get {
                    return this.columnL10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D10Column {
                get {
                    return this.columnD10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F10Column {
                get {
                    return this.columnF10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C10Column {
                get {
                    return this.columnC10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L11Column {
                get {
                    return this.columnL11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D11Column {
                get {
                    return this.columnD11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F11Column {
                get {
                    return this.columnF11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C11Column {
                get {
                    return this.columnC11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn L12Column {
                get {
                    return this.columnL12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D12Column {
                get {
                    return this.columnD12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F12Column {
                get {
                    return this.columnF12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C12Column {
                get {
                    return this.columnC12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V01Column {
                get {
                    return this.columnV01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V02Column {
                get {
                    return this.columnV02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V03Column {
                get {
                    return this.columnV03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V04Column {
                get {
                    return this.columnV04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V05Column {
                get {
                    return this.columnV05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V06Column {
                get {
                    return this.columnV06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V07Column {
                get {
                    return this.columnV07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V08Column {
                get {
                    return this.columnV08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V09Column {
                get {
                    return this.columnV09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V10Column {
                get {
                    return this.columnV10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V11Column {
                get {
                    return this.columnV11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V12Column {
                get {
                    return this.columnV12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VFormulaColumn {
                get {
                    return this.columnVFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprPercentColumn {
                get {
                    return this.columnDeprPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S01Column {
                get {
                    return this.columnS01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S02Column {
                get {
                    return this.columnS02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S03Column {
                get {
                    return this.columnS03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S04Column {
                get {
                    return this.columnS04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S05Column {
                get {
                    return this.columnS05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S06Column {
                get {
                    return this.columnS06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S07Column {
                get {
                    return this.columnS07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S08Column {
                get {
                    return this.columnS08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S09Column {
                get {
                    return this.columnS09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S10Column {
                get {
                    return this.columnS10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S11Column {
                get {
                    return this.columnS11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S12Column {
                get {
                    return this.columnS12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID01Column {
                get {
                    return this.columnMIChoiceID01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice01NameColumn {
                get {
                    return this.columnMIChoice01Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID02Column {
                get {
                    return this.columnMIChoiceID02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice02NameColumn {
                get {
                    return this.columnMIChoice02Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID03Column {
                get {
                    return this.columnMIChoiceID03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice03NameColumn {
                get {
                    return this.columnMIChoice03Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID04Column {
                get {
                    return this.columnMIChoiceID04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice04NameColumn {
                get {
                    return this.columnMIChoice04Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID05Column {
                get {
                    return this.columnMIChoiceID05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice05NameColumn {
                get {
                    return this.columnMIChoice05Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID06Column {
                get {
                    return this.columnMIChoiceID06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice06NameColumn {
                get {
                    return this.columnMIChoice06Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID07Column {
                get {
                    return this.columnMIChoiceID07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice07NameColumn {
                get {
                    return this.columnMIChoice07Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID08Column {
                get {
                    return this.columnMIChoiceID08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice08NameColumn {
                get {
                    return this.columnMIChoice08Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID09Column {
                get {
                    return this.columnMIChoiceID09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice09NameColumn {
                get {
                    return this.columnMIChoice09Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID10Column {
                get {
                    return this.columnMIChoiceID10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice10NameColumn {
                get {
                    return this.columnMIChoice10Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID11Column {
                get {
                    return this.columnMIChoiceID11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice11NameColumn {
                get {
                    return this.columnMIChoice11Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoiceID12Column {
                get {
                    return this.columnMIChoiceID12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIChoice12NameColumn {
                get {
                    return this.columnMIChoice12Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PolygonIDColumn {
                get {
                    return this.columnPolygonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsNewRow this[int index] {
                get {
                    return ((ListMiscImprovementsNewRow)(this.Rows[index]));
                }
            }
            
            public event ListMiscImprovementsNewRowChangeEventHandler ListMiscImprovementsNewRowChanging;
            
            public event ListMiscImprovementsNewRowChangeEventHandler ListMiscImprovementsNewRowChanged;
            
            public event ListMiscImprovementsNewRowChangeEventHandler ListMiscImprovementsNewRowDeleting;
            
            public event ListMiscImprovementsNewRowChangeEventHandler ListMiscImprovementsNewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListMiscImprovementsNewRow(ListMiscImprovementsNewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsNewRow AddListMiscImprovementsNewRow(
                        int MID, 
                        int MICodeID, 
                        string MICode, 
                        int ValueBase, 
                        int PhysDepr, 
                        int FuncDepr, 
                        int ValueOveride, 
                        int ValueFinal, 
                        int ValueSliceID, 
                        string Description, 
                        short DeprYearin, 
                        int DeprTableID, 
                        decimal DeprCondition, 
                        string Condition, 
                        string DeprName, 
                        short DeprWithPrimary, 
                        decimal DeprQuality, 
                        decimal Quality, 
                        byte DeprEconLife, 
                        byte DeprEAge, 
                        byte DeprFuncID, 
                        string Description1, 
                        decimal DeprFuncPercent, 
                        string L01, 
                        byte D01, 
                        string F01, 
                        short C01, 
                        string L02, 
                        byte D02, 
                        string F02, 
                        short C02, 
                        string L03, 
                        byte D03, 
                        string F03, 
                        short C03, 
                        string L04, 
                        byte D04, 
                        string F04, 
                        short C04, 
                        string L05, 
                        byte D05, 
                        string F05, 
                        short C05, 
                        string L06, 
                        byte D06, 
                        string F06, 
                        short C06, 
                        string L07, 
                        byte D07, 
                        string F07, 
                        short C07, 
                        string L08, 
                        byte D08, 
                        string F08, 
                        short C08, 
                        string L09, 
                        byte D09, 
                        string F09, 
                        short C09, 
                        string L10, 
                        byte D10, 
                        string F10, 
                        short C10, 
                        string L11, 
                        byte D11, 
                        string F11, 
                        short C11, 
                        string L12, 
                        byte D12, 
                        string F12, 
                        short C12, 
                        decimal V01, 
                        decimal V02, 
                        decimal V03, 
                        decimal V04, 
                        decimal V05, 
                        decimal V06, 
                        decimal V07, 
                        decimal V08, 
                        decimal V09, 
                        decimal V10, 
                        decimal V11, 
                        decimal V12, 
                        string VFormula, 
                        decimal DeprPercent, 
                        short S01, 
                        short S02, 
                        short S03, 
                        short S04, 
                        short S05, 
                        short S06, 
                        short S07, 
                        short S08, 
                        short S09, 
                        short S10, 
                        short S11, 
                        short S12, 
                        int MIChoiceID01, 
                        string MIChoice01Name, 
                        int MIChoiceID02, 
                        string MIChoice02Name, 
                        int MIChoiceID03, 
                        string MIChoice03Name, 
                        int MIChoiceID04, 
                        string MIChoice04Name, 
                        int MIChoiceID05, 
                        string MIChoice05Name, 
                        int MIChoiceID06, 
                        string MIChoice06Name, 
                        int MIChoiceID07, 
                        string MIChoice07Name, 
                        int MIChoiceID08, 
                        string MIChoice08Name, 
                        int MIChoiceID09, 
                        string MIChoice09Name, 
                        int MIChoiceID10, 
                        string MIChoice10Name, 
                        int MIChoiceID11, 
                        string MIChoice11Name, 
                        int MIChoiceID12, 
                        string MIChoice12Name, 
                        int PolygonID) {
                ListMiscImprovementsNewRow rowListMiscImprovementsNewRow = ((ListMiscImprovementsNewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MID,
                        MICodeID,
                        MICode,
                        ValueBase,
                        PhysDepr,
                        FuncDepr,
                        ValueOveride,
                        ValueFinal,
                        ValueSliceID,
                        Description,
                        DeprYearin,
                        DeprTableID,
                        DeprCondition,
                        Condition,
                        DeprName,
                        DeprWithPrimary,
                        DeprQuality,
                        Quality,
                        DeprEconLife,
                        DeprEAge,
                        DeprFuncID,
                        Description1,
                        DeprFuncPercent,
                        L01,
                        D01,
                        F01,
                        C01,
                        L02,
                        D02,
                        F02,
                        C02,
                        L03,
                        D03,
                        F03,
                        C03,
                        L04,
                        D04,
                        F04,
                        C04,
                        L05,
                        D05,
                        F05,
                        C05,
                        L06,
                        D06,
                        F06,
                        C06,
                        L07,
                        D07,
                        F07,
                        C07,
                        L08,
                        D08,
                        F08,
                        C08,
                        L09,
                        D09,
                        F09,
                        C09,
                        L10,
                        D10,
                        F10,
                        C10,
                        L11,
                        D11,
                        F11,
                        C11,
                        L12,
                        D12,
                        F12,
                        C12,
                        V01,
                        V02,
                        V03,
                        V04,
                        V05,
                        V06,
                        V07,
                        V08,
                        V09,
                        V10,
                        V11,
                        V12,
                        VFormula,
                        DeprPercent,
                        S01,
                        S02,
                        S03,
                        S04,
                        S05,
                        S06,
                        S07,
                        S08,
                        S09,
                        S10,
                        S11,
                        S12,
                        MIChoiceID01,
                        MIChoice01Name,
                        MIChoiceID02,
                        MIChoice02Name,
                        MIChoiceID03,
                        MIChoice03Name,
                        MIChoiceID04,
                        MIChoice04Name,
                        MIChoiceID05,
                        MIChoice05Name,
                        MIChoiceID06,
                        MIChoice06Name,
                        MIChoiceID07,
                        MIChoice07Name,
                        MIChoiceID08,
                        MIChoice08Name,
                        MIChoiceID09,
                        MIChoice09Name,
                        MIChoiceID10,
                        MIChoice10Name,
                        MIChoiceID11,
                        MIChoice11Name,
                        MIChoiceID12,
                        MIChoice12Name,
                        PolygonID};
                rowListMiscImprovementsNewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListMiscImprovementsNewRow);
                return rowListMiscImprovementsNewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListMiscImprovementsNewDataTable cln = ((ListMiscImprovementsNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListMiscImprovementsNewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMID = base.Columns["MID"];
                this.columnMICodeID = base.Columns["MICodeID"];
                this.columnMICode = base.Columns["MICode"];
                this.columnValueBase = base.Columns["ValueBase"];
                this.columnPhysDepr = base.Columns["PhysDepr"];
                this.columnFuncDepr = base.Columns["FuncDepr"];
                this.columnValueOveride = base.Columns["ValueOveride"];
                this.columnValueFinal = base.Columns["ValueFinal"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnDescription = base.Columns["Description"];
                this.columnDeprYearin = base.Columns["DeprYearin"];
                this.columnDeprTableID = base.Columns["DeprTableID"];
                this.columnDeprCondition = base.Columns["DeprCondition"];
                this.columnCondition = base.Columns["Condition"];
                this.columnDeprName = base.Columns["DeprName"];
                this.columnDeprWithPrimary = base.Columns["DeprWithPrimary"];
                this.columnDeprQuality = base.Columns["DeprQuality"];
                this.columnQuality = base.Columns["Quality"];
                this.columnDeprEconLife = base.Columns["DeprEconLife"];
                this.columnDeprEAge = base.Columns["DeprEAge"];
                this.columnDeprFuncID = base.Columns["DeprFuncID"];
                this.columnDescription1 = base.Columns["Description1"];
                this.columnDeprFuncPercent = base.Columns["DeprFuncPercent"];
                this.columnL01 = base.Columns["L01"];
                this.columnD01 = base.Columns["D01"];
                this.columnF01 = base.Columns["F01"];
                this.columnC01 = base.Columns["C01"];
                this.columnL02 = base.Columns["L02"];
                this.columnD02 = base.Columns["D02"];
                this.columnF02 = base.Columns["F02"];
                this.columnC02 = base.Columns["C02"];
                this.columnL03 = base.Columns["L03"];
                this.columnD03 = base.Columns["D03"];
                this.columnF03 = base.Columns["F03"];
                this.columnC03 = base.Columns["C03"];
                this.columnL04 = base.Columns["L04"];
                this.columnD04 = base.Columns["D04"];
                this.columnF04 = base.Columns["F04"];
                this.columnC04 = base.Columns["C04"];
                this.columnL05 = base.Columns["L05"];
                this.columnD05 = base.Columns["D05"];
                this.columnF05 = base.Columns["F05"];
                this.columnC05 = base.Columns["C05"];
                this.columnL06 = base.Columns["L06"];
                this.columnD06 = base.Columns["D06"];
                this.columnF06 = base.Columns["F06"];
                this.columnC06 = base.Columns["C06"];
                this.columnL07 = base.Columns["L07"];
                this.columnD07 = base.Columns["D07"];
                this.columnF07 = base.Columns["F07"];
                this.columnC07 = base.Columns["C07"];
                this.columnL08 = base.Columns["L08"];
                this.columnD08 = base.Columns["D08"];
                this.columnF08 = base.Columns["F08"];
                this.columnC08 = base.Columns["C08"];
                this.columnL09 = base.Columns["L09"];
                this.columnD09 = base.Columns["D09"];
                this.columnF09 = base.Columns["F09"];
                this.columnC09 = base.Columns["C09"];
                this.columnL10 = base.Columns["L10"];
                this.columnD10 = base.Columns["D10"];
                this.columnF10 = base.Columns["F10"];
                this.columnC10 = base.Columns["C10"];
                this.columnL11 = base.Columns["L11"];
                this.columnD11 = base.Columns["D11"];
                this.columnF11 = base.Columns["F11"];
                this.columnC11 = base.Columns["C11"];
                this.columnL12 = base.Columns["L12"];
                this.columnD12 = base.Columns["D12"];
                this.columnF12 = base.Columns["F12"];
                this.columnC12 = base.Columns["C12"];
                this.columnV01 = base.Columns["V01"];
                this.columnV02 = base.Columns["V02"];
                this.columnV03 = base.Columns["V03"];
                this.columnV04 = base.Columns["V04"];
                this.columnV05 = base.Columns["V05"];
                this.columnV06 = base.Columns["V06"];
                this.columnV07 = base.Columns["V07"];
                this.columnV08 = base.Columns["V08"];
                this.columnV09 = base.Columns["V09"];
                this.columnV10 = base.Columns["V10"];
                this.columnV11 = base.Columns["V11"];
                this.columnV12 = base.Columns["V12"];
                this.columnVFormula = base.Columns["VFormula"];
                this.columnDeprPercent = base.Columns["DeprPercent"];
                this.columnS01 = base.Columns["S01"];
                this.columnS02 = base.Columns["S02"];
                this.columnS03 = base.Columns["S03"];
                this.columnS04 = base.Columns["S04"];
                this.columnS05 = base.Columns["S05"];
                this.columnS06 = base.Columns["S06"];
                this.columnS07 = base.Columns["S07"];
                this.columnS08 = base.Columns["S08"];
                this.columnS09 = base.Columns["S09"];
                this.columnS10 = base.Columns["S10"];
                this.columnS11 = base.Columns["S11"];
                this.columnS12 = base.Columns["S12"];
                this.columnMIChoiceID01 = base.Columns["MIChoiceID01"];
                this.columnMIChoice01Name = base.Columns["MIChoice01Name"];
                this.columnMIChoiceID02 = base.Columns["MIChoiceID02"];
                this.columnMIChoice02Name = base.Columns["MIChoice02Name"];
                this.columnMIChoiceID03 = base.Columns["MIChoiceID03"];
                this.columnMIChoice03Name = base.Columns["MIChoice03Name"];
                this.columnMIChoiceID04 = base.Columns["MIChoiceID04"];
                this.columnMIChoice04Name = base.Columns["MIChoice04Name"];
                this.columnMIChoiceID05 = base.Columns["MIChoiceID05"];
                this.columnMIChoice05Name = base.Columns["MIChoice05Name"];
                this.columnMIChoiceID06 = base.Columns["MIChoiceID06"];
                this.columnMIChoice06Name = base.Columns["MIChoice06Name"];
                this.columnMIChoiceID07 = base.Columns["MIChoiceID07"];
                this.columnMIChoice07Name = base.Columns["MIChoice07Name"];
                this.columnMIChoiceID08 = base.Columns["MIChoiceID08"];
                this.columnMIChoice08Name = base.Columns["MIChoice08Name"];
                this.columnMIChoiceID09 = base.Columns["MIChoiceID09"];
                this.columnMIChoice09Name = base.Columns["MIChoice09Name"];
                this.columnMIChoiceID10 = base.Columns["MIChoiceID10"];
                this.columnMIChoice10Name = base.Columns["MIChoice10Name"];
                this.columnMIChoiceID11 = base.Columns["MIChoiceID11"];
                this.columnMIChoice11Name = base.Columns["MIChoice11Name"];
                this.columnMIChoiceID12 = base.Columns["MIChoiceID12"];
                this.columnMIChoice12Name = base.Columns["MIChoice12Name"];
                this.columnPolygonID = base.Columns["PolygonID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMID = new global::System.Data.DataColumn("MID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMID);
                this.columnMICodeID = new global::System.Data.DataColumn("MICodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICodeID);
                this.columnMICode = new global::System.Data.DataColumn("MICode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMICode);
                this.columnValueBase = new global::System.Data.DataColumn("ValueBase", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueBase);
                this.columnPhysDepr = new global::System.Data.DataColumn("PhysDepr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhysDepr);
                this.columnFuncDepr = new global::System.Data.DataColumn("FuncDepr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuncDepr);
                this.columnValueOveride = new global::System.Data.DataColumn("ValueOveride", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueOveride);
                this.columnValueFinal = new global::System.Data.DataColumn("ValueFinal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueFinal);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDeprYearin = new global::System.Data.DataColumn("DeprYearin", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprYearin);
                this.columnDeprTableID = new global::System.Data.DataColumn("DeprTableID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprTableID);
                this.columnDeprCondition = new global::System.Data.DataColumn("DeprCondition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprCondition);
                this.columnCondition = new global::System.Data.DataColumn("Condition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondition);
                this.columnDeprName = new global::System.Data.DataColumn("DeprName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprName);
                this.columnDeprWithPrimary = new global::System.Data.DataColumn("DeprWithPrimary", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprWithPrimary);
                this.columnDeprQuality = new global::System.Data.DataColumn("DeprQuality", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprQuality);
                this.columnQuality = new global::System.Data.DataColumn("Quality", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuality);
                this.columnDeprEconLife = new global::System.Data.DataColumn("DeprEconLife", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprEconLife);
                this.columnDeprEAge = new global::System.Data.DataColumn("DeprEAge", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprEAge);
                this.columnDeprFuncID = new global::System.Data.DataColumn("DeprFuncID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprFuncID);
                this.columnDescription1 = new global::System.Data.DataColumn("Description1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription1);
                this.columnDeprFuncPercent = new global::System.Data.DataColumn("DeprFuncPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprFuncPercent);
                this.columnL01 = new global::System.Data.DataColumn("L01", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL01);
                this.columnD01 = new global::System.Data.DataColumn("D01", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD01);
                this.columnF01 = new global::System.Data.DataColumn("F01", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF01);
                this.columnC01 = new global::System.Data.DataColumn("C01", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC01);
                this.columnL02 = new global::System.Data.DataColumn("L02", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL02);
                this.columnD02 = new global::System.Data.DataColumn("D02", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD02);
                this.columnF02 = new global::System.Data.DataColumn("F02", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF02);
                this.columnC02 = new global::System.Data.DataColumn("C02", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC02);
                this.columnL03 = new global::System.Data.DataColumn("L03", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL03);
                this.columnD03 = new global::System.Data.DataColumn("D03", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD03);
                this.columnF03 = new global::System.Data.DataColumn("F03", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF03);
                this.columnC03 = new global::System.Data.DataColumn("C03", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC03);
                this.columnL04 = new global::System.Data.DataColumn("L04", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL04);
                this.columnD04 = new global::System.Data.DataColumn("D04", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD04);
                this.columnF04 = new global::System.Data.DataColumn("F04", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF04);
                this.columnC04 = new global::System.Data.DataColumn("C04", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC04);
                this.columnL05 = new global::System.Data.DataColumn("L05", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL05);
                this.columnD05 = new global::System.Data.DataColumn("D05", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD05);
                this.columnF05 = new global::System.Data.DataColumn("F05", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF05);
                this.columnC05 = new global::System.Data.DataColumn("C05", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC05);
                this.columnL06 = new global::System.Data.DataColumn("L06", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL06);
                this.columnD06 = new global::System.Data.DataColumn("D06", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD06);
                this.columnF06 = new global::System.Data.DataColumn("F06", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF06);
                this.columnC06 = new global::System.Data.DataColumn("C06", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC06);
                this.columnL07 = new global::System.Data.DataColumn("L07", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL07);
                this.columnD07 = new global::System.Data.DataColumn("D07", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD07);
                this.columnF07 = new global::System.Data.DataColumn("F07", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF07);
                this.columnC07 = new global::System.Data.DataColumn("C07", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC07);
                this.columnL08 = new global::System.Data.DataColumn("L08", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL08);
                this.columnD08 = new global::System.Data.DataColumn("D08", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD08);
                this.columnF08 = new global::System.Data.DataColumn("F08", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF08);
                this.columnC08 = new global::System.Data.DataColumn("C08", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC08);
                this.columnL09 = new global::System.Data.DataColumn("L09", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL09);
                this.columnD09 = new global::System.Data.DataColumn("D09", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD09);
                this.columnF09 = new global::System.Data.DataColumn("F09", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF09);
                this.columnC09 = new global::System.Data.DataColumn("C09", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC09);
                this.columnL10 = new global::System.Data.DataColumn("L10", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL10);
                this.columnD10 = new global::System.Data.DataColumn("D10", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD10);
                this.columnF10 = new global::System.Data.DataColumn("F10", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF10);
                this.columnC10 = new global::System.Data.DataColumn("C10", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC10);
                this.columnL11 = new global::System.Data.DataColumn("L11", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL11);
                this.columnD11 = new global::System.Data.DataColumn("D11", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD11);
                this.columnF11 = new global::System.Data.DataColumn("F11", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF11);
                this.columnC11 = new global::System.Data.DataColumn("C11", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC11);
                this.columnL12 = new global::System.Data.DataColumn("L12", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnL12);
                this.columnD12 = new global::System.Data.DataColumn("D12", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD12);
                this.columnF12 = new global::System.Data.DataColumn("F12", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF12);
                this.columnC12 = new global::System.Data.DataColumn("C12", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC12);
                this.columnV01 = new global::System.Data.DataColumn("V01", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV01);
                this.columnV02 = new global::System.Data.DataColumn("V02", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV02);
                this.columnV03 = new global::System.Data.DataColumn("V03", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV03);
                this.columnV04 = new global::System.Data.DataColumn("V04", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV04);
                this.columnV05 = new global::System.Data.DataColumn("V05", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV05);
                this.columnV06 = new global::System.Data.DataColumn("V06", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV06);
                this.columnV07 = new global::System.Data.DataColumn("V07", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV07);
                this.columnV08 = new global::System.Data.DataColumn("V08", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV08);
                this.columnV09 = new global::System.Data.DataColumn("V09", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV09);
                this.columnV10 = new global::System.Data.DataColumn("V10", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV10);
                this.columnV11 = new global::System.Data.DataColumn("V11", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV11);
                this.columnV12 = new global::System.Data.DataColumn("V12", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV12);
                this.columnVFormula = new global::System.Data.DataColumn("VFormula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVFormula);
                this.columnDeprPercent = new global::System.Data.DataColumn("DeprPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprPercent);
                this.columnS01 = new global::System.Data.DataColumn("S01", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS01);
                this.columnS02 = new global::System.Data.DataColumn("S02", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS02);
                this.columnS03 = new global::System.Data.DataColumn("S03", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS03);
                this.columnS04 = new global::System.Data.DataColumn("S04", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS04);
                this.columnS05 = new global::System.Data.DataColumn("S05", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS05);
                this.columnS06 = new global::System.Data.DataColumn("S06", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS06);
                this.columnS07 = new global::System.Data.DataColumn("S07", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS07);
                this.columnS08 = new global::System.Data.DataColumn("S08", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS08);
                this.columnS09 = new global::System.Data.DataColumn("S09", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS09);
                this.columnS10 = new global::System.Data.DataColumn("S10", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS10);
                this.columnS11 = new global::System.Data.DataColumn("S11", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS11);
                this.columnS12 = new global::System.Data.DataColumn("S12", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS12);
                this.columnMIChoiceID01 = new global::System.Data.DataColumn("MIChoiceID01", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID01);
                this.columnMIChoice01Name = new global::System.Data.DataColumn("MIChoice01Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice01Name);
                this.columnMIChoiceID02 = new global::System.Data.DataColumn("MIChoiceID02", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID02);
                this.columnMIChoice02Name = new global::System.Data.DataColumn("MIChoice02Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice02Name);
                this.columnMIChoiceID03 = new global::System.Data.DataColumn("MIChoiceID03", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID03);
                this.columnMIChoice03Name = new global::System.Data.DataColumn("MIChoice03Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice03Name);
                this.columnMIChoiceID04 = new global::System.Data.DataColumn("MIChoiceID04", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID04);
                this.columnMIChoice04Name = new global::System.Data.DataColumn("MIChoice04Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice04Name);
                this.columnMIChoiceID05 = new global::System.Data.DataColumn("MIChoiceID05", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID05);
                this.columnMIChoice05Name = new global::System.Data.DataColumn("MIChoice05Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice05Name);
                this.columnMIChoiceID06 = new global::System.Data.DataColumn("MIChoiceID06", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID06);
                this.columnMIChoice06Name = new global::System.Data.DataColumn("MIChoice06Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice06Name);
                this.columnMIChoiceID07 = new global::System.Data.DataColumn("MIChoiceID07", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID07);
                this.columnMIChoice07Name = new global::System.Data.DataColumn("MIChoice07Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice07Name);
                this.columnMIChoiceID08 = new global::System.Data.DataColumn("MIChoiceID08", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID08);
                this.columnMIChoice08Name = new global::System.Data.DataColumn("MIChoice08Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice08Name);
                this.columnMIChoiceID09 = new global::System.Data.DataColumn("MIChoiceID09", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID09);
                this.columnMIChoice09Name = new global::System.Data.DataColumn("MIChoice09Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice09Name);
                this.columnMIChoiceID10 = new global::System.Data.DataColumn("MIChoiceID10", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID10);
                this.columnMIChoice10Name = new global::System.Data.DataColumn("MIChoice10Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice10Name);
                this.columnMIChoiceID11 = new global::System.Data.DataColumn("MIChoiceID11", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID11);
                this.columnMIChoice11Name = new global::System.Data.DataColumn("MIChoice11Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice11Name);
                this.columnMIChoiceID12 = new global::System.Data.DataColumn("MIChoiceID12", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoiceID12);
                this.columnMIChoice12Name = new global::System.Data.DataColumn("MIChoice12Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIChoice12Name);
                this.columnPolygonID = new global::System.Data.DataColumn("PolygonID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPolygonID);
                this.columnMID.ReadOnly = true;
                this.columnMICode.MaxLength = 10;
                this.columnDescription.MaxLength = 40;
                this.columnCondition.MaxLength = 20;
                this.columnDeprName.MaxLength = 50;
                this.columnDescription1.MaxLength = 20;
                this.columnL01.MaxLength = 12;
                this.columnF01.MaxLength = 1500;
                this.columnL02.MaxLength = 12;
                this.columnF02.MaxLength = 1500;
                this.columnL03.MaxLength = 12;
                this.columnF03.MaxLength = 1500;
                this.columnL04.MaxLength = 12;
                this.columnF04.MaxLength = 1500;
                this.columnL05.MaxLength = 12;
                this.columnF05.MaxLength = 1500;
                this.columnL06.MaxLength = 12;
                this.columnF06.MaxLength = 1500;
                this.columnL07.MaxLength = 12;
                this.columnF07.MaxLength = 1500;
                this.columnL08.MaxLength = 12;
                this.columnF08.MaxLength = 1500;
                this.columnL09.MaxLength = 12;
                this.columnF09.MaxLength = 1500;
                this.columnL10.MaxLength = 12;
                this.columnF10.MaxLength = 1500;
                this.columnL11.MaxLength = 12;
                this.columnF11.MaxLength = 1500;
                this.columnL12.MaxLength = 12;
                this.columnF12.MaxLength = 1500;
                this.columnVFormula.MaxLength = 1500;
                this.columnMIChoice01Name.MaxLength = 20;
                this.columnMIChoice02Name.MaxLength = 20;
                this.columnMIChoice03Name.MaxLength = 20;
                this.columnMIChoice04Name.MaxLength = 20;
                this.columnMIChoice05Name.MaxLength = 20;
                this.columnMIChoice06Name.MaxLength = 20;
                this.columnMIChoice07Name.MaxLength = 20;
                this.columnMIChoice08Name.MaxLength = 20;
                this.columnMIChoice09Name.MaxLength = 20;
                this.columnMIChoice10Name.MaxLength = 20;
                this.columnMIChoice11Name.MaxLength = 20;
                this.columnMIChoice12Name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsNewRow NewListMiscImprovementsNewRow() {
                return ((ListMiscImprovementsNewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListMiscImprovementsNewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListMiscImprovementsNewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListMiscImprovementsNewRowChanged != null)) {
                    this.ListMiscImprovementsNewRowChanged(this, new ListMiscImprovementsNewRowChangeEvent(((ListMiscImprovementsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListMiscImprovementsNewRowChanging != null)) {
                    this.ListMiscImprovementsNewRowChanging(this, new ListMiscImprovementsNewRowChangeEvent(((ListMiscImprovementsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListMiscImprovementsNewRowDeleted != null)) {
                    this.ListMiscImprovementsNewRowDeleted(this, new ListMiscImprovementsNewRowChangeEvent(((ListMiscImprovementsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListMiscImprovementsNewRowDeleting != null)) {
                    this.ListMiscImprovementsNewRowDeleting(this, new ListMiscImprovementsNewRowChangeEvent(((ListMiscImprovementsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListMiscImprovementsNewRow(ListMiscImprovementsNewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListMiscImprovementsNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListDeprTableDataTable : global::System.Data.TypedTableBase<ListDeprTableRow> {
            
            private global::System.Data.DataColumn columnDeprTableID;
            
            private global::System.Data.DataColumn columnDeprName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableDataTable() {
                this.TableName = "ListDeprTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListDeprTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprTableIDColumn {
                get {
                    return this.columnDeprTableID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeprNameColumn {
                get {
                    return this.columnDeprName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow this[int index] {
                get {
                    return ((ListDeprTableRow)(this.Rows[index]));
                }
            }
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowChanging;
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowChanged;
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowDeleting;
            
            public event ListDeprTableRowChangeEventHandler ListDeprTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListDeprTableRow(ListDeprTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow AddListDeprTableRow(int DeprTableID, string DeprName) {
                ListDeprTableRow rowListDeprTableRow = ((ListDeprTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeprTableID,
                        DeprName};
                rowListDeprTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListDeprTableRow);
                return rowListDeprTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListDeprTableDataTable cln = ((ListDeprTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListDeprTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeprTableID = base.Columns["DeprTableID"];
                this.columnDeprName = base.Columns["DeprName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeprTableID = new global::System.Data.DataColumn("DeprTableID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprTableID);
                this.columnDeprName = new global::System.Data.DataColumn("DeprName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeprName);
                this.columnDeprTableID.ReadOnly = true;
                this.columnDeprName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow NewListDeprTableRow() {
                return ((ListDeprTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListDeprTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListDeprTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListDeprTableRowChanged != null)) {
                    this.ListDeprTableRowChanged(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListDeprTableRowChanging != null)) {
                    this.ListDeprTableRowChanging(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListDeprTableRowDeleted != null)) {
                    this.ListDeprTableRowDeleted(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListDeprTableRowDeleting != null)) {
                    this.ListDeprTableRowDeleting(this, new ListDeprTableRowChangeEvent(((ListDeprTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListDeprTableRow(ListDeprTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListDeprTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecalcMiscImprovementDataTable : global::System.Data.TypedTableBase<RecalcMiscImprovementRow> {
            
            private global::System.Data.DataColumn columnPhysDeprPercent;
            
            private global::System.Data.DataColumn columnFuncDeprPercent;
            
            private global::System.Data.DataColumn columnPhysDepr;
            
            private global::System.Data.DataColumn columnFuncDepr;
            
            private global::System.Data.DataColumn columnFinalValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecalcMiscImprovementDataTable() {
                this.TableName = "RecalcMiscImprovement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecalcMiscImprovementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecalcMiscImprovementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhysDeprPercentColumn {
                get {
                    return this.columnPhysDeprPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuncDeprPercentColumn {
                get {
                    return this.columnFuncDeprPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhysDeprColumn {
                get {
                    return this.columnPhysDepr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuncDeprColumn {
                get {
                    return this.columnFuncDepr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalValueColumn {
                get {
                    return this.columnFinalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecalcMiscImprovementRow this[int index] {
                get {
                    return ((RecalcMiscImprovementRow)(this.Rows[index]));
                }
            }
            
            public event RecalcMiscImprovementRowChangeEventHandler RecalcMiscImprovementRowChanging;
            
            public event RecalcMiscImprovementRowChangeEventHandler RecalcMiscImprovementRowChanged;
            
            public event RecalcMiscImprovementRowChangeEventHandler RecalcMiscImprovementRowDeleting;
            
            public event RecalcMiscImprovementRowChangeEventHandler RecalcMiscImprovementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecalcMiscImprovementRow(RecalcMiscImprovementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecalcMiscImprovementRow AddRecalcMiscImprovementRow(decimal PhysDeprPercent, decimal FuncDeprPercent, decimal PhysDepr, decimal FuncDepr, decimal FinalValue) {
                RecalcMiscImprovementRow rowRecalcMiscImprovementRow = ((RecalcMiscImprovementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PhysDeprPercent,
                        FuncDeprPercent,
                        PhysDepr,
                        FuncDepr,
                        FinalValue};
                rowRecalcMiscImprovementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecalcMiscImprovementRow);
                return rowRecalcMiscImprovementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RecalcMiscImprovementDataTable cln = ((RecalcMiscImprovementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RecalcMiscImprovementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPhysDeprPercent = base.Columns["PhysDeprPercent"];
                this.columnFuncDeprPercent = base.Columns["FuncDeprPercent"];
                this.columnPhysDepr = base.Columns["PhysDepr"];
                this.columnFuncDepr = base.Columns["FuncDepr"];
                this.columnFinalValue = base.Columns["FinalValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPhysDeprPercent = new global::System.Data.DataColumn("PhysDeprPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhysDeprPercent);
                this.columnFuncDeprPercent = new global::System.Data.DataColumn("FuncDeprPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuncDeprPercent);
                this.columnPhysDepr = new global::System.Data.DataColumn("PhysDepr", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhysDepr);
                this.columnFuncDepr = new global::System.Data.DataColumn("FuncDepr", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuncDepr);
                this.columnFinalValue = new global::System.Data.DataColumn("FinalValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecalcMiscImprovementRow NewRecalcMiscImprovementRow() {
                return ((RecalcMiscImprovementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RecalcMiscImprovementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RecalcMiscImprovementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecalcMiscImprovementRowChanged != null)) {
                    this.RecalcMiscImprovementRowChanged(this, new RecalcMiscImprovementRowChangeEvent(((RecalcMiscImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecalcMiscImprovementRowChanging != null)) {
                    this.RecalcMiscImprovementRowChanging(this, new RecalcMiscImprovementRowChangeEvent(((RecalcMiscImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecalcMiscImprovementRowDeleted != null)) {
                    this.RecalcMiscImprovementRowDeleted(this, new RecalcMiscImprovementRowChangeEvent(((RecalcMiscImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecalcMiscImprovementRowDeleting != null)) {
                    this.RecalcMiscImprovementRowDeleting(this, new RecalcMiscImprovementRowChangeEvent(((RecalcMiscImprovementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecalcMiscImprovementRow(RecalcMiscImprovementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36011MiscImprovementOverviewData ds = new F36011MiscImprovementOverviewData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecalcMiscImprovementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMiscImprovementsRow : global::System.Data.DataRow {
            
            private ListMiscImprovementsDataTable tableListMiscImprovements;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMiscImprovementsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMiscImprovements = ((ListMiscImprovementsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovements.MIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.MIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MICodeID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovements.MICodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MICodeID\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.MICodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MICode {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.MICodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MICode\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.MICodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ValueCalc {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.ValueCalcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueCalc\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.ValueCalcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Depr {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.DeprColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depr\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.DeprColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ValueOverride {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.ValueOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueOverride\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.ValueOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovements.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DeprYear {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.DeprYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprYear\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.DeprYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeprTableID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovements.DeprTableIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprTableID\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.DeprTableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeprName {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.DeprNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprName\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.DeprNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeprCondition {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.DeprConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprCondition\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.DeprConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DeprByObject {
                get {
                    try {
                        return ((bool)(this[this.tableListMiscImprovements.DeprByObjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprByObject\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.DeprByObjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L01 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L01\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D01 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D01\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F01 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F01\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L02 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L02\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D02 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D02\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F02 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F02\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L03 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L03\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D03 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D03\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F03 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F03\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L04 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L04\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D04 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D04\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F04 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F04\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L05 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L05\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D05 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D05\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F05 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F05\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L06 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L06\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D06 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D06\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F06 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F06\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L07 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L07\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D07 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D07\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F07 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F07\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L08 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L08\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D08 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D08\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F08 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F08\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L09 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L09\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D09 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D09\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F09 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F09\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L10 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.L10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'L10\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.L10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D10 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovements.D10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D10\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.D10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F10 {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.F10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F10\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.F10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V01 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V01\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V02 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V02\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V03 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V03\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V04 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V04\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V05 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V05\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V06 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V06\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V07 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V07\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V08 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V08\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V09 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V09\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V10 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.V10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V10\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.V10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VFormula {
                get {
                    try {
                        return ((string)(this[this.tableListMiscImprovements.VFormulaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VFormula\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.VFormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeprPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovements.DeprPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprPercent\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.DeprPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S01 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S01\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S10 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S10\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S09 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S09\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S08 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S08\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S07 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S07\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S06 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S06\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S05 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S05\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S04 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S04\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S03 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S03\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S02 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovements.S02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S02\' in table \'ListMiscImprovements\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovements.S02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIDNull() {
                return this.IsNull(this.tableListMiscImprovements.MIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIDNull() {
                this[this.tableListMiscImprovements.MIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeIDNull() {
                return this.IsNull(this.tableListMiscImprovements.MICodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeIDNull() {
                this[this.tableListMiscImprovements.MICodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeNull() {
                return this.IsNull(this.tableListMiscImprovements.MICodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeNull() {
                this[this.tableListMiscImprovements.MICodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueCalcNull() {
                return this.IsNull(this.tableListMiscImprovements.ValueCalcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueCalcNull() {
                this[this.tableListMiscImprovements.ValueCalcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListMiscImprovements.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListMiscImprovements.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprNull() {
                return this.IsNull(this.tableListMiscImprovements.DeprColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprNull() {
                this[this.tableListMiscImprovements.DeprColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueOverrideNull() {
                return this.IsNull(this.tableListMiscImprovements.ValueOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueOverrideNull() {
                this[this.tableListMiscImprovements.ValueOverrideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListMiscImprovements.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListMiscImprovements.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprYearNull() {
                return this.IsNull(this.tableListMiscImprovements.DeprYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprYearNull() {
                this[this.tableListMiscImprovements.DeprYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprTableIDNull() {
                return this.IsNull(this.tableListMiscImprovements.DeprTableIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprTableIDNull() {
                this[this.tableListMiscImprovements.DeprTableIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprNameNull() {
                return this.IsNull(this.tableListMiscImprovements.DeprNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprNameNull() {
                this[this.tableListMiscImprovements.DeprNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprConditionNull() {
                return this.IsNull(this.tableListMiscImprovements.DeprConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprConditionNull() {
                this[this.tableListMiscImprovements.DeprConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprByObjectNull() {
                return this.IsNull(this.tableListMiscImprovements.DeprByObjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprByObjectNull() {
                this[this.tableListMiscImprovements.DeprByObjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL01Null() {
                return this.IsNull(this.tableListMiscImprovements.L01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL01Null() {
                this[this.tableListMiscImprovements.L01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD01Null() {
                return this.IsNull(this.tableListMiscImprovements.D01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD01Null() {
                this[this.tableListMiscImprovements.D01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF01Null() {
                return this.IsNull(this.tableListMiscImprovements.F01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF01Null() {
                this[this.tableListMiscImprovements.F01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL02Null() {
                return this.IsNull(this.tableListMiscImprovements.L02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL02Null() {
                this[this.tableListMiscImprovements.L02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD02Null() {
                return this.IsNull(this.tableListMiscImprovements.D02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD02Null() {
                this[this.tableListMiscImprovements.D02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF02Null() {
                return this.IsNull(this.tableListMiscImprovements.F02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF02Null() {
                this[this.tableListMiscImprovements.F02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL03Null() {
                return this.IsNull(this.tableListMiscImprovements.L03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL03Null() {
                this[this.tableListMiscImprovements.L03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD03Null() {
                return this.IsNull(this.tableListMiscImprovements.D03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD03Null() {
                this[this.tableListMiscImprovements.D03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF03Null() {
                return this.IsNull(this.tableListMiscImprovements.F03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF03Null() {
                this[this.tableListMiscImprovements.F03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL04Null() {
                return this.IsNull(this.tableListMiscImprovements.L04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL04Null() {
                this[this.tableListMiscImprovements.L04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD04Null() {
                return this.IsNull(this.tableListMiscImprovements.D04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD04Null() {
                this[this.tableListMiscImprovements.D04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF04Null() {
                return this.IsNull(this.tableListMiscImprovements.F04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF04Null() {
                this[this.tableListMiscImprovements.F04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL05Null() {
                return this.IsNull(this.tableListMiscImprovements.L05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL05Null() {
                this[this.tableListMiscImprovements.L05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD05Null() {
                return this.IsNull(this.tableListMiscImprovements.D05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD05Null() {
                this[this.tableListMiscImprovements.D05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF05Null() {
                return this.IsNull(this.tableListMiscImprovements.F05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF05Null() {
                this[this.tableListMiscImprovements.F05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL06Null() {
                return this.IsNull(this.tableListMiscImprovements.L06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL06Null() {
                this[this.tableListMiscImprovements.L06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD06Null() {
                return this.IsNull(this.tableListMiscImprovements.D06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD06Null() {
                this[this.tableListMiscImprovements.D06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF06Null() {
                return this.IsNull(this.tableListMiscImprovements.F06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF06Null() {
                this[this.tableListMiscImprovements.F06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL07Null() {
                return this.IsNull(this.tableListMiscImprovements.L07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL07Null() {
                this[this.tableListMiscImprovements.L07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD07Null() {
                return this.IsNull(this.tableListMiscImprovements.D07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD07Null() {
                this[this.tableListMiscImprovements.D07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF07Null() {
                return this.IsNull(this.tableListMiscImprovements.F07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF07Null() {
                this[this.tableListMiscImprovements.F07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL08Null() {
                return this.IsNull(this.tableListMiscImprovements.L08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL08Null() {
                this[this.tableListMiscImprovements.L08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD08Null() {
                return this.IsNull(this.tableListMiscImprovements.D08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD08Null() {
                this[this.tableListMiscImprovements.D08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF08Null() {
                return this.IsNull(this.tableListMiscImprovements.F08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF08Null() {
                this[this.tableListMiscImprovements.F08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL09Null() {
                return this.IsNull(this.tableListMiscImprovements.L09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL09Null() {
                this[this.tableListMiscImprovements.L09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD09Null() {
                return this.IsNull(this.tableListMiscImprovements.D09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD09Null() {
                this[this.tableListMiscImprovements.D09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF09Null() {
                return this.IsNull(this.tableListMiscImprovements.F09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF09Null() {
                this[this.tableListMiscImprovements.F09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL10Null() {
                return this.IsNull(this.tableListMiscImprovements.L10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL10Null() {
                this[this.tableListMiscImprovements.L10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD10Null() {
                return this.IsNull(this.tableListMiscImprovements.D10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD10Null() {
                this[this.tableListMiscImprovements.D10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF10Null() {
                return this.IsNull(this.tableListMiscImprovements.F10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF10Null() {
                this[this.tableListMiscImprovements.F10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV01Null() {
                return this.IsNull(this.tableListMiscImprovements.V01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV01Null() {
                this[this.tableListMiscImprovements.V01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV02Null() {
                return this.IsNull(this.tableListMiscImprovements.V02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV02Null() {
                this[this.tableListMiscImprovements.V02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV03Null() {
                return this.IsNull(this.tableListMiscImprovements.V03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV03Null() {
                this[this.tableListMiscImprovements.V03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV04Null() {
                return this.IsNull(this.tableListMiscImprovements.V04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV04Null() {
                this[this.tableListMiscImprovements.V04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV05Null() {
                return this.IsNull(this.tableListMiscImprovements.V05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV05Null() {
                this[this.tableListMiscImprovements.V05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV06Null() {
                return this.IsNull(this.tableListMiscImprovements.V06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV06Null() {
                this[this.tableListMiscImprovements.V06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV07Null() {
                return this.IsNull(this.tableListMiscImprovements.V07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV07Null() {
                this[this.tableListMiscImprovements.V07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV08Null() {
                return this.IsNull(this.tableListMiscImprovements.V08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV08Null() {
                this[this.tableListMiscImprovements.V08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV09Null() {
                return this.IsNull(this.tableListMiscImprovements.V09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV09Null() {
                this[this.tableListMiscImprovements.V09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV10Null() {
                return this.IsNull(this.tableListMiscImprovements.V10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV10Null() {
                this[this.tableListMiscImprovements.V10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVFormulaNull() {
                return this.IsNull(this.tableListMiscImprovements.VFormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVFormulaNull() {
                this[this.tableListMiscImprovements.VFormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprPercentNull() {
                return this.IsNull(this.tableListMiscImprovements.DeprPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprPercentNull() {
                this[this.tableListMiscImprovements.DeprPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS01Null() {
                return this.IsNull(this.tableListMiscImprovements.S01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS01Null() {
                this[this.tableListMiscImprovements.S01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS10Null() {
                return this.IsNull(this.tableListMiscImprovements.S10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS10Null() {
                this[this.tableListMiscImprovements.S10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS09Null() {
                return this.IsNull(this.tableListMiscImprovements.S09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS09Null() {
                this[this.tableListMiscImprovements.S09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS08Null() {
                return this.IsNull(this.tableListMiscImprovements.S08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS08Null() {
                this[this.tableListMiscImprovements.S08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS07Null() {
                return this.IsNull(this.tableListMiscImprovements.S07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS07Null() {
                this[this.tableListMiscImprovements.S07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS06Null() {
                return this.IsNull(this.tableListMiscImprovements.S06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS06Null() {
                this[this.tableListMiscImprovements.S06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS05Null() {
                return this.IsNull(this.tableListMiscImprovements.S05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS05Null() {
                this[this.tableListMiscImprovements.S05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS04Null() {
                return this.IsNull(this.tableListMiscImprovements.S04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS04Null() {
                this[this.tableListMiscImprovements.S04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS03Null() {
                return this.IsNull(this.tableListMiscImprovements.S03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS03Null() {
                this[this.tableListMiscImprovements.S03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS02Null() {
                return this.IsNull(this.tableListMiscImprovements.S02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS02Null() {
                this[this.tableListMiscImprovements.S02Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMICodeRow : global::System.Data.DataRow {
            
            private ListMICodeDataTable tableListMICode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMICodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMICode = ((ListMICodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListMICode.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListMICode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICode.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MID {
                get {
                    try {
                        return ((int)(this[this.tableListMICode.MIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID\' in table \'ListMICode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICode.MIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MICodeID {
                get {
                    try {
                        return ((int)(this[this.tableListMICode.MICodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MICodeID\' in table \'ListMICode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICode.MICodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MICode {
                get {
                    if (this.IsMICodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMICode.MICodeColumn]));
                    }
                }
                set {
                    this[this.tableListMICode.MICodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMICode.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListMICode.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ValueCalc {
                get {
                    try {
                        return ((decimal)(this[this.tableListMICode.ValueCalcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueCalc\' in table \'ListMICode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICode.ValueCalcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Depr {
                get {
                    try {
                        return ((decimal)(this[this.tableListMICode.DeprColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depr\' in table \'ListMICode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICode.DeprColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ValueOverride {
                get {
                    try {
                        return ((decimal)(this[this.tableListMICode.ValueOverrideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueOverride\' in table \'ListMICode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICode.ValueOverrideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListMICode.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListMICode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICode.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListMICode.TotalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalValue\' in table \'ListMICode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICode.TotalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListMICode.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListMICode.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIDNull() {
                return this.IsNull(this.tableListMICode.MIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIDNull() {
                this[this.tableListMICode.MIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeIDNull() {
                return this.IsNull(this.tableListMICode.MICodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeIDNull() {
                this[this.tableListMICode.MICodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeNull() {
                return this.IsNull(this.tableListMICode.MICodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeNull() {
                this[this.tableListMICode.MICodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListMICode.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListMICode.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueCalcNull() {
                return this.IsNull(this.tableListMICode.ValueCalcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueCalcNull() {
                this[this.tableListMICode.ValueCalcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprNull() {
                return this.IsNull(this.tableListMICode.DeprColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprNull() {
                this[this.tableListMICode.DeprColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueOverrideNull() {
                return this.IsNull(this.tableListMICode.ValueOverrideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueOverrideNull() {
                this[this.tableListMICode.ValueOverrideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListMICode.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListMICode.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalValueNull() {
                return this.IsNull(this.tableListMICode.TotalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalValueNull() {
                this[this.tableListMICode.TotalValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListValidValueSliceIDRow : global::System.Data.DataRow {
            
            private ListValidValueSliceIDDataTable tableListValidValueSliceID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListValidValueSliceIDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListValidValueSliceID = ((ListValidValueSliceIDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListValidValueSliceID.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListValidValueSliceID\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListValidValueSliceID.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListValidValueSliceID.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListValidValueSliceID.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMICodeComboboxDatatableRow : global::System.Data.DataRow {
            
            private ListMICodeComboboxDatatableDataTable tableListMICodeComboboxDatatable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMICodeComboboxDatatableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMICodeComboboxDatatable = ((ListMICodeComboboxDatatableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MICodeID {
                get {
                    try {
                        return ((int)(this[this.tableListMICodeComboboxDatatable.MICodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MICodeID\' in table \'ListMICodeComboboxDatatable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMICodeComboboxDatatable.MICodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MICode {
                get {
                    if (this.IsMICodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMICodeComboboxDatatable.MICodeColumn]));
                    }
                }
                set {
                    this[this.tableListMICodeComboboxDatatable.MICodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMICodeComboboxDatatable.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListMICodeComboboxDatatable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListMICodeComboboxDatatable.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListMICodeComboboxDatatable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMICodeComboboxDatatable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeIDNull() {
                return this.IsNull(this.tableListMICodeComboboxDatatable.MICodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeIDNull() {
                this[this.tableListMICodeComboboxDatatable.MICodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeNull() {
                return this.IsNull(this.tableListMICodeComboboxDatatable.MICodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeNull() {
                this[this.tableListMICodeComboboxDatatable.MICodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListMICodeComboboxDatatable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListMICodeComboboxDatatable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListMICodeComboboxDatatable.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListMICodeComboboxDatatable.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListQualityCommRow : global::System.Data.DataRow {
            
            private ListQualityCommDataTable tableListQualityComm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQualityCommRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListQualityComm = ((ListQualityCommDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quality {
                get {
                    try {
                        return ((decimal)(this[this.tableListQualityComm.QualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quality\' in table \'ListQualityComm\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQualityComm.QualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListQualityComm.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListQualityComm.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityNull() {
                return this.IsNull(this.tableListQualityComm.QualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityNull() {
                this[this.tableListQualityComm.QualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListQualityComm.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListQualityComm.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListQualityResRow : global::System.Data.DataRow {
            
            private ListQualityResDataTable tableListQualityRes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListQualityResRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListQualityRes = ((ListQualityResDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quality {
                get {
                    try {
                        return ((decimal)(this[this.tableListQualityRes.QualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quality\' in table \'ListQualityRes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListQualityRes.QualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListQualityRes.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListQualityRes.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityNull() {
                return this.IsNull(this.tableListQualityRes.QualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityNull() {
                this[this.tableListQualityRes.QualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListQualityRes.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListQualityRes.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListConditionRow : global::System.Data.DataRow {
            
            private ListConditionDataTable tableListCondition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListConditionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListCondition = ((ListConditionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Condition {
                get {
                    try {
                        return ((decimal)(this[this.tableListCondition.ConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Condition\' in table \'ListCondition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListCondition.ConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListCondition.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListCondition.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionNull() {
                return this.IsNull(this.tableListCondition.ConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionNull() {
                this[this.tableListCondition.ConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListCondition.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListCondition.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDeprFuncCategoryRow : global::System.Data.DataRow {
            
            private ListDeprFuncCategoryDataTable tableListDeprFuncCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprFuncCategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDeprFuncCategory = ((ListDeprFuncCategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DeprFuncID {
                get {
                    try {
                        return ((byte)(this[this.tableListDeprFuncCategory.DeprFuncIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprFuncID\' in table \'ListDeprFuncCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprFuncCategory.DeprFuncIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListDeprFuncCategory.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListDeprFuncCategory.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FuncPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableListDeprFuncCategory.FuncPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuncPercent\' in table \'ListDeprFuncCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprFuncCategory.FuncPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprFuncIDNull() {
                return this.IsNull(this.tableListDeprFuncCategory.DeprFuncIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprFuncIDNull() {
                this[this.tableListDeprFuncCategory.DeprFuncIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListDeprFuncCategory.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListDeprFuncCategory.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuncPercentNull() {
                return this.IsNull(this.tableListDeprFuncCategory.FuncPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuncPercentNull() {
                this[this.tableListDeprFuncCategory.FuncPercentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMiscCatalogChoiceRow : global::System.Data.DataRow {
            
            private ListMiscCatalogChoiceDataTable tableListMiscCatalogChoice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMiscCatalogChoiceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMiscCatalogChoice = ((ListMiscCatalogChoiceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscCatalogChoice.MIChoiceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID\' in table \'ListMiscCatalogChoice\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscCatalogChoice.MIChoiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    if (this.IsItemNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscCatalogChoice.ItemNameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscCatalogChoice.ItemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ItemValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscCatalogChoice.ItemValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemValue\' in table \'ListMiscCatalogChoice\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscCatalogChoice.ItemValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceIDNull() {
                return this.IsNull(this.tableListMiscCatalogChoice.MIChoiceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceIDNull() {
                this[this.tableListMiscCatalogChoice.MIChoiceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tableListMiscCatalogChoice.ItemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tableListMiscCatalogChoice.ItemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemValueNull() {
                return this.IsNull(this.tableListMiscCatalogChoice.ItemValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemValueNull() {
                this[this.tableListMiscCatalogChoice.ItemValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMICodeNewRow : global::System.Data.DataRow {
            
            private ListMICodeNewDataTable tableListMICodeNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMICodeNewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMICodeNew = ((ListMICodeNewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListMICodeNew.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MID {
                get {
                    try {
                        return ((int)(this[this.tableListMICodeNew.MIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.MIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MICodeID {
                get {
                    try {
                        return ((int)(this[this.tableListMICodeNew.MICodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MICodeID\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.MICodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MICode {
                get {
                    if (this.IsMICodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMICodeNew.MICodeColumn]));
                    }
                }
                set {
                    this[this.tableListMICodeNew.MICodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMICodeNew.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListMICodeNew.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueBase {
                get {
                    try {
                        return ((int)(this[this.tableListMICodeNew.ValueBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueBase\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.ValueBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PhysDepr {
                get {
                    try {
                        return ((int)(this[this.tableListMICodeNew.PhysDeprColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhysDepr\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.PhysDeprColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FuncDepr {
                get {
                    try {
                        return ((int)(this[this.tableListMICodeNew.FuncDeprColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuncDepr\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.FuncDeprColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueOveride {
                get {
                    try {
                        return ((int)(this[this.tableListMICodeNew.ValueOverideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueOveride\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.ValueOverideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeprCondition {
                get {
                    try {
                        return ((decimal)(this[this.tableListMICodeNew.DeprConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprCondition\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.DeprConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalValue {
                get {
                    try {
                        return ((int)(this[this.tableListMICodeNew.TotalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalValue\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.TotalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListMICodeNew.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiscConfigured {
                get {
                    try {
                        return ((bool)(this[this.tableListMICodeNew.IsMiscConfiguredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMiscConfigured\' in table \'ListMICodeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMICodeNew.IsMiscConfiguredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListMICodeNew.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListMICodeNew.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIDNull() {
                return this.IsNull(this.tableListMICodeNew.MIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIDNull() {
                this[this.tableListMICodeNew.MIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeIDNull() {
                return this.IsNull(this.tableListMICodeNew.MICodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeIDNull() {
                this[this.tableListMICodeNew.MICodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeNull() {
                return this.IsNull(this.tableListMICodeNew.MICodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeNull() {
                this[this.tableListMICodeNew.MICodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListMICodeNew.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListMICodeNew.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueBaseNull() {
                return this.IsNull(this.tableListMICodeNew.ValueBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueBaseNull() {
                this[this.tableListMICodeNew.ValueBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhysDeprNull() {
                return this.IsNull(this.tableListMICodeNew.PhysDeprColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhysDeprNull() {
                this[this.tableListMICodeNew.PhysDeprColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuncDeprNull() {
                return this.IsNull(this.tableListMICodeNew.FuncDeprColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuncDeprNull() {
                this[this.tableListMICodeNew.FuncDeprColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueOverideNull() {
                return this.IsNull(this.tableListMICodeNew.ValueOverideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueOverideNull() {
                this[this.tableListMICodeNew.ValueOverideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprConditionNull() {
                return this.IsNull(this.tableListMICodeNew.DeprConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprConditionNull() {
                this[this.tableListMICodeNew.DeprConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalValueNull() {
                return this.IsNull(this.tableListMICodeNew.TotalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalValueNull() {
                this[this.tableListMICodeNew.TotalValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListMICodeNew.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListMICodeNew.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsMiscConfiguredNull() {
                return this.IsNull(this.tableListMICodeNew.IsMiscConfiguredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsMiscConfiguredNull() {
                this[this.tableListMICodeNew.IsMiscConfiguredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListMiscImprovementsNewRow : global::System.Data.DataRow {
            
            private ListMiscImprovementsNewDataTable tableListMiscImprovementsNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListMiscImprovementsNewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListMiscImprovementsNew = ((ListMiscImprovementsNewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MID\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MICodeID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MICodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MICodeID\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MICodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MICode {
                get {
                    if (this.IsMICodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MICodeColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MICodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueBase {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.ValueBaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueBase\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.ValueBaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PhysDepr {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.PhysDeprColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhysDepr\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.PhysDeprColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FuncDepr {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.FuncDeprColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuncDepr\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.FuncDeprColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueOveride {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.ValueOverideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueOveride\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.ValueOverideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueFinal {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.ValueFinalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueFinal\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.ValueFinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DeprYearin {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.DeprYearinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprYearin\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprYearinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeprTableID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.DeprTableIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprTableID\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprTableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeprCondition {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.DeprConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprCondition\' in table \'ListMiscImprovementsNew\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Condition {
                get {
                    if (this.IsConditionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.ConditionColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.ConditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeprName {
                get {
                    if (this.IsDeprNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.DeprNameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DeprWithPrimary {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.DeprWithPrimaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprWithPrimary\' in table \'ListMiscImprovementsNew\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprWithPrimaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeprQuality {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.DeprQualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprQuality\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprQualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quality {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.QualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quality\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.QualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DeprEconLife {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.DeprEconLifeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprEconLife\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprEconLifeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DeprEAge {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.DeprEAgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprEAge\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprEAgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DeprFuncID {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.DeprFuncIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprFuncID\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprFuncIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description1 {
                get {
                    if (this.IsDescription1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.Description1Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.Description1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeprFuncPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.DeprFuncPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprFuncPercent\' in table \'ListMiscImprovementsNew\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprFuncPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L01 {
                get {
                    if (this.IsL01Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L01Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D01 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D01\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F01 {
                get {
                    if (this.IsF01Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F01Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C01 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C01\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L02 {
                get {
                    if (this.IsL02Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L02Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D02 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D02\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F02 {
                get {
                    if (this.IsF02Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F02Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C02 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C02\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L03 {
                get {
                    if (this.IsL03Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L03Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D03 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D03\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F03 {
                get {
                    if (this.IsF03Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F03Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C03 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C03\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L04 {
                get {
                    if (this.IsL04Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L04Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D04 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D04\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F04 {
                get {
                    if (this.IsF04Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F04Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C04 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C04\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L05 {
                get {
                    if (this.IsL05Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L05Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D05 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D05\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F05 {
                get {
                    if (this.IsF05Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F05Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C05 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C05\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L06 {
                get {
                    if (this.IsL06Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L06Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D06 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D06\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F06 {
                get {
                    if (this.IsF06Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F06Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C06 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C06\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L07 {
                get {
                    if (this.IsL07Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L07Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D07 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D07\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F07 {
                get {
                    if (this.IsF07Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F07Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C07 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C07\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L08 {
                get {
                    if (this.IsL08Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L08Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D08 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D08\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F08 {
                get {
                    if (this.IsF08Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F08Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C08 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C08\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L09 {
                get {
                    if (this.IsL09Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L09Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D09 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D09\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F09 {
                get {
                    if (this.IsF09Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F09Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C09 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C09\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L10 {
                get {
                    if (this.IsL10Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L10Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D10 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D10\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F10 {
                get {
                    if (this.IsF10Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F10Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C10 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C10\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L11 {
                get {
                    if (this.IsL11Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L11Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D11 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D11\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F11 {
                get {
                    if (this.IsF11Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F11Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C11 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C11\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string L12 {
                get {
                    if (this.IsL12Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.L12Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.L12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte D12 {
                get {
                    try {
                        return ((byte)(this[this.tableListMiscImprovementsNew.D12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D12\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.D12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F12 {
                get {
                    if (this.IsF12Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.F12Column]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.F12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short C12 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.C12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C12\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.C12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V01 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V01\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V02 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V02\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V03 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V03\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V04 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V04\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V05 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V05\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V06 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V06\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V07 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V07\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V08 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V08\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V09 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V09\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V10 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V10\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V11 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V11\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal V12 {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.V12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'V12\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.V12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VFormula {
                get {
                    if (this.IsVFormulaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.VFormulaColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.VFormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeprPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableListMiscImprovementsNew.DeprPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprPercent\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.DeprPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S01 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S01\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S02 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S02\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S03 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S03\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S04 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S04\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S05 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S05\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S06 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S06\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S07 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S07\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S08 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S08\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S09 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S09\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S10 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S10\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S11 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S11\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short S12 {
                get {
                    try {
                        return ((short)(this[this.tableListMiscImprovementsNew.S12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'S12\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.S12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID01 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID01\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice01Name {
                get {
                    if (this.IsMIChoice01NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice01NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice01NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID02 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID02\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice02Name {
                get {
                    if (this.IsMIChoice02NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice02NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice02NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID03 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID03\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice03Name {
                get {
                    if (this.IsMIChoice03NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice03NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice03NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID04 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID04\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice04Name {
                get {
                    if (this.IsMIChoice04NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice04NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice04NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID05 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID05\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice05Name {
                get {
                    if (this.IsMIChoice05NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice05NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice05NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID06 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID06\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice06Name {
                get {
                    if (this.IsMIChoice06NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice06NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice06NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID07 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID07\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice07Name {
                get {
                    if (this.IsMIChoice07NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice07NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice07NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID08 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID08\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice08Name {
                get {
                    if (this.IsMIChoice08NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice08NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice08NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID09 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID09\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice09Name {
                get {
                    if (this.IsMIChoice09NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice09NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice09NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID10 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID10\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice10Name {
                get {
                    if (this.IsMIChoice10NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice10NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice10NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID11 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID11\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice11Name {
                get {
                    if (this.IsMIChoice11NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice11NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice11NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MIChoiceID12 {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.MIChoiceID12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIChoiceID12\' in table \'ListMiscImprovementsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoiceID12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MIChoice12Name {
                get {
                    if (this.IsMIChoice12NameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListMiscImprovementsNew.MIChoice12NameColumn]));
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.MIChoice12NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PolygonID {
                get {
                    try {
                        return ((int)(this[this.tableListMiscImprovementsNew.PolygonIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PolygonID\' in table \'ListMiscImprovementsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListMiscImprovementsNew.PolygonIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIDNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIDNull() {
                this[this.tableListMiscImprovementsNew.MIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeIDNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MICodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeIDNull() {
                this[this.tableListMiscImprovementsNew.MICodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMICodeNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MICodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMICodeNull() {
                this[this.tableListMiscImprovementsNew.MICodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueBaseNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.ValueBaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueBaseNull() {
                this[this.tableListMiscImprovementsNew.ValueBaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhysDeprNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.PhysDeprColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhysDeprNull() {
                this[this.tableListMiscImprovementsNew.PhysDeprColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuncDeprNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.FuncDeprColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuncDeprNull() {
                this[this.tableListMiscImprovementsNew.FuncDeprColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueOverideNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.ValueOverideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueOverideNull() {
                this[this.tableListMiscImprovementsNew.ValueOverideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueFinalNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.ValueFinalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueFinalNull() {
                this[this.tableListMiscImprovementsNew.ValueFinalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListMiscImprovementsNew.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListMiscImprovementsNew.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprYearinNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprYearinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprYearinNull() {
                this[this.tableListMiscImprovementsNew.DeprYearinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprTableIDNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprTableIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprTableIDNull() {
                this[this.tableListMiscImprovementsNew.DeprTableIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprConditionNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprConditionNull() {
                this[this.tableListMiscImprovementsNew.DeprConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.ConditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionNull() {
                this[this.tableListMiscImprovementsNew.ConditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprNameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprNameNull() {
                this[this.tableListMiscImprovementsNew.DeprNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprWithPrimaryNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprWithPrimaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprWithPrimaryNull() {
                this[this.tableListMiscImprovementsNew.DeprWithPrimaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprQualityNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprQualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprQualityNull() {
                this[this.tableListMiscImprovementsNew.DeprQualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.QualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityNull() {
                this[this.tableListMiscImprovementsNew.QualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprEconLifeNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprEconLifeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprEconLifeNull() {
                this[this.tableListMiscImprovementsNew.DeprEconLifeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprEAgeNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprEAgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprEAgeNull() {
                this[this.tableListMiscImprovementsNew.DeprEAgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprFuncIDNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprFuncIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprFuncIDNull() {
                this[this.tableListMiscImprovementsNew.DeprFuncIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescription1Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.Description1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescription1Null() {
                this[this.tableListMiscImprovementsNew.Description1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprFuncPercentNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprFuncPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprFuncPercentNull() {
                this[this.tableListMiscImprovementsNew.DeprFuncPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL01Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL01Null() {
                this[this.tableListMiscImprovementsNew.L01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD01Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD01Null() {
                this[this.tableListMiscImprovementsNew.D01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF01Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF01Null() {
                this[this.tableListMiscImprovementsNew.F01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC01Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC01Null() {
                this[this.tableListMiscImprovementsNew.C01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL02Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL02Null() {
                this[this.tableListMiscImprovementsNew.L02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD02Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD02Null() {
                this[this.tableListMiscImprovementsNew.D02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF02Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF02Null() {
                this[this.tableListMiscImprovementsNew.F02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC02Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC02Null() {
                this[this.tableListMiscImprovementsNew.C02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL03Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL03Null() {
                this[this.tableListMiscImprovementsNew.L03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD03Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD03Null() {
                this[this.tableListMiscImprovementsNew.D03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF03Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF03Null() {
                this[this.tableListMiscImprovementsNew.F03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC03Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC03Null() {
                this[this.tableListMiscImprovementsNew.C03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL04Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL04Null() {
                this[this.tableListMiscImprovementsNew.L04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD04Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD04Null() {
                this[this.tableListMiscImprovementsNew.D04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF04Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF04Null() {
                this[this.tableListMiscImprovementsNew.F04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC04Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC04Null() {
                this[this.tableListMiscImprovementsNew.C04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL05Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL05Null() {
                this[this.tableListMiscImprovementsNew.L05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD05Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD05Null() {
                this[this.tableListMiscImprovementsNew.D05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF05Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF05Null() {
                this[this.tableListMiscImprovementsNew.F05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC05Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC05Null() {
                this[this.tableListMiscImprovementsNew.C05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL06Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL06Null() {
                this[this.tableListMiscImprovementsNew.L06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD06Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD06Null() {
                this[this.tableListMiscImprovementsNew.D06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF06Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF06Null() {
                this[this.tableListMiscImprovementsNew.F06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC06Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC06Null() {
                this[this.tableListMiscImprovementsNew.C06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL07Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL07Null() {
                this[this.tableListMiscImprovementsNew.L07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD07Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD07Null() {
                this[this.tableListMiscImprovementsNew.D07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF07Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF07Null() {
                this[this.tableListMiscImprovementsNew.F07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC07Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC07Null() {
                this[this.tableListMiscImprovementsNew.C07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL08Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL08Null() {
                this[this.tableListMiscImprovementsNew.L08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD08Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD08Null() {
                this[this.tableListMiscImprovementsNew.D08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF08Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF08Null() {
                this[this.tableListMiscImprovementsNew.F08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC08Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC08Null() {
                this[this.tableListMiscImprovementsNew.C08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL09Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL09Null() {
                this[this.tableListMiscImprovementsNew.L09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD09Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD09Null() {
                this[this.tableListMiscImprovementsNew.D09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF09Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF09Null() {
                this[this.tableListMiscImprovementsNew.F09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC09Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC09Null() {
                this[this.tableListMiscImprovementsNew.C09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL10Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL10Null() {
                this[this.tableListMiscImprovementsNew.L10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD10Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD10Null() {
                this[this.tableListMiscImprovementsNew.D10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF10Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF10Null() {
                this[this.tableListMiscImprovementsNew.F10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC10Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC10Null() {
                this[this.tableListMiscImprovementsNew.C10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL11Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL11Null() {
                this[this.tableListMiscImprovementsNew.L11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD11Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD11Null() {
                this[this.tableListMiscImprovementsNew.D11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF11Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF11Null() {
                this[this.tableListMiscImprovementsNew.F11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC11Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC11Null() {
                this[this.tableListMiscImprovementsNew.C11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsL12Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.L12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetL12Null() {
                this[this.tableListMiscImprovementsNew.L12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD12Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.D12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD12Null() {
                this[this.tableListMiscImprovementsNew.D12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF12Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.F12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF12Null() {
                this[this.tableListMiscImprovementsNew.F12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC12Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.C12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC12Null() {
                this[this.tableListMiscImprovementsNew.C12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV01Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV01Null() {
                this[this.tableListMiscImprovementsNew.V01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV02Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV02Null() {
                this[this.tableListMiscImprovementsNew.V02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV03Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV03Null() {
                this[this.tableListMiscImprovementsNew.V03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV04Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV04Null() {
                this[this.tableListMiscImprovementsNew.V04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV05Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV05Null() {
                this[this.tableListMiscImprovementsNew.V05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV06Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV06Null() {
                this[this.tableListMiscImprovementsNew.V06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV07Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV07Null() {
                this[this.tableListMiscImprovementsNew.V07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV08Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV08Null() {
                this[this.tableListMiscImprovementsNew.V08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV09Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV09Null() {
                this[this.tableListMiscImprovementsNew.V09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV10Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV10Null() {
                this[this.tableListMiscImprovementsNew.V10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV11Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV11Null() {
                this[this.tableListMiscImprovementsNew.V11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV12Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.V12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV12Null() {
                this[this.tableListMiscImprovementsNew.V12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVFormulaNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.VFormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVFormulaNull() {
                this[this.tableListMiscImprovementsNew.VFormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprPercentNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.DeprPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprPercentNull() {
                this[this.tableListMiscImprovementsNew.DeprPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS01Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS01Null() {
                this[this.tableListMiscImprovementsNew.S01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS02Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS02Null() {
                this[this.tableListMiscImprovementsNew.S02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS03Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS03Null() {
                this[this.tableListMiscImprovementsNew.S03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS04Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS04Null() {
                this[this.tableListMiscImprovementsNew.S04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS05Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS05Null() {
                this[this.tableListMiscImprovementsNew.S05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS06Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS06Null() {
                this[this.tableListMiscImprovementsNew.S06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS07Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS07Null() {
                this[this.tableListMiscImprovementsNew.S07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS08Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS08Null() {
                this[this.tableListMiscImprovementsNew.S08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS09Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS09Null() {
                this[this.tableListMiscImprovementsNew.S09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS10Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS10Null() {
                this[this.tableListMiscImprovementsNew.S10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS11Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS11Null() {
                this[this.tableListMiscImprovementsNew.S11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsS12Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.S12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetS12Null() {
                this[this.tableListMiscImprovementsNew.S12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID01Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID01Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice01NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice01NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice01NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice01NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID02Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID02Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice02NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice02NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice02NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice02NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID03Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID03Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice03NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice03NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice03NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice03NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID04Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID04Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice04NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice04NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice04NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice04NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID05Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID05Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice05NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice05NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice05NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice05NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID06Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID06Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice06NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice06NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice06NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice06NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID07Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID07Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice07NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice07NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice07NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice07NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID08Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID08Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice08NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice08NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice08NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice08NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID09Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID09Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice09NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice09NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice09NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice09NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID10Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID10Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice10NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice10NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice10NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice10NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID11Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID11Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice11NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice11NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice11NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice11NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoiceID12Null() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoiceID12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoiceID12Null() {
                this[this.tableListMiscImprovementsNew.MIChoiceID12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMIChoice12NameNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.MIChoice12NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMIChoice12NameNull() {
                this[this.tableListMiscImprovementsNew.MIChoice12NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPolygonIDNull() {
                return this.IsNull(this.tableListMiscImprovementsNew.PolygonIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPolygonIDNull() {
                this[this.tableListMiscImprovementsNew.PolygonIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListDeprTableRow : global::System.Data.DataRow {
            
            private ListDeprTableDataTable tableListDeprTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListDeprTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListDeprTable = ((ListDeprTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeprTableID {
                get {
                    try {
                        return ((int)(this[this.tableListDeprTable.DeprTableIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeprTableID\' in table \'ListDeprTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListDeprTable.DeprTableIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeprName {
                get {
                    if (this.IsDeprNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListDeprTable.DeprNameColumn]));
                    }
                }
                set {
                    this[this.tableListDeprTable.DeprNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprTableIDNull() {
                return this.IsNull(this.tableListDeprTable.DeprTableIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprTableIDNull() {
                this[this.tableListDeprTable.DeprTableIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeprNameNull() {
                return this.IsNull(this.tableListDeprTable.DeprNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeprNameNull() {
                this[this.tableListDeprTable.DeprNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecalcMiscImprovementRow : global::System.Data.DataRow {
            
            private RecalcMiscImprovementDataTable tableRecalcMiscImprovement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecalcMiscImprovementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecalcMiscImprovement = ((RecalcMiscImprovementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PhysDeprPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableRecalcMiscImprovement.PhysDeprPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhysDeprPercent\' in table \'RecalcMiscImprovement\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableRecalcMiscImprovement.PhysDeprPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FuncDeprPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableRecalcMiscImprovement.FuncDeprPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuncDeprPercent\' in table \'RecalcMiscImprovement\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableRecalcMiscImprovement.FuncDeprPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PhysDepr {
                get {
                    try {
                        return ((decimal)(this[this.tableRecalcMiscImprovement.PhysDeprColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhysDepr\' in table \'RecalcMiscImprovement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecalcMiscImprovement.PhysDeprColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FuncDepr {
                get {
                    try {
                        return ((decimal)(this[this.tableRecalcMiscImprovement.FuncDeprColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuncDepr\' in table \'RecalcMiscImprovement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecalcMiscImprovement.FuncDeprColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FinalValue {
                get {
                    try {
                        return ((decimal)(this[this.tableRecalcMiscImprovement.FinalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalValue\' in table \'RecalcMiscImprovement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecalcMiscImprovement.FinalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhysDeprPercentNull() {
                return this.IsNull(this.tableRecalcMiscImprovement.PhysDeprPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhysDeprPercentNull() {
                this[this.tableRecalcMiscImprovement.PhysDeprPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuncDeprPercentNull() {
                return this.IsNull(this.tableRecalcMiscImprovement.FuncDeprPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuncDeprPercentNull() {
                this[this.tableRecalcMiscImprovement.FuncDeprPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhysDeprNull() {
                return this.IsNull(this.tableRecalcMiscImprovement.PhysDeprColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhysDeprNull() {
                this[this.tableRecalcMiscImprovement.PhysDeprColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuncDeprNull() {
                return this.IsNull(this.tableRecalcMiscImprovement.FuncDeprColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuncDeprNull() {
                this[this.tableRecalcMiscImprovement.FuncDeprColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalValueNull() {
                return this.IsNull(this.tableRecalcMiscImprovement.FinalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalValueNull() {
                this[this.tableRecalcMiscImprovement.FinalValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMiscImprovementsRowChangeEvent : global::System.EventArgs {
            
            private ListMiscImprovementsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsRowChangeEvent(ListMiscImprovementsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMICodeRowChangeEvent : global::System.EventArgs {
            
            private ListMICodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeRowChangeEvent(ListMICodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListValidValueSliceIDRowChangeEvent : global::System.EventArgs {
            
            private ListValidValueSliceIDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidValueSliceIDRowChangeEvent(ListValidValueSliceIDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidValueSliceIDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMICodeComboboxDatatableRowChangeEvent : global::System.EventArgs {
            
            private ListMICodeComboboxDatatableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeComboboxDatatableRowChangeEvent(ListMICodeComboboxDatatableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeComboboxDatatableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListQualityCommRowChangeEvent : global::System.EventArgs {
            
            private ListQualityCommRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityCommRowChangeEvent(ListQualityCommRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityCommRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListQualityResRowChangeEvent : global::System.EventArgs {
            
            private ListQualityResRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityResRowChangeEvent(ListQualityResRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListQualityResRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListConditionRowChangeEvent : global::System.EventArgs {
            
            private ListConditionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListConditionRowChangeEvent(ListConditionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListConditionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDeprFuncCategoryRowChangeEvent : global::System.EventArgs {
            
            private ListDeprFuncCategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprFuncCategoryRowChangeEvent(ListDeprFuncCategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprFuncCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMiscCatalogChoiceRowChangeEvent : global::System.EventArgs {
            
            private ListMiscCatalogChoiceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscCatalogChoiceRowChangeEvent(ListMiscCatalogChoiceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscCatalogChoiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMICodeNewRowChangeEvent : global::System.EventArgs {
            
            private ListMICodeNewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeNewRowChangeEvent(ListMICodeNewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMICodeNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListMiscImprovementsNewRowChangeEvent : global::System.EventArgs {
            
            private ListMiscImprovementsNewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsNewRowChangeEvent(ListMiscImprovementsNewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListMiscImprovementsNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListDeprTableRowChangeEvent : global::System.EventArgs {
            
            private ListDeprTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRowChangeEvent(ListDeprTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListDeprTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecalcMiscImprovementRowChangeEvent : global::System.EventArgs {
            
            private RecalcMiscImprovementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecalcMiscImprovementRowChangeEvent(RecalcMiscImprovementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecalcMiscImprovementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591