//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F84723WaterHydrantPropertiesData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F84723WaterHydrantPropertiesData : global::System.Data.DataSet {
        
        private GetWaterHydrantPropertiesDataTableDataTable tableGetWaterHydrantPropertiesDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F84723WaterHydrantPropertiesData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F84723WaterHydrantPropertiesData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetWaterHydrantPropertiesDataTable"] != null)) {
                    base.Tables.Add(new GetWaterHydrantPropertiesDataTableDataTable(ds.Tables["GetWaterHydrantPropertiesDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetWaterHydrantPropertiesDataTableDataTable GetWaterHydrantPropertiesDataTable {
            get {
                return this.tableGetWaterHydrantPropertiesDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F84723WaterHydrantPropertiesData cln = ((F84723WaterHydrantPropertiesData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetWaterHydrantPropertiesDataTable"] != null)) {
                    base.Tables.Add(new GetWaterHydrantPropertiesDataTableDataTable(ds.Tables["GetWaterHydrantPropertiesDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetWaterHydrantPropertiesDataTable = ((GetWaterHydrantPropertiesDataTableDataTable)(base.Tables["GetWaterHydrantPropertiesDataTable"]));
            if ((initTable == true)) {
                if ((this.tableGetWaterHydrantPropertiesDataTable != null)) {
                    this.tableGetWaterHydrantPropertiesDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F84723WaterHydrantPropertiesData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F84723WaterHydrantPropertiesData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetWaterHydrantPropertiesDataTable = new GetWaterHydrantPropertiesDataTableDataTable();
            base.Tables.Add(this.tableGetWaterHydrantPropertiesDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetWaterHydrantPropertiesDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F84723WaterHydrantPropertiesData ds = new F84723WaterHydrantPropertiesData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetWaterHydrantPropertiesDataTableRowChangeEventHandler(object sender, GetWaterHydrantPropertiesDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetWaterHydrantPropertiesDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFeatureID;
            
            private global::System.Data.DataColumn columnCID;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            private global::System.Data.DataColumn columnIsEnabled;
            
            private global::System.Data.DataColumn columnIsPrivate;
            
            private global::System.Data.DataColumn columnBusinessID;
            
            private global::System.Data.DataColumn columnManufacturerID;
            
            private global::System.Data.DataColumn columnModelNumber;
            
            private global::System.Data.DataColumn columnSerialNumber;
            
            private global::System.Data.DataColumn columnMainValveID;
            
            private global::System.Data.DataColumn columnIsDeadend;
            
            private global::System.Data.DataColumn columnPressureSetting;
            
            private global::System.Data.DataColumn columnHydrostaticPressue;
            
            private global::System.Data.DataColumn columnNozzles;
            
            private global::System.Data.DataColumn columnValveOpening;
            
            private global::System.Data.DataColumn columnIsClockwiseToClose;
            
            private global::System.Data.DataColumn columnTurnsToClose;
            
            private global::System.Data.DataColumn columnDiameter;
            
            private global::System.Data.DataColumn columnBarrelDiameter;
            
            private global::System.Data.DataColumn columnWaterTypeID;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnLifecycleStatusID;
            
            private global::System.Data.DataColumn columnNozzleDiameter1;
            
            private global::System.Data.DataColumn columnNozzleDiameter2;
            
            private global::System.Data.DataColumn columnNozzleDiameter3;
            
            private global::System.Data.DataColumn columnNozzleDiameter4;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterHydrantPropertiesDataTableDataTable() {
                this.TableName = "GetWaterHydrantPropertiesDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWaterHydrantPropertiesDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetWaterHydrantPropertiesDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIDColumn {
                get {
                    return this.columnCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEnabledColumn {
                get {
                    return this.columnIsEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrivateColumn {
                get {
                    return this.columnIsPrivate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessIDColumn {
                get {
                    return this.columnBusinessID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerIDColumn {
                get {
                    return this.columnManufacturerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelNumberColumn {
                get {
                    return this.columnModelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SerialNumberColumn {
                get {
                    return this.columnSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainValveIDColumn {
                get {
                    return this.columnMainValveID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeadendColumn {
                get {
                    return this.columnIsDeadend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PressureSettingColumn {
                get {
                    return this.columnPressureSetting;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydrostaticPressueColumn {
                get {
                    return this.columnHydrostaticPressue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NozzlesColumn {
                get {
                    return this.columnNozzles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValveOpeningColumn {
                get {
                    return this.columnValveOpening;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsClockwiseToCloseColumn {
                get {
                    return this.columnIsClockwiseToClose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TurnsToCloseColumn {
                get {
                    return this.columnTurnsToClose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiameterColumn {
                get {
                    return this.columnDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarrelDiameterColumn {
                get {
                    return this.columnBarrelDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WaterTypeIDColumn {
                get {
                    return this.columnWaterTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LifecycleStatusIDColumn {
                get {
                    return this.columnLifecycleStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NozzleDiameter1Column {
                get {
                    return this.columnNozzleDiameter1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NozzleDiameter2Column {
                get {
                    return this.columnNozzleDiameter2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NozzleDiameter3Column {
                get {
                    return this.columnNozzleDiameter3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NozzleDiameter4Column {
                get {
                    return this.columnNozzleDiameter4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterHydrantPropertiesDataTableRow this[int index] {
                get {
                    return ((GetWaterHydrantPropertiesDataTableRow)(this.Rows[index]));
                }
            }
            
            public event GetWaterHydrantPropertiesDataTableRowChangeEventHandler GetWaterHydrantPropertiesDataTableRowChanging;
            
            public event GetWaterHydrantPropertiesDataTableRowChangeEventHandler GetWaterHydrantPropertiesDataTableRowChanged;
            
            public event GetWaterHydrantPropertiesDataTableRowChangeEventHandler GetWaterHydrantPropertiesDataTableRowDeleting;
            
            public event GetWaterHydrantPropertiesDataTableRowChangeEventHandler GetWaterHydrantPropertiesDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetWaterHydrantPropertiesDataTableRow(GetWaterHydrantPropertiesDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterHydrantPropertiesDataTableRow AddGetWaterHydrantPropertiesDataTableRow(
                        string CID, 
                        int FeatureClassID, 
                        bool IsEnabled, 
                        bool IsPrivate, 
                        int BusinessID, 
                        int ManufacturerID, 
                        string ModelNumber, 
                        string SerialNumber, 
                        int MainValveID, 
                        bool IsDeadend, 
                        decimal PressureSetting, 
                        decimal HydrostaticPressue, 
                        int Nozzles, 
                        decimal ValveOpening, 
                        bool IsClockwiseToClose, 
                        decimal TurnsToClose, 
                        decimal Diameter, 
                        decimal BarrelDiameter, 
                        int WaterTypeID, 
                        int UserID, 
                        int LifecycleStatusID, 
                        decimal NozzleDiameter1, 
                        decimal NozzleDiameter2, 
                        decimal NozzleDiameter3, 
                        decimal NozzleDiameter4, 
                        string Comment) {
                GetWaterHydrantPropertiesDataTableRow rowGetWaterHydrantPropertiesDataTableRow = ((GetWaterHydrantPropertiesDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CID,
                        FeatureClassID,
                        IsEnabled,
                        IsPrivate,
                        BusinessID,
                        ManufacturerID,
                        ModelNumber,
                        SerialNumber,
                        MainValveID,
                        IsDeadend,
                        PressureSetting,
                        HydrostaticPressue,
                        Nozzles,
                        ValveOpening,
                        IsClockwiseToClose,
                        TurnsToClose,
                        Diameter,
                        BarrelDiameter,
                        WaterTypeID,
                        UserID,
                        LifecycleStatusID,
                        NozzleDiameter1,
                        NozzleDiameter2,
                        NozzleDiameter3,
                        NozzleDiameter4,
                        Comment};
                rowGetWaterHydrantPropertiesDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetWaterHydrantPropertiesDataTableRow);
                return rowGetWaterHydrantPropertiesDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetWaterHydrantPropertiesDataTableDataTable cln = ((GetWaterHydrantPropertiesDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetWaterHydrantPropertiesDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeatureID = base.Columns["FeatureID"];
                this.columnCID = base.Columns["CID"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnIsEnabled = base.Columns["IsEnabled"];
                this.columnIsPrivate = base.Columns["IsPrivate"];
                this.columnBusinessID = base.Columns["BusinessID"];
                this.columnManufacturerID = base.Columns["ManufacturerID"];
                this.columnModelNumber = base.Columns["ModelNumber"];
                this.columnSerialNumber = base.Columns["SerialNumber"];
                this.columnMainValveID = base.Columns["MainValveID"];
                this.columnIsDeadend = base.Columns["IsDeadend"];
                this.columnPressureSetting = base.Columns["PressureSetting"];
                this.columnHydrostaticPressue = base.Columns["HydrostaticPressue"];
                this.columnNozzles = base.Columns["Nozzles"];
                this.columnValveOpening = base.Columns["ValveOpening"];
                this.columnIsClockwiseToClose = base.Columns["IsClockwiseToClose"];
                this.columnTurnsToClose = base.Columns["TurnsToClose"];
                this.columnDiameter = base.Columns["Diameter"];
                this.columnBarrelDiameter = base.Columns["BarrelDiameter"];
                this.columnWaterTypeID = base.Columns["WaterTypeID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnLifecycleStatusID = base.Columns["LifecycleStatusID"];
                this.columnNozzleDiameter1 = base.Columns["NozzleDiameter1"];
                this.columnNozzleDiameter2 = base.Columns["NozzleDiameter2"];
                this.columnNozzleDiameter3 = base.Columns["NozzleDiameter3"];
                this.columnNozzleDiameter4 = base.Columns["NozzleDiameter4"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeatureID = new global::System.Data.DataColumn("FeatureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureID);
                this.columnCID = new global::System.Data.DataColumn("CID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCID);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnIsEnabled = new global::System.Data.DataColumn("IsEnabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEnabled);
                this.columnIsPrivate = new global::System.Data.DataColumn("IsPrivate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrivate);
                this.columnBusinessID = new global::System.Data.DataColumn("BusinessID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessID);
                this.columnManufacturerID = new global::System.Data.DataColumn("ManufacturerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerID);
                this.columnModelNumber = new global::System.Data.DataColumn("ModelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModelNumber);
                this.columnSerialNumber = new global::System.Data.DataColumn("SerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSerialNumber);
                this.columnMainValveID = new global::System.Data.DataColumn("MainValveID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainValveID);
                this.columnIsDeadend = new global::System.Data.DataColumn("IsDeadend", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeadend);
                this.columnPressureSetting = new global::System.Data.DataColumn("PressureSetting", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPressureSetting);
                this.columnHydrostaticPressue = new global::System.Data.DataColumn("HydrostaticPressue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydrostaticPressue);
                this.columnNozzles = new global::System.Data.DataColumn("Nozzles", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNozzles);
                this.columnValveOpening = new global::System.Data.DataColumn("ValveOpening", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValveOpening);
                this.columnIsClockwiseToClose = new global::System.Data.DataColumn("IsClockwiseToClose", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsClockwiseToClose);
                this.columnTurnsToClose = new global::System.Data.DataColumn("TurnsToClose", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTurnsToClose);
                this.columnDiameter = new global::System.Data.DataColumn("Diameter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiameter);
                this.columnBarrelDiameter = new global::System.Data.DataColumn("BarrelDiameter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarrelDiameter);
                this.columnWaterTypeID = new global::System.Data.DataColumn("WaterTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaterTypeID);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnLifecycleStatusID = new global::System.Data.DataColumn("LifecycleStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLifecycleStatusID);
                this.columnNozzleDiameter1 = new global::System.Data.DataColumn("NozzleDiameter1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNozzleDiameter1);
                this.columnNozzleDiameter2 = new global::System.Data.DataColumn("NozzleDiameter2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNozzleDiameter2);
                this.columnNozzleDiameter3 = new global::System.Data.DataColumn("NozzleDiameter3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNozzleDiameter3);
                this.columnNozzleDiameter4 = new global::System.Data.DataColumn("NozzleDiameter4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNozzleDiameter4);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnFeatureID.AutoIncrement = true;
                this.columnFeatureID.AllowDBNull = false;
                this.columnFeatureID.ReadOnly = true;
                this.columnCID.MaxLength = 15;
                this.columnModelNumber.MaxLength = 20;
                this.columnSerialNumber.MaxLength = 30;
                this.columnComment.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterHydrantPropertiesDataTableRow NewGetWaterHydrantPropertiesDataTableRow() {
                return ((GetWaterHydrantPropertiesDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetWaterHydrantPropertiesDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetWaterHydrantPropertiesDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetWaterHydrantPropertiesDataTableRowChanged != null)) {
                    this.GetWaterHydrantPropertiesDataTableRowChanged(this, new GetWaterHydrantPropertiesDataTableRowChangeEvent(((GetWaterHydrantPropertiesDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetWaterHydrantPropertiesDataTableRowChanging != null)) {
                    this.GetWaterHydrantPropertiesDataTableRowChanging(this, new GetWaterHydrantPropertiesDataTableRowChangeEvent(((GetWaterHydrantPropertiesDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetWaterHydrantPropertiesDataTableRowDeleted != null)) {
                    this.GetWaterHydrantPropertiesDataTableRowDeleted(this, new GetWaterHydrantPropertiesDataTableRowChangeEvent(((GetWaterHydrantPropertiesDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetWaterHydrantPropertiesDataTableRowDeleting != null)) {
                    this.GetWaterHydrantPropertiesDataTableRowDeleting(this, new GetWaterHydrantPropertiesDataTableRowChangeEvent(((GetWaterHydrantPropertiesDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetWaterHydrantPropertiesDataTableRow(GetWaterHydrantPropertiesDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F84723WaterHydrantPropertiesData ds = new F84723WaterHydrantPropertiesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetWaterHydrantPropertiesDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetWaterHydrantPropertiesDataTableRow : global::System.Data.DataRow {
            
            private GetWaterHydrantPropertiesDataTableDataTable tableGetWaterHydrantPropertiesDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetWaterHydrantPropertiesDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetWaterHydrantPropertiesDataTable = ((GetWaterHydrantPropertiesDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureID {
                get {
                    return ((int)(this[this.tableGetWaterHydrantPropertiesDataTable.FeatureIDColumn]));
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.FeatureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CID {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterHydrantPropertiesDataTable.CIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CID\' in table \'GetWaterHydrantPropertiesDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.CIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterHydrantPropertiesDataTable.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'GetWaterHydrantPropertiesDataTabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterHydrantPropertiesDataTable.IsEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEnabled\' in table \'GetWaterHydrantPropertiesDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.IsEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrivate {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterHydrantPropertiesDataTable.IsPrivateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrivate\' in table \'GetWaterHydrantPropertiesDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.IsPrivateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BusinessID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterHydrantPropertiesDataTable.BusinessIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessID\' in table \'GetWaterHydrantPropertiesDataTable\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.BusinessIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManufacturerID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterHydrantPropertiesDataTable.ManufacturerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufacturerID\' in table \'GetWaterHydrantPropertiesDataTabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.ManufacturerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModelNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterHydrantPropertiesDataTable.ModelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModelNumber\' in table \'GetWaterHydrantPropertiesDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.ModelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SerialNumber {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterHydrantPropertiesDataTable.SerialNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SerialNumber\' in table \'GetWaterHydrantPropertiesDataTable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.SerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainValveID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterHydrantPropertiesDataTable.MainValveIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainValveID\' in table \'GetWaterHydrantPropertiesDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.MainValveIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeadend {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterHydrantPropertiesDataTable.IsDeadendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeadend\' in table \'GetWaterHydrantPropertiesDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.IsDeadendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PressureSetting {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.PressureSettingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PressureSetting\' in table \'GetWaterHydrantPropertiesDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.PressureSettingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HydrostaticPressue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.HydrostaticPressueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydrostaticPressue\' in table \'GetWaterHydrantPropertiesData" +
                                "Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.HydrostaticPressueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Nozzles {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterHydrantPropertiesDataTable.NozzlesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Nozzles\' in table \'GetWaterHydrantPropertiesDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.NozzlesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ValveOpening {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.ValveOpeningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValveOpening\' in table \'GetWaterHydrantPropertiesDataTable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.ValveOpeningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClockwiseToClose {
                get {
                    try {
                        return ((bool)(this[this.tableGetWaterHydrantPropertiesDataTable.IsClockwiseToCloseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsClockwiseToClose\' in table \'GetWaterHydrantPropertiesData" +
                                "Table\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.IsClockwiseToCloseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TurnsToClose {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.TurnsToCloseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TurnsToClose\' in table \'GetWaterHydrantPropertiesDataTable\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.TurnsToCloseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Diameter {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.DiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Diameter\' in table \'GetWaterHydrantPropertiesDataTable\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.DiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BarrelDiameter {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.BarrelDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarrelDiameter\' in table \'GetWaterHydrantPropertiesDataTabl" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.BarrelDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WaterTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterHydrantPropertiesDataTable.WaterTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaterTypeID\' in table \'GetWaterHydrantPropertiesDataTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.WaterTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterHydrantPropertiesDataTable.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'GetWaterHydrantPropertiesDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LifecycleStatusID {
                get {
                    try {
                        return ((int)(this[this.tableGetWaterHydrantPropertiesDataTable.LifecycleStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LifecycleStatusID\' in table \'GetWaterHydrantPropertiesDataT" +
                                "able\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.LifecycleStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NozzleDiameter1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NozzleDiameter1\' in table \'GetWaterHydrantPropertiesDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NozzleDiameter2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NozzleDiameter2\' in table \'GetWaterHydrantPropertiesDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NozzleDiameter3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NozzleDiameter3\' in table \'GetWaterHydrantPropertiesDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NozzleDiameter4 {
                get {
                    try {
                        return ((decimal)(this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NozzleDiameter4\' in table \'GetWaterHydrantPropertiesDataTab" +
                                "le\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableGetWaterHydrantPropertiesDataTable.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'GetWaterHydrantPropertiesDataTable\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetWaterHydrantPropertiesDataTable.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.CIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.CIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEnabledNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.IsEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEnabledNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.IsEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrivateNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.IsPrivateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrivateNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.IsPrivateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessIDNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.BusinessIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessIDNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.BusinessIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerIDNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.ManufacturerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerIDNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.ManufacturerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNumberNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.ModelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNumberNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.ModelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSerialNumberNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.SerialNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSerialNumberNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.SerialNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainValveIDNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.MainValveIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainValveIDNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.MainValveIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeadendNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.IsDeadendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeadendNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.IsDeadendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPressureSettingNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.PressureSettingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPressureSettingNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.PressureSettingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydrostaticPressueNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.HydrostaticPressueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydrostaticPressueNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.HydrostaticPressueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNozzlesNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.NozzlesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNozzlesNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.NozzlesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValveOpeningNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.ValveOpeningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValveOpeningNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.ValveOpeningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsClockwiseToCloseNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.IsClockwiseToCloseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsClockwiseToCloseNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.IsClockwiseToCloseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTurnsToCloseNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.TurnsToCloseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTurnsToCloseNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.TurnsToCloseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiameterNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.DiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiameterNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.DiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarrelDiameterNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.BarrelDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarrelDiameterNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.BarrelDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWaterTypeIDNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.WaterTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWaterTypeIDNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.WaterTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLifecycleStatusIDNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.LifecycleStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLifecycleStatusIDNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.LifecycleStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNozzleDiameter1Null() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNozzleDiameter1Null() {
                this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNozzleDiameter2Null() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNozzleDiameter2Null() {
                this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNozzleDiameter3Null() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNozzleDiameter3Null() {
                this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNozzleDiameter4Null() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNozzleDiameter4Null() {
                this[this.tableGetWaterHydrantPropertiesDataTable.NozzleDiameter4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableGetWaterHydrantPropertiesDataTable.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableGetWaterHydrantPropertiesDataTable.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetWaterHydrantPropertiesDataTableRowChangeEvent : global::System.EventArgs {
            
            private GetWaterHydrantPropertiesDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterHydrantPropertiesDataTableRowChangeEvent(GetWaterHydrantPropertiesDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetWaterHydrantPropertiesDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591