//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F34100AglandUseData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F34100AglandUseData : global::System.Data.DataSet {
        
        private AglandTypeDataTableDataTable tableAglandTypeDataTable;
        
        private AglandMethodDataTableDataTable tableAglandMethodDataTable;
        
        private AglandUseDataTableDataTable tableAglandUseDataTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F34100AglandUseData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F34100AglandUseData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AglandTypeDataTable"] != null)) {
                    base.Tables.Add(new AglandTypeDataTableDataTable(ds.Tables["AglandTypeDataTable"]));
                }
                if ((ds.Tables["AglandMethodDataTable"] != null)) {
                    base.Tables.Add(new AglandMethodDataTableDataTable(ds.Tables["AglandMethodDataTable"]));
                }
                if ((ds.Tables["AglandUseDataTable"] != null)) {
                    base.Tables.Add(new AglandUseDataTableDataTable(ds.Tables["AglandUseDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AglandTypeDataTableDataTable AglandTypeDataTable {
            get {
                return this.tableAglandTypeDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AglandMethodDataTableDataTable AglandMethodDataTable {
            get {
                return this.tableAglandMethodDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AglandUseDataTableDataTable AglandUseDataTable {
            get {
                return this.tableAglandUseDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F34100AglandUseData cln = ((F34100AglandUseData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AglandTypeDataTable"] != null)) {
                    base.Tables.Add(new AglandTypeDataTableDataTable(ds.Tables["AglandTypeDataTable"]));
                }
                if ((ds.Tables["AglandMethodDataTable"] != null)) {
                    base.Tables.Add(new AglandMethodDataTableDataTable(ds.Tables["AglandMethodDataTable"]));
                }
                if ((ds.Tables["AglandUseDataTable"] != null)) {
                    base.Tables.Add(new AglandUseDataTableDataTable(ds.Tables["AglandUseDataTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAglandTypeDataTable = ((AglandTypeDataTableDataTable)(base.Tables["AglandTypeDataTable"]));
            if ((initTable == true)) {
                if ((this.tableAglandTypeDataTable != null)) {
                    this.tableAglandTypeDataTable.InitVars();
                }
            }
            this.tableAglandMethodDataTable = ((AglandMethodDataTableDataTable)(base.Tables["AglandMethodDataTable"]));
            if ((initTable == true)) {
                if ((this.tableAglandMethodDataTable != null)) {
                    this.tableAglandMethodDataTable.InitVars();
                }
            }
            this.tableAglandUseDataTable = ((AglandUseDataTableDataTable)(base.Tables["AglandUseDataTable"]));
            if ((initTable == true)) {
                if ((this.tableAglandUseDataTable != null)) {
                    this.tableAglandUseDataTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F34100AglandUseData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F34100AglandUseData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAglandTypeDataTable = new AglandTypeDataTableDataTable();
            base.Tables.Add(this.tableAglandTypeDataTable);
            this.tableAglandMethodDataTable = new AglandMethodDataTableDataTable();
            base.Tables.Add(this.tableAglandMethodDataTable);
            this.tableAglandUseDataTable = new AglandUseDataTableDataTable();
            base.Tables.Add(this.tableAglandUseDataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAglandTypeDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAglandMethodDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAglandUseDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F34100AglandUseData ds = new F34100AglandUseData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AglandTypeDataTableRowChangeEventHandler(object sender, AglandTypeDataTableRowChangeEvent e);
        
        public delegate void AglandMethodDataTableRowChangeEventHandler(object sender, AglandMethodDataTableRowChangeEvent e);
        
        public delegate void AglandUseDataTableRowChangeEventHandler(object sender, AglandUseDataTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AglandTypeDataTableDataTable : global::System.Data.TypedTableBase<AglandTypeDataTableRow> {
            
            private global::System.Data.DataColumn columnAglandTypeID;
            
            private global::System.Data.DataColumn columnAglandType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandTypeDataTableDataTable() {
                this.TableName = "AglandTypeDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AglandTypeDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AglandTypeDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AglandTypeIDColumn {
                get {
                    return this.columnAglandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AglandTypeColumn {
                get {
                    return this.columnAglandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandTypeDataTableRow this[int index] {
                get {
                    return ((AglandTypeDataTableRow)(this.Rows[index]));
                }
            }
            
            public event AglandTypeDataTableRowChangeEventHandler AglandTypeDataTableRowChanging;
            
            public event AglandTypeDataTableRowChangeEventHandler AglandTypeDataTableRowChanged;
            
            public event AglandTypeDataTableRowChangeEventHandler AglandTypeDataTableRowDeleting;
            
            public event AglandTypeDataTableRowChangeEventHandler AglandTypeDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAglandTypeDataTableRow(AglandTypeDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandTypeDataTableRow AddAglandTypeDataTableRow(string AglandTypeID, string AglandType) {
                AglandTypeDataTableRow rowAglandTypeDataTableRow = ((AglandTypeDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AglandTypeID,
                        AglandType};
                rowAglandTypeDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAglandTypeDataTableRow);
                return rowAglandTypeDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AglandTypeDataTableDataTable cln = ((AglandTypeDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AglandTypeDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAglandTypeID = base.Columns["AglandTypeID"];
                this.columnAglandType = base.Columns["AglandType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAglandTypeID = new global::System.Data.DataColumn("AglandTypeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAglandTypeID);
                this.columnAglandType = new global::System.Data.DataColumn("AglandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAglandType);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandTypeDataTableRow NewAglandTypeDataTableRow() {
                return ((AglandTypeDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AglandTypeDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AglandTypeDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AglandTypeDataTableRowChanged != null)) {
                    this.AglandTypeDataTableRowChanged(this, new AglandTypeDataTableRowChangeEvent(((AglandTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AglandTypeDataTableRowChanging != null)) {
                    this.AglandTypeDataTableRowChanging(this, new AglandTypeDataTableRowChangeEvent(((AglandTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AglandTypeDataTableRowDeleted != null)) {
                    this.AglandTypeDataTableRowDeleted(this, new AglandTypeDataTableRowChangeEvent(((AglandTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AglandTypeDataTableRowDeleting != null)) {
                    this.AglandTypeDataTableRowDeleting(this, new AglandTypeDataTableRowChangeEvent(((AglandTypeDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAglandTypeDataTableRow(AglandTypeDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F34100AglandUseData ds = new F34100AglandUseData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AglandTypeDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AglandMethodDataTableDataTable : global::System.Data.TypedTableBase<AglandMethodDataTableRow> {
            
            private global::System.Data.DataColumn columnAglandMethodID;
            
            private global::System.Data.DataColumn columnAglandMethod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandMethodDataTableDataTable() {
                this.TableName = "AglandMethodDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AglandMethodDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AglandMethodDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AglandMethodIDColumn {
                get {
                    return this.columnAglandMethodID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AglandMethodColumn {
                get {
                    return this.columnAglandMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandMethodDataTableRow this[int index] {
                get {
                    return ((AglandMethodDataTableRow)(this.Rows[index]));
                }
            }
            
            public event AglandMethodDataTableRowChangeEventHandler AglandMethodDataTableRowChanging;
            
            public event AglandMethodDataTableRowChangeEventHandler AglandMethodDataTableRowChanged;
            
            public event AglandMethodDataTableRowChangeEventHandler AglandMethodDataTableRowDeleting;
            
            public event AglandMethodDataTableRowChangeEventHandler AglandMethodDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAglandMethodDataTableRow(AglandMethodDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandMethodDataTableRow AddAglandMethodDataTableRow(string AglandMethodID, string AglandMethod) {
                AglandMethodDataTableRow rowAglandMethodDataTableRow = ((AglandMethodDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AglandMethodID,
                        AglandMethod};
                rowAglandMethodDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAglandMethodDataTableRow);
                return rowAglandMethodDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AglandMethodDataTableDataTable cln = ((AglandMethodDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AglandMethodDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAglandMethodID = base.Columns["AglandMethodID"];
                this.columnAglandMethod = base.Columns["AglandMethod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAglandMethodID = new global::System.Data.DataColumn("AglandMethodID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAglandMethodID);
                this.columnAglandMethod = new global::System.Data.DataColumn("AglandMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAglandMethod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandMethodDataTableRow NewAglandMethodDataTableRow() {
                return ((AglandMethodDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AglandMethodDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AglandMethodDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AglandMethodDataTableRowChanged != null)) {
                    this.AglandMethodDataTableRowChanged(this, new AglandMethodDataTableRowChangeEvent(((AglandMethodDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AglandMethodDataTableRowChanging != null)) {
                    this.AglandMethodDataTableRowChanging(this, new AglandMethodDataTableRowChangeEvent(((AglandMethodDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AglandMethodDataTableRowDeleted != null)) {
                    this.AglandMethodDataTableRowDeleted(this, new AglandMethodDataTableRowChangeEvent(((AglandMethodDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AglandMethodDataTableRowDeleting != null)) {
                    this.AglandMethodDataTableRowDeleting(this, new AglandMethodDataTableRowChangeEvent(((AglandMethodDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAglandMethodDataTableRow(AglandMethodDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F34100AglandUseData ds = new F34100AglandUseData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AglandMethodDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AglandUseDataTableDataTable : global::System.Data.TypedTableBase<AglandUseDataTableRow> {
            
            private global::System.Data.DataColumn columnAglandID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnUse;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAglandTypeID;
            
            private global::System.Data.DataColumn columnAglandMethodID;
            
            private global::System.Data.DataColumn columnFactor;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnMinimumValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandUseDataTableDataTable() {
                this.TableName = "AglandUseDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AglandUseDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AglandUseDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AglandIDColumn {
                get {
                    return this.columnAglandID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseColumn {
                get {
                    return this.columnUse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AglandTypeIDColumn {
                get {
                    return this.columnAglandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AglandMethodIDColumn {
                get {
                    return this.columnAglandMethodID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactorColumn {
                get {
                    return this.columnFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumValueColumn {
                get {
                    return this.columnMinimumValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandUseDataTableRow this[int index] {
                get {
                    return ((AglandUseDataTableRow)(this.Rows[index]));
                }
            }
            
            public event AglandUseDataTableRowChangeEventHandler AglandUseDataTableRowChanging;
            
            public event AglandUseDataTableRowChangeEventHandler AglandUseDataTableRowChanged;
            
            public event AglandUseDataTableRowChangeEventHandler AglandUseDataTableRowDeleting;
            
            public event AglandUseDataTableRowChangeEventHandler AglandUseDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAglandUseDataTableRow(AglandUseDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandUseDataTableRow AddAglandUseDataTableRow(int AglandID, int RollYear, string Use, string Description, int AglandTypeID, int AglandMethodID, decimal Factor, string Value, string MinimumValue) {
                AglandUseDataTableRow rowAglandUseDataTableRow = ((AglandUseDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AglandID,
                        RollYear,
                        Use,
                        Description,
                        AglandTypeID,
                        AglandMethodID,
                        Factor,
                        Value,
                        MinimumValue};
                rowAglandUseDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAglandUseDataTableRow);
                return rowAglandUseDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AglandUseDataTableDataTable cln = ((AglandUseDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AglandUseDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAglandID = base.Columns["AglandID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnUse = base.Columns["Use"];
                this.columnDescription = base.Columns["Description"];
                this.columnAglandTypeID = base.Columns["AglandTypeID"];
                this.columnAglandMethodID = base.Columns["AglandMethodID"];
                this.columnFactor = base.Columns["Factor"];
                this.columnValue = base.Columns["Value"];
                this.columnMinimumValue = base.Columns["MinimumValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAglandID = new global::System.Data.DataColumn("AglandID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAglandID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnUse = new global::System.Data.DataColumn("Use", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUse);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAglandTypeID = new global::System.Data.DataColumn("AglandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAglandTypeID);
                this.columnAglandMethodID = new global::System.Data.DataColumn("AglandMethodID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAglandMethodID);
                this.columnFactor = new global::System.Data.DataColumn("Factor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactor);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnMinimumValue = new global::System.Data.DataColumn("MinimumValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandUseDataTableRow NewAglandUseDataTableRow() {
                return ((AglandUseDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AglandUseDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AglandUseDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AglandUseDataTableRowChanged != null)) {
                    this.AglandUseDataTableRowChanged(this, new AglandUseDataTableRowChangeEvent(((AglandUseDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AglandUseDataTableRowChanging != null)) {
                    this.AglandUseDataTableRowChanging(this, new AglandUseDataTableRowChangeEvent(((AglandUseDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AglandUseDataTableRowDeleted != null)) {
                    this.AglandUseDataTableRowDeleted(this, new AglandUseDataTableRowChangeEvent(((AglandUseDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AglandUseDataTableRowDeleting != null)) {
                    this.AglandUseDataTableRowDeleting(this, new AglandUseDataTableRowChangeEvent(((AglandUseDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAglandUseDataTableRow(AglandUseDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F34100AglandUseData ds = new F34100AglandUseData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AglandUseDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AglandTypeDataTableRow : global::System.Data.DataRow {
            
            private AglandTypeDataTableDataTable tableAglandTypeDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AglandTypeDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAglandTypeDataTable = ((AglandTypeDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AglandTypeID {
                get {
                    try {
                        return ((string)(this[this.tableAglandTypeDataTable.AglandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AglandTypeID\' in table \'AglandTypeDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandTypeDataTable.AglandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AglandType {
                get {
                    try {
                        return ((string)(this[this.tableAglandTypeDataTable.AglandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AglandType\' in table \'AglandTypeDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandTypeDataTable.AglandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAglandTypeIDNull() {
                return this.IsNull(this.tableAglandTypeDataTable.AglandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAglandTypeIDNull() {
                this[this.tableAglandTypeDataTable.AglandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAglandTypeNull() {
                return this.IsNull(this.tableAglandTypeDataTable.AglandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAglandTypeNull() {
                this[this.tableAglandTypeDataTable.AglandTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AglandMethodDataTableRow : global::System.Data.DataRow {
            
            private AglandMethodDataTableDataTable tableAglandMethodDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AglandMethodDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAglandMethodDataTable = ((AglandMethodDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AglandMethodID {
                get {
                    try {
                        return ((string)(this[this.tableAglandMethodDataTable.AglandMethodIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AglandMethodID\' in table \'AglandMethodDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableAglandMethodDataTable.AglandMethodIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AglandMethod {
                get {
                    try {
                        return ((string)(this[this.tableAglandMethodDataTable.AglandMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AglandMethod\' in table \'AglandMethodDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandMethodDataTable.AglandMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAglandMethodIDNull() {
                return this.IsNull(this.tableAglandMethodDataTable.AglandMethodIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAglandMethodIDNull() {
                this[this.tableAglandMethodDataTable.AglandMethodIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAglandMethodNull() {
                return this.IsNull(this.tableAglandMethodDataTable.AglandMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAglandMethodNull() {
                this[this.tableAglandMethodDataTable.AglandMethodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AglandUseDataTableRow : global::System.Data.DataRow {
            
            private AglandUseDataTableDataTable tableAglandUseDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AglandUseDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAglandUseDataTable = ((AglandUseDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AglandID {
                get {
                    try {
                        return ((int)(this[this.tableAglandUseDataTable.AglandIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AglandID\' in table \'AglandUseDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandUseDataTable.AglandIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableAglandUseDataTable.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'AglandUseDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandUseDataTable.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Use {
                get {
                    try {
                        return ((string)(this[this.tableAglandUseDataTable.UseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Use\' in table \'AglandUseDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandUseDataTable.UseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableAglandUseDataTable.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'AglandUseDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandUseDataTable.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AglandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableAglandUseDataTable.AglandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AglandTypeID\' in table \'AglandUseDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandUseDataTable.AglandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AglandMethodID {
                get {
                    try {
                        return ((int)(this[this.tableAglandUseDataTable.AglandMethodIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AglandMethodID\' in table \'AglandUseDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandUseDataTable.AglandMethodIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Factor {
                get {
                    try {
                        return ((decimal)(this[this.tableAglandUseDataTable.FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factor\' in table \'AglandUseDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandUseDataTable.FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableAglandUseDataTable.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'AglandUseDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandUseDataTable.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinimumValue {
                get {
                    try {
                        return ((string)(this[this.tableAglandUseDataTable.MinimumValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinimumValue\' in table \'AglandUseDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAglandUseDataTable.MinimumValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAglandIDNull() {
                return this.IsNull(this.tableAglandUseDataTable.AglandIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAglandIDNull() {
                this[this.tableAglandUseDataTable.AglandIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableAglandUseDataTable.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableAglandUseDataTable.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseNull() {
                return this.IsNull(this.tableAglandUseDataTable.UseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseNull() {
                this[this.tableAglandUseDataTable.UseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableAglandUseDataTable.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableAglandUseDataTable.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAglandTypeIDNull() {
                return this.IsNull(this.tableAglandUseDataTable.AglandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAglandTypeIDNull() {
                this[this.tableAglandUseDataTable.AglandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAglandMethodIDNull() {
                return this.IsNull(this.tableAglandUseDataTable.AglandMethodIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAglandMethodIDNull() {
                this[this.tableAglandUseDataTable.AglandMethodIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactorNull() {
                return this.IsNull(this.tableAglandUseDataTable.FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactorNull() {
                this[this.tableAglandUseDataTable.FactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableAglandUseDataTable.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableAglandUseDataTable.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinimumValueNull() {
                return this.IsNull(this.tableAglandUseDataTable.MinimumValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinimumValueNull() {
                this[this.tableAglandUseDataTable.MinimumValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AglandTypeDataTableRowChangeEvent : global::System.EventArgs {
            
            private AglandTypeDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandTypeDataTableRowChangeEvent(AglandTypeDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandTypeDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AglandMethodDataTableRowChangeEvent : global::System.EventArgs {
            
            private AglandMethodDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandMethodDataTableRowChangeEvent(AglandMethodDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandMethodDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AglandUseDataTableRowChangeEvent : global::System.EventArgs {
            
            private AglandUseDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandUseDataTableRowChangeEvent(AglandUseDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AglandUseDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591