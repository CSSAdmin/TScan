//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ExciseTaxAffidavitData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ExciseTaxAffidavitData : global::System.Data.DataSet {
        
        private GeneralDataTable tableGeneral;
        
        private PartiesHeaderDataTable tablePartiesHeader;
        
        private ParcelHeaderDataTable tableParcelHeader;
        
        private AffidavitDataTable tableAffidavit;
        
        private AmountDueDataTable tableAmountDue;
        
        private SupplimentDataTable tableSuppliment;
        
        private ListAffidavitStatementIdDataTable tableListAffidavitStatementId;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExciseTaxAffidavitData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ExciseTaxAffidavitData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["General"] != null)) {
                    base.Tables.Add(new GeneralDataTable(ds.Tables["General"]));
                }
                if ((ds.Tables["PartiesHeader"] != null)) {
                    base.Tables.Add(new PartiesHeaderDataTable(ds.Tables["PartiesHeader"]));
                }
                if ((ds.Tables["ParcelHeader"] != null)) {
                    base.Tables.Add(new ParcelHeaderDataTable(ds.Tables["ParcelHeader"]));
                }
                if ((ds.Tables["Affidavit"] != null)) {
                    base.Tables.Add(new AffidavitDataTable(ds.Tables["Affidavit"]));
                }
                if ((ds.Tables["AmountDue"] != null)) {
                    base.Tables.Add(new AmountDueDataTable(ds.Tables["AmountDue"]));
                }
                if ((ds.Tables["Suppliment"] != null)) {
                    base.Tables.Add(new SupplimentDataTable(ds.Tables["Suppliment"]));
                }
                if ((ds.Tables["ListAffidavitStatementId"] != null)) {
                    base.Tables.Add(new ListAffidavitStatementIdDataTable(ds.Tables["ListAffidavitStatementId"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GeneralDataTable General {
            get {
                return this.tableGeneral;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PartiesHeaderDataTable PartiesHeader {
            get {
                return this.tablePartiesHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParcelHeaderDataTable ParcelHeader {
            get {
                return this.tableParcelHeader;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AffidavitDataTable Affidavit {
            get {
                return this.tableAffidavit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AmountDueDataTable AmountDue {
            get {
                return this.tableAmountDue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SupplimentDataTable Suppliment {
            get {
                return this.tableSuppliment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAffidavitStatementIdDataTable ListAffidavitStatementId {
            get {
                return this.tableListAffidavitStatementId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ExciseTaxAffidavitData cln = ((ExciseTaxAffidavitData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["General"] != null)) {
                    base.Tables.Add(new GeneralDataTable(ds.Tables["General"]));
                }
                if ((ds.Tables["PartiesHeader"] != null)) {
                    base.Tables.Add(new PartiesHeaderDataTable(ds.Tables["PartiesHeader"]));
                }
                if ((ds.Tables["ParcelHeader"] != null)) {
                    base.Tables.Add(new ParcelHeaderDataTable(ds.Tables["ParcelHeader"]));
                }
                if ((ds.Tables["Affidavit"] != null)) {
                    base.Tables.Add(new AffidavitDataTable(ds.Tables["Affidavit"]));
                }
                if ((ds.Tables["AmountDue"] != null)) {
                    base.Tables.Add(new AmountDueDataTable(ds.Tables["AmountDue"]));
                }
                if ((ds.Tables["Suppliment"] != null)) {
                    base.Tables.Add(new SupplimentDataTable(ds.Tables["Suppliment"]));
                }
                if ((ds.Tables["ListAffidavitStatementId"] != null)) {
                    base.Tables.Add(new ListAffidavitStatementIdDataTable(ds.Tables["ListAffidavitStatementId"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGeneral = ((GeneralDataTable)(base.Tables["General"]));
            if ((initTable == true)) {
                if ((this.tableGeneral != null)) {
                    this.tableGeneral.InitVars();
                }
            }
            this.tablePartiesHeader = ((PartiesHeaderDataTable)(base.Tables["PartiesHeader"]));
            if ((initTable == true)) {
                if ((this.tablePartiesHeader != null)) {
                    this.tablePartiesHeader.InitVars();
                }
            }
            this.tableParcelHeader = ((ParcelHeaderDataTable)(base.Tables["ParcelHeader"]));
            if ((initTable == true)) {
                if ((this.tableParcelHeader != null)) {
                    this.tableParcelHeader.InitVars();
                }
            }
            this.tableAffidavit = ((AffidavitDataTable)(base.Tables["Affidavit"]));
            if ((initTable == true)) {
                if ((this.tableAffidavit != null)) {
                    this.tableAffidavit.InitVars();
                }
            }
            this.tableAmountDue = ((AmountDueDataTable)(base.Tables["AmountDue"]));
            if ((initTable == true)) {
                if ((this.tableAmountDue != null)) {
                    this.tableAmountDue.InitVars();
                }
            }
            this.tableSuppliment = ((SupplimentDataTable)(base.Tables["Suppliment"]));
            if ((initTable == true)) {
                if ((this.tableSuppliment != null)) {
                    this.tableSuppliment.InitVars();
                }
            }
            this.tableListAffidavitStatementId = ((ListAffidavitStatementIdDataTable)(base.Tables["ListAffidavitStatementId"]));
            if ((initTable == true)) {
                if ((this.tableListAffidavitStatementId != null)) {
                    this.tableListAffidavitStatementId.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ExciseTaxAffidavitData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ExciseTaxAffidavitData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGeneral = new GeneralDataTable();
            base.Tables.Add(this.tableGeneral);
            this.tablePartiesHeader = new PartiesHeaderDataTable();
            base.Tables.Add(this.tablePartiesHeader);
            this.tableParcelHeader = new ParcelHeaderDataTable();
            base.Tables.Add(this.tableParcelHeader);
            this.tableAffidavit = new AffidavitDataTable();
            base.Tables.Add(this.tableAffidavit);
            this.tableAmountDue = new AmountDueDataTable();
            base.Tables.Add(this.tableAmountDue);
            this.tableSuppliment = new SupplimentDataTable();
            base.Tables.Add(this.tableSuppliment);
            this.tableListAffidavitStatementId = new ListAffidavitStatementIdDataTable();
            base.Tables.Add(this.tableListAffidavitStatementId);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGeneral() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePartiesHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParcelHeader() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAffidavit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAmountDue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSuppliment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAffidavitStatementId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ExciseTaxAffidavitData ds = new ExciseTaxAffidavitData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GeneralRowChangeEventHandler(object sender, GeneralRowChangeEvent e);
        
        public delegate void PartiesHeaderRowChangeEventHandler(object sender, PartiesHeaderRowChangeEvent e);
        
        public delegate void ParcelHeaderRowChangeEventHandler(object sender, ParcelHeaderRowChangeEvent e);
        
        public delegate void AffidavitRowChangeEventHandler(object sender, AffidavitRowChangeEvent e);
        
        public delegate void AmountDueRowChangeEventHandler(object sender, AmountDueRowChangeEvent e);
        
        public delegate void SupplimentRowChangeEventHandler(object sender, SupplimentRowChangeEvent e);
        
        public delegate void ListAffidavitStatementIdRowChangeEventHandler(object sender, ListAffidavitStatementIdRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GeneralDataTable : global::System.Data.TypedTableBase<GeneralRow> {
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnPaymentDate;
            
            private global::System.Data.DataColumn columnFormDate;
            
            private global::System.Data.DataColumn columnDistrict;
            
            private global::System.Data.DataColumn columnExciseRateID;
            
            private global::System.Data.DataColumn columnSubmittedDate;
            
            private global::System.Data.DataColumn columnPreDatesStmt;
            
            private global::System.Data.DataColumn columnTotalDebt;
            
            private global::System.Data.DataColumn columnLocationCode;
            
            private global::System.Data.DataColumn columnIsExempt;
            
            private global::System.Data.DataColumn columnIsMobileHome;
            
            private global::System.Data.DataColumn columnReceiptNumber;
            
            private global::System.Data.DataColumn columnDORNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralDataTable() {
                this.TableName = "General";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GeneralDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GeneralDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentDateColumn {
                get {
                    return this.columnPaymentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormDateColumn {
                get {
                    return this.columnFormDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistrictColumn {
                get {
                    return this.columnDistrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseRateIDColumn {
                get {
                    return this.columnExciseRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubmittedDateColumn {
                get {
                    return this.columnSubmittedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreDatesStmtColumn {
                get {
                    return this.columnPreDatesStmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebtColumn {
                get {
                    return this.columnTotalDebt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationCodeColumn {
                get {
                    return this.columnLocationCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExemptColumn {
                get {
                    return this.columnIsExempt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMobileHomeColumn {
                get {
                    return this.columnIsMobileHome;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptNumberColumn {
                get {
                    return this.columnReceiptNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DORNoteColumn {
                get {
                    return this.columnDORNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRow this[int index] {
                get {
                    return ((GeneralRow)(this.Rows[index]));
                }
            }
            
            public event GeneralRowChangeEventHandler GeneralRowChanging;
            
            public event GeneralRowChangeEventHandler GeneralRowChanged;
            
            public event GeneralRowChangeEventHandler GeneralRowDeleting;
            
            public event GeneralRowChangeEventHandler GeneralRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGeneralRow(GeneralRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRow AddGeneralRow(int StatementID, string PaymentDate, string FormDate, string District, int ExciseRateID, string SubmittedDate, bool PreDatesStmt, decimal TotalDebt, string LocationCode, bool IsExempt, bool IsMobileHome, string ReceiptNumber, string DORNote) {
                GeneralRow rowGeneralRow = ((GeneralRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StatementID,
                        PaymentDate,
                        FormDate,
                        District,
                        ExciseRateID,
                        SubmittedDate,
                        PreDatesStmt,
                        TotalDebt,
                        LocationCode,
                        IsExempt,
                        IsMobileHome,
                        ReceiptNumber,
                        DORNote};
                rowGeneralRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGeneralRow);
                return rowGeneralRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRow FindByStatementID(int StatementID) {
                return ((GeneralRow)(this.Rows.Find(new object[] {
                            StatementID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GeneralDataTable cln = ((GeneralDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GeneralDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatementID = base.Columns["StatementID"];
                this.columnPaymentDate = base.Columns["PaymentDate"];
                this.columnFormDate = base.Columns["FormDate"];
                this.columnDistrict = base.Columns["District"];
                this.columnExciseRateID = base.Columns["ExciseRateID"];
                this.columnSubmittedDate = base.Columns["SubmittedDate"];
                this.columnPreDatesStmt = base.Columns["PreDatesStmt"];
                this.columnTotalDebt = base.Columns["TotalDebt"];
                this.columnLocationCode = base.Columns["LocationCode"];
                this.columnIsExempt = base.Columns["IsExempt"];
                this.columnIsMobileHome = base.Columns["IsMobileHome"];
                this.columnReceiptNumber = base.Columns["ReceiptNumber"];
                this.columnDORNote = base.Columns["DORNote"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnPaymentDate = new global::System.Data.DataColumn("PaymentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDate);
                this.columnFormDate = new global::System.Data.DataColumn("FormDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormDate);
                this.columnDistrict = new global::System.Data.DataColumn("District", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistrict);
                this.columnExciseRateID = new global::System.Data.DataColumn("ExciseRateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseRateID);
                this.columnSubmittedDate = new global::System.Data.DataColumn("SubmittedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubmittedDate);
                this.columnPreDatesStmt = new global::System.Data.DataColumn("PreDatesStmt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreDatesStmt);
                this.columnTotalDebt = new global::System.Data.DataColumn("TotalDebt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt);
                this.columnLocationCode = new global::System.Data.DataColumn("LocationCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationCode);
                this.columnIsExempt = new global::System.Data.DataColumn("IsExempt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExempt);
                this.columnIsMobileHome = new global::System.Data.DataColumn("IsMobileHome", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMobileHome);
                this.columnReceiptNumber = new global::System.Data.DataColumn("ReceiptNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptNumber);
                this.columnDORNote = new global::System.Data.DataColumn("DORNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDORNote);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStatementID}, true));
                this.columnStatementID.AllowDBNull = false;
                this.columnStatementID.Unique = true;
                this.columnPaymentDate.MaxLength = 10;
                this.columnFormDate.MaxLength = 10;
                this.columnDistrict.MaxLength = 63;
                this.columnExciseRateID.AllowDBNull = false;
                this.columnSubmittedDate.MaxLength = 10;
                this.columnTotalDebt.AllowDBNull = false;
                this.columnLocationCode.MaxLength = 4;
                this.columnIsExempt.AllowDBNull = false;
                this.columnIsMobileHome.AllowDBNull = false;
                this.columnReceiptNumber.MaxLength = 20;
                this.columnDORNote.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRow NewGeneralRow() {
                return ((GeneralRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GeneralRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GeneralRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GeneralRowChanged != null)) {
                    this.GeneralRowChanged(this, new GeneralRowChangeEvent(((GeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GeneralRowChanging != null)) {
                    this.GeneralRowChanging(this, new GeneralRowChangeEvent(((GeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GeneralRowDeleted != null)) {
                    this.GeneralRowDeleted(this, new GeneralRowChangeEvent(((GeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GeneralRowDeleting != null)) {
                    this.GeneralRowDeleting(this, new GeneralRowChangeEvent(((GeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGeneralRow(GeneralRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxAffidavitData ds = new ExciseTaxAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GeneralDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PartiesHeaderDataTable : global::System.Data.TypedTableBase<PartiesHeaderRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnIndividualType;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnPercentOwner;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnIndividualID;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnIndividualTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderDataTable() {
                this.TableName = "PartiesHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PartiesHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PartiesHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeColumn {
                get {
                    return this.columnIndividualType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentOwnerColumn {
                get {
                    return this.columnPercentOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualIDColumn {
                get {
                    return this.columnIndividualID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndividualTypeIDColumn {
                get {
                    return this.columnIndividualTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRow this[int index] {
                get {
                    return ((PartiesHeaderRow)(this.Rows[index]));
                }
            }
            
            public event PartiesHeaderRowChangeEventHandler PartiesHeaderRowChanging;
            
            public event PartiesHeaderRowChangeEventHandler PartiesHeaderRowChanged;
            
            public event PartiesHeaderRowChangeEventHandler PartiesHeaderRowDeleting;
            
            public event PartiesHeaderRowChangeEventHandler PartiesHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPartiesHeaderRow(PartiesHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRow AddPartiesHeaderRow(string Name, string Address, string City, string IndividualType, string Phone, float PercentOwner, string Address1, string Address2, string State, string Zip, string Country, int IndividualID, int StatementID, int OwnerID, byte IndividualTypeID) {
                PartiesHeaderRow rowPartiesHeaderRow = ((PartiesHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Address,
                        City,
                        IndividualType,
                        Phone,
                        PercentOwner,
                        Address1,
                        Address2,
                        State,
                        Zip,
                        Country,
                        IndividualID,
                        StatementID,
                        OwnerID,
                        IndividualTypeID};
                rowPartiesHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPartiesHeaderRow);
                return rowPartiesHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PartiesHeaderDataTable cln = ((PartiesHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PartiesHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnIndividualType = base.Columns["IndividualType"];
                this.columnPhone = base.Columns["Phone"];
                this.columnPercentOwner = base.Columns["PercentOwner"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnCountry = base.Columns["Country"];
                this.columnIndividualID = base.Columns["IndividualID"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnIndividualTypeID = base.Columns["IndividualTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnIndividualType = new global::System.Data.DataColumn("IndividualType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualType);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnPercentOwner = new global::System.Data.DataColumn("PercentOwner", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentOwner);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnIndividualID = new global::System.Data.DataColumn("IndividualID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualID);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnIndividualTypeID = new global::System.Data.DataColumn("IndividualTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndividualTypeID);
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 150;
                this.columnAddress.MaxLength = 301;
                this.columnCity.MaxLength = 50;
                this.columnIndividualType.AllowDBNull = false;
                this.columnIndividualType.MaxLength = 50;
                this.columnPhone.MaxLength = 12;
                this.columnAddress1.MaxLength = 150;
                this.columnAddress2.MaxLength = 150;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnCountry.MaxLength = 100;
                this.columnIndividualID.AllowDBNull = false;
                this.columnStatementID.AllowDBNull = false;
                this.columnIndividualTypeID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRow NewPartiesHeaderRow() {
                return ((PartiesHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PartiesHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PartiesHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PartiesHeaderRowChanged != null)) {
                    this.PartiesHeaderRowChanged(this, new PartiesHeaderRowChangeEvent(((PartiesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PartiesHeaderRowChanging != null)) {
                    this.PartiesHeaderRowChanging(this, new PartiesHeaderRowChangeEvent(((PartiesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PartiesHeaderRowDeleted != null)) {
                    this.PartiesHeaderRowDeleted(this, new PartiesHeaderRowChangeEvent(((PartiesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PartiesHeaderRowDeleting != null)) {
                    this.PartiesHeaderRowDeleting(this, new PartiesHeaderRowChangeEvent(((PartiesHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePartiesHeaderRow(PartiesHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxAffidavitData ds = new ExciseTaxAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PartiesHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParcelHeaderDataTable : global::System.Data.TypedTableBase<ParcelHeaderRow> {
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnIsPersonalProperty;
            
            private global::System.Data.DataColumn columnAssessedValue;
            
            private global::System.Data.DataColumn columnLegal;
            
            private global::System.Data.DataColumn columnSoldParcelID;
            
            private global::System.Data.DataColumn columnStatementID;
            
            private global::System.Data.DataColumn columnIsPersonalPropertyValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderDataTable() {
                this.TableName = "ParcelHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelHeaderDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParcelHeaderDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPersonalPropertyColumn {
                get {
                    return this.columnIsPersonalProperty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessedValueColumn {
                get {
                    return this.columnAssessedValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalColumn {
                get {
                    return this.columnLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoldParcelIDColumn {
                get {
                    return this.columnSoldParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatementIDColumn {
                get {
                    return this.columnStatementID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPersonalPropertyValueColumn {
                get {
                    return this.columnIsPersonalPropertyValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRow this[int index] {
                get {
                    return ((ParcelHeaderRow)(this.Rows[index]));
                }
            }
            
            public event ParcelHeaderRowChangeEventHandler ParcelHeaderRowChanging;
            
            public event ParcelHeaderRowChangeEventHandler ParcelHeaderRowChanged;
            
            public event ParcelHeaderRowChangeEventHandler ParcelHeaderRowDeleting;
            
            public event ParcelHeaderRowChangeEventHandler ParcelHeaderRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParcelHeaderRow(ParcelHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRow AddParcelHeaderRow(string Number, bool IsPersonalProperty, decimal AssessedValue, string Legal, int SoldParcelID, int StatementID, string IsPersonalPropertyValue) {
                ParcelHeaderRow rowParcelHeaderRow = ((ParcelHeaderRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Number,
                        IsPersonalProperty,
                        AssessedValue,
                        Legal,
                        SoldParcelID,
                        StatementID,
                        IsPersonalPropertyValue};
                rowParcelHeaderRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParcelHeaderRow);
                return rowParcelHeaderRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParcelHeaderDataTable cln = ((ParcelHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParcelHeaderDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnIsPersonalProperty = base.Columns["IsPersonalProperty"];
                this.columnAssessedValue = base.Columns["AssessedValue"];
                this.columnLegal = base.Columns["Legal"];
                this.columnSoldParcelID = base.Columns["SoldParcelID"];
                this.columnStatementID = base.Columns["StatementID"];
                this.columnIsPersonalPropertyValue = base.Columns["IsPersonalPropertyValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnIsPersonalProperty = new global::System.Data.DataColumn("IsPersonalProperty", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPersonalProperty);
                this.columnAssessedValue = new global::System.Data.DataColumn("AssessedValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessedValue);
                this.columnLegal = new global::System.Data.DataColumn("Legal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegal);
                this.columnSoldParcelID = new global::System.Data.DataColumn("SoldParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoldParcelID);
                this.columnStatementID = new global::System.Data.DataColumn("StatementID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatementID);
                this.columnIsPersonalPropertyValue = new global::System.Data.DataColumn("IsPersonalPropertyValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPersonalPropertyValue);
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.MaxLength = 50;
                this.columnAssessedValue.AllowDBNull = false;
                this.columnLegal.MaxLength = 5000;
                this.columnSoldParcelID.AllowDBNull = false;
                this.columnStatementID.AllowDBNull = false;
                this.columnIsPersonalPropertyValue.ReadOnly = true;
                this.columnIsPersonalPropertyValue.MaxLength = 3;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRow NewParcelHeaderRow() {
                return ((ParcelHeaderRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParcelHeaderRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParcelHeaderRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParcelHeaderRowChanged != null)) {
                    this.ParcelHeaderRowChanged(this, new ParcelHeaderRowChangeEvent(((ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParcelHeaderRowChanging != null)) {
                    this.ParcelHeaderRowChanging(this, new ParcelHeaderRowChangeEvent(((ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParcelHeaderRowDeleted != null)) {
                    this.ParcelHeaderRowDeleted(this, new ParcelHeaderRowChangeEvent(((ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParcelHeaderRowDeleting != null)) {
                    this.ParcelHeaderRowDeleting(this, new ParcelHeaderRowChangeEvent(((ParcelHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParcelHeaderRow(ParcelHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxAffidavitData ds = new ExciseTaxAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParcelHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AffidavitDataTable : global::System.Data.TypedTableBase<AffidavitRow> {
            
            private global::System.Data.DataColumn columnIsPartialSale;
            
            private global::System.Data.DataColumn columnIsSegregated;
            
            private global::System.Data.DataColumn columnStreetAddress;
            
            private global::System.Data.DataColumn columnLocationSale;
            
            private global::System.Data.DataColumn columnLocationName;
            
            private global::System.Data.DataColumn columnUseCode;
            
            private global::System.Data.DataColumn columnExemptRegNum;
            
            private global::System.Data.DataColumn columnIsForestLand;
            
            private global::System.Data.DataColumn columnIsOpenSpace;
            
            private global::System.Data.DataColumn columnIsHistoric;
            
            private global::System.Data.DataColumn columnHasContinuance;
            
            private global::System.Data.DataColumn columnPersonalPropDesc;
            
            private global::System.Data.DataColumn columnExemptionCode;
            
            private global::System.Data.DataColumn columnExemptionDesc;
            
            private global::System.Data.DataColumn columnDocumentType;
            
            private global::System.Data.DataColumn columnDocumentDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitDataTable() {
                this.TableName = "Affidavit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AffidavitDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AffidavitDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPartialSaleColumn {
                get {
                    return this.columnIsPartialSale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSegregatedColumn {
                get {
                    return this.columnIsSegregated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetAddressColumn {
                get {
                    return this.columnStreetAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationSaleColumn {
                get {
                    return this.columnLocationSale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationNameColumn {
                get {
                    return this.columnLocationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseCodeColumn {
                get {
                    return this.columnUseCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptRegNumColumn {
                get {
                    return this.columnExemptRegNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsForestLandColumn {
                get {
                    return this.columnIsForestLand;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOpenSpaceColumn {
                get {
                    return this.columnIsOpenSpace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsHistoricColumn {
                get {
                    return this.columnIsHistoric;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasContinuanceColumn {
                get {
                    return this.columnHasContinuance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalPropDescColumn {
                get {
                    return this.columnPersonalPropDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionCodeColumn {
                get {
                    return this.columnExemptionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionDescColumn {
                get {
                    return this.columnExemptionDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentTypeColumn {
                get {
                    return this.columnDocumentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDateColumn {
                get {
                    return this.columnDocumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRow this[int index] {
                get {
                    return ((AffidavitRow)(this.Rows[index]));
                }
            }
            
            public event AffidavitRowChangeEventHandler AffidavitRowChanging;
            
            public event AffidavitRowChangeEventHandler AffidavitRowChanged;
            
            public event AffidavitRowChangeEventHandler AffidavitRowDeleting;
            
            public event AffidavitRowChangeEventHandler AffidavitRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAffidavitRow(AffidavitRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRow AddAffidavitRow(
                        bool IsPartialSale, 
                        bool IsSegregated, 
                        string StreetAddress, 
                        int LocationSale, 
                        string LocationName, 
                        string UseCode, 
                        string ExemptRegNum, 
                        bool IsForestLand, 
                        bool IsOpenSpace, 
                        bool IsHistoric, 
                        bool HasContinuance, 
                        string PersonalPropDesc, 
                        string ExemptionCode, 
                        string ExemptionDesc, 
                        string DocumentType, 
                        string DocumentDate) {
                AffidavitRow rowAffidavitRow = ((AffidavitRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsPartialSale,
                        IsSegregated,
                        StreetAddress,
                        LocationSale,
                        LocationName,
                        UseCode,
                        ExemptRegNum,
                        IsForestLand,
                        IsOpenSpace,
                        IsHistoric,
                        HasContinuance,
                        PersonalPropDesc,
                        ExemptionCode,
                        ExemptionDesc,
                        DocumentType,
                        DocumentDate};
                rowAffidavitRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAffidavitRow);
                return rowAffidavitRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AffidavitDataTable cln = ((AffidavitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AffidavitDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsPartialSale = base.Columns["IsPartialSale"];
                this.columnIsSegregated = base.Columns["IsSegregated"];
                this.columnStreetAddress = base.Columns["StreetAddress"];
                this.columnLocationSale = base.Columns["LocationSale"];
                this.columnLocationName = base.Columns["LocationName"];
                this.columnUseCode = base.Columns["UseCode"];
                this.columnExemptRegNum = base.Columns["ExemptRegNum"];
                this.columnIsForestLand = base.Columns["IsForestLand"];
                this.columnIsOpenSpace = base.Columns["IsOpenSpace"];
                this.columnIsHistoric = base.Columns["IsHistoric"];
                this.columnHasContinuance = base.Columns["HasContinuance"];
                this.columnPersonalPropDesc = base.Columns["PersonalPropDesc"];
                this.columnExemptionCode = base.Columns["ExemptionCode"];
                this.columnExemptionDesc = base.Columns["ExemptionDesc"];
                this.columnDocumentType = base.Columns["DocumentType"];
                this.columnDocumentDate = base.Columns["DocumentDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsPartialSale = new global::System.Data.DataColumn("IsPartialSale", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPartialSale);
                this.columnIsSegregated = new global::System.Data.DataColumn("IsSegregated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSegregated);
                this.columnStreetAddress = new global::System.Data.DataColumn("StreetAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreetAddress);
                this.columnLocationSale = new global::System.Data.DataColumn("LocationSale", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationSale);
                this.columnLocationName = new global::System.Data.DataColumn("LocationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationName);
                this.columnUseCode = new global::System.Data.DataColumn("UseCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseCode);
                this.columnExemptRegNum = new global::System.Data.DataColumn("ExemptRegNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptRegNum);
                this.columnIsForestLand = new global::System.Data.DataColumn("IsForestLand", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsForestLand);
                this.columnIsOpenSpace = new global::System.Data.DataColumn("IsOpenSpace", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOpenSpace);
                this.columnIsHistoric = new global::System.Data.DataColumn("IsHistoric", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsHistoric);
                this.columnHasContinuance = new global::System.Data.DataColumn("HasContinuance", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasContinuance);
                this.columnPersonalPropDesc = new global::System.Data.DataColumn("PersonalPropDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalPropDesc);
                this.columnExemptionCode = new global::System.Data.DataColumn("ExemptionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionCode);
                this.columnExemptionDesc = new global::System.Data.DataColumn("ExemptionDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptionDesc);
                this.columnDocumentType = new global::System.Data.DataColumn("DocumentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentType);
                this.columnDocumentDate = new global::System.Data.DataColumn("DocumentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDate);
                this.columnIsPartialSale.AllowDBNull = false;
                this.columnIsSegregated.AllowDBNull = false;
                this.columnStreetAddress.MaxLength = 150;
                this.columnLocationName.MaxLength = 150;
                this.columnUseCode.MaxLength = 12;
                this.columnExemptRegNum.MaxLength = 9;
                this.columnIsForestLand.AllowDBNull = false;
                this.columnIsOpenSpace.AllowDBNull = false;
                this.columnIsHistoric.AllowDBNull = false;
                this.columnHasContinuance.AllowDBNull = false;
                this.columnPersonalPropDesc.MaxLength = 1000;
                this.columnExemptionCode.MaxLength = 32;
                this.columnExemptionDesc.MaxLength = 250;
                this.columnDocumentType.AllowDBNull = false;
                this.columnDocumentType.MaxLength = 1000;
                this.columnDocumentDate.ReadOnly = true;
                this.columnDocumentDate.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRow NewAffidavitRow() {
                return ((AffidavitRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AffidavitRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AffidavitRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AffidavitRowChanged != null)) {
                    this.AffidavitRowChanged(this, new AffidavitRowChangeEvent(((AffidavitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AffidavitRowChanging != null)) {
                    this.AffidavitRowChanging(this, new AffidavitRowChangeEvent(((AffidavitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AffidavitRowDeleted != null)) {
                    this.AffidavitRowDeleted(this, new AffidavitRowChangeEvent(((AffidavitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AffidavitRowDeleting != null)) {
                    this.AffidavitRowDeleting(this, new AffidavitRowChangeEvent(((AffidavitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAffidavitRow(AffidavitRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxAffidavitData ds = new ExciseTaxAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AffidavitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AmountDueDataTable : global::System.Data.TypedTableBase<AmountDueRow> {
            
            private global::System.Data.DataColumn columnGrossSalePrice;
            
            private global::System.Data.DataColumn columnPersonalPropAmt;
            
            private global::System.Data.DataColumn columnRealPropExemptAmt;
            
            private global::System.Data.DataColumn columnTaxableSalePrice;
            
            private global::System.Data.DataColumn columnExciseTaxState;
            
            private global::System.Data.DataColumn columnExciseTaxLocal;
            
            private global::System.Data.DataColumn columnDelinquentInterestState;
            
            private global::System.Data.DataColumn columnDelinquentInterestLocal;
            
            private global::System.Data.DataColumn columnDelinquentPenalty;
            
            private global::System.Data.DataColumn columnTechnologyFee;
            
            private global::System.Data.DataColumn columnTransactionFee;
            
            private global::System.Data.DataColumn columnSubTotal;
            
            private global::System.Data.DataColumn columnFees;
            
            private global::System.Data.DataColumn columnTotalAmountDue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueDataTable() {
                this.TableName = "AmountDue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AmountDueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AmountDueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossSalePriceColumn {
                get {
                    return this.columnGrossSalePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalPropAmtColumn {
                get {
                    return this.columnPersonalPropAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealPropExemptAmtColumn {
                get {
                    return this.columnRealPropExemptAmt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableSalePriceColumn {
                get {
                    return this.columnTaxableSalePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseTaxStateColumn {
                get {
                    return this.columnExciseTaxState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExciseTaxLocalColumn {
                get {
                    return this.columnExciseTaxLocal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentInterestStateColumn {
                get {
                    return this.columnDelinquentInterestState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentInterestLocalColumn {
                get {
                    return this.columnDelinquentInterestLocal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DelinquentPenaltyColumn {
                get {
                    return this.columnDelinquentPenalty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TechnologyFeeColumn {
                get {
                    return this.columnTechnologyFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionFeeColumn {
                get {
                    return this.columnTransactionFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubTotalColumn {
                get {
                    return this.columnSubTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeesColumn {
                get {
                    return this.columnFees;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountDueColumn {
                get {
                    return this.columnTotalAmountDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRow this[int index] {
                get {
                    return ((AmountDueRow)(this.Rows[index]));
                }
            }
            
            public event AmountDueRowChangeEventHandler AmountDueRowChanging;
            
            public event AmountDueRowChangeEventHandler AmountDueRowChanged;
            
            public event AmountDueRowChangeEventHandler AmountDueRowDeleting;
            
            public event AmountDueRowChangeEventHandler AmountDueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAmountDueRow(AmountDueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRow AddAmountDueRow(decimal GrossSalePrice, decimal PersonalPropAmt, decimal RealPropExemptAmt, decimal TaxableSalePrice, decimal ExciseTaxState, decimal ExciseTaxLocal, decimal DelinquentInterestState, decimal DelinquentInterestLocal, decimal DelinquentPenalty, decimal TechnologyFee, decimal TransactionFee, decimal SubTotal, decimal Fees, decimal TotalAmountDue) {
                AmountDueRow rowAmountDueRow = ((AmountDueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GrossSalePrice,
                        PersonalPropAmt,
                        RealPropExemptAmt,
                        TaxableSalePrice,
                        ExciseTaxState,
                        ExciseTaxLocal,
                        DelinquentInterestState,
                        DelinquentInterestLocal,
                        DelinquentPenalty,
                        TechnologyFee,
                        TransactionFee,
                        SubTotal,
                        Fees,
                        TotalAmountDue};
                rowAmountDueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAmountDueRow);
                return rowAmountDueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AmountDueDataTable cln = ((AmountDueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AmountDueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGrossSalePrice = base.Columns["GrossSalePrice"];
                this.columnPersonalPropAmt = base.Columns["PersonalPropAmt"];
                this.columnRealPropExemptAmt = base.Columns["RealPropExemptAmt"];
                this.columnTaxableSalePrice = base.Columns["TaxableSalePrice"];
                this.columnExciseTaxState = base.Columns["ExciseTaxState"];
                this.columnExciseTaxLocal = base.Columns["ExciseTaxLocal"];
                this.columnDelinquentInterestState = base.Columns["DelinquentInterestState"];
                this.columnDelinquentInterestLocal = base.Columns["DelinquentInterestLocal"];
                this.columnDelinquentPenalty = base.Columns["DelinquentPenalty"];
                this.columnTechnologyFee = base.Columns["TechnologyFee"];
                this.columnTransactionFee = base.Columns["TransactionFee"];
                this.columnSubTotal = base.Columns["SubTotal"];
                this.columnFees = base.Columns["Fees"];
                this.columnTotalAmountDue = base.Columns["TotalAmountDue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGrossSalePrice = new global::System.Data.DataColumn("GrossSalePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossSalePrice);
                this.columnPersonalPropAmt = new global::System.Data.DataColumn("PersonalPropAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalPropAmt);
                this.columnRealPropExemptAmt = new global::System.Data.DataColumn("RealPropExemptAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealPropExemptAmt);
                this.columnTaxableSalePrice = new global::System.Data.DataColumn("TaxableSalePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxableSalePrice);
                this.columnExciseTaxState = new global::System.Data.DataColumn("ExciseTaxState", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseTaxState);
                this.columnExciseTaxLocal = new global::System.Data.DataColumn("ExciseTaxLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExciseTaxLocal);
                this.columnDelinquentInterestState = new global::System.Data.DataColumn("DelinquentInterestState", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentInterestState);
                this.columnDelinquentInterestLocal = new global::System.Data.DataColumn("DelinquentInterestLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentInterestLocal);
                this.columnDelinquentPenalty = new global::System.Data.DataColumn("DelinquentPenalty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelinquentPenalty);
                this.columnTechnologyFee = new global::System.Data.DataColumn("TechnologyFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechnologyFee);
                this.columnTransactionFee = new global::System.Data.DataColumn("TransactionFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionFee);
                this.columnSubTotal = new global::System.Data.DataColumn("SubTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubTotal);
                this.columnFees = new global::System.Data.DataColumn("Fees", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFees);
                this.columnTotalAmountDue = new global::System.Data.DataColumn("TotalAmountDue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmountDue);
                this.columnGrossSalePrice.AllowDBNull = false;
                this.columnTaxableSalePrice.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRow NewAmountDueRow() {
                return ((AmountDueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AmountDueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AmountDueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AmountDueRowChanged != null)) {
                    this.AmountDueRowChanged(this, new AmountDueRowChangeEvent(((AmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AmountDueRowChanging != null)) {
                    this.AmountDueRowChanging(this, new AmountDueRowChangeEvent(((AmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AmountDueRowDeleted != null)) {
                    this.AmountDueRowDeleted(this, new AmountDueRowChangeEvent(((AmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AmountDueRowDeleting != null)) {
                    this.AmountDueRowDeleting(this, new AmountDueRowChangeEvent(((AmountDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAmountDueRow(AmountDueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxAffidavitData ds = new ExciseTaxAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AmountDueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SupplimentDataTable : global::System.Data.TypedTableBase<SupplimentRow> {
            
            private global::System.Data.DataColumn columnAgentName;
            
            private global::System.Data.DataColumn columnInstrumentType;
            
            private global::System.Data.DataColumn columnInstrumentDate;
            
            private global::System.Data.DataColumn columnFirmname;
            
            private global::System.Data.DataColumn columnReasonHeld;
            
            private global::System.Data.DataColumn columnGiftConsideration_A1;
            
            private global::System.Data.DataColumn columnTotalDebt_A1;
            
            private global::System.Data.DataColumn columnGranteePaysGrantor_A1;
            
            private global::System.Data.DataColumn columnGiftConsideration_A2;
            
            private global::System.Data.DataColumn columnTotalDebt_A2;
            
            private global::System.Data.DataColumn columnGranteePaysGrantor_A2;
            
            private global::System.Data.DataColumn columnDebtRate_A2;
            
            private global::System.Data.DataColumn columnGiftNoConsideration_B1;
            
            private global::System.Data.DataColumn columnGiftNoConsideration_B2;
            
            private global::System.Data.DataColumn columnTotalDebt_B2;
            
            private global::System.Data.DataColumn columnGiftNoConsideration_B3;
            
            private global::System.Data.DataColumn columnTotalDebt_B3;
            
            private global::System.Data.DataColumn columnGiftNoConsideration_B4;
            
            private global::System.Data.DataColumn columnIsRefinance;
            
            private global::System.Data.DataColumn columnGiftedEquity;
            
            private global::System.Data.DataColumn columnGrantorsSignature;
            
            private global::System.Data.DataColumn columnGranteesSignature;
            
            private global::System.Data.DataColumn columnFacilitatorName;
            
            private global::System.Data.DataColumn columnGranteeName;
            
            private global::System.Data.DataColumn columnTreasurerStatusID;
            
            private global::System.Data.DataColumn columnAssessorStatusID;
            
            private global::System.Data.DataColumn columnTreasurer;
            
            private global::System.Data.DataColumn columnAssessor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentDataTable() {
                this.TableName = "Suppliment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SupplimentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SupplimentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNameColumn {
                get {
                    return this.columnAgentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstrumentTypeColumn {
                get {
                    return this.columnInstrumentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstrumentDateColumn {
                get {
                    return this.columnInstrumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirmnameColumn {
                get {
                    return this.columnFirmname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonHeldColumn {
                get {
                    return this.columnReasonHeld;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftConsideration_A1Column {
                get {
                    return this.columnGiftConsideration_A1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebt_A1Column {
                get {
                    return this.columnTotalDebt_A1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteePaysGrantor_A1Column {
                get {
                    return this.columnGranteePaysGrantor_A1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftConsideration_A2Column {
                get {
                    return this.columnGiftConsideration_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebt_A2Column {
                get {
                    return this.columnTotalDebt_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteePaysGrantor_A2Column {
                get {
                    return this.columnGranteePaysGrantor_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebtRate_A2Column {
                get {
                    return this.columnDebtRate_A2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftNoConsideration_B1Column {
                get {
                    return this.columnGiftNoConsideration_B1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftNoConsideration_B2Column {
                get {
                    return this.columnGiftNoConsideration_B2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebt_B2Column {
                get {
                    return this.columnTotalDebt_B2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftNoConsideration_B3Column {
                get {
                    return this.columnGiftNoConsideration_B3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDebt_B3Column {
                get {
                    return this.columnTotalDebt_B3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftNoConsideration_B4Column {
                get {
                    return this.columnGiftNoConsideration_B4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRefinanceColumn {
                get {
                    return this.columnIsRefinance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiftedEquityColumn {
                get {
                    return this.columnGiftedEquity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantorsSignatureColumn {
                get {
                    return this.columnGrantorsSignature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteesSignatureColumn {
                get {
                    return this.columnGranteesSignature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FacilitatorNameColumn {
                get {
                    return this.columnFacilitatorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteeNameColumn {
                get {
                    return this.columnGranteeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TreasurerStatusIDColumn {
                get {
                    return this.columnTreasurerStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessorStatusIDColumn {
                get {
                    return this.columnAssessorStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TreasurerColumn {
                get {
                    return this.columnTreasurer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessorColumn {
                get {
                    return this.columnAssessor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRow this[int index] {
                get {
                    return ((SupplimentRow)(this.Rows[index]));
                }
            }
            
            public event SupplimentRowChangeEventHandler SupplimentRowChanging;
            
            public event SupplimentRowChangeEventHandler SupplimentRowChanged;
            
            public event SupplimentRowChangeEventHandler SupplimentRowDeleting;
            
            public event SupplimentRowChangeEventHandler SupplimentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSupplimentRow(SupplimentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRow AddSupplimentRow(
                        string AgentName, 
                        string InstrumentType, 
                        string InstrumentDate, 
                        string Firmname, 
                        string ReasonHeld, 
                        bool GiftConsideration_A1, 
                        decimal TotalDebt_A1, 
                        decimal GranteePaysGrantor_A1, 
                        bool GiftConsideration_A2, 
                        decimal TotalDebt_A2, 
                        decimal GranteePaysGrantor_A2, 
                        float DebtRate_A2, 
                        bool GiftNoConsideration_B1, 
                        bool GiftNoConsideration_B2, 
                        decimal TotalDebt_B2, 
                        bool GiftNoConsideration_B3, 
                        decimal TotalDebt_B3, 
                        bool GiftNoConsideration_B4, 
                        bool IsRefinance, 
                        decimal GiftedEquity, 
                        string GrantorsSignature, 
                        string GranteesSignature, 
                        string FacilitatorName, 
                        string GranteeName, 
                        byte TreasurerStatusID, 
                        byte AssessorStatusID, 
                        string Treasurer, 
                        string Assessor) {
                SupplimentRow rowSupplimentRow = ((SupplimentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AgentName,
                        InstrumentType,
                        InstrumentDate,
                        Firmname,
                        ReasonHeld,
                        GiftConsideration_A1,
                        TotalDebt_A1,
                        GranteePaysGrantor_A1,
                        GiftConsideration_A2,
                        TotalDebt_A2,
                        GranteePaysGrantor_A2,
                        DebtRate_A2,
                        GiftNoConsideration_B1,
                        GiftNoConsideration_B2,
                        TotalDebt_B2,
                        GiftNoConsideration_B3,
                        TotalDebt_B3,
                        GiftNoConsideration_B4,
                        IsRefinance,
                        GiftedEquity,
                        GrantorsSignature,
                        GranteesSignature,
                        FacilitatorName,
                        GranteeName,
                        TreasurerStatusID,
                        AssessorStatusID,
                        Treasurer,
                        Assessor};
                rowSupplimentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSupplimentRow);
                return rowSupplimentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SupplimentDataTable cln = ((SupplimentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SupplimentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAgentName = base.Columns["AgentName"];
                this.columnInstrumentType = base.Columns["InstrumentType"];
                this.columnInstrumentDate = base.Columns["InstrumentDate"];
                this.columnFirmname = base.Columns["Firmname"];
                this.columnReasonHeld = base.Columns["ReasonHeld"];
                this.columnGiftConsideration_A1 = base.Columns["GiftConsideration_A1"];
                this.columnTotalDebt_A1 = base.Columns["TotalDebt_A1"];
                this.columnGranteePaysGrantor_A1 = base.Columns["GranteePaysGrantor_A1"];
                this.columnGiftConsideration_A2 = base.Columns["GiftConsideration_A2"];
                this.columnTotalDebt_A2 = base.Columns["TotalDebt_A2"];
                this.columnGranteePaysGrantor_A2 = base.Columns["GranteePaysGrantor_A2"];
                this.columnDebtRate_A2 = base.Columns["DebtRate_A2"];
                this.columnGiftNoConsideration_B1 = base.Columns["GiftNoConsideration_B1"];
                this.columnGiftNoConsideration_B2 = base.Columns["GiftNoConsideration_B2"];
                this.columnTotalDebt_B2 = base.Columns["TotalDebt_B2"];
                this.columnGiftNoConsideration_B3 = base.Columns["GiftNoConsideration_B3"];
                this.columnTotalDebt_B3 = base.Columns["TotalDebt_B3"];
                this.columnGiftNoConsideration_B4 = base.Columns["GiftNoConsideration_B4"];
                this.columnIsRefinance = base.Columns["IsRefinance"];
                this.columnGiftedEquity = base.Columns["GiftedEquity"];
                this.columnGrantorsSignature = base.Columns["GrantorsSignature"];
                this.columnGranteesSignature = base.Columns["GranteesSignature"];
                this.columnFacilitatorName = base.Columns["FacilitatorName"];
                this.columnGranteeName = base.Columns["GranteeName"];
                this.columnTreasurerStatusID = base.Columns["TreasurerStatusID"];
                this.columnAssessorStatusID = base.Columns["AssessorStatusID"];
                this.columnTreasurer = base.Columns["Treasurer"];
                this.columnAssessor = base.Columns["Assessor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAgentName = new global::System.Data.DataColumn("AgentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentName);
                this.columnInstrumentType = new global::System.Data.DataColumn("InstrumentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrumentType);
                this.columnInstrumentDate = new global::System.Data.DataColumn("InstrumentDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstrumentDate);
                this.columnFirmname = new global::System.Data.DataColumn("Firmname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirmname);
                this.columnReasonHeld = new global::System.Data.DataColumn("ReasonHeld", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasonHeld);
                this.columnGiftConsideration_A1 = new global::System.Data.DataColumn("GiftConsideration_A1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftConsideration_A1);
                this.columnTotalDebt_A1 = new global::System.Data.DataColumn("TotalDebt_A1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt_A1);
                this.columnGranteePaysGrantor_A1 = new global::System.Data.DataColumn("GranteePaysGrantor_A1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranteePaysGrantor_A1);
                this.columnGiftConsideration_A2 = new global::System.Data.DataColumn("GiftConsideration_A2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftConsideration_A2);
                this.columnTotalDebt_A2 = new global::System.Data.DataColumn("TotalDebt_A2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt_A2);
                this.columnGranteePaysGrantor_A2 = new global::System.Data.DataColumn("GranteePaysGrantor_A2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranteePaysGrantor_A2);
                this.columnDebtRate_A2 = new global::System.Data.DataColumn("DebtRate_A2", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebtRate_A2);
                this.columnGiftNoConsideration_B1 = new global::System.Data.DataColumn("GiftNoConsideration_B1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftNoConsideration_B1);
                this.columnGiftNoConsideration_B2 = new global::System.Data.DataColumn("GiftNoConsideration_B2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftNoConsideration_B2);
                this.columnTotalDebt_B2 = new global::System.Data.DataColumn("TotalDebt_B2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt_B2);
                this.columnGiftNoConsideration_B3 = new global::System.Data.DataColumn("GiftNoConsideration_B3", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftNoConsideration_B3);
                this.columnTotalDebt_B3 = new global::System.Data.DataColumn("TotalDebt_B3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDebt_B3);
                this.columnGiftNoConsideration_B4 = new global::System.Data.DataColumn("GiftNoConsideration_B4", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftNoConsideration_B4);
                this.columnIsRefinance = new global::System.Data.DataColumn("IsRefinance", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRefinance);
                this.columnGiftedEquity = new global::System.Data.DataColumn("GiftedEquity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiftedEquity);
                this.columnGrantorsSignature = new global::System.Data.DataColumn("GrantorsSignature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantorsSignature);
                this.columnGranteesSignature = new global::System.Data.DataColumn("GranteesSignature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranteesSignature);
                this.columnFacilitatorName = new global::System.Data.DataColumn("FacilitatorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFacilitatorName);
                this.columnGranteeName = new global::System.Data.DataColumn("GranteeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGranteeName);
                this.columnTreasurerStatusID = new global::System.Data.DataColumn("TreasurerStatusID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreasurerStatusID);
                this.columnAssessorStatusID = new global::System.Data.DataColumn("AssessorStatusID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessorStatusID);
                this.columnTreasurer = new global::System.Data.DataColumn("Treasurer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreasurer);
                this.columnAssessor = new global::System.Data.DataColumn("Assessor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessor);
                this.columnAgentName.MaxLength = 150;
                this.columnInstrumentType.MaxLength = 150;
                this.columnInstrumentDate.MaxLength = 10;
                this.columnFirmname.MaxLength = 150;
                this.columnReasonHeld.MaxLength = 1000;
                this.columnGrantorsSignature.MaxLength = 150;
                this.columnGranteesSignature.MaxLength = 150;
                this.columnFacilitatorName.MaxLength = 150;
                this.columnGranteeName.MaxLength = 150;
                this.columnTreasurer.AllowDBNull = false;
                this.columnTreasurer.MaxLength = 50;
                this.columnAssessor.AllowDBNull = false;
                this.columnAssessor.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRow NewSupplimentRow() {
                return ((SupplimentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SupplimentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SupplimentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SupplimentRowChanged != null)) {
                    this.SupplimentRowChanged(this, new SupplimentRowChangeEvent(((SupplimentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SupplimentRowChanging != null)) {
                    this.SupplimentRowChanging(this, new SupplimentRowChangeEvent(((SupplimentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SupplimentRowDeleted != null)) {
                    this.SupplimentRowDeleted(this, new SupplimentRowChangeEvent(((SupplimentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SupplimentRowDeleting != null)) {
                    this.SupplimentRowDeleting(this, new SupplimentRowChangeEvent(((SupplimentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSupplimentRow(SupplimentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxAffidavitData ds = new ExciseTaxAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SupplimentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAffidavitStatementIdDataTable : global::System.Data.TypedTableBase<ListAffidavitStatementIdRow> {
            
            private global::System.Data.DataColumn columnKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdDataTable() {
                this.TableName = "ListAffidavitStatementId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAffidavitStatementIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAffidavitStatementIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRow this[int index] {
                get {
                    return ((ListAffidavitStatementIdRow)(this.Rows[index]));
                }
            }
            
            public event ListAffidavitStatementIdRowChangeEventHandler ListAffidavitStatementIdRowChanging;
            
            public event ListAffidavitStatementIdRowChangeEventHandler ListAffidavitStatementIdRowChanged;
            
            public event ListAffidavitStatementIdRowChangeEventHandler ListAffidavitStatementIdRowDeleting;
            
            public event ListAffidavitStatementIdRowChangeEventHandler ListAffidavitStatementIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAffidavitStatementIdRow(ListAffidavitStatementIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRow AddListAffidavitStatementIdRow(int KeyID) {
                ListAffidavitStatementIdRow rowListAffidavitStatementIdRow = ((ListAffidavitStatementIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyID};
                rowListAffidavitStatementIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAffidavitStatementIdRow);
                return rowListAffidavitStatementIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAffidavitStatementIdDataTable cln = ((ListAffidavitStatementIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAffidavitStatementIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyID = base.Columns["KeyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRow NewListAffidavitStatementIdRow() {
                return ((ListAffidavitStatementIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAffidavitStatementIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAffidavitStatementIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAffidavitStatementIdRowChanged != null)) {
                    this.ListAffidavitStatementIdRowChanged(this, new ListAffidavitStatementIdRowChangeEvent(((ListAffidavitStatementIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAffidavitStatementIdRowChanging != null)) {
                    this.ListAffidavitStatementIdRowChanging(this, new ListAffidavitStatementIdRowChangeEvent(((ListAffidavitStatementIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAffidavitStatementIdRowDeleted != null)) {
                    this.ListAffidavitStatementIdRowDeleted(this, new ListAffidavitStatementIdRowChangeEvent(((ListAffidavitStatementIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAffidavitStatementIdRowDeleting != null)) {
                    this.ListAffidavitStatementIdRowDeleting(this, new ListAffidavitStatementIdRowChangeEvent(((ListAffidavitStatementIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAffidavitStatementIdRow(ListAffidavitStatementIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExciseTaxAffidavitData ds = new ExciseTaxAffidavitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAffidavitStatementIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GeneralRow : global::System.Data.DataRow {
            
            private GeneralDataTable tableGeneral;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GeneralRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGeneral = ((GeneralDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableGeneral.StatementIDColumn]));
                }
                set {
                    this[this.tableGeneral.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentDate {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.PaymentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentDate\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.PaymentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormDate {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.FormDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormDate\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.FormDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string District {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.DistrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'District\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.DistrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExciseRateID {
                get {
                    return ((int)(this[this.tableGeneral.ExciseRateIDColumn]));
                }
                set {
                    this[this.tableGeneral.ExciseRateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubmittedDate {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.SubmittedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubmittedDate\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.SubmittedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PreDatesStmt {
                get {
                    try {
                        return ((bool)(this[this.tableGeneral.PreDatesStmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreDatesStmt\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.PreDatesStmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt {
                get {
                    return ((decimal)(this[this.tableGeneral.TotalDebtColumn]));
                }
                set {
                    this[this.tableGeneral.TotalDebtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationCode {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.LocationCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationCode\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.LocationCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExempt {
                get {
                    return ((bool)(this[this.tableGeneral.IsExemptColumn]));
                }
                set {
                    this[this.tableGeneral.IsExemptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileHome {
                get {
                    return ((bool)(this[this.tableGeneral.IsMobileHomeColumn]));
                }
                set {
                    this[this.tableGeneral.IsMobileHomeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptNumber {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.ReceiptNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptNumber\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.ReceiptNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DORNote {
                get {
                    try {
                        return ((string)(this[this.tableGeneral.DORNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DORNote\' in table \'General\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneral.DORNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentDateNull() {
                return this.IsNull(this.tableGeneral.PaymentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentDateNull() {
                this[this.tableGeneral.PaymentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormDateNull() {
                return this.IsNull(this.tableGeneral.FormDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormDateNull() {
                this[this.tableGeneral.FormDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistrictNull() {
                return this.IsNull(this.tableGeneral.DistrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistrictNull() {
                this[this.tableGeneral.DistrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubmittedDateNull() {
                return this.IsNull(this.tableGeneral.SubmittedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubmittedDateNull() {
                this[this.tableGeneral.SubmittedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreDatesStmtNull() {
                return this.IsNull(this.tableGeneral.PreDatesStmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreDatesStmtNull() {
                this[this.tableGeneral.PreDatesStmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationCodeNull() {
                return this.IsNull(this.tableGeneral.LocationCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationCodeNull() {
                this[this.tableGeneral.LocationCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptNumberNull() {
                return this.IsNull(this.tableGeneral.ReceiptNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptNumberNull() {
                this[this.tableGeneral.ReceiptNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDORNoteNull() {
                return this.IsNull(this.tableGeneral.DORNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDORNoteNull() {
                this[this.tableGeneral.DORNoteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PartiesHeaderRow : global::System.Data.DataRow {
            
            private PartiesHeaderDataTable tablePartiesHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PartiesHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePartiesHeader = ((PartiesHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tablePartiesHeader.NameColumn]));
                }
                set {
                    this[this.tablePartiesHeader.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IndividualType {
                get {
                    return ((string)(this[this.tablePartiesHeader.IndividualTypeColumn]));
                }
                set {
                    this[this.tablePartiesHeader.IndividualTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PercentOwner {
                get {
                    try {
                        return ((float)(this[this.tablePartiesHeader.PercentOwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentOwner\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.PercentOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tablePartiesHeader.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IndividualID {
                get {
                    return ((int)(this[this.tablePartiesHeader.IndividualIDColumn]));
                }
                set {
                    this[this.tablePartiesHeader.IndividualIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tablePartiesHeader.StatementIDColumn]));
                }
                set {
                    this[this.tablePartiesHeader.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tablePartiesHeader.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'PartiesHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePartiesHeader.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte IndividualTypeID {
                get {
                    return ((byte)(this[this.tablePartiesHeader.IndividualTypeIDColumn]));
                }
                set {
                    this[this.tablePartiesHeader.IndividualTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tablePartiesHeader.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tablePartiesHeader.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tablePartiesHeader.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tablePartiesHeader.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tablePartiesHeader.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tablePartiesHeader.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentOwnerNull() {
                return this.IsNull(this.tablePartiesHeader.PercentOwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentOwnerNull() {
                this[this.tablePartiesHeader.PercentOwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tablePartiesHeader.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tablePartiesHeader.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tablePartiesHeader.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tablePartiesHeader.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tablePartiesHeader.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tablePartiesHeader.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tablePartiesHeader.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tablePartiesHeader.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tablePartiesHeader.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tablePartiesHeader.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tablePartiesHeader.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tablePartiesHeader.OwnerIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParcelHeaderRow : global::System.Data.DataRow {
            
            private ParcelHeaderDataTable tableParcelHeader;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelHeaderRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParcelHeader = ((ParcelHeaderDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tableParcelHeader.NumberColumn]));
                }
                set {
                    this[this.tableParcelHeader.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalProperty {
                get {
                    try {
                        return ((bool)(this[this.tableParcelHeader.IsPersonalPropertyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPersonalProperty\' in table \'ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.IsPersonalPropertyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AssessedValue {
                get {
                    return ((decimal)(this[this.tableParcelHeader.AssessedValueColumn]));
                }
                set {
                    this[this.tableParcelHeader.AssessedValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Legal {
                get {
                    try {
                        return ((string)(this[this.tableParcelHeader.LegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Legal\' in table \'ParcelHeader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.LegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SoldParcelID {
                get {
                    return ((int)(this[this.tableParcelHeader.SoldParcelIDColumn]));
                }
                set {
                    this[this.tableParcelHeader.SoldParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StatementID {
                get {
                    return ((int)(this[this.tableParcelHeader.StatementIDColumn]));
                }
                set {
                    this[this.tableParcelHeader.StatementIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPersonalPropertyValue {
                get {
                    try {
                        return ((string)(this[this.tableParcelHeader.IsPersonalPropertyValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPersonalPropertyValue\' in table \'ParcelHeader\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableParcelHeader.IsPersonalPropertyValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPersonalPropertyNull() {
                return this.IsNull(this.tableParcelHeader.IsPersonalPropertyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPersonalPropertyNull() {
                this[this.tableParcelHeader.IsPersonalPropertyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalNull() {
                return this.IsNull(this.tableParcelHeader.LegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalNull() {
                this[this.tableParcelHeader.LegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPersonalPropertyValueNull() {
                return this.IsNull(this.tableParcelHeader.IsPersonalPropertyValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPersonalPropertyValueNull() {
                this[this.tableParcelHeader.IsPersonalPropertyValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AffidavitRow : global::System.Data.DataRow {
            
            private AffidavitDataTable tableAffidavit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AffidavitRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAffidavit = ((AffidavitDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartialSale {
                get {
                    return ((bool)(this[this.tableAffidavit.IsPartialSaleColumn]));
                }
                set {
                    this[this.tableAffidavit.IsPartialSaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSegregated {
                get {
                    return ((bool)(this[this.tableAffidavit.IsSegregatedColumn]));
                }
                set {
                    this[this.tableAffidavit.IsSegregatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StreetAddress {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.StreetAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StreetAddress\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.StreetAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocationSale {
                get {
                    try {
                        return ((int)(this[this.tableAffidavit.LocationSaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationSale\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.LocationSaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationName {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.LocationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationName\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.LocationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseCode {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.UseCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseCode\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.UseCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptRegNum {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.ExemptRegNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptRegNum\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.ExemptRegNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForestLand {
                get {
                    return ((bool)(this[this.tableAffidavit.IsForestLandColumn]));
                }
                set {
                    this[this.tableAffidavit.IsForestLandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpenSpace {
                get {
                    return ((bool)(this[this.tableAffidavit.IsOpenSpaceColumn]));
                }
                set {
                    this[this.tableAffidavit.IsOpenSpaceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHistoric {
                get {
                    return ((bool)(this[this.tableAffidavit.IsHistoricColumn]));
                }
                set {
                    this[this.tableAffidavit.IsHistoricColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasContinuance {
                get {
                    return ((bool)(this[this.tableAffidavit.HasContinuanceColumn]));
                }
                set {
                    this[this.tableAffidavit.HasContinuanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonalPropDesc {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.PersonalPropDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalPropDesc\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.PersonalPropDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionCode {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.ExemptionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionCode\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.ExemptionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExemptionDesc {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.ExemptionDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExemptionDesc\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.ExemptionDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentType {
                get {
                    return ((string)(this[this.tableAffidavit.DocumentTypeColumn]));
                }
                set {
                    this[this.tableAffidavit.DocumentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentDate {
                get {
                    try {
                        return ((string)(this[this.tableAffidavit.DocumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentDate\' in table \'Affidavit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAffidavit.DocumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetAddressNull() {
                return this.IsNull(this.tableAffidavit.StreetAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetAddressNull() {
                this[this.tableAffidavit.StreetAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationSaleNull() {
                return this.IsNull(this.tableAffidavit.LocationSaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationSaleNull() {
                this[this.tableAffidavit.LocationSaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNameNull() {
                return this.IsNull(this.tableAffidavit.LocationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNameNull() {
                this[this.tableAffidavit.LocationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseCodeNull() {
                return this.IsNull(this.tableAffidavit.UseCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseCodeNull() {
                this[this.tableAffidavit.UseCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptRegNumNull() {
                return this.IsNull(this.tableAffidavit.ExemptRegNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptRegNumNull() {
                this[this.tableAffidavit.ExemptRegNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalPropDescNull() {
                return this.IsNull(this.tableAffidavit.PersonalPropDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalPropDescNull() {
                this[this.tableAffidavit.PersonalPropDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionCodeNull() {
                return this.IsNull(this.tableAffidavit.ExemptionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionCodeNull() {
                this[this.tableAffidavit.ExemptionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionDescNull() {
                return this.IsNull(this.tableAffidavit.ExemptionDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionDescNull() {
                this[this.tableAffidavit.ExemptionDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentDateNull() {
                return this.IsNull(this.tableAffidavit.DocumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentDateNull() {
                this[this.tableAffidavit.DocumentDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AmountDueRow : global::System.Data.DataRow {
            
            private AmountDueDataTable tableAmountDue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AmountDueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAmountDue = ((AmountDueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrossSalePrice {
                get {
                    return ((decimal)(this[this.tableAmountDue.GrossSalePriceColumn]));
                }
                set {
                    this[this.tableAmountDue.GrossSalePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PersonalPropAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.PersonalPropAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalPropAmt\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.PersonalPropAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RealPropExemptAmt {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.RealPropExemptAmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealPropExemptAmt\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.RealPropExemptAmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxableSalePrice {
                get {
                    return ((decimal)(this[this.tableAmountDue.TaxableSalePriceColumn]));
                }
                set {
                    this[this.tableAmountDue.TaxableSalePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExciseTaxState {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.ExciseTaxStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseTaxState\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.ExciseTaxStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExciseTaxLocal {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.ExciseTaxLocalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExciseTaxLocal\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.ExciseTaxLocalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentInterestState {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.DelinquentInterestStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentInterestState\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.DelinquentInterestStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentInterestLocal {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.DelinquentInterestLocalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentInterestLocal\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.DelinquentInterestLocalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DelinquentPenalty {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.DelinquentPenaltyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DelinquentPenalty\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.DelinquentPenaltyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TechnologyFee {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.TechnologyFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TechnologyFee\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.TechnologyFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TransactionFee {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.TransactionFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionFee\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.TransactionFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SubTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.SubTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubTotal\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.SubTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Fees {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.FeesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fees\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.FeesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmountDue {
                get {
                    try {
                        return ((decimal)(this[this.tableAmountDue.TotalAmountDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmountDue\' in table \'AmountDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAmountDue.TotalAmountDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalPropAmtNull() {
                return this.IsNull(this.tableAmountDue.PersonalPropAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalPropAmtNull() {
                this[this.tableAmountDue.PersonalPropAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealPropExemptAmtNull() {
                return this.IsNull(this.tableAmountDue.RealPropExemptAmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealPropExemptAmtNull() {
                this[this.tableAmountDue.RealPropExemptAmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseTaxStateNull() {
                return this.IsNull(this.tableAmountDue.ExciseTaxStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseTaxStateNull() {
                this[this.tableAmountDue.ExciseTaxStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExciseTaxLocalNull() {
                return this.IsNull(this.tableAmountDue.ExciseTaxLocalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExciseTaxLocalNull() {
                this[this.tableAmountDue.ExciseTaxLocalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentInterestStateNull() {
                return this.IsNull(this.tableAmountDue.DelinquentInterestStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentInterestStateNull() {
                this[this.tableAmountDue.DelinquentInterestStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentInterestLocalNull() {
                return this.IsNull(this.tableAmountDue.DelinquentInterestLocalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentInterestLocalNull() {
                this[this.tableAmountDue.DelinquentInterestLocalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelinquentPenaltyNull() {
                return this.IsNull(this.tableAmountDue.DelinquentPenaltyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelinquentPenaltyNull() {
                this[this.tableAmountDue.DelinquentPenaltyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTechnologyFeeNull() {
                return this.IsNull(this.tableAmountDue.TechnologyFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTechnologyFeeNull() {
                this[this.tableAmountDue.TechnologyFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionFeeNull() {
                return this.IsNull(this.tableAmountDue.TransactionFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionFeeNull() {
                this[this.tableAmountDue.TransactionFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubTotalNull() {
                return this.IsNull(this.tableAmountDue.SubTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubTotalNull() {
                this[this.tableAmountDue.SubTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeesNull() {
                return this.IsNull(this.tableAmountDue.FeesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeesNull() {
                this[this.tableAmountDue.FeesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountDueNull() {
                return this.IsNull(this.tableAmountDue.TotalAmountDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountDueNull() {
                this[this.tableAmountDue.TotalAmountDueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SupplimentRow : global::System.Data.DataRow {
            
            private SupplimentDataTable tableSuppliment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SupplimentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSuppliment = ((SupplimentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentName {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.AgentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentName\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.AgentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstrumentType {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.InstrumentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstrumentType\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.InstrumentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstrumentDate {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.InstrumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstrumentDate\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.InstrumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Firmname {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.FirmnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Firmname\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.FirmnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReasonHeld {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.ReasonHeldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReasonHeld\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.ReasonHeldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftConsideration_A1 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftConsideration_A1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftConsideration_A1\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftConsideration_A1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt_A1 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.TotalDebt_A1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt_A1\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TotalDebt_A1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GranteePaysGrantor_A1 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.GranteePaysGrantor_A1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GranteePaysGrantor_A1\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GranteePaysGrantor_A1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftConsideration_A2 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftConsideration_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftConsideration_A2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftConsideration_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt_A2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.TotalDebt_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt_A2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TotalDebt_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GranteePaysGrantor_A2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.GranteePaysGrantor_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GranteePaysGrantor_A2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GranteePaysGrantor_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DebtRate_A2 {
                get {
                    try {
                        return ((float)(this[this.tableSuppliment.DebtRate_A2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DebtRate_A2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.DebtRate_A2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftNoConsideration_B1 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftNoConsideration_B1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftNoConsideration_B1\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftNoConsideration_B1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftNoConsideration_B2 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftNoConsideration_B2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftNoConsideration_B2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftNoConsideration_B2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt_B2 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.TotalDebt_B2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt_B2\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TotalDebt_B2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftNoConsideration_B3 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftNoConsideration_B3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftNoConsideration_B3\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftNoConsideration_B3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalDebt_B3 {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.TotalDebt_B3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDebt_B3\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TotalDebt_B3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GiftNoConsideration_B4 {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.GiftNoConsideration_B4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftNoConsideration_B4\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftNoConsideration_B4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefinance {
                get {
                    try {
                        return ((bool)(this[this.tableSuppliment.IsRefinanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRefinance\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.IsRefinanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GiftedEquity {
                get {
                    try {
                        return ((decimal)(this[this.tableSuppliment.GiftedEquityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiftedEquity\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GiftedEquityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrantorsSignature {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.GrantorsSignatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrantorsSignature\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GrantorsSignatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GranteesSignature {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.GranteesSignatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GranteesSignature\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GranteesSignatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FacilitatorName {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.FacilitatorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FacilitatorName\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.FacilitatorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GranteeName {
                get {
                    try {
                        return ((string)(this[this.tableSuppliment.GranteeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GranteeName\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.GranteeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TreasurerStatusID {
                get {
                    try {
                        return ((byte)(this[this.tableSuppliment.TreasurerStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TreasurerStatusID\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.TreasurerStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AssessorStatusID {
                get {
                    try {
                        return ((byte)(this[this.tableSuppliment.AssessorStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessorStatusID\' in table \'Suppliment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuppliment.AssessorStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Treasurer {
                get {
                    return ((string)(this[this.tableSuppliment.TreasurerColumn]));
                }
                set {
                    this[this.tableSuppliment.TreasurerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Assessor {
                get {
                    return ((string)(this[this.tableSuppliment.AssessorColumn]));
                }
                set {
                    this[this.tableSuppliment.AssessorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentNameNull() {
                return this.IsNull(this.tableSuppliment.AgentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentNameNull() {
                this[this.tableSuppliment.AgentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstrumentTypeNull() {
                return this.IsNull(this.tableSuppliment.InstrumentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstrumentTypeNull() {
                this[this.tableSuppliment.InstrumentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstrumentDateNull() {
                return this.IsNull(this.tableSuppliment.InstrumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstrumentDateNull() {
                this[this.tableSuppliment.InstrumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirmnameNull() {
                return this.IsNull(this.tableSuppliment.FirmnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirmnameNull() {
                this[this.tableSuppliment.FirmnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonHeldNull() {
                return this.IsNull(this.tableSuppliment.ReasonHeldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonHeldNull() {
                this[this.tableSuppliment.ReasonHeldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftConsideration_A1Null() {
                return this.IsNull(this.tableSuppliment.GiftConsideration_A1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftConsideration_A1Null() {
                this[this.tableSuppliment.GiftConsideration_A1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebt_A1Null() {
                return this.IsNull(this.tableSuppliment.TotalDebt_A1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebt_A1Null() {
                this[this.tableSuppliment.TotalDebt_A1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteePaysGrantor_A1Null() {
                return this.IsNull(this.tableSuppliment.GranteePaysGrantor_A1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteePaysGrantor_A1Null() {
                this[this.tableSuppliment.GranteePaysGrantor_A1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftConsideration_A2Null() {
                return this.IsNull(this.tableSuppliment.GiftConsideration_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftConsideration_A2Null() {
                this[this.tableSuppliment.GiftConsideration_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebt_A2Null() {
                return this.IsNull(this.tableSuppliment.TotalDebt_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebt_A2Null() {
                this[this.tableSuppliment.TotalDebt_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteePaysGrantor_A2Null() {
                return this.IsNull(this.tableSuppliment.GranteePaysGrantor_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteePaysGrantor_A2Null() {
                this[this.tableSuppliment.GranteePaysGrantor_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebtRate_A2Null() {
                return this.IsNull(this.tableSuppliment.DebtRate_A2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebtRate_A2Null() {
                this[this.tableSuppliment.DebtRate_A2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftNoConsideration_B1Null() {
                return this.IsNull(this.tableSuppliment.GiftNoConsideration_B1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftNoConsideration_B1Null() {
                this[this.tableSuppliment.GiftNoConsideration_B1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftNoConsideration_B2Null() {
                return this.IsNull(this.tableSuppliment.GiftNoConsideration_B2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftNoConsideration_B2Null() {
                this[this.tableSuppliment.GiftNoConsideration_B2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebt_B2Null() {
                return this.IsNull(this.tableSuppliment.TotalDebt_B2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebt_B2Null() {
                this[this.tableSuppliment.TotalDebt_B2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftNoConsideration_B3Null() {
                return this.IsNull(this.tableSuppliment.GiftNoConsideration_B3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftNoConsideration_B3Null() {
                this[this.tableSuppliment.GiftNoConsideration_B3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDebt_B3Null() {
                return this.IsNull(this.tableSuppliment.TotalDebt_B3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDebt_B3Null() {
                this[this.tableSuppliment.TotalDebt_B3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftNoConsideration_B4Null() {
                return this.IsNull(this.tableSuppliment.GiftNoConsideration_B4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftNoConsideration_B4Null() {
                this[this.tableSuppliment.GiftNoConsideration_B4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRefinanceNull() {
                return this.IsNull(this.tableSuppliment.IsRefinanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRefinanceNull() {
                this[this.tableSuppliment.IsRefinanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiftedEquityNull() {
                return this.IsNull(this.tableSuppliment.GiftedEquityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiftedEquityNull() {
                this[this.tableSuppliment.GiftedEquityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantorsSignatureNull() {
                return this.IsNull(this.tableSuppliment.GrantorsSignatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantorsSignatureNull() {
                this[this.tableSuppliment.GrantorsSignatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteesSignatureNull() {
                return this.IsNull(this.tableSuppliment.GranteesSignatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteesSignatureNull() {
                this[this.tableSuppliment.GranteesSignatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFacilitatorNameNull() {
                return this.IsNull(this.tableSuppliment.FacilitatorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFacilitatorNameNull() {
                this[this.tableSuppliment.FacilitatorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteeNameNull() {
                return this.IsNull(this.tableSuppliment.GranteeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteeNameNull() {
                this[this.tableSuppliment.GranteeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreasurerStatusIDNull() {
                return this.IsNull(this.tableSuppliment.TreasurerStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreasurerStatusIDNull() {
                this[this.tableSuppliment.TreasurerStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessorStatusIDNull() {
                return this.IsNull(this.tableSuppliment.AssessorStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessorStatusIDNull() {
                this[this.tableSuppliment.AssessorStatusIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAffidavitStatementIdRow : global::System.Data.DataRow {
            
            private ListAffidavitStatementIdDataTable tableListAffidavitStatementId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAffidavitStatementIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAffidavitStatementId = ((ListAffidavitStatementIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyID {
                get {
                    try {
                        return ((int)(this[this.tableListAffidavitStatementId.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'ListAffidavitStatementId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListAffidavitStatementId.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableListAffidavitStatementId.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableListAffidavitStatementId.KeyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GeneralRowChangeEvent : global::System.EventArgs {
            
            private GeneralRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRowChangeEvent(GeneralRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PartiesHeaderRowChangeEvent : global::System.EventArgs {
            
            private PartiesHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRowChangeEvent(PartiesHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PartiesHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParcelHeaderRowChangeEvent : global::System.EventArgs {
            
            private ParcelHeaderRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRowChangeEvent(ParcelHeaderRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AffidavitRowChangeEvent : global::System.EventArgs {
            
            private AffidavitRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRowChangeEvent(AffidavitRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AffidavitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AmountDueRowChangeEvent : global::System.EventArgs {
            
            private AmountDueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRowChangeEvent(AmountDueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AmountDueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SupplimentRowChangeEvent : global::System.EventArgs {
            
            private SupplimentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRowChangeEvent(SupplimentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplimentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAffidavitStatementIdRowChangeEvent : global::System.EventArgs {
            
            private ListAffidavitStatementIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRowChangeEvent(ListAffidavitStatementIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAffidavitStatementIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591