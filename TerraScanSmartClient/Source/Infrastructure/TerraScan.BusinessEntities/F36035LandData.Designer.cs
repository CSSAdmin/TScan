//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8670
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F36035LandData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F36035LandData : global::System.Data.DataSet {
        
        private ListLandType1DataTable tableListLandType1;
        
        private ListLandType2DataTable tableListLandType2;
        
        private ListLandType3DataTable tableListLandType3;
        
        private ListLandValueSliceDetailsDataTable tableListLandValueSliceDetails;
        
        private ListLandCodeDataTable tableListLandCode;
        
        private Get_LandCodeDataTable tableGet_LandCode;
        
        private Get_LandCodeBaseValueDataTable tableGet_LandCodeBaseValue;
        
        private GetValueSliceValidTableDataTable tableGetValueSliceValidTable;
        
        private ListLandValueSliceDetailsNewDataTable tableListLandValueSliceDetailsNew;
        
        private ListAdjustmentTypesDataTable tableListAdjustmentTypes;
        
        private ListShapesDataTable tableListShapes;
        
        private ListInfluenceTypeDataTable tableListInfluenceType;
        
        private ListLandProgramDataTable tableListLandProgram;
        
        private GetCfgLandTypeLabelDataTable tableGetCfgLandTypeLabel;
        
        private GetUseBaseDollarPerUnitDataTable tableGetUseBaseDollarPerUnit;
        
        private ListGridInfluencesDataTable tableListGridInfluences;
        
        private ListLandCodeLandTypeDataTable tableListLandCodeLandType;
        
        private LandShapesTableDataTable tableLandShapesTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F36035LandData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F36035LandData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListLandType1"] != null)) {
                    base.Tables.Add(new ListLandType1DataTable(ds.Tables["ListLandType1"]));
                }
                if ((ds.Tables["ListLandType2"] != null)) {
                    base.Tables.Add(new ListLandType2DataTable(ds.Tables["ListLandType2"]));
                }
                if ((ds.Tables["ListLandType3"] != null)) {
                    base.Tables.Add(new ListLandType3DataTable(ds.Tables["ListLandType3"]));
                }
                if ((ds.Tables["ListLandValueSliceDetails"] != null)) {
                    base.Tables.Add(new ListLandValueSliceDetailsDataTable(ds.Tables["ListLandValueSliceDetails"]));
                }
                if ((ds.Tables["ListLandCode"] != null)) {
                    base.Tables.Add(new ListLandCodeDataTable(ds.Tables["ListLandCode"]));
                }
                if ((ds.Tables["Get_LandCode"] != null)) {
                    base.Tables.Add(new Get_LandCodeDataTable(ds.Tables["Get_LandCode"]));
                }
                if ((ds.Tables["Get_LandCodeBaseValue"] != null)) {
                    base.Tables.Add(new Get_LandCodeBaseValueDataTable(ds.Tables["Get_LandCodeBaseValue"]));
                }
                if ((ds.Tables["GetValueSliceValidTable"] != null)) {
                    base.Tables.Add(new GetValueSliceValidTableDataTable(ds.Tables["GetValueSliceValidTable"]));
                }
                if ((ds.Tables["ListLandValueSliceDetailsNew"] != null)) {
                    base.Tables.Add(new ListLandValueSliceDetailsNewDataTable(ds.Tables["ListLandValueSliceDetailsNew"]));
                }
                if ((ds.Tables["ListAdjustmentTypes"] != null)) {
                    base.Tables.Add(new ListAdjustmentTypesDataTable(ds.Tables["ListAdjustmentTypes"]));
                }
                if ((ds.Tables["ListShapes"] != null)) {
                    base.Tables.Add(new ListShapesDataTable(ds.Tables["ListShapes"]));
                }
                if ((ds.Tables["ListInfluenceType"] != null)) {
                    base.Tables.Add(new ListInfluenceTypeDataTable(ds.Tables["ListInfluenceType"]));
                }
                if ((ds.Tables["ListLandProgram"] != null)) {
                    base.Tables.Add(new ListLandProgramDataTable(ds.Tables["ListLandProgram"]));
                }
                if ((ds.Tables["GetCfgLandTypeLabel"] != null)) {
                    base.Tables.Add(new GetCfgLandTypeLabelDataTable(ds.Tables["GetCfgLandTypeLabel"]));
                }
                if ((ds.Tables["GetUseBaseDollarPerUnit"] != null)) {
                    base.Tables.Add(new GetUseBaseDollarPerUnitDataTable(ds.Tables["GetUseBaseDollarPerUnit"]));
                }
                if ((ds.Tables["ListGridInfluences"] != null)) {
                    base.Tables.Add(new ListGridInfluencesDataTable(ds.Tables["ListGridInfluences"]));
                }
                if ((ds.Tables["ListLandCodeLandType"] != null)) {
                    base.Tables.Add(new ListLandCodeLandTypeDataTable(ds.Tables["ListLandCodeLandType"]));
                }
                if ((ds.Tables["LandShapesTable"] != null)) {
                    base.Tables.Add(new LandShapesTableDataTable(ds.Tables["LandShapesTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandType1DataTable ListLandType1 {
            get {
                return this.tableListLandType1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandType2DataTable ListLandType2 {
            get {
                return this.tableListLandType2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandType3DataTable ListLandType3 {
            get {
                return this.tableListLandType3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandValueSliceDetailsDataTable ListLandValueSliceDetails {
            get {
                return this.tableListLandValueSliceDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandCodeDataTable ListLandCode {
            get {
                return this.tableListLandCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Get_LandCodeDataTable Get_LandCode {
            get {
                return this.tableGet_LandCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Get_LandCodeBaseValueDataTable Get_LandCodeBaseValue {
            get {
                return this.tableGet_LandCodeBaseValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetValueSliceValidTableDataTable GetValueSliceValidTable {
            get {
                return this.tableGetValueSliceValidTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandValueSliceDetailsNewDataTable ListLandValueSliceDetailsNew {
            get {
                return this.tableListLandValueSliceDetailsNew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListAdjustmentTypesDataTable ListAdjustmentTypes {
            get {
                return this.tableListAdjustmentTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListShapesDataTable ListShapes {
            get {
                return this.tableListShapes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListInfluenceTypeDataTable ListInfluenceType {
            get {
                return this.tableListInfluenceType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandProgramDataTable ListLandProgram {
            get {
                return this.tableListLandProgram;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetCfgLandTypeLabelDataTable GetCfgLandTypeLabel {
            get {
                return this.tableGetCfgLandTypeLabel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetUseBaseDollarPerUnitDataTable GetUseBaseDollarPerUnit {
            get {
                return this.tableGetUseBaseDollarPerUnit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListGridInfluencesDataTable ListGridInfluences {
            get {
                return this.tableListGridInfluences;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandCodeLandTypeDataTable ListLandCodeLandType {
            get {
                return this.tableListLandCodeLandType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LandShapesTableDataTable LandShapesTable {
            get {
                return this.tableLandShapesTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F36035LandData cln = ((F36035LandData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListLandType1"] != null)) {
                    base.Tables.Add(new ListLandType1DataTable(ds.Tables["ListLandType1"]));
                }
                if ((ds.Tables["ListLandType2"] != null)) {
                    base.Tables.Add(new ListLandType2DataTable(ds.Tables["ListLandType2"]));
                }
                if ((ds.Tables["ListLandType3"] != null)) {
                    base.Tables.Add(new ListLandType3DataTable(ds.Tables["ListLandType3"]));
                }
                if ((ds.Tables["ListLandValueSliceDetails"] != null)) {
                    base.Tables.Add(new ListLandValueSliceDetailsDataTable(ds.Tables["ListLandValueSliceDetails"]));
                }
                if ((ds.Tables["ListLandCode"] != null)) {
                    base.Tables.Add(new ListLandCodeDataTable(ds.Tables["ListLandCode"]));
                }
                if ((ds.Tables["Get_LandCode"] != null)) {
                    base.Tables.Add(new Get_LandCodeDataTable(ds.Tables["Get_LandCode"]));
                }
                if ((ds.Tables["Get_LandCodeBaseValue"] != null)) {
                    base.Tables.Add(new Get_LandCodeBaseValueDataTable(ds.Tables["Get_LandCodeBaseValue"]));
                }
                if ((ds.Tables["GetValueSliceValidTable"] != null)) {
                    base.Tables.Add(new GetValueSliceValidTableDataTable(ds.Tables["GetValueSliceValidTable"]));
                }
                if ((ds.Tables["ListLandValueSliceDetailsNew"] != null)) {
                    base.Tables.Add(new ListLandValueSliceDetailsNewDataTable(ds.Tables["ListLandValueSliceDetailsNew"]));
                }
                if ((ds.Tables["ListAdjustmentTypes"] != null)) {
                    base.Tables.Add(new ListAdjustmentTypesDataTable(ds.Tables["ListAdjustmentTypes"]));
                }
                if ((ds.Tables["ListShapes"] != null)) {
                    base.Tables.Add(new ListShapesDataTable(ds.Tables["ListShapes"]));
                }
                if ((ds.Tables["ListInfluenceType"] != null)) {
                    base.Tables.Add(new ListInfluenceTypeDataTable(ds.Tables["ListInfluenceType"]));
                }
                if ((ds.Tables["ListLandProgram"] != null)) {
                    base.Tables.Add(new ListLandProgramDataTable(ds.Tables["ListLandProgram"]));
                }
                if ((ds.Tables["GetCfgLandTypeLabel"] != null)) {
                    base.Tables.Add(new GetCfgLandTypeLabelDataTable(ds.Tables["GetCfgLandTypeLabel"]));
                }
                if ((ds.Tables["GetUseBaseDollarPerUnit"] != null)) {
                    base.Tables.Add(new GetUseBaseDollarPerUnitDataTable(ds.Tables["GetUseBaseDollarPerUnit"]));
                }
                if ((ds.Tables["ListGridInfluences"] != null)) {
                    base.Tables.Add(new ListGridInfluencesDataTable(ds.Tables["ListGridInfluences"]));
                }
                if ((ds.Tables["ListLandCodeLandType"] != null)) {
                    base.Tables.Add(new ListLandCodeLandTypeDataTable(ds.Tables["ListLandCodeLandType"]));
                }
                if ((ds.Tables["LandShapesTable"] != null)) {
                    base.Tables.Add(new LandShapesTableDataTable(ds.Tables["LandShapesTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListLandType1 = ((ListLandType1DataTable)(base.Tables["ListLandType1"]));
            if ((initTable == true)) {
                if ((this.tableListLandType1 != null)) {
                    this.tableListLandType1.InitVars();
                }
            }
            this.tableListLandType2 = ((ListLandType2DataTable)(base.Tables["ListLandType2"]));
            if ((initTable == true)) {
                if ((this.tableListLandType2 != null)) {
                    this.tableListLandType2.InitVars();
                }
            }
            this.tableListLandType3 = ((ListLandType3DataTable)(base.Tables["ListLandType3"]));
            if ((initTable == true)) {
                if ((this.tableListLandType3 != null)) {
                    this.tableListLandType3.InitVars();
                }
            }
            this.tableListLandValueSliceDetails = ((ListLandValueSliceDetailsDataTable)(base.Tables["ListLandValueSliceDetails"]));
            if ((initTable == true)) {
                if ((this.tableListLandValueSliceDetails != null)) {
                    this.tableListLandValueSliceDetails.InitVars();
                }
            }
            this.tableListLandCode = ((ListLandCodeDataTable)(base.Tables["ListLandCode"]));
            if ((initTable == true)) {
                if ((this.tableListLandCode != null)) {
                    this.tableListLandCode.InitVars();
                }
            }
            this.tableGet_LandCode = ((Get_LandCodeDataTable)(base.Tables["Get_LandCode"]));
            if ((initTable == true)) {
                if ((this.tableGet_LandCode != null)) {
                    this.tableGet_LandCode.InitVars();
                }
            }
            this.tableGet_LandCodeBaseValue = ((Get_LandCodeBaseValueDataTable)(base.Tables["Get_LandCodeBaseValue"]));
            if ((initTable == true)) {
                if ((this.tableGet_LandCodeBaseValue != null)) {
                    this.tableGet_LandCodeBaseValue.InitVars();
                }
            }
            this.tableGetValueSliceValidTable = ((GetValueSliceValidTableDataTable)(base.Tables["GetValueSliceValidTable"]));
            if ((initTable == true)) {
                if ((this.tableGetValueSliceValidTable != null)) {
                    this.tableGetValueSliceValidTable.InitVars();
                }
            }
            this.tableListLandValueSliceDetailsNew = ((ListLandValueSliceDetailsNewDataTable)(base.Tables["ListLandValueSliceDetailsNew"]));
            if ((initTable == true)) {
                if ((this.tableListLandValueSliceDetailsNew != null)) {
                    this.tableListLandValueSliceDetailsNew.InitVars();
                }
            }
            this.tableListAdjustmentTypes = ((ListAdjustmentTypesDataTable)(base.Tables["ListAdjustmentTypes"]));
            if ((initTable == true)) {
                if ((this.tableListAdjustmentTypes != null)) {
                    this.tableListAdjustmentTypes.InitVars();
                }
            }
            this.tableListShapes = ((ListShapesDataTable)(base.Tables["ListShapes"]));
            if ((initTable == true)) {
                if ((this.tableListShapes != null)) {
                    this.tableListShapes.InitVars();
                }
            }
            this.tableListInfluenceType = ((ListInfluenceTypeDataTable)(base.Tables["ListInfluenceType"]));
            if ((initTable == true)) {
                if ((this.tableListInfluenceType != null)) {
                    this.tableListInfluenceType.InitVars();
                }
            }
            this.tableListLandProgram = ((ListLandProgramDataTable)(base.Tables["ListLandProgram"]));
            if ((initTable == true)) {
                if ((this.tableListLandProgram != null)) {
                    this.tableListLandProgram.InitVars();
                }
            }
            this.tableGetCfgLandTypeLabel = ((GetCfgLandTypeLabelDataTable)(base.Tables["GetCfgLandTypeLabel"]));
            if ((initTable == true)) {
                if ((this.tableGetCfgLandTypeLabel != null)) {
                    this.tableGetCfgLandTypeLabel.InitVars();
                }
            }
            this.tableGetUseBaseDollarPerUnit = ((GetUseBaseDollarPerUnitDataTable)(base.Tables["GetUseBaseDollarPerUnit"]));
            if ((initTable == true)) {
                if ((this.tableGetUseBaseDollarPerUnit != null)) {
                    this.tableGetUseBaseDollarPerUnit.InitVars();
                }
            }
            this.tableListGridInfluences = ((ListGridInfluencesDataTable)(base.Tables["ListGridInfluences"]));
            if ((initTable == true)) {
                if ((this.tableListGridInfluences != null)) {
                    this.tableListGridInfluences.InitVars();
                }
            }
            this.tableListLandCodeLandType = ((ListLandCodeLandTypeDataTable)(base.Tables["ListLandCodeLandType"]));
            if ((initTable == true)) {
                if ((this.tableListLandCodeLandType != null)) {
                    this.tableListLandCodeLandType.InitVars();
                }
            }
            this.tableLandShapesTable = ((LandShapesTableDataTable)(base.Tables["LandShapesTable"]));
            if ((initTable == true)) {
                if ((this.tableLandShapesTable != null)) {
                    this.tableLandShapesTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F36035LandData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F36035LandData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListLandType1 = new ListLandType1DataTable();
            base.Tables.Add(this.tableListLandType1);
            this.tableListLandType2 = new ListLandType2DataTable();
            base.Tables.Add(this.tableListLandType2);
            this.tableListLandType3 = new ListLandType3DataTable();
            base.Tables.Add(this.tableListLandType3);
            this.tableListLandValueSliceDetails = new ListLandValueSliceDetailsDataTable();
            base.Tables.Add(this.tableListLandValueSliceDetails);
            this.tableListLandCode = new ListLandCodeDataTable();
            base.Tables.Add(this.tableListLandCode);
            this.tableGet_LandCode = new Get_LandCodeDataTable();
            base.Tables.Add(this.tableGet_LandCode);
            this.tableGet_LandCodeBaseValue = new Get_LandCodeBaseValueDataTable();
            base.Tables.Add(this.tableGet_LandCodeBaseValue);
            this.tableGetValueSliceValidTable = new GetValueSliceValidTableDataTable();
            base.Tables.Add(this.tableGetValueSliceValidTable);
            this.tableListLandValueSliceDetailsNew = new ListLandValueSliceDetailsNewDataTable();
            base.Tables.Add(this.tableListLandValueSliceDetailsNew);
            this.tableListAdjustmentTypes = new ListAdjustmentTypesDataTable();
            base.Tables.Add(this.tableListAdjustmentTypes);
            this.tableListShapes = new ListShapesDataTable();
            base.Tables.Add(this.tableListShapes);
            this.tableListInfluenceType = new ListInfluenceTypeDataTable();
            base.Tables.Add(this.tableListInfluenceType);
            this.tableListLandProgram = new ListLandProgramDataTable();
            base.Tables.Add(this.tableListLandProgram);
            this.tableGetCfgLandTypeLabel = new GetCfgLandTypeLabelDataTable();
            base.Tables.Add(this.tableGetCfgLandTypeLabel);
            this.tableGetUseBaseDollarPerUnit = new GetUseBaseDollarPerUnitDataTable();
            base.Tables.Add(this.tableGetUseBaseDollarPerUnit);
            this.tableListGridInfluences = new ListGridInfluencesDataTable();
            base.Tables.Add(this.tableListGridInfluences);
            this.tableListLandCodeLandType = new ListLandCodeLandTypeDataTable();
            base.Tables.Add(this.tableListLandCodeLandType);
            this.tableLandShapesTable = new LandShapesTableDataTable();
            base.Tables.Add(this.tableLandShapesTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandType1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandType2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandType3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandValueSliceDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGet_LandCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGet_LandCodeBaseValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetValueSliceValidTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandValueSliceDetailsNew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListAdjustmentTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListShapes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListInfluenceType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandProgram() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetCfgLandTypeLabel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetUseBaseDollarPerUnit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListGridInfluences() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandCodeLandType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLandShapesTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F36035LandData ds = new F36035LandData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListLandType1RowChangeEventHandler(object sender, ListLandType1RowChangeEvent e);
        
        public delegate void ListLandType2RowChangeEventHandler(object sender, ListLandType2RowChangeEvent e);
        
        public delegate void ListLandType3RowChangeEventHandler(object sender, ListLandType3RowChangeEvent e);
        
        public delegate void ListLandValueSliceDetailsRowChangeEventHandler(object sender, ListLandValueSliceDetailsRowChangeEvent e);
        
        public delegate void ListLandCodeRowChangeEventHandler(object sender, ListLandCodeRowChangeEvent e);
        
        public delegate void Get_LandCodeRowChangeEventHandler(object sender, Get_LandCodeRowChangeEvent e);
        
        public delegate void Get_LandCodeBaseValueRowChangeEventHandler(object sender, Get_LandCodeBaseValueRowChangeEvent e);
        
        public delegate void GetValueSliceValidTableRowChangeEventHandler(object sender, GetValueSliceValidTableRowChangeEvent e);
        
        public delegate void ListLandValueSliceDetailsNewRowChangeEventHandler(object sender, ListLandValueSliceDetailsNewRowChangeEvent e);
        
        public delegate void ListAdjustmentTypesRowChangeEventHandler(object sender, ListAdjustmentTypesRowChangeEvent e);
        
        public delegate void ListShapesRowChangeEventHandler(object sender, ListShapesRowChangeEvent e);
        
        public delegate void ListInfluenceTypeRowChangeEventHandler(object sender, ListInfluenceTypeRowChangeEvent e);
        
        public delegate void ListLandProgramRowChangeEventHandler(object sender, ListLandProgramRowChangeEvent e);
        
        public delegate void GetCfgLandTypeLabelRowChangeEventHandler(object sender, GetCfgLandTypeLabelRowChangeEvent e);
        
        public delegate void GetUseBaseDollarPerUnitRowChangeEventHandler(object sender, GetUseBaseDollarPerUnitRowChangeEvent e);
        
        public delegate void ListGridInfluencesRowChangeEventHandler(object sender, ListGridInfluencesRowChangeEvent e);
        
        public delegate void ListLandCodeLandTypeRowChangeEventHandler(object sender, ListLandCodeLandTypeRowChangeEvent e);
        
        public delegate void LandShapesTableRowChangeEventHandler(object sender, LandShapesTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandType1DataTable : global::System.Data.TypedTableBase<ListLandType1Row> {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1DataTable() {
                this.TableName = "ListLandType1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandType1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1Row this[int index] {
                get {
                    return ((ListLandType1Row)(this.Rows[index]));
                }
            }
            
            public event ListLandType1RowChangeEventHandler ListLandType1RowChanging;
            
            public event ListLandType1RowChangeEventHandler ListLandType1RowChanged;
            
            public event ListLandType1RowChangeEventHandler ListLandType1RowDeleting;
            
            public event ListLandType1RowChangeEventHandler ListLandType1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandType1Row(ListLandType1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1Row AddListLandType1Row(int LandTypeID, string LandType, short RollYear, string Description) {
                ListLandType1Row rowListLandType1Row = ((ListLandType1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        RollYear,
                        Description};
                rowListLandType1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandType1Row);
                return rowListLandType1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandType1DataTable cln = ((ListLandType1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandType1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLandTypeID.ReadOnly = true;
                this.columnLandType.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1Row NewListLandType1Row() {
                return ((ListLandType1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandType1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandType1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandType1RowChanged != null)) {
                    this.ListLandType1RowChanged(this, new ListLandType1RowChangeEvent(((ListLandType1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandType1RowChanging != null)) {
                    this.ListLandType1RowChanging(this, new ListLandType1RowChangeEvent(((ListLandType1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandType1RowDeleted != null)) {
                    this.ListLandType1RowDeleted(this, new ListLandType1RowChangeEvent(((ListLandType1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandType1RowDeleting != null)) {
                    this.ListLandType1RowDeleting(this, new ListLandType1RowChangeEvent(((ListLandType1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandType1Row(ListLandType1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandType1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandType2DataTable : global::System.Data.TypedTableBase<ListLandType2Row> {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2DataTable() {
                this.TableName = "ListLandType2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandType2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2Row this[int index] {
                get {
                    return ((ListLandType2Row)(this.Rows[index]));
                }
            }
            
            public event ListLandType2RowChangeEventHandler ListLandType2RowChanging;
            
            public event ListLandType2RowChangeEventHandler ListLandType2RowChanged;
            
            public event ListLandType2RowChangeEventHandler ListLandType2RowDeleting;
            
            public event ListLandType2RowChangeEventHandler ListLandType2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandType2Row(ListLandType2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2Row AddListLandType2Row(int LandTypeID, string LandType, short RollYear, string Description) {
                ListLandType2Row rowListLandType2Row = ((ListLandType2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        RollYear,
                        Description};
                rowListLandType2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandType2Row);
                return rowListLandType2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandType2DataTable cln = ((ListLandType2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandType2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLandTypeID.ReadOnly = true;
                this.columnLandType.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2Row NewListLandType2Row() {
                return ((ListLandType2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandType2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandType2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandType2RowChanged != null)) {
                    this.ListLandType2RowChanged(this, new ListLandType2RowChangeEvent(((ListLandType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandType2RowChanging != null)) {
                    this.ListLandType2RowChanging(this, new ListLandType2RowChangeEvent(((ListLandType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandType2RowDeleted != null)) {
                    this.ListLandType2RowDeleted(this, new ListLandType2RowChangeEvent(((ListLandType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandType2RowDeleting != null)) {
                    this.ListLandType2RowDeleting(this, new ListLandType2RowChangeEvent(((ListLandType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandType2Row(ListLandType2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandType2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandType3DataTable : global::System.Data.TypedTableBase<ListLandType3Row> {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3DataTable() {
                this.TableName = "ListLandType3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandType3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3Row this[int index] {
                get {
                    return ((ListLandType3Row)(this.Rows[index]));
                }
            }
            
            public event ListLandType3RowChangeEventHandler ListLandType3RowChanging;
            
            public event ListLandType3RowChangeEventHandler ListLandType3RowChanged;
            
            public event ListLandType3RowChangeEventHandler ListLandType3RowDeleting;
            
            public event ListLandType3RowChangeEventHandler ListLandType3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandType3Row(ListLandType3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3Row AddListLandType3Row(int LandTypeID, string LandType, short RollYear, string Description) {
                ListLandType3Row rowListLandType3Row = ((ListLandType3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        RollYear,
                        Description};
                rowListLandType3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandType3Row);
                return rowListLandType3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandType3DataTable cln = ((ListLandType3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandType3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLandTypeID.ReadOnly = true;
                this.columnLandType.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3Row NewListLandType3Row() {
                return ((ListLandType3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandType3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandType3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandType3RowChanged != null)) {
                    this.ListLandType3RowChanged(this, new ListLandType3RowChangeEvent(((ListLandType3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandType3RowChanging != null)) {
                    this.ListLandType3RowChanging(this, new ListLandType3RowChangeEvent(((ListLandType3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandType3RowDeleted != null)) {
                    this.ListLandType3RowDeleted(this, new ListLandType3RowChangeEvent(((ListLandType3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandType3RowDeleting != null)) {
                    this.ListLandType3RowDeleting(this, new ListLandType3RowChangeEvent(((ListLandType3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandType3Row(ListLandType3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandType3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandValueSliceDetailsDataTable : global::System.Data.TypedTableBase<ListLandValueSliceDetailsRow> {
            
            private global::System.Data.DataColumn columnLUID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnLandTypeID1;
            
            private global::System.Data.DataColumn columnLandType1;
            
            private global::System.Data.DataColumn columnLandTypeID2;
            
            private global::System.Data.DataColumn columnLandType2;
            
            private global::System.Data.DataColumn columnLandTypeID3;
            
            private global::System.Data.DataColumn columnLandType3;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnReportAS;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            private global::System.Data.DataColumn columnValue5;
            
            private global::System.Data.DataColumn columnAdjustmentType;
            
            private global::System.Data.DataColumn columnAdjustment;
            
            private global::System.Data.DataColumn columnAdjDescription;
            
            private global::System.Data.DataColumn columnPerUnit;
            
            private global::System.Data.DataColumn columnUnitType;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnAdjTypeDescription;
            
            private global::System.Data.DataColumn columnUseValue;
            
            private global::System.Data.DataColumn columnUsePerUnit;
            
            private global::System.Data.DataColumn columnUseBaseValue;
            
            private global::System.Data.DataColumn columnUseAdjustmentType;
            
            private global::System.Data.DataColumn columnUseAdjustment;
            
            private global::System.Data.DataColumn columnUseAdjDescription;
            
            private global::System.Data.DataColumn columnMultiplier;
            
            private global::System.Data.DataColumn columnLotWidth;
            
            private global::System.Data.DataColumn columnLotDepth;
            
            private global::System.Data.DataColumn columnUseAdjTypeDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsDataTable() {
                this.TableName = "ListLandValueSliceDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandValueSliceDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandValueSliceDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LUIDColumn {
                get {
                    return this.columnLUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID1Column {
                get {
                    return this.columnLandTypeID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType1Column {
                get {
                    return this.columnLandType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID2Column {
                get {
                    return this.columnLandTypeID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType2Column {
                get {
                    return this.columnLandType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID3Column {
                get {
                    return this.columnLandTypeID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType3Column {
                get {
                    return this.columnLandType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportASColumn {
                get {
                    return this.columnReportAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value5Column {
                get {
                    return this.columnValue5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentTypeColumn {
                get {
                    return this.columnAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentColumn {
                get {
                    return this.columnAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjDescriptionColumn {
                get {
                    return this.columnAdjDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerUnitColumn {
                get {
                    return this.columnPerUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjTypeDescriptionColumn {
                get {
                    return this.columnAdjTypeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseValueColumn {
                get {
                    return this.columnUseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsePerUnitColumn {
                get {
                    return this.columnUsePerUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseValueColumn {
                get {
                    return this.columnUseBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentTypeColumn {
                get {
                    return this.columnUseAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentColumn {
                get {
                    return this.columnUseAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjDescriptionColumn {
                get {
                    return this.columnUseAdjDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MultiplierColumn {
                get {
                    return this.columnMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotWidthColumn {
                get {
                    return this.columnLotWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotDepthColumn {
                get {
                    return this.columnLotDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjTypeDescriptionColumn {
                get {
                    return this.columnUseAdjTypeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsRow this[int index] {
                get {
                    return ((ListLandValueSliceDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ListLandValueSliceDetailsRowChangeEventHandler ListLandValueSliceDetailsRowChanging;
            
            public event ListLandValueSliceDetailsRowChangeEventHandler ListLandValueSliceDetailsRowChanged;
            
            public event ListLandValueSliceDetailsRowChangeEventHandler ListLandValueSliceDetailsRowDeleting;
            
            public event ListLandValueSliceDetailsRowChangeEventHandler ListLandValueSliceDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandValueSliceDetailsRow(ListLandValueSliceDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsRow AddListLandValueSliceDetailsRow(
                        int LUID, 
                        int ValueSliceID, 
                        int LandTypeID1, 
                        string LandType1, 
                        int LandTypeID2, 
                        string LandType2, 
                        int LandTypeID3, 
                        string LandType3, 
                        string LandCode, 
                        string ReportAS, 
                        decimal BaseValue, 
                        decimal Break1, 
                        decimal Value1, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Break3, 
                        decimal Value3, 
                        decimal Break4, 
                        decimal Value4, 
                        decimal Break5, 
                        decimal Value5, 
                        byte AdjustmentType, 
                        string Adjustment, 
                        string AdjDescription, 
                        decimal PerUnit, 
                        string UnitType, 
                        decimal Units, 
                        decimal Value, 
                        short RollYear, 
                        string AdjTypeDescription, 
                        decimal UseValue, 
                        decimal UsePerUnit, 
                        decimal UseBaseValue, 
                        byte UseAdjustmentType, 
                        string UseAdjustment, 
                        string UseAdjDescription, 
                        decimal Multiplier, 
                        string LotWidth, 
                        string LotDepth, 
                        string UseAdjTypeDescription) {
                ListLandValueSliceDetailsRow rowListLandValueSliceDetailsRow = ((ListLandValueSliceDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LUID,
                        ValueSliceID,
                        LandTypeID1,
                        LandType1,
                        LandTypeID2,
                        LandType2,
                        LandTypeID3,
                        LandType3,
                        LandCode,
                        ReportAS,
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        Break5,
                        Value5,
                        AdjustmentType,
                        Adjustment,
                        AdjDescription,
                        PerUnit,
                        UnitType,
                        Units,
                        Value,
                        RollYear,
                        AdjTypeDescription,
                        UseValue,
                        UsePerUnit,
                        UseBaseValue,
                        UseAdjustmentType,
                        UseAdjustment,
                        UseAdjDescription,
                        Multiplier,
                        LotWidth,
                        LotDepth,
                        UseAdjTypeDescription};
                rowListLandValueSliceDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandValueSliceDetailsRow);
                return rowListLandValueSliceDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandValueSliceDetailsDataTable cln = ((ListLandValueSliceDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandValueSliceDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLUID = base.Columns["LUID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnLandTypeID1 = base.Columns["LandTypeID1"];
                this.columnLandType1 = base.Columns["LandType1"];
                this.columnLandTypeID2 = base.Columns["LandTypeID2"];
                this.columnLandType2 = base.Columns["LandType2"];
                this.columnLandTypeID3 = base.Columns["LandTypeID3"];
                this.columnLandType3 = base.Columns["LandType3"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnReportAS = base.Columns["ReportAS"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnBreak5 = base.Columns["Break5"];
                this.columnValue5 = base.Columns["Value5"];
                this.columnAdjustmentType = base.Columns["AdjustmentType"];
                this.columnAdjustment = base.Columns["Adjustment"];
                this.columnAdjDescription = base.Columns["AdjDescription"];
                this.columnPerUnit = base.Columns["PerUnit"];
                this.columnUnitType = base.Columns["UnitType"];
                this.columnUnits = base.Columns["Units"];
                this.columnValue = base.Columns["Value"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnAdjTypeDescription = base.Columns["AdjTypeDescription"];
                this.columnUseValue = base.Columns["UseValue"];
                this.columnUsePerUnit = base.Columns["UsePerUnit"];
                this.columnUseBaseValue = base.Columns["UseBaseValue"];
                this.columnUseAdjustmentType = base.Columns["UseAdjustmentType"];
                this.columnUseAdjustment = base.Columns["UseAdjustment"];
                this.columnUseAdjDescription = base.Columns["UseAdjDescription"];
                this.columnMultiplier = base.Columns["Multiplier"];
                this.columnLotWidth = base.Columns["LotWidth"];
                this.columnLotDepth = base.Columns["LotDepth"];
                this.columnUseAdjTypeDescription = base.Columns["UseAdjTypeDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLUID = new global::System.Data.DataColumn("LUID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLUID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnLandTypeID1 = new global::System.Data.DataColumn("LandTypeID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID1);
                this.columnLandType1 = new global::System.Data.DataColumn("LandType1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType1);
                this.columnLandTypeID2 = new global::System.Data.DataColumn("LandTypeID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID2);
                this.columnLandType2 = new global::System.Data.DataColumn("LandType2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType2);
                this.columnLandTypeID3 = new global::System.Data.DataColumn("LandTypeID3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID3);
                this.columnLandType3 = new global::System.Data.DataColumn("LandType3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType3);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnReportAS = new global::System.Data.DataColumn("ReportAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportAS);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
                this.columnValue5 = new global::System.Data.DataColumn("Value5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue5);
                this.columnAdjustmentType = new global::System.Data.DataColumn("AdjustmentType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentType);
                this.columnAdjustment = new global::System.Data.DataColumn("Adjustment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustment);
                this.columnAdjDescription = new global::System.Data.DataColumn("AdjDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjDescription);
                this.columnPerUnit = new global::System.Data.DataColumn("PerUnit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerUnit);
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnAdjTypeDescription = new global::System.Data.DataColumn("AdjTypeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjTypeDescription);
                this.columnUseValue = new global::System.Data.DataColumn("UseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseValue);
                this.columnUsePerUnit = new global::System.Data.DataColumn("UsePerUnit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsePerUnit);
                this.columnUseBaseValue = new global::System.Data.DataColumn("UseBaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseValue);
                this.columnUseAdjustmentType = new global::System.Data.DataColumn("UseAdjustmentType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustmentType);
                this.columnUseAdjustment = new global::System.Data.DataColumn("UseAdjustment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustment);
                this.columnUseAdjDescription = new global::System.Data.DataColumn("UseAdjDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjDescription);
                this.columnMultiplier = new global::System.Data.DataColumn("Multiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMultiplier);
                this.columnLotWidth = new global::System.Data.DataColumn("LotWidth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotWidth);
                this.columnLotDepth = new global::System.Data.DataColumn("LotDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotDepth);
                this.columnUseAdjTypeDescription = new global::System.Data.DataColumn("UseAdjTypeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjTypeDescription);
                this.columnLUID.ReadOnly = true;
                this.columnLandType1.MaxLength = 20;
                this.columnLandType2.MaxLength = 20;
                this.columnLandType3.MaxLength = 20;
                this.columnLandCode.MaxLength = 20;
                this.columnReportAS.MaxLength = 20;
                this.columnAdjustment.MaxLength = 20;
                this.columnAdjDescription.MaxLength = 50;
                this.columnUnitType.MaxLength = 20;
                this.columnUseAdjustment.MaxLength = 20;
                this.columnUseAdjDescription.MaxLength = 50;
                this.columnLotWidth.MaxLength = 20;
                this.columnLotDepth.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsRow NewListLandValueSliceDetailsRow() {
                return ((ListLandValueSliceDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandValueSliceDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandValueSliceDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandValueSliceDetailsRowChanged != null)) {
                    this.ListLandValueSliceDetailsRowChanged(this, new ListLandValueSliceDetailsRowChangeEvent(((ListLandValueSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandValueSliceDetailsRowChanging != null)) {
                    this.ListLandValueSliceDetailsRowChanging(this, new ListLandValueSliceDetailsRowChangeEvent(((ListLandValueSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandValueSliceDetailsRowDeleted != null)) {
                    this.ListLandValueSliceDetailsRowDeleted(this, new ListLandValueSliceDetailsRowChangeEvent(((ListLandValueSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandValueSliceDetailsRowDeleting != null)) {
                    this.ListLandValueSliceDetailsRowDeleting(this, new ListLandValueSliceDetailsRowChangeEvent(((ListLandValueSliceDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandValueSliceDetailsRow(ListLandValueSliceDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandValueSliceDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandCodeDataTable : global::System.Data.TypedTableBase<ListLandCodeRow> {
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDataTable() {
                this.TableName = "ListLandCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow this[int index] {
                get {
                    return ((ListLandCodeRow)(this.Rows[index]));
                }
            }
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowChanging;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowChanged;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowDeleting;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandCodeRow(ListLandCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow AddListLandCodeRow(string LandCode, short RollYear) {
                ListLandCodeRow rowListLandCodeRow = ((ListLandCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandCode,
                        RollYear};
                rowListLandCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandCodeRow);
                return rowListLandCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandCodeDataTable cln = ((ListLandCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandCode = base.Columns["LandCode"];
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandCode.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow NewListLandCodeRow() {
                return ((ListLandCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandCodeRowChanged != null)) {
                    this.ListLandCodeRowChanged(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandCodeRowChanging != null)) {
                    this.ListLandCodeRowChanging(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandCodeRowDeleted != null)) {
                    this.ListLandCodeRowDeleted(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandCodeRowDeleting != null)) {
                    this.ListLandCodeRowDeleting(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandCodeRow(ListLandCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Get_LandCodeDataTable : global::System.Data.TypedTableBase<Get_LandCodeRow> {
            
            private global::System.Data.DataColumn columnLuVID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnReportAS;
            
            private global::System.Data.DataColumn columnUnitType;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnUseValue;
            
            private global::System.Data.DataColumn columnUsePerUnit;
            
            private global::System.Data.DataColumn columnUseBaseValue;
            
            private global::System.Data.DataColumn columnUseAdjustmentType;
            
            private global::System.Data.DataColumn columnUseAdjustment;
            
            private global::System.Data.DataColumn columnUseAdjDescription;
            
            private global::System.Data.DataColumn columnMrktMultiplier;
            
            private global::System.Data.DataColumn columnLotWidth;
            
            private global::System.Data.DataColumn columnLotDepth;
            
            private global::System.Data.DataColumn columnVFormula;
            
            private global::System.Data.DataColumn columnUseMultiplier;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeDataTable() {
                this.TableName = "Get_LandCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get_LandCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Get_LandCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LuVIDColumn {
                get {
                    return this.columnLuVID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportASColumn {
                get {
                    return this.columnReportAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseValueColumn {
                get {
                    return this.columnUseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsePerUnitColumn {
                get {
                    return this.columnUsePerUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseValueColumn {
                get {
                    return this.columnUseBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentTypeColumn {
                get {
                    return this.columnUseAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentColumn {
                get {
                    return this.columnUseAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjDescriptionColumn {
                get {
                    return this.columnUseAdjDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MrktMultiplierColumn {
                get {
                    return this.columnMrktMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotWidthColumn {
                get {
                    return this.columnLotWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotDepthColumn {
                get {
                    return this.columnLotDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VFormulaColumn {
                get {
                    return this.columnVFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseMultiplierColumn {
                get {
                    return this.columnUseMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRow this[int index] {
                get {
                    return ((Get_LandCodeRow)(this.Rows[index]));
                }
            }
            
            public event Get_LandCodeRowChangeEventHandler Get_LandCodeRowChanging;
            
            public event Get_LandCodeRowChangeEventHandler Get_LandCodeRowChanged;
            
            public event Get_LandCodeRowChangeEventHandler Get_LandCodeRowDeleting;
            
            public event Get_LandCodeRowChangeEventHandler Get_LandCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGet_LandCodeRow(Get_LandCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRow AddGet_LandCodeRow(
                        int LuVID, 
                        short RollYear, 
                        string LandCode, 
                        string ReportAS, 
                        string UnitType, 
                        decimal BaseValue, 
                        decimal Break1, 
                        decimal Value1, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Break3, 
                        decimal Value3, 
                        decimal Break4, 
                        decimal Value4, 
                        decimal UseValue, 
                        decimal UsePerUnit, 
                        decimal UseBaseValue, 
                        byte UseAdjustmentType, 
                        string UseAdjustment, 
                        string UseAdjDescription, 
                        decimal MrktMultiplier, 
                        string LotWidth, 
                        string LotDepth, 
                        string VFormula, 
                        decimal UseMultiplier) {
                Get_LandCodeRow rowGet_LandCodeRow = ((Get_LandCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LuVID,
                        RollYear,
                        LandCode,
                        ReportAS,
                        UnitType,
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        UseValue,
                        UsePerUnit,
                        UseBaseValue,
                        UseAdjustmentType,
                        UseAdjustment,
                        UseAdjDescription,
                        MrktMultiplier,
                        LotWidth,
                        LotDepth,
                        VFormula,
                        UseMultiplier};
                rowGet_LandCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGet_LandCodeRow);
                return rowGet_LandCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Get_LandCodeDataTable cln = ((Get_LandCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Get_LandCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLuVID = base.Columns["LuVID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnReportAS = base.Columns["ReportAS"];
                this.columnUnitType = base.Columns["UnitType"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnUseValue = base.Columns["UseValue"];
                this.columnUsePerUnit = base.Columns["UsePerUnit"];
                this.columnUseBaseValue = base.Columns["UseBaseValue"];
                this.columnUseAdjustmentType = base.Columns["UseAdjustmentType"];
                this.columnUseAdjustment = base.Columns["UseAdjustment"];
                this.columnUseAdjDescription = base.Columns["UseAdjDescription"];
                this.columnMrktMultiplier = base.Columns["MrktMultiplier"];
                this.columnLotWidth = base.Columns["LotWidth"];
                this.columnLotDepth = base.Columns["LotDepth"];
                this.columnVFormula = base.Columns["VFormula"];
                this.columnUseMultiplier = base.Columns["UseMultiplier"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLuVID = new global::System.Data.DataColumn("LuVID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLuVID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnReportAS = new global::System.Data.DataColumn("ReportAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportAS);
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnUseValue = new global::System.Data.DataColumn("UseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseValue);
                this.columnUsePerUnit = new global::System.Data.DataColumn("UsePerUnit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsePerUnit);
                this.columnUseBaseValue = new global::System.Data.DataColumn("UseBaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseValue);
                this.columnUseAdjustmentType = new global::System.Data.DataColumn("UseAdjustmentType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustmentType);
                this.columnUseAdjustment = new global::System.Data.DataColumn("UseAdjustment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustment);
                this.columnUseAdjDescription = new global::System.Data.DataColumn("UseAdjDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjDescription);
                this.columnMrktMultiplier = new global::System.Data.DataColumn("MrktMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMrktMultiplier);
                this.columnLotWidth = new global::System.Data.DataColumn("LotWidth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotWidth);
                this.columnLotDepth = new global::System.Data.DataColumn("LotDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotDepth);
                this.columnVFormula = new global::System.Data.DataColumn("VFormula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVFormula);
                this.columnUseMultiplier = new global::System.Data.DataColumn("UseMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseMultiplier);
                this.columnLuVID.ReadOnly = true;
                this.columnLandCode.MaxLength = 20;
                this.columnReportAS.ReadOnly = true;
                this.columnReportAS.MaxLength = 20;
                this.columnUnitType.MaxLength = 20;
                this.columnUseAdjustment.MaxLength = 20;
                this.columnUseAdjDescription.MaxLength = 50;
                this.columnLotWidth.MaxLength = 20;
                this.columnLotDepth.MaxLength = 20;
                this.columnVFormula.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRow NewGet_LandCodeRow() {
                return ((Get_LandCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Get_LandCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Get_LandCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Get_LandCodeRowChanged != null)) {
                    this.Get_LandCodeRowChanged(this, new Get_LandCodeRowChangeEvent(((Get_LandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Get_LandCodeRowChanging != null)) {
                    this.Get_LandCodeRowChanging(this, new Get_LandCodeRowChangeEvent(((Get_LandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Get_LandCodeRowDeleted != null)) {
                    this.Get_LandCodeRowDeleted(this, new Get_LandCodeRowChangeEvent(((Get_LandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Get_LandCodeRowDeleting != null)) {
                    this.Get_LandCodeRowDeleting(this, new Get_LandCodeRowChangeEvent(((Get_LandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGet_LandCodeRow(Get_LandCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Get_LandCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Get_LandCodeBaseValueDataTable : global::System.Data.TypedTableBase<Get_LandCodeBaseValueRow> {
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnUseBaseValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueDataTable() {
                this.TableName = "Get_LandCodeBaseValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get_LandCodeBaseValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Get_LandCodeBaseValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseValueColumn {
                get {
                    return this.columnUseBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRow this[int index] {
                get {
                    return ((Get_LandCodeBaseValueRow)(this.Rows[index]));
                }
            }
            
            public event Get_LandCodeBaseValueRowChangeEventHandler Get_LandCodeBaseValueRowChanging;
            
            public event Get_LandCodeBaseValueRowChangeEventHandler Get_LandCodeBaseValueRowChanged;
            
            public event Get_LandCodeBaseValueRowChangeEventHandler Get_LandCodeBaseValueRowDeleting;
            
            public event Get_LandCodeBaseValueRowChangeEventHandler Get_LandCodeBaseValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGet_LandCodeBaseValueRow(Get_LandCodeBaseValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRow AddGet_LandCodeBaseValueRow(decimal BaseValue, decimal UseBaseValue) {
                Get_LandCodeBaseValueRow rowGet_LandCodeBaseValueRow = ((Get_LandCodeBaseValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BaseValue,
                        UseBaseValue};
                rowGet_LandCodeBaseValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGet_LandCodeBaseValueRow);
                return rowGet_LandCodeBaseValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Get_LandCodeBaseValueDataTable cln = ((Get_LandCodeBaseValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Get_LandCodeBaseValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnUseBaseValue = base.Columns["UseBaseValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnUseBaseValue = new global::System.Data.DataColumn("UseBaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRow NewGet_LandCodeBaseValueRow() {
                return ((Get_LandCodeBaseValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Get_LandCodeBaseValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Get_LandCodeBaseValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Get_LandCodeBaseValueRowChanged != null)) {
                    this.Get_LandCodeBaseValueRowChanged(this, new Get_LandCodeBaseValueRowChangeEvent(((Get_LandCodeBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Get_LandCodeBaseValueRowChanging != null)) {
                    this.Get_LandCodeBaseValueRowChanging(this, new Get_LandCodeBaseValueRowChangeEvent(((Get_LandCodeBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Get_LandCodeBaseValueRowDeleted != null)) {
                    this.Get_LandCodeBaseValueRowDeleted(this, new Get_LandCodeBaseValueRowChangeEvent(((Get_LandCodeBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Get_LandCodeBaseValueRowDeleting != null)) {
                    this.Get_LandCodeBaseValueRowDeleting(this, new Get_LandCodeBaseValueRowChangeEvent(((Get_LandCodeBaseValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGet_LandCodeBaseValueRow(Get_LandCodeBaseValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Get_LandCodeBaseValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetValueSliceValidTableDataTable : global::System.Data.TypedTableBase<GetValueSliceValidTableRow> {
            
            private global::System.Data.DataColumn columnIsOpen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidTableDataTable() {
                this.TableName = "GetValueSliceValidTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetValueSliceValidTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetValueSliceValidTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsOpenColumn {
                get {
                    return this.columnIsOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidTableRow this[int index] {
                get {
                    return ((GetValueSliceValidTableRow)(this.Rows[index]));
                }
            }
            
            public event GetValueSliceValidTableRowChangeEventHandler GetValueSliceValidTableRowChanging;
            
            public event GetValueSliceValidTableRowChangeEventHandler GetValueSliceValidTableRowChanged;
            
            public event GetValueSliceValidTableRowChangeEventHandler GetValueSliceValidTableRowDeleting;
            
            public event GetValueSliceValidTableRowChangeEventHandler GetValueSliceValidTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetValueSliceValidTableRow(GetValueSliceValidTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidTableRow AddGetValueSliceValidTableRow(bool IsOpen) {
                GetValueSliceValidTableRow rowGetValueSliceValidTableRow = ((GetValueSliceValidTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsOpen};
                rowGetValueSliceValidTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetValueSliceValidTableRow);
                return rowGetValueSliceValidTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetValueSliceValidTableDataTable cln = ((GetValueSliceValidTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetValueSliceValidTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsOpen = base.Columns["IsOpen"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsOpen = new global::System.Data.DataColumn("IsOpen", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOpen);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidTableRow NewGetValueSliceValidTableRow() {
                return ((GetValueSliceValidTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetValueSliceValidTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetValueSliceValidTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetValueSliceValidTableRowChanged != null)) {
                    this.GetValueSliceValidTableRowChanged(this, new GetValueSliceValidTableRowChangeEvent(((GetValueSliceValidTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetValueSliceValidTableRowChanging != null)) {
                    this.GetValueSliceValidTableRowChanging(this, new GetValueSliceValidTableRowChangeEvent(((GetValueSliceValidTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetValueSliceValidTableRowDeleted != null)) {
                    this.GetValueSliceValidTableRowDeleted(this, new GetValueSliceValidTableRowChangeEvent(((GetValueSliceValidTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetValueSliceValidTableRowDeleting != null)) {
                    this.GetValueSliceValidTableRowDeleting(this, new GetValueSliceValidTableRowChangeEvent(((GetValueSliceValidTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetValueSliceValidTableRow(GetValueSliceValidTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetValueSliceValidTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandValueSliceDetailsNewDataTable : global::System.Data.TypedTableBase<ListLandValueSliceDetailsNewRow> {
            
            private global::System.Data.DataColumn columnLUID;
            
            private global::System.Data.DataColumn columnValueSliceID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnLandTypeID1;
            
            private global::System.Data.DataColumn columnLandType1;
            
            private global::System.Data.DataColumn columnLandTypeID2;
            
            private global::System.Data.DataColumn columnLandType2;
            
            private global::System.Data.DataColumn columnLandTypeID3;
            
            private global::System.Data.DataColumn columnLandType3;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnReportAS;
            
            private global::System.Data.DataColumn columnBaseValue;
            
            private global::System.Data.DataColumn columnBreak1;
            
            private global::System.Data.DataColumn columnValue1;
            
            private global::System.Data.DataColumn columnBreak2;
            
            private global::System.Data.DataColumn columnValue2;
            
            private global::System.Data.DataColumn columnBreak3;
            
            private global::System.Data.DataColumn columnValue3;
            
            private global::System.Data.DataColumn columnBreak4;
            
            private global::System.Data.DataColumn columnValue4;
            
            private global::System.Data.DataColumn columnBreak5;
            
            private global::System.Data.DataColumn columnValue5;
            
            private global::System.Data.DataColumn columnAdjustmentType;
            
            private global::System.Data.DataColumn columnAdjTypeDescription;
            
            private global::System.Data.DataColumn columnAdjustment;
            
            private global::System.Data.DataColumn columnAdjDescription;
            
            private global::System.Data.DataColumn columnUnitType;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnFinalMrktValue;
            
            private global::System.Data.DataColumn columnFinalUseValue;
            
            private global::System.Data.DataColumn columnUseBaseValue;
            
            private global::System.Data.DataColumn columnUseAdjustmentType;
            
            private global::System.Data.DataColumn columnUseAdjTypeDescription;
            
            private global::System.Data.DataColumn columnUseAdjustment;
            
            private global::System.Data.DataColumn columnUseAdjDescription;
            
            private global::System.Data.DataColumn columnLotWidth;
            
            private global::System.Data.DataColumn columnLotDepth;
            
            private global::System.Data.DataColumn columnLandShape;
            
            private global::System.Data.DataColumn columnFrontage;
            
            private global::System.Data.DataColumn columnBaseMrktValue;
            
            private global::System.Data.DataColumn columnInfluenceTypeID1;
            
            private global::System.Data.DataColumn columnInfluenceType1;
            
            private global::System.Data.DataColumn columnInfluence1;
            
            private global::System.Data.DataColumn columnInfluenceDesc1;
            
            private global::System.Data.DataColumn columnInfluenceValue1;
            
            private global::System.Data.DataColumn columnInfluenceTypeID2;
            
            private global::System.Data.DataColumn columnInfluenceType2;
            
            private global::System.Data.DataColumn columnInfluence2;
            
            private global::System.Data.DataColumn columnInfluenceDesc2;
            
            private global::System.Data.DataColumn columnInfluenceValue2;
            
            private global::System.Data.DataColumn columnInfluenceTypeID3;
            
            private global::System.Data.DataColumn columnInfluenceType3;
            
            private global::System.Data.DataColumn columnInfluence3;
            
            private global::System.Data.DataColumn columnInfluenceDesc3;
            
            private global::System.Data.DataColumn columnInfluenceValue3;
            
            private global::System.Data.DataColumn columnProgramID;
            
            private global::System.Data.DataColumn columnProgramAbv;
            
            private global::System.Data.DataColumn columnProgram;
            
            private global::System.Data.DataColumn columnVFormula;
            
            private global::System.Data.DataColumn columnBaseDollarPerUnit;
            
            private global::System.Data.DataColumn columnUseBaseDollarPerUnit;
            
            private global::System.Data.DataColumn columnGridFinalValue;
            
            private global::System.Data.DataColumn columnGridUnitsTotal;
            
            private global::System.Data.DataColumn columnMrktMultiplier;
            
            private global::System.Data.DataColumn columnUseMultiplier;
            
            private global::System.Data.DataColumn columnInfluenceType1Value;
            
            private global::System.Data.DataColumn columnInfluenceType2Value;
            
            private global::System.Data.DataColumn columnInfluenceType3Value;
            
            private global::System.Data.DataColumn columnSrAcres;
            
            private global::System.Data.DataColumn columnIsLandConfigured;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsNewDataTable() {
                this.TableName = "ListLandValueSliceDetailsNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandValueSliceDetailsNewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandValueSliceDetailsNewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LUIDColumn {
                get {
                    return this.columnLUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueSliceIDColumn {
                get {
                    return this.columnValueSliceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID1Column {
                get {
                    return this.columnLandTypeID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType1Column {
                get {
                    return this.columnLandType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID2Column {
                get {
                    return this.columnLandTypeID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType2Column {
                get {
                    return this.columnLandType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID3Column {
                get {
                    return this.columnLandTypeID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType3Column {
                get {
                    return this.columnLandType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportASColumn {
                get {
                    return this.columnReportAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseValueColumn {
                get {
                    return this.columnBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break1Column {
                get {
                    return this.columnBreak1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value1Column {
                get {
                    return this.columnValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break2Column {
                get {
                    return this.columnBreak2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value2Column {
                get {
                    return this.columnValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break3Column {
                get {
                    return this.columnBreak3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value3Column {
                get {
                    return this.columnValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break4Column {
                get {
                    return this.columnBreak4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value4Column {
                get {
                    return this.columnValue4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Break5Column {
                get {
                    return this.columnBreak5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Value5Column {
                get {
                    return this.columnValue5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentTypeColumn {
                get {
                    return this.columnAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjTypeDescriptionColumn {
                get {
                    return this.columnAdjTypeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentColumn {
                get {
                    return this.columnAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjDescriptionColumn {
                get {
                    return this.columnAdjDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitTypeColumn {
                get {
                    return this.columnUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalMrktValueColumn {
                get {
                    return this.columnFinalMrktValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalUseValueColumn {
                get {
                    return this.columnFinalUseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseValueColumn {
                get {
                    return this.columnUseBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentTypeColumn {
                get {
                    return this.columnUseAdjustmentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjTypeDescriptionColumn {
                get {
                    return this.columnUseAdjTypeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjustmentColumn {
                get {
                    return this.columnUseAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseAdjDescriptionColumn {
                get {
                    return this.columnUseAdjDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotWidthColumn {
                get {
                    return this.columnLotWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotDepthColumn {
                get {
                    return this.columnLotDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandShapeColumn {
                get {
                    return this.columnLandShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrontageColumn {
                get {
                    return this.columnFrontage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseMrktValueColumn {
                get {
                    return this.columnBaseMrktValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeID1Column {
                get {
                    return this.columnInfluenceTypeID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceType1Column {
                get {
                    return this.columnInfluenceType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Influence1Column {
                get {
                    return this.columnInfluence1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceDesc1Column {
                get {
                    return this.columnInfluenceDesc1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceValue1Column {
                get {
                    return this.columnInfluenceValue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeID2Column {
                get {
                    return this.columnInfluenceTypeID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceType2Column {
                get {
                    return this.columnInfluenceType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Influence2Column {
                get {
                    return this.columnInfluence2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceDesc2Column {
                get {
                    return this.columnInfluenceDesc2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceValue2Column {
                get {
                    return this.columnInfluenceValue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeID3Column {
                get {
                    return this.columnInfluenceTypeID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceType3Column {
                get {
                    return this.columnInfluenceType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Influence3Column {
                get {
                    return this.columnInfluence3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceDesc3Column {
                get {
                    return this.columnInfluenceDesc3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceValue3Column {
                get {
                    return this.columnInfluenceValue3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramIDColumn {
                get {
                    return this.columnProgramID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramAbvColumn {
                get {
                    return this.columnProgramAbv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramColumn {
                get {
                    return this.columnProgram;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VFormulaColumn {
                get {
                    return this.columnVFormula;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseDollarPerUnitColumn {
                get {
                    return this.columnBaseDollarPerUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseDollarPerUnitColumn {
                get {
                    return this.columnUseBaseDollarPerUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GridFinalValueColumn {
                get {
                    return this.columnGridFinalValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GridUnitsTotalColumn {
                get {
                    return this.columnGridUnitsTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MrktMultiplierColumn {
                get {
                    return this.columnMrktMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseMultiplierColumn {
                get {
                    return this.columnUseMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceType1ValueColumn {
                get {
                    return this.columnInfluenceType1Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceType2ValueColumn {
                get {
                    return this.columnInfluenceType2Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceType3ValueColumn {
                get {
                    return this.columnInfluenceType3Value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SrAcresColumn {
                get {
                    return this.columnSrAcres;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsLandConfiguredColumn {
                get {
                    return this.columnIsLandConfigured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsNewRow this[int index] {
                get {
                    return ((ListLandValueSliceDetailsNewRow)(this.Rows[index]));
                }
            }
            
            public event ListLandValueSliceDetailsNewRowChangeEventHandler ListLandValueSliceDetailsNewRowChanging;
            
            public event ListLandValueSliceDetailsNewRowChangeEventHandler ListLandValueSliceDetailsNewRowChanged;
            
            public event ListLandValueSliceDetailsNewRowChangeEventHandler ListLandValueSliceDetailsNewRowDeleting;
            
            public event ListLandValueSliceDetailsNewRowChangeEventHandler ListLandValueSliceDetailsNewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandValueSliceDetailsNewRow(ListLandValueSliceDetailsNewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsNewRow AddListLandValueSliceDetailsNewRow(
                        int LUID, 
                        int ValueSliceID, 
                        short RollYear, 
                        int LandTypeID1, 
                        string LandType1, 
                        int LandTypeID2, 
                        string LandType2, 
                        int LandTypeID3, 
                        string LandType3, 
                        string LandCode, 
                        string ReportAS, 
                        decimal BaseValue, 
                        decimal Break1, 
                        decimal Value1, 
                        decimal Break2, 
                        decimal Value2, 
                        decimal Break3, 
                        decimal Value3, 
                        decimal Break4, 
                        decimal Value4, 
                        decimal Break5, 
                        decimal Value5, 
                        byte AdjustmentType, 
                        string AdjTypeDescription, 
                        string Adjustment, 
                        string AdjDescription, 
                        string UnitType, 
                        decimal Units, 
                        decimal FinalMrktValue, 
                        decimal FinalUseValue, 
                        decimal UseBaseValue, 
                        byte UseAdjustmentType, 
                        string UseAdjTypeDescription, 
                        string UseAdjustment, 
                        string UseAdjDescription, 
                        decimal LotWidth, 
                        decimal LotDepth, 
                        string LandShape, 
                        decimal Frontage, 
                        decimal BaseMrktValue, 
                        int InfluenceTypeID1, 
                        string InfluenceType1, 
                        decimal Influence1, 
                        string InfluenceDesc1, 
                        decimal InfluenceValue1, 
                        int InfluenceTypeID2, 
                        string InfluenceType2, 
                        decimal Influence2, 
                        string InfluenceDesc2, 
                        decimal InfluenceValue2, 
                        int InfluenceTypeID3, 
                        string InfluenceType3, 
                        decimal Influence3, 
                        string InfluenceDesc3, 
                        decimal InfluenceValue3, 
                        byte ProgramID, 
                        string ProgramAbv, 
                        string Program, 
                        string VFormula, 
                        decimal BaseDollarPerUnit, 
                        decimal UseBaseDollarPerUnit, 
                        decimal GridFinalValue, 
                        decimal GridUnitsTotal, 
                        decimal MrktMultiplier, 
                        decimal UseMultiplier, 
                        byte InfluenceType1Value, 
                        byte InfluenceType2Value, 
                        byte InfluenceType3Value, 
                        decimal SrAcres, 
                        bool IsLandConfigured) {
                ListLandValueSliceDetailsNewRow rowListLandValueSliceDetailsNewRow = ((ListLandValueSliceDetailsNewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LUID,
                        ValueSliceID,
                        RollYear,
                        LandTypeID1,
                        LandType1,
                        LandTypeID2,
                        LandType2,
                        LandTypeID3,
                        LandType3,
                        LandCode,
                        ReportAS,
                        BaseValue,
                        Break1,
                        Value1,
                        Break2,
                        Value2,
                        Break3,
                        Value3,
                        Break4,
                        Value4,
                        Break5,
                        Value5,
                        AdjustmentType,
                        AdjTypeDescription,
                        Adjustment,
                        AdjDescription,
                        UnitType,
                        Units,
                        FinalMrktValue,
                        FinalUseValue,
                        UseBaseValue,
                        UseAdjustmentType,
                        UseAdjTypeDescription,
                        UseAdjustment,
                        UseAdjDescription,
                        LotWidth,
                        LotDepth,
                        LandShape,
                        Frontage,
                        BaseMrktValue,
                        InfluenceTypeID1,
                        InfluenceType1,
                        Influence1,
                        InfluenceDesc1,
                        InfluenceValue1,
                        InfluenceTypeID2,
                        InfluenceType2,
                        Influence2,
                        InfluenceDesc2,
                        InfluenceValue2,
                        InfluenceTypeID3,
                        InfluenceType3,
                        Influence3,
                        InfluenceDesc3,
                        InfluenceValue3,
                        ProgramID,
                        ProgramAbv,
                        Program,
                        VFormula,
                        BaseDollarPerUnit,
                        UseBaseDollarPerUnit,
                        GridFinalValue,
                        GridUnitsTotal,
                        MrktMultiplier,
                        UseMultiplier,
                        InfluenceType1Value,
                        InfluenceType2Value,
                        InfluenceType3Value,
                        SrAcres,
                        IsLandConfigured};
                rowListLandValueSliceDetailsNewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandValueSliceDetailsNewRow);
                return rowListLandValueSliceDetailsNewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandValueSliceDetailsNewDataTable cln = ((ListLandValueSliceDetailsNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandValueSliceDetailsNewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLUID = base.Columns["LUID"];
                this.columnValueSliceID = base.Columns["ValueSliceID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnLandTypeID1 = base.Columns["LandTypeID1"];
                this.columnLandType1 = base.Columns["LandType1"];
                this.columnLandTypeID2 = base.Columns["LandTypeID2"];
                this.columnLandType2 = base.Columns["LandType2"];
                this.columnLandTypeID3 = base.Columns["LandTypeID3"];
                this.columnLandType3 = base.Columns["LandType3"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnReportAS = base.Columns["ReportAS"];
                this.columnBaseValue = base.Columns["BaseValue"];
                this.columnBreak1 = base.Columns["Break1"];
                this.columnValue1 = base.Columns["Value1"];
                this.columnBreak2 = base.Columns["Break2"];
                this.columnValue2 = base.Columns["Value2"];
                this.columnBreak3 = base.Columns["Break3"];
                this.columnValue3 = base.Columns["Value3"];
                this.columnBreak4 = base.Columns["Break4"];
                this.columnValue4 = base.Columns["Value4"];
                this.columnBreak5 = base.Columns["Break5"];
                this.columnValue5 = base.Columns["Value5"];
                this.columnAdjustmentType = base.Columns["AdjustmentType"];
                this.columnAdjTypeDescription = base.Columns["AdjTypeDescription"];
                this.columnAdjustment = base.Columns["Adjustment"];
                this.columnAdjDescription = base.Columns["AdjDescription"];
                this.columnUnitType = base.Columns["UnitType"];
                this.columnUnits = base.Columns["Units"];
                this.columnFinalMrktValue = base.Columns["FinalMrktValue"];
                this.columnFinalUseValue = base.Columns["FinalUseValue"];
                this.columnUseBaseValue = base.Columns["UseBaseValue"];
                this.columnUseAdjustmentType = base.Columns["UseAdjustmentType"];
                this.columnUseAdjTypeDescription = base.Columns["UseAdjTypeDescription"];
                this.columnUseAdjustment = base.Columns["UseAdjustment"];
                this.columnUseAdjDescription = base.Columns["UseAdjDescription"];
                this.columnLotWidth = base.Columns["LotWidth"];
                this.columnLotDepth = base.Columns["LotDepth"];
                this.columnLandShape = base.Columns["LandShape"];
                this.columnFrontage = base.Columns["Frontage"];
                this.columnBaseMrktValue = base.Columns["BaseMrktValue"];
                this.columnInfluenceTypeID1 = base.Columns["InfluenceTypeID1"];
                this.columnInfluenceType1 = base.Columns["InfluenceType1"];
                this.columnInfluence1 = base.Columns["Influence1"];
                this.columnInfluenceDesc1 = base.Columns["InfluenceDesc1"];
                this.columnInfluenceValue1 = base.Columns["InfluenceValue1"];
                this.columnInfluenceTypeID2 = base.Columns["InfluenceTypeID2"];
                this.columnInfluenceType2 = base.Columns["InfluenceType2"];
                this.columnInfluence2 = base.Columns["Influence2"];
                this.columnInfluenceDesc2 = base.Columns["InfluenceDesc2"];
                this.columnInfluenceValue2 = base.Columns["InfluenceValue2"];
                this.columnInfluenceTypeID3 = base.Columns["InfluenceTypeID3"];
                this.columnInfluenceType3 = base.Columns["InfluenceType3"];
                this.columnInfluence3 = base.Columns["Influence3"];
                this.columnInfluenceDesc3 = base.Columns["InfluenceDesc3"];
                this.columnInfluenceValue3 = base.Columns["InfluenceValue3"];
                this.columnProgramID = base.Columns["ProgramID"];
                this.columnProgramAbv = base.Columns["ProgramAbv"];
                this.columnProgram = base.Columns["Program"];
                this.columnVFormula = base.Columns["VFormula"];
                this.columnBaseDollarPerUnit = base.Columns["BaseDollarPerUnit"];
                this.columnUseBaseDollarPerUnit = base.Columns["UseBaseDollarPerUnit"];
                this.columnGridFinalValue = base.Columns["GridFinalValue"];
                this.columnGridUnitsTotal = base.Columns["GridUnitsTotal"];
                this.columnMrktMultiplier = base.Columns["MrktMultiplier"];
                this.columnUseMultiplier = base.Columns["UseMultiplier"];
                this.columnInfluenceType1Value = base.Columns["InfluenceType1Value"];
                this.columnInfluenceType2Value = base.Columns["InfluenceType2Value"];
                this.columnInfluenceType3Value = base.Columns["InfluenceType3Value"];
                this.columnSrAcres = base.Columns["SrAcres"];
                this.columnIsLandConfigured = base.Columns["IsLandConfigured"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLUID = new global::System.Data.DataColumn("LUID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLUID);
                this.columnValueSliceID = new global::System.Data.DataColumn("ValueSliceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValueSliceID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandTypeID1 = new global::System.Data.DataColumn("LandTypeID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID1);
                this.columnLandType1 = new global::System.Data.DataColumn("LandType1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType1);
                this.columnLandTypeID2 = new global::System.Data.DataColumn("LandTypeID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID2);
                this.columnLandType2 = new global::System.Data.DataColumn("LandType2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType2);
                this.columnLandTypeID3 = new global::System.Data.DataColumn("LandTypeID3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID3);
                this.columnLandType3 = new global::System.Data.DataColumn("LandType3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType3);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnReportAS = new global::System.Data.DataColumn("ReportAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportAS);
                this.columnBaseValue = new global::System.Data.DataColumn("BaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseValue);
                this.columnBreak1 = new global::System.Data.DataColumn("Break1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak1);
                this.columnValue1 = new global::System.Data.DataColumn("Value1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue1);
                this.columnBreak2 = new global::System.Data.DataColumn("Break2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak2);
                this.columnValue2 = new global::System.Data.DataColumn("Value2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue2);
                this.columnBreak3 = new global::System.Data.DataColumn("Break3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak3);
                this.columnValue3 = new global::System.Data.DataColumn("Value3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue3);
                this.columnBreak4 = new global::System.Data.DataColumn("Break4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak4);
                this.columnValue4 = new global::System.Data.DataColumn("Value4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue4);
                this.columnBreak5 = new global::System.Data.DataColumn("Break5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreak5);
                this.columnValue5 = new global::System.Data.DataColumn("Value5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue5);
                this.columnAdjustmentType = new global::System.Data.DataColumn("AdjustmentType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentType);
                this.columnAdjTypeDescription = new global::System.Data.DataColumn("AdjTypeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjTypeDescription);
                this.columnAdjustment = new global::System.Data.DataColumn("Adjustment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustment);
                this.columnAdjDescription = new global::System.Data.DataColumn("AdjDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjDescription);
                this.columnUnitType = new global::System.Data.DataColumn("UnitType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitType);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnFinalMrktValue = new global::System.Data.DataColumn("FinalMrktValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalMrktValue);
                this.columnFinalUseValue = new global::System.Data.DataColumn("FinalUseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalUseValue);
                this.columnUseBaseValue = new global::System.Data.DataColumn("UseBaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseValue);
                this.columnUseAdjustmentType = new global::System.Data.DataColumn("UseAdjustmentType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustmentType);
                this.columnUseAdjTypeDescription = new global::System.Data.DataColumn("UseAdjTypeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjTypeDescription);
                this.columnUseAdjustment = new global::System.Data.DataColumn("UseAdjustment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjustment);
                this.columnUseAdjDescription = new global::System.Data.DataColumn("UseAdjDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseAdjDescription);
                this.columnLotWidth = new global::System.Data.DataColumn("LotWidth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotWidth);
                this.columnLotDepth = new global::System.Data.DataColumn("LotDepth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotDepth);
                this.columnLandShape = new global::System.Data.DataColumn("LandShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandShape);
                this.columnFrontage = new global::System.Data.DataColumn("Frontage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrontage);
                this.columnBaseMrktValue = new global::System.Data.DataColumn("BaseMrktValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseMrktValue);
                this.columnInfluenceTypeID1 = new global::System.Data.DataColumn("InfluenceTypeID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID1);
                this.columnInfluenceType1 = new global::System.Data.DataColumn("InfluenceType1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType1);
                this.columnInfluence1 = new global::System.Data.DataColumn("Influence1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence1);
                this.columnInfluenceDesc1 = new global::System.Data.DataColumn("InfluenceDesc1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceDesc1);
                this.columnInfluenceValue1 = new global::System.Data.DataColumn("InfluenceValue1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceValue1);
                this.columnInfluenceTypeID2 = new global::System.Data.DataColumn("InfluenceTypeID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID2);
                this.columnInfluenceType2 = new global::System.Data.DataColumn("InfluenceType2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType2);
                this.columnInfluence2 = new global::System.Data.DataColumn("Influence2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence2);
                this.columnInfluenceDesc2 = new global::System.Data.DataColumn("InfluenceDesc2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceDesc2);
                this.columnInfluenceValue2 = new global::System.Data.DataColumn("InfluenceValue2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceValue2);
                this.columnInfluenceTypeID3 = new global::System.Data.DataColumn("InfluenceTypeID3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID3);
                this.columnInfluenceType3 = new global::System.Data.DataColumn("InfluenceType3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType3);
                this.columnInfluence3 = new global::System.Data.DataColumn("Influence3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence3);
                this.columnInfluenceDesc3 = new global::System.Data.DataColumn("InfluenceDesc3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceDesc3);
                this.columnInfluenceValue3 = new global::System.Data.DataColumn("InfluenceValue3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceValue3);
                this.columnProgramID = new global::System.Data.DataColumn("ProgramID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramID);
                this.columnProgramAbv = new global::System.Data.DataColumn("ProgramAbv", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramAbv);
                this.columnProgram = new global::System.Data.DataColumn("Program", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgram);
                this.columnVFormula = new global::System.Data.DataColumn("VFormula", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVFormula);
                this.columnBaseDollarPerUnit = new global::System.Data.DataColumn("BaseDollarPerUnit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseDollarPerUnit);
                this.columnUseBaseDollarPerUnit = new global::System.Data.DataColumn("UseBaseDollarPerUnit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseDollarPerUnit);
                this.columnGridFinalValue = new global::System.Data.DataColumn("GridFinalValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridFinalValue);
                this.columnGridUnitsTotal = new global::System.Data.DataColumn("GridUnitsTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridUnitsTotal);
                this.columnMrktMultiplier = new global::System.Data.DataColumn("MrktMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMrktMultiplier);
                this.columnUseMultiplier = new global::System.Data.DataColumn("UseMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseMultiplier);
                this.columnInfluenceType1Value = new global::System.Data.DataColumn("InfluenceType1Value", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType1Value);
                this.columnInfluenceType2Value = new global::System.Data.DataColumn("InfluenceType2Value", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType2Value);
                this.columnInfluenceType3Value = new global::System.Data.DataColumn("InfluenceType3Value", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType3Value);
                this.columnSrAcres = new global::System.Data.DataColumn("SrAcres", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSrAcres);
                this.columnIsLandConfigured = new global::System.Data.DataColumn("IsLandConfigured", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLandConfigured);
                this.columnLUID.ReadOnly = true;
                this.columnRollYear.ReadOnly = true;
                this.columnLandType1.MaxLength = 20;
                this.columnLandType2.MaxLength = 20;
                this.columnLandType3.MaxLength = 20;
                this.columnLandCode.MaxLength = 20;
                this.columnReportAS.MaxLength = 20;
                this.columnAdjTypeDescription.ReadOnly = true;
                this.columnAdjTypeDescription.MaxLength = 10;
                this.columnAdjustment.MaxLength = 20;
                this.columnAdjDescription.MaxLength = 50;
                this.columnUnitType.MaxLength = 20;
                this.columnUseAdjTypeDescription.ReadOnly = true;
                this.columnUseAdjTypeDescription.MaxLength = 10;
                this.columnUseAdjustment.MaxLength = 20;
                this.columnUseAdjDescription.MaxLength = 50;
                this.columnLandShape.MaxLength = 20;
                this.columnInfluenceType1.MaxLength = 30;
                this.columnInfluenceDesc1.MaxLength = 50;
                this.columnInfluenceType2.MaxLength = 30;
                this.columnInfluenceDesc2.MaxLength = 50;
                this.columnInfluenceType3.MaxLength = 30;
                this.columnInfluenceDesc3.MaxLength = 50;
                this.columnProgramAbv.MaxLength = 10;
                this.columnProgram.MaxLength = 50;
                this.columnVFormula.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsNewRow NewListLandValueSliceDetailsNewRow() {
                return ((ListLandValueSliceDetailsNewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandValueSliceDetailsNewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandValueSliceDetailsNewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandValueSliceDetailsNewRowChanged != null)) {
                    this.ListLandValueSliceDetailsNewRowChanged(this, new ListLandValueSliceDetailsNewRowChangeEvent(((ListLandValueSliceDetailsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandValueSliceDetailsNewRowChanging != null)) {
                    this.ListLandValueSliceDetailsNewRowChanging(this, new ListLandValueSliceDetailsNewRowChangeEvent(((ListLandValueSliceDetailsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandValueSliceDetailsNewRowDeleted != null)) {
                    this.ListLandValueSliceDetailsNewRowDeleted(this, new ListLandValueSliceDetailsNewRowChangeEvent(((ListLandValueSliceDetailsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandValueSliceDetailsNewRowDeleting != null)) {
                    this.ListLandValueSliceDetailsNewRowDeleting(this, new ListLandValueSliceDetailsNewRowChangeEvent(((ListLandValueSliceDetailsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandValueSliceDetailsNewRow(ListLandValueSliceDetailsNewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandValueSliceDetailsNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListAdjustmentTypesDataTable : global::System.Data.TypedTableBase<ListAdjustmentTypesRow> {
            
            private global::System.Data.DataColumn columnAdjustmentTypeID;
            
            private global::System.Data.DataColumn columnAdjustmentTypeDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypesDataTable() {
                this.TableName = "ListAdjustmentTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAdjustmentTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListAdjustmentTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentTypeIDColumn {
                get {
                    return this.columnAdjustmentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjustmentTypeDescriptionColumn {
                get {
                    return this.columnAdjustmentTypeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypesRow this[int index] {
                get {
                    return ((ListAdjustmentTypesRow)(this.Rows[index]));
                }
            }
            
            public event ListAdjustmentTypesRowChangeEventHandler ListAdjustmentTypesRowChanging;
            
            public event ListAdjustmentTypesRowChangeEventHandler ListAdjustmentTypesRowChanged;
            
            public event ListAdjustmentTypesRowChangeEventHandler ListAdjustmentTypesRowDeleting;
            
            public event ListAdjustmentTypesRowChangeEventHandler ListAdjustmentTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListAdjustmentTypesRow(ListAdjustmentTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypesRow AddListAdjustmentTypesRow(byte AdjustmentTypeID, string AdjustmentTypeDescription) {
                ListAdjustmentTypesRow rowListAdjustmentTypesRow = ((ListAdjustmentTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AdjustmentTypeID,
                        AdjustmentTypeDescription};
                rowListAdjustmentTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListAdjustmentTypesRow);
                return rowListAdjustmentTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListAdjustmentTypesDataTable cln = ((ListAdjustmentTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListAdjustmentTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdjustmentTypeID = base.Columns["AdjustmentTypeID"];
                this.columnAdjustmentTypeDescription = base.Columns["AdjustmentTypeDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdjustmentTypeID = new global::System.Data.DataColumn("AdjustmentTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentTypeID);
                this.columnAdjustmentTypeDescription = new global::System.Data.DataColumn("AdjustmentTypeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustmentTypeDescription);
                this.columnAdjustmentTypeID.ReadOnly = true;
                this.columnAdjustmentTypeDescription.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypesRow NewListAdjustmentTypesRow() {
                return ((ListAdjustmentTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListAdjustmentTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListAdjustmentTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListAdjustmentTypesRowChanged != null)) {
                    this.ListAdjustmentTypesRowChanged(this, new ListAdjustmentTypesRowChangeEvent(((ListAdjustmentTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListAdjustmentTypesRowChanging != null)) {
                    this.ListAdjustmentTypesRowChanging(this, new ListAdjustmentTypesRowChangeEvent(((ListAdjustmentTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListAdjustmentTypesRowDeleted != null)) {
                    this.ListAdjustmentTypesRowDeleted(this, new ListAdjustmentTypesRowChangeEvent(((ListAdjustmentTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListAdjustmentTypesRowDeleting != null)) {
                    this.ListAdjustmentTypesRowDeleting(this, new ListAdjustmentTypesRowChangeEvent(((ListAdjustmentTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListAdjustmentTypesRow(ListAdjustmentTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListAdjustmentTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListShapesDataTable : global::System.Data.TypedTableBase<ListShapesRow> {
            
            private global::System.Data.DataColumn columnShapeID;
            
            private global::System.Data.DataColumn columnShapeDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListShapesDataTable() {
                this.TableName = "ListShapes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListShapesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListShapesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeIDColumn {
                get {
                    return this.columnShapeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeDescriptionColumn {
                get {
                    return this.columnShapeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListShapesRow this[int index] {
                get {
                    return ((ListShapesRow)(this.Rows[index]));
                }
            }
            
            public event ListShapesRowChangeEventHandler ListShapesRowChanging;
            
            public event ListShapesRowChangeEventHandler ListShapesRowChanged;
            
            public event ListShapesRowChangeEventHandler ListShapesRowDeleting;
            
            public event ListShapesRowChangeEventHandler ListShapesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListShapesRow(ListShapesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListShapesRow AddListShapesRow(short ShapeID, string ShapeDescription) {
                ListShapesRow rowListShapesRow = ((ListShapesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ShapeID,
                        ShapeDescription};
                rowListShapesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListShapesRow);
                return rowListShapesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListShapesDataTable cln = ((ListShapesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListShapesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnShapeID = base.Columns["ShapeID"];
                this.columnShapeDescription = base.Columns["ShapeDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnShapeID = new global::System.Data.DataColumn("ShapeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShapeID);
                this.columnShapeDescription = new global::System.Data.DataColumn("ShapeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShapeDescription);
                this.columnShapeID.ReadOnly = true;
                this.columnShapeDescription.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListShapesRow NewListShapesRow() {
                return ((ListShapesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListShapesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListShapesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListShapesRowChanged != null)) {
                    this.ListShapesRowChanged(this, new ListShapesRowChangeEvent(((ListShapesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListShapesRowChanging != null)) {
                    this.ListShapesRowChanging(this, new ListShapesRowChangeEvent(((ListShapesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListShapesRowDeleted != null)) {
                    this.ListShapesRowDeleted(this, new ListShapesRowChangeEvent(((ListShapesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListShapesRowDeleting != null)) {
                    this.ListShapesRowDeleting(this, new ListShapesRowChangeEvent(((ListShapesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListShapesRow(ListShapesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListShapesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListInfluenceTypeDataTable : global::System.Data.TypedTableBase<ListInfluenceTypeRow> {
            
            private global::System.Data.DataColumn columnInfluenceTypeID;
            
            private global::System.Data.DataColumn columnInfluenceType;
            
            private global::System.Data.DataColumn columnInfluence;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypeDataTable() {
                this.TableName = "ListInfluenceType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInfluenceTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListInfluenceTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeIDColumn {
                get {
                    return this.columnInfluenceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeColumn {
                get {
                    return this.columnInfluenceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceColumn {
                get {
                    return this.columnInfluence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypeRow this[int index] {
                get {
                    return ((ListInfluenceTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListInfluenceTypeRowChangeEventHandler ListInfluenceTypeRowChanging;
            
            public event ListInfluenceTypeRowChangeEventHandler ListInfluenceTypeRowChanged;
            
            public event ListInfluenceTypeRowChangeEventHandler ListInfluenceTypeRowDeleting;
            
            public event ListInfluenceTypeRowChangeEventHandler ListInfluenceTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListInfluenceTypeRow(ListInfluenceTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypeRow AddListInfluenceTypeRow(int InfluenceTypeID, string InfluenceType, decimal Influence, byte Type, string Description) {
                ListInfluenceTypeRow rowListInfluenceTypeRow = ((ListInfluenceTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InfluenceTypeID,
                        InfluenceType,
                        Influence,
                        Type,
                        Description};
                rowListInfluenceTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListInfluenceTypeRow);
                return rowListInfluenceTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListInfluenceTypeDataTable cln = ((ListInfluenceTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListInfluenceTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInfluenceTypeID = base.Columns["InfluenceTypeID"];
                this.columnInfluenceType = base.Columns["InfluenceType"];
                this.columnInfluence = base.Columns["Influence"];
                this.columnType = base.Columns["Type"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInfluenceTypeID = new global::System.Data.DataColumn("InfluenceTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID);
                this.columnInfluenceType = new global::System.Data.DataColumn("InfluenceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType);
                this.columnInfluence = new global::System.Data.DataColumn("Influence", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnInfluenceTypeID.ReadOnly = true;
                this.columnInfluenceType.MaxLength = 30;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypeRow NewListInfluenceTypeRow() {
                return ((ListInfluenceTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListInfluenceTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListInfluenceTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListInfluenceTypeRowChanged != null)) {
                    this.ListInfluenceTypeRowChanged(this, new ListInfluenceTypeRowChangeEvent(((ListInfluenceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListInfluenceTypeRowChanging != null)) {
                    this.ListInfluenceTypeRowChanging(this, new ListInfluenceTypeRowChangeEvent(((ListInfluenceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListInfluenceTypeRowDeleted != null)) {
                    this.ListInfluenceTypeRowDeleted(this, new ListInfluenceTypeRowChangeEvent(((ListInfluenceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListInfluenceTypeRowDeleting != null)) {
                    this.ListInfluenceTypeRowDeleting(this, new ListInfluenceTypeRowChangeEvent(((ListInfluenceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListInfluenceTypeRow(ListInfluenceTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListInfluenceTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandProgramDataTable : global::System.Data.TypedTableBase<ListLandProgramRow> {
            
            private global::System.Data.DataColumn columnProgramID;
            
            private global::System.Data.DataColumn columnProgram;
            
            private global::System.Data.DataColumn columnProgramAbv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandProgramDataTable() {
                this.TableName = "ListLandProgram";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandProgramDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandProgramDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramIDColumn {
                get {
                    return this.columnProgramID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramColumn {
                get {
                    return this.columnProgram;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramAbvColumn {
                get {
                    return this.columnProgramAbv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandProgramRow this[int index] {
                get {
                    return ((ListLandProgramRow)(this.Rows[index]));
                }
            }
            
            public event ListLandProgramRowChangeEventHandler ListLandProgramRowChanging;
            
            public event ListLandProgramRowChangeEventHandler ListLandProgramRowChanged;
            
            public event ListLandProgramRowChangeEventHandler ListLandProgramRowDeleting;
            
            public event ListLandProgramRowChangeEventHandler ListLandProgramRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandProgramRow(ListLandProgramRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandProgramRow AddListLandProgramRow(byte ProgramID, string Program, string ProgramAbv) {
                ListLandProgramRow rowListLandProgramRow = ((ListLandProgramRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProgramID,
                        Program,
                        ProgramAbv};
                rowListLandProgramRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandProgramRow);
                return rowListLandProgramRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandProgramRow FindByProgramID(byte ProgramID) {
                return ((ListLandProgramRow)(this.Rows.Find(new object[] {
                            ProgramID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandProgramDataTable cln = ((ListLandProgramDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandProgramDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProgramID = base.Columns["ProgramID"];
                this.columnProgram = base.Columns["Program"];
                this.columnProgramAbv = base.Columns["ProgramAbv"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProgramID = new global::System.Data.DataColumn("ProgramID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramID);
                this.columnProgram = new global::System.Data.DataColumn("Program", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgram);
                this.columnProgramAbv = new global::System.Data.DataColumn("ProgramAbv", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramAbv);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProgramID}, true));
                this.columnProgramID.AllowDBNull = false;
                this.columnProgramID.Unique = true;
                this.columnProgram.MaxLength = 50;
                this.columnProgramAbv.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandProgramRow NewListLandProgramRow() {
                return ((ListLandProgramRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandProgramRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandProgramRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandProgramRowChanged != null)) {
                    this.ListLandProgramRowChanged(this, new ListLandProgramRowChangeEvent(((ListLandProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandProgramRowChanging != null)) {
                    this.ListLandProgramRowChanging(this, new ListLandProgramRowChangeEvent(((ListLandProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandProgramRowDeleted != null)) {
                    this.ListLandProgramRowDeleted(this, new ListLandProgramRowChangeEvent(((ListLandProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandProgramRowDeleting != null)) {
                    this.ListLandProgramRowDeleting(this, new ListLandProgramRowChangeEvent(((ListLandProgramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandProgramRow(ListLandProgramRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandProgramDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetCfgLandTypeLabelDataTable : global::System.Data.TypedTableBase<GetCfgLandTypeLabelRow> {
            
            private global::System.Data.DataColumn columnLandTypeLabel1;
            
            private global::System.Data.DataColumn columnLandTypeLabel2;
            
            private global::System.Data.DataColumn columnLandTypeLabel3;
            
            private global::System.Data.DataColumn columnReportAsLabel;
            
            private global::System.Data.DataColumn columnIsChangeLabel;
            
            private global::System.Data.DataColumn columnSegmentRoundTo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCfgLandTypeLabelDataTable() {
                this.TableName = "GetCfgLandTypeLabel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCfgLandTypeLabelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetCfgLandTypeLabelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeLabel1Column {
                get {
                    return this.columnLandTypeLabel1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeLabel2Column {
                get {
                    return this.columnLandTypeLabel2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeLabel3Column {
                get {
                    return this.columnLandTypeLabel3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportAsLabelColumn {
                get {
                    return this.columnReportAsLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsChangeLabelColumn {
                get {
                    return this.columnIsChangeLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SegmentRoundToColumn {
                get {
                    return this.columnSegmentRoundTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCfgLandTypeLabelRow this[int index] {
                get {
                    return ((GetCfgLandTypeLabelRow)(this.Rows[index]));
                }
            }
            
            public event GetCfgLandTypeLabelRowChangeEventHandler GetCfgLandTypeLabelRowChanging;
            
            public event GetCfgLandTypeLabelRowChangeEventHandler GetCfgLandTypeLabelRowChanged;
            
            public event GetCfgLandTypeLabelRowChangeEventHandler GetCfgLandTypeLabelRowDeleting;
            
            public event GetCfgLandTypeLabelRowChangeEventHandler GetCfgLandTypeLabelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetCfgLandTypeLabelRow(GetCfgLandTypeLabelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCfgLandTypeLabelRow AddGetCfgLandTypeLabelRow(string LandTypeLabel1, string LandTypeLabel2, string LandTypeLabel3, string ReportAsLabel, bool IsChangeLabel, int SegmentRoundTo) {
                GetCfgLandTypeLabelRow rowGetCfgLandTypeLabelRow = ((GetCfgLandTypeLabelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeLabel1,
                        LandTypeLabel2,
                        LandTypeLabel3,
                        ReportAsLabel,
                        IsChangeLabel,
                        SegmentRoundTo};
                rowGetCfgLandTypeLabelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetCfgLandTypeLabelRow);
                return rowGetCfgLandTypeLabelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetCfgLandTypeLabelDataTable cln = ((GetCfgLandTypeLabelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetCfgLandTypeLabelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeLabel1 = base.Columns["LandTypeLabel1"];
                this.columnLandTypeLabel2 = base.Columns["LandTypeLabel2"];
                this.columnLandTypeLabel3 = base.Columns["LandTypeLabel3"];
                this.columnReportAsLabel = base.Columns["ReportAsLabel"];
                this.columnIsChangeLabel = base.Columns["IsChangeLabel"];
                this.columnSegmentRoundTo = base.Columns["SegmentRoundTo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeLabel1 = new global::System.Data.DataColumn("LandTypeLabel1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeLabel1);
                this.columnLandTypeLabel2 = new global::System.Data.DataColumn("LandTypeLabel2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeLabel2);
                this.columnLandTypeLabel3 = new global::System.Data.DataColumn("LandTypeLabel3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeLabel3);
                this.columnReportAsLabel = new global::System.Data.DataColumn("ReportAsLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportAsLabel);
                this.columnIsChangeLabel = new global::System.Data.DataColumn("IsChangeLabel", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsChangeLabel);
                this.columnSegmentRoundTo = new global::System.Data.DataColumn("SegmentRoundTo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSegmentRoundTo);
                this.columnLandTypeLabel1.MaxLength = 1000;
                this.columnLandTypeLabel2.MaxLength = 1000;
                this.columnLandTypeLabel3.MaxLength = 1000;
                this.columnReportAsLabel.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCfgLandTypeLabelRow NewGetCfgLandTypeLabelRow() {
                return ((GetCfgLandTypeLabelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetCfgLandTypeLabelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetCfgLandTypeLabelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetCfgLandTypeLabelRowChanged != null)) {
                    this.GetCfgLandTypeLabelRowChanged(this, new GetCfgLandTypeLabelRowChangeEvent(((GetCfgLandTypeLabelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetCfgLandTypeLabelRowChanging != null)) {
                    this.GetCfgLandTypeLabelRowChanging(this, new GetCfgLandTypeLabelRowChangeEvent(((GetCfgLandTypeLabelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetCfgLandTypeLabelRowDeleted != null)) {
                    this.GetCfgLandTypeLabelRowDeleted(this, new GetCfgLandTypeLabelRowChangeEvent(((GetCfgLandTypeLabelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetCfgLandTypeLabelRowDeleting != null)) {
                    this.GetCfgLandTypeLabelRowDeleting(this, new GetCfgLandTypeLabelRowChangeEvent(((GetCfgLandTypeLabelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetCfgLandTypeLabelRow(GetCfgLandTypeLabelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetCfgLandTypeLabelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetUseBaseDollarPerUnitDataTable : global::System.Data.TypedTableBase<GetUseBaseDollarPerUnitRow> {
            
            private global::System.Data.DataColumn columnUseBaseValue;
            
            private global::System.Data.DataColumn columnFinalUseValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUseBaseDollarPerUnitDataTable() {
                this.TableName = "GetUseBaseDollarPerUnit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetUseBaseDollarPerUnitDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetUseBaseDollarPerUnitDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseBaseValueColumn {
                get {
                    return this.columnUseBaseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalUseValueColumn {
                get {
                    return this.columnFinalUseValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUseBaseDollarPerUnitRow this[int index] {
                get {
                    return ((GetUseBaseDollarPerUnitRow)(this.Rows[index]));
                }
            }
            
            public event GetUseBaseDollarPerUnitRowChangeEventHandler GetUseBaseDollarPerUnitRowChanging;
            
            public event GetUseBaseDollarPerUnitRowChangeEventHandler GetUseBaseDollarPerUnitRowChanged;
            
            public event GetUseBaseDollarPerUnitRowChangeEventHandler GetUseBaseDollarPerUnitRowDeleting;
            
            public event GetUseBaseDollarPerUnitRowChangeEventHandler GetUseBaseDollarPerUnitRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetUseBaseDollarPerUnitRow(GetUseBaseDollarPerUnitRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUseBaseDollarPerUnitRow AddGetUseBaseDollarPerUnitRow(decimal UseBaseValue, decimal FinalUseValue) {
                GetUseBaseDollarPerUnitRow rowGetUseBaseDollarPerUnitRow = ((GetUseBaseDollarPerUnitRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UseBaseValue,
                        FinalUseValue};
                rowGetUseBaseDollarPerUnitRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetUseBaseDollarPerUnitRow);
                return rowGetUseBaseDollarPerUnitRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetUseBaseDollarPerUnitDataTable cln = ((GetUseBaseDollarPerUnitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetUseBaseDollarPerUnitDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUseBaseValue = base.Columns["UseBaseValue"];
                this.columnFinalUseValue = base.Columns["FinalUseValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUseBaseValue = new global::System.Data.DataColumn("UseBaseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseBaseValue);
                this.columnFinalUseValue = new global::System.Data.DataColumn("FinalUseValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalUseValue);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUseBaseDollarPerUnitRow NewGetUseBaseDollarPerUnitRow() {
                return ((GetUseBaseDollarPerUnitRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetUseBaseDollarPerUnitRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetUseBaseDollarPerUnitRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetUseBaseDollarPerUnitRowChanged != null)) {
                    this.GetUseBaseDollarPerUnitRowChanged(this, new GetUseBaseDollarPerUnitRowChangeEvent(((GetUseBaseDollarPerUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetUseBaseDollarPerUnitRowChanging != null)) {
                    this.GetUseBaseDollarPerUnitRowChanging(this, new GetUseBaseDollarPerUnitRowChangeEvent(((GetUseBaseDollarPerUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetUseBaseDollarPerUnitRowDeleted != null)) {
                    this.GetUseBaseDollarPerUnitRowDeleted(this, new GetUseBaseDollarPerUnitRowChangeEvent(((GetUseBaseDollarPerUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetUseBaseDollarPerUnitRowDeleting != null)) {
                    this.GetUseBaseDollarPerUnitRowDeleting(this, new GetUseBaseDollarPerUnitRowChangeEvent(((GetUseBaseDollarPerUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetUseBaseDollarPerUnitRow(GetUseBaseDollarPerUnitRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetUseBaseDollarPerUnitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListGridInfluencesDataTable : global::System.Data.TypedTableBase<ListGridInfluencesRow> {
            
            private global::System.Data.DataColumn columnInfluenceItemID;
            
            private global::System.Data.DataColumn columnInfluenceTypeID;
            
            private global::System.Data.DataColumn columnInfluenceType;
            
            private global::System.Data.DataColumn columnInfluence;
            
            private global::System.Data.DataColumn columnInfluenceDesc;
            
            private global::System.Data.DataColumn columnInfluenceValue;
            
            private global::System.Data.DataColumn columnLUID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesDataTable() {
                this.TableName = "ListGridInfluences";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGridInfluencesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListGridInfluencesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceItemIDColumn {
                get {
                    return this.columnInfluenceItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeIDColumn {
                get {
                    return this.columnInfluenceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceTypeColumn {
                get {
                    return this.columnInfluenceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceColumn {
                get {
                    return this.columnInfluence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceDescColumn {
                get {
                    return this.columnInfluenceDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InfluenceValueColumn {
                get {
                    return this.columnInfluenceValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LUIDColumn {
                get {
                    return this.columnLUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRow this[int index] {
                get {
                    return ((ListGridInfluencesRow)(this.Rows[index]));
                }
            }
            
            public event ListGridInfluencesRowChangeEventHandler ListGridInfluencesRowChanging;
            
            public event ListGridInfluencesRowChangeEventHandler ListGridInfluencesRowChanged;
            
            public event ListGridInfluencesRowChangeEventHandler ListGridInfluencesRowDeleting;
            
            public event ListGridInfluencesRowChangeEventHandler ListGridInfluencesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListGridInfluencesRow(ListGridInfluencesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRow AddListGridInfluencesRow(int InfluenceItemID, int InfluenceTypeID, string InfluenceType, decimal Influence, string InfluenceDesc, decimal InfluenceValue, int LUID) {
                ListGridInfluencesRow rowListGridInfluencesRow = ((ListGridInfluencesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InfluenceItemID,
                        InfluenceTypeID,
                        InfluenceType,
                        Influence,
                        InfluenceDesc,
                        InfluenceValue,
                        LUID};
                rowListGridInfluencesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListGridInfluencesRow);
                return rowListGridInfluencesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListGridInfluencesDataTable cln = ((ListGridInfluencesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListGridInfluencesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInfluenceItemID = base.Columns["InfluenceItemID"];
                this.columnInfluenceTypeID = base.Columns["InfluenceTypeID"];
                this.columnInfluenceType = base.Columns["InfluenceType"];
                this.columnInfluence = base.Columns["Influence"];
                this.columnInfluenceDesc = base.Columns["InfluenceDesc"];
                this.columnInfluenceValue = base.Columns["InfluenceValue"];
                this.columnLUID = base.Columns["LUID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInfluenceItemID = new global::System.Data.DataColumn("InfluenceItemID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceItemID);
                this.columnInfluenceTypeID = new global::System.Data.DataColumn("InfluenceTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceTypeID);
                this.columnInfluenceType = new global::System.Data.DataColumn("InfluenceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceType);
                this.columnInfluence = new global::System.Data.DataColumn("Influence", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluence);
                this.columnInfluenceDesc = new global::System.Data.DataColumn("InfluenceDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceDesc);
                this.columnInfluenceValue = new global::System.Data.DataColumn("InfluenceValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInfluenceValue);
                this.columnLUID = new global::System.Data.DataColumn("LUID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLUID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRow NewListGridInfluencesRow() {
                return ((ListGridInfluencesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListGridInfluencesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListGridInfluencesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListGridInfluencesRowChanged != null)) {
                    this.ListGridInfluencesRowChanged(this, new ListGridInfluencesRowChangeEvent(((ListGridInfluencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListGridInfluencesRowChanging != null)) {
                    this.ListGridInfluencesRowChanging(this, new ListGridInfluencesRowChangeEvent(((ListGridInfluencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListGridInfluencesRowDeleted != null)) {
                    this.ListGridInfluencesRowDeleted(this, new ListGridInfluencesRowChangeEvent(((ListGridInfluencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListGridInfluencesRowDeleting != null)) {
                    this.ListGridInfluencesRowDeleting(this, new ListGridInfluencesRowChangeEvent(((ListGridInfluencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListGridInfluencesRow(ListGridInfluencesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListGridInfluencesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandCodeLandTypeDataTable : global::System.Data.TypedTableBase<ListLandCodeLandTypeRow> {
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnLandTypeID1;
            
            private global::System.Data.DataColumn columnLandType1;
            
            private global::System.Data.DataColumn columnLandTypeID2;
            
            private global::System.Data.DataColumn columnLandType2;
            
            private global::System.Data.DataColumn columnLandTypeID3;
            
            private global::System.Data.DataColumn columnLandType3;
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeLandTypeDataTable() {
                this.TableName = "ListLandCodeLandType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeLandTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandCodeLandTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID1Column {
                get {
                    return this.columnLandTypeID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType1Column {
                get {
                    return this.columnLandType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID2Column {
                get {
                    return this.columnLandTypeID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType2Column {
                get {
                    return this.columnLandType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID3Column {
                get {
                    return this.columnLandTypeID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType3Column {
                get {
                    return this.columnLandType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeLandTypeRow this[int index] {
                get {
                    return ((ListLandCodeLandTypeRow)(this.Rows[index]));
                }
            }
            
            public event ListLandCodeLandTypeRowChangeEventHandler ListLandCodeLandTypeRowChanging;
            
            public event ListLandCodeLandTypeRowChangeEventHandler ListLandCodeLandTypeRowChanged;
            
            public event ListLandCodeLandTypeRowChangeEventHandler ListLandCodeLandTypeRowDeleting;
            
            public event ListLandCodeLandTypeRowChangeEventHandler ListLandCodeLandTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandCodeLandTypeRow(ListLandCodeLandTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeLandTypeRow AddListLandCodeLandTypeRow(string LandCode, int LandTypeID1, string LandType1, int LandTypeID2, string LandType2, int LandTypeID3, string LandType3, int RollYear) {
                ListLandCodeLandTypeRow rowListLandCodeLandTypeRow = ((ListLandCodeLandTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandCode,
                        LandTypeID1,
                        LandType1,
                        LandTypeID2,
                        LandType2,
                        LandTypeID3,
                        LandType3,
                        RollYear};
                rowListLandCodeLandTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandCodeLandTypeRow);
                return rowListLandCodeLandTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandCodeLandTypeDataTable cln = ((ListLandCodeLandTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandCodeLandTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandCode = base.Columns["LandCode"];
                this.columnLandTypeID1 = base.Columns["LandTypeID1"];
                this.columnLandType1 = base.Columns["LandType1"];
                this.columnLandTypeID2 = base.Columns["LandTypeID2"];
                this.columnLandType2 = base.Columns["LandType2"];
                this.columnLandTypeID3 = base.Columns["LandTypeID3"];
                this.columnLandType3 = base.Columns["LandType3"];
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnLandTypeID1 = new global::System.Data.DataColumn("LandTypeID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID1);
                this.columnLandType1 = new global::System.Data.DataColumn("LandType1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType1);
                this.columnLandTypeID2 = new global::System.Data.DataColumn("LandTypeID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID2);
                this.columnLandType2 = new global::System.Data.DataColumn("LandType2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType2);
                this.columnLandTypeID3 = new global::System.Data.DataColumn("LandTypeID3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID3);
                this.columnLandType3 = new global::System.Data.DataColumn("LandType3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType3);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandCode.MaxLength = 20;
                this.columnLandType1.MaxLength = 20;
                this.columnLandType2.MaxLength = 20;
                this.columnLandType3.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeLandTypeRow NewListLandCodeLandTypeRow() {
                return ((ListLandCodeLandTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandCodeLandTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandCodeLandTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandCodeLandTypeRowChanged != null)) {
                    this.ListLandCodeLandTypeRowChanged(this, new ListLandCodeLandTypeRowChangeEvent(((ListLandCodeLandTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandCodeLandTypeRowChanging != null)) {
                    this.ListLandCodeLandTypeRowChanging(this, new ListLandCodeLandTypeRowChangeEvent(((ListLandCodeLandTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandCodeLandTypeRowDeleted != null)) {
                    this.ListLandCodeLandTypeRowDeleted(this, new ListLandCodeLandTypeRowChangeEvent(((ListLandCodeLandTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandCodeLandTypeRowDeleting != null)) {
                    this.ListLandCodeLandTypeRowDeleting(this, new ListLandCodeLandTypeRowChangeEvent(((ListLandCodeLandTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandCodeLandTypeRow(ListLandCodeLandTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandCodeLandTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LandShapesTableDataTable : global::System.Data.TypedTableBase<LandShapesTableRow> {
            
            private global::System.Data.DataColumn columnLandShape;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandShapesTableDataTable() {
                this.TableName = "LandShapesTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LandShapesTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LandShapesTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandShapeColumn {
                get {
                    return this.columnLandShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandShapesTableRow this[int index] {
                get {
                    return ((LandShapesTableRow)(this.Rows[index]));
                }
            }
            
            public event LandShapesTableRowChangeEventHandler LandShapesTableRowChanging;
            
            public event LandShapesTableRowChangeEventHandler LandShapesTableRowChanged;
            
            public event LandShapesTableRowChangeEventHandler LandShapesTableRowDeleting;
            
            public event LandShapesTableRowChangeEventHandler LandShapesTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLandShapesTableRow(LandShapesTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandShapesTableRow AddLandShapesTableRow(string LandShape) {
                LandShapesTableRow rowLandShapesTableRow = ((LandShapesTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandShape};
                rowLandShapesTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLandShapesTableRow);
                return rowLandShapesTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LandShapesTableDataTable cln = ((LandShapesTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LandShapesTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandShape = base.Columns["LandShape"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandShape = new global::System.Data.DataColumn("LandShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandShape);
                this.columnLandShape.ReadOnly = true;
                this.columnLandShape.MaxLength = 11;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandShapesTableRow NewLandShapesTableRow() {
                return ((LandShapesTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LandShapesTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LandShapesTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LandShapesTableRowChanged != null)) {
                    this.LandShapesTableRowChanged(this, new LandShapesTableRowChangeEvent(((LandShapesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LandShapesTableRowChanging != null)) {
                    this.LandShapesTableRowChanging(this, new LandShapesTableRowChangeEvent(((LandShapesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LandShapesTableRowDeleted != null)) {
                    this.LandShapesTableRowDeleted(this, new LandShapesTableRowChangeEvent(((LandShapesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LandShapesTableRowDeleting != null)) {
                    this.LandShapesTableRowDeleting(this, new LandShapesTableRowChangeEvent(((LandShapesTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLandShapesTableRow(LandShapesTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36035LandData ds = new F36035LandData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LandShapesTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandType1Row : global::System.Data.DataRow {
            
            private ListLandType1DataTable tableListLandType1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandType1 = ((ListLandType1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandType1.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'ListLandType1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType1.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    if (this.IsLandTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandType1.LandTypeColumn]));
                    }
                }
                set {
                    this[this.tableListLandType1.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandType1.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandType1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType1.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandType1.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListLandType1.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableListLandType1.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableListLandType1.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableListLandType1.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableListLandType1.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandType1.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandType1.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandType1.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandType1.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandType2Row : global::System.Data.DataRow {
            
            private ListLandType2DataTable tableListLandType2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandType2 = ((ListLandType2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandType2.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'ListLandType2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType2.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    if (this.IsLandTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandType2.LandTypeColumn]));
                    }
                }
                set {
                    this[this.tableListLandType2.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandType2.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandType2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType2.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandType2.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListLandType2.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableListLandType2.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableListLandType2.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableListLandType2.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableListLandType2.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandType2.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandType2.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandType2.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandType2.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandType3Row : global::System.Data.DataRow {
            
            private ListLandType3DataTable tableListLandType3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandType3 = ((ListLandType3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandType3.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'ListLandType3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType3.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    if (this.IsLandTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandType3.LandTypeColumn]));
                    }
                }
                set {
                    this[this.tableListLandType3.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandType3.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandType3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType3.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandType3.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListLandType3.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableListLandType3.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableListLandType3.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableListLandType3.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableListLandType3.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandType3.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandType3.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandType3.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandType3.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandValueSliceDetailsRow : global::System.Data.DataRow {
            
            private ListLandValueSliceDetailsDataTable tableListLandValueSliceDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandValueSliceDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandValueSliceDetails = ((ListLandValueSliceDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LUID {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetails.LUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LUID\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetails.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListLandValueSliceDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID1 {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetails.LandTypeID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID1\' in table \'ListLandValueSliceDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LandTypeID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType1 {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.LandType1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType1\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LandType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID2 {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetails.LandTypeID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID2\' in table \'ListLandValueSliceDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LandTypeID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType2 {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.LandType2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType2\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LandType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID3 {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetails.LandTypeID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID3\' in table \'ListLandValueSliceDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LandTypeID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType3 {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.LandType3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType3\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LandType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportAS {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.ReportASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportAS\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.ReportASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value5 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.Value5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value5\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.Value5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AdjustmentType {
                get {
                    try {
                        return ((byte)(this[this.tableListLandValueSliceDetails.AdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentType\' in table \'ListLandValueSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.AdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adjustment {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.AdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adjustment\' in table \'ListLandValueSliceDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.AdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjDescription {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.AdjDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjDescription\' in table \'ListLandValueSliceDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.AdjDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PerUnit {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.PerUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerUnit\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.PerUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.UnitTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitType\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Units {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandValueSliceDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjTypeDescription {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.AdjTypeDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjTypeDescription\' in table \'ListLandValueSliceDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.AdjTypeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.UseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseValue\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.UseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UsePerUnit {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.UsePerUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsePerUnit\' in table \'ListLandValueSliceDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.UsePerUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.UseBaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseValue\' in table \'ListLandValueSliceDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.UseBaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte UseAdjustmentType {
                get {
                    try {
                        return ((byte)(this[this.tableListLandValueSliceDetails.UseAdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjustmentType\' in table \'ListLandValueSliceDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.UseAdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjustment {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.UseAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjustment\' in table \'ListLandValueSliceDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.UseAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjDescription {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.UseAdjDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjDescription\' in table \'ListLandValueSliceDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.UseAdjDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Multiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetails.MultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Multiplier\' in table \'ListLandValueSliceDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.MultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotWidth {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.LotWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotWidth\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LotWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotDepth {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.LotDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotDepth\' in table \'ListLandValueSliceDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.LotDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjTypeDescription {
                get {
                    try {
                        return ((string)(this[this.tableListLandValueSliceDetails.UseAdjTypeDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjTypeDescription\' in table \'ListLandValueSliceDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetails.UseAdjTypeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLUIDNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.LUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLUIDNull() {
                this[this.tableListLandValueSliceDetails.LUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListLandValueSliceDetails.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID1Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.LandTypeID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID1Null() {
                this[this.tableListLandValueSliceDetails.LandTypeID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType1Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.LandType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType1Null() {
                this[this.tableListLandValueSliceDetails.LandType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID2Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.LandTypeID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID2Null() {
                this[this.tableListLandValueSliceDetails.LandTypeID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType2Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.LandType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType2Null() {
                this[this.tableListLandValueSliceDetails.LandType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID3Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.LandTypeID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID3Null() {
                this[this.tableListLandValueSliceDetails.LandTypeID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType3Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.LandType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType3Null() {
                this[this.tableListLandValueSliceDetails.LandType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableListLandValueSliceDetails.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportASNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.ReportASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportASNull() {
                this[this.tableListLandValueSliceDetails.ReportASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableListLandValueSliceDetails.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableListLandValueSliceDetails.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableListLandValueSliceDetails.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableListLandValueSliceDetails.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableListLandValueSliceDetails.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableListLandValueSliceDetails.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableListLandValueSliceDetails.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableListLandValueSliceDetails.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableListLandValueSliceDetails.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableListLandValueSliceDetails.Break5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue5Null() {
                return this.IsNull(this.tableListLandValueSliceDetails.Value5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue5Null() {
                this[this.tableListLandValueSliceDetails.Value5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.AdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeNull() {
                this[this.tableListLandValueSliceDetails.AdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.AdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentNull() {
                this[this.tableListLandValueSliceDetails.AdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjDescriptionNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.AdjDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjDescriptionNull() {
                this[this.tableListLandValueSliceDetails.AdjDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerUnitNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.PerUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerUnitNull() {
                this[this.tableListLandValueSliceDetails.PerUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tableListLandValueSliceDetails.UnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableListLandValueSliceDetails.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableListLandValueSliceDetails.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandValueSliceDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjTypeDescriptionNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.AdjTypeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjTypeDescriptionNull() {
                this[this.tableListLandValueSliceDetails.AdjTypeDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.UseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseValueNull() {
                this[this.tableListLandValueSliceDetails.UseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsePerUnitNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.UsePerUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsePerUnitNull() {
                this[this.tableListLandValueSliceDetails.UsePerUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.UseBaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseValueNull() {
                this[this.tableListLandValueSliceDetails.UseBaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentTypeNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.UseAdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentTypeNull() {
                this[this.tableListLandValueSliceDetails.UseAdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.UseAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentNull() {
                this[this.tableListLandValueSliceDetails.UseAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjDescriptionNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.UseAdjDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjDescriptionNull() {
                this[this.tableListLandValueSliceDetails.UseAdjDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMultiplierNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.MultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMultiplierNull() {
                this[this.tableListLandValueSliceDetails.MultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotWidthNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.LotWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotWidthNull() {
                this[this.tableListLandValueSliceDetails.LotWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotDepthNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.LotDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotDepthNull() {
                this[this.tableListLandValueSliceDetails.LotDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjTypeDescriptionNull() {
                return this.IsNull(this.tableListLandValueSliceDetails.UseAdjTypeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjTypeDescriptionNull() {
                this[this.tableListLandValueSliceDetails.UseAdjTypeDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandCodeRow : global::System.Data.DataRow {
            
            private ListLandCodeDataTable tableListLandCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandCode = ((ListLandCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableListLandCode.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'ListLandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCode.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandCode.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCode.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableListLandCode.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableListLandCode.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandCode.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandCode.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Get_LandCodeRow : global::System.Data.DataRow {
            
            private Get_LandCodeDataTable tableGet_LandCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get_LandCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGet_LandCode = ((Get_LandCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LuVID {
                get {
                    try {
                        return ((int)(this[this.tableGet_LandCode.LuVIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LuVID\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.LuVIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableGet_LandCode.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportAS {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.ReportASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportAS\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.ReportASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.UnitTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitType\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.UseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseValue\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UsePerUnit {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.UsePerUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsePerUnit\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UsePerUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.UseBaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseValue\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseBaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte UseAdjustmentType {
                get {
                    try {
                        return ((byte)(this[this.tableGet_LandCode.UseAdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjustmentType\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseAdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjustment {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.UseAdjustmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjustment\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjDescription {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.UseAdjDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjDescription\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseAdjDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MrktMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.MrktMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MrktMultiplier\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.MrktMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotWidth {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.LotWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotWidth\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.LotWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotDepth {
                get {
                    try {
                        return ((string)(this[this.tableGet_LandCode.LotDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotDepth\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.LotDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VFormula {
                get {
                    if (this.IsVFormulaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGet_LandCode.VFormulaColumn]));
                    }
                }
                set {
                    this[this.tableGet_LandCode.VFormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCode.UseMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseMultiplier\' in table \'Get_LandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCode.UseMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLuVIDNull() {
                return this.IsNull(this.tableGet_LandCode.LuVIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLuVIDNull() {
                this[this.tableGet_LandCode.LuVIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableGet_LandCode.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableGet_LandCode.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableGet_LandCode.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableGet_LandCode.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportASNull() {
                return this.IsNull(this.tableGet_LandCode.ReportASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportASNull() {
                this[this.tableGet_LandCode.ReportASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tableGet_LandCode.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tableGet_LandCode.UnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableGet_LandCode.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableGet_LandCode.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableGet_LandCode.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableGet_LandCode.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableGet_LandCode.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableGet_LandCode.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableGet_LandCode.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableGet_LandCode.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableGet_LandCode.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableGet_LandCode.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableGet_LandCode.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableGet_LandCode.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableGet_LandCode.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableGet_LandCode.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableGet_LandCode.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableGet_LandCode.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableGet_LandCode.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableGet_LandCode.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseValueNull() {
                return this.IsNull(this.tableGet_LandCode.UseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseValueNull() {
                this[this.tableGet_LandCode.UseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsePerUnitNull() {
                return this.IsNull(this.tableGet_LandCode.UsePerUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsePerUnitNull() {
                this[this.tableGet_LandCode.UsePerUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseValueNull() {
                return this.IsNull(this.tableGet_LandCode.UseBaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseValueNull() {
                this[this.tableGet_LandCode.UseBaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentTypeNull() {
                return this.IsNull(this.tableGet_LandCode.UseAdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentTypeNull() {
                this[this.tableGet_LandCode.UseAdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentNull() {
                return this.IsNull(this.tableGet_LandCode.UseAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentNull() {
                this[this.tableGet_LandCode.UseAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjDescriptionNull() {
                return this.IsNull(this.tableGet_LandCode.UseAdjDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjDescriptionNull() {
                this[this.tableGet_LandCode.UseAdjDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMrktMultiplierNull() {
                return this.IsNull(this.tableGet_LandCode.MrktMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMrktMultiplierNull() {
                this[this.tableGet_LandCode.MrktMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotWidthNull() {
                return this.IsNull(this.tableGet_LandCode.LotWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotWidthNull() {
                this[this.tableGet_LandCode.LotWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotDepthNull() {
                return this.IsNull(this.tableGet_LandCode.LotDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotDepthNull() {
                this[this.tableGet_LandCode.LotDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVFormulaNull() {
                return this.IsNull(this.tableGet_LandCode.VFormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVFormulaNull() {
                this[this.tableGet_LandCode.VFormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseMultiplierNull() {
                return this.IsNull(this.tableGet_LandCode.UseMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseMultiplierNull() {
                this[this.tableGet_LandCode.UseMultiplierColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Get_LandCodeBaseValueRow : global::System.Data.DataRow {
            
            private Get_LandCodeBaseValueDataTable tableGet_LandCodeBaseValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Get_LandCodeBaseValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGet_LandCodeBaseValue = ((Get_LandCodeBaseValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCodeBaseValue.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'Get_LandCodeBaseValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCodeBaseValue.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGet_LandCodeBaseValue.UseBaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseValue\' in table \'Get_LandCodeBaseValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGet_LandCodeBaseValue.UseBaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableGet_LandCodeBaseValue.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableGet_LandCodeBaseValue.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseValueNull() {
                return this.IsNull(this.tableGet_LandCodeBaseValue.UseBaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseValueNull() {
                this[this.tableGet_LandCodeBaseValue.UseBaseValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetValueSliceValidTableRow : global::System.Data.DataRow {
            
            private GetValueSliceValidTableDataTable tableGetValueSliceValidTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetValueSliceValidTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetValueSliceValidTable = ((GetValueSliceValidTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpen {
                get {
                    try {
                        return ((bool)(this[this.tableGetValueSliceValidTable.IsOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsOpen\' in table \'GetValueSliceValidTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetValueSliceValidTable.IsOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsOpenNull() {
                return this.IsNull(this.tableGetValueSliceValidTable.IsOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsOpenNull() {
                this[this.tableGetValueSliceValidTable.IsOpenColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandValueSliceDetailsNewRow : global::System.Data.DataRow {
            
            private ListLandValueSliceDetailsNewDataTable tableListLandValueSliceDetailsNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandValueSliceDetailsNewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandValueSliceDetailsNew = ((ListLandValueSliceDetailsNewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LUID {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetailsNew.LUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LUID\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ValueSliceID {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetailsNew.ValueSliceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValueSliceID\' in table \'ListLandValueSliceDetailsNew\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.ValueSliceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RollYear {
                get {
                    try {
                        return ((short)(this[this.tableListLandValueSliceDetailsNew.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandValueSliceDetailsNew\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID1 {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetailsNew.LandTypeID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID1\' in table \'ListLandValueSliceDetailsNew\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LandTypeID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType1 {
                get {
                    if (this.IsLandType1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.LandType1Column]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LandType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID2 {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetailsNew.LandTypeID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID2\' in table \'ListLandValueSliceDetailsNew\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LandTypeID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType2 {
                get {
                    if (this.IsLandType2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.LandType2Column]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LandType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID3 {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetailsNew.LandTypeID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID3\' in table \'ListLandValueSliceDetailsNew\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LandTypeID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType3 {
                get {
                    if (this.IsLandType3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.LandType3Column]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LandType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    if (this.IsLandCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.LandCodeColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportAS {
                get {
                    if (this.IsReportASNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.ReportASColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.ReportASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.BaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseValue\' in table \'ListLandValueSliceDetailsNew\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.BaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Break1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break1\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Break1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Value1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value1\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Break2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break2\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Break2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Value2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value2\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Break3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break3\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Break3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Value3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value3\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Value3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break4 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Break4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break4\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Break4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value4 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Value4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value4\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Value4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Break5 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Break5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Break5\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Break5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value5 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Value5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value5\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Value5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AdjustmentType {
                get {
                    try {
                        return ((byte)(this[this.tableListLandValueSliceDetailsNew.AdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentType\' in table \'ListLandValueSliceDetailsNew\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.AdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjTypeDescription {
                get {
                    if (this.IsAdjTypeDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.AdjTypeDescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.AdjTypeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adjustment {
                get {
                    if (this.IsAdjustmentNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.AdjustmentColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.AdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjDescription {
                get {
                    if (this.IsAdjDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.AdjDescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.AdjDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitType {
                get {
                    if (this.IsUnitTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.UnitTypeColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.UnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Units {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'ListLandValueSliceDetailsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FinalMrktValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.FinalMrktValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalMrktValue\' in table \'ListLandValueSliceDetailsNew\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.FinalMrktValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FinalUseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.FinalUseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalUseValue\' in table \'ListLandValueSliceDetailsNew\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.FinalUseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.UseBaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseValue\' in table \'ListLandValueSliceDetailsNew\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.UseBaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte UseAdjustmentType {
                get {
                    try {
                        return ((byte)(this[this.tableListLandValueSliceDetailsNew.UseAdjustmentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseAdjustmentType\' in table \'ListLandValueSliceDetailsNew\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.UseAdjustmentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjTypeDescription {
                get {
                    if (this.IsUseAdjTypeDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.UseAdjTypeDescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.UseAdjTypeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjustment {
                get {
                    if (this.IsUseAdjustmentNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.UseAdjustmentColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.UseAdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseAdjDescription {
                get {
                    if (this.IsUseAdjDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.UseAdjDescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.UseAdjDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LotWidth {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.LotWidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotWidth\' in table \'ListLandValueSliceDetailsNew\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LotWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LotDepth {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.LotDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotDepth\' in table \'ListLandValueSliceDetailsNew\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LotDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandShape {
                get {
                    if (this.IsLandShapeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.LandShapeColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.LandShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Frontage {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.FrontageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frontage\' in table \'ListLandValueSliceDetailsNew\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.FrontageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseMrktValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.BaseMrktValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseMrktValue\' in table \'ListLandValueSliceDetailsNew\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.BaseMrktValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID1 {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetailsNew.InfluenceTypeID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID1\' in table \'ListLandValueSliceDetailsNew\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceTypeID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType1 {
                get {
                    if (this.IsInfluenceType1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.InfluenceType1Column]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Influence1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence1\' in table \'ListLandValueSliceDetailsNew\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Influence1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceDesc1 {
                get {
                    if (this.IsInfluenceDesc1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.InfluenceDesc1Column]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceDesc1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InfluenceValue1 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.InfluenceValue1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceValue1\' in table \'ListLandValueSliceDetailsNew\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceValue1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID2 {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetailsNew.InfluenceTypeID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID2\' in table \'ListLandValueSliceDetailsNew\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceTypeID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType2 {
                get {
                    if (this.IsInfluenceType2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.InfluenceType2Column]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Influence2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence2\' in table \'ListLandValueSliceDetailsNew\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Influence2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceDesc2 {
                get {
                    if (this.IsInfluenceDesc2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.InfluenceDesc2Column]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceDesc2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InfluenceValue2 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.InfluenceValue2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceValue2\' in table \'ListLandValueSliceDetailsNew\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceValue2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID3 {
                get {
                    try {
                        return ((int)(this[this.tableListLandValueSliceDetailsNew.InfluenceTypeID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID3\' in table \'ListLandValueSliceDetailsNew\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceTypeID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType3 {
                get {
                    if (this.IsInfluenceType3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.InfluenceType3Column]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.Influence3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence3\' in table \'ListLandValueSliceDetailsNew\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.Influence3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceDesc3 {
                get {
                    if (this.IsInfluenceDesc3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.InfluenceDesc3Column]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceDesc3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InfluenceValue3 {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.InfluenceValue3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceValue3\' in table \'ListLandValueSliceDetailsNew\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceValue3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ProgramID {
                get {
                    try {
                        return ((byte)(this[this.tableListLandValueSliceDetailsNew.ProgramIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgramID\' in table \'ListLandValueSliceDetailsNew\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.ProgramIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgramAbv {
                get {
                    if (this.IsProgramAbvNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.ProgramAbvColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.ProgramAbvColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Program {
                get {
                    if (this.IsProgramNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.ProgramColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.ProgramColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VFormula {
                get {
                    if (this.IsVFormulaNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandValueSliceDetailsNew.VFormulaColumn]));
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.VFormulaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseDollarPerUnit {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.BaseDollarPerUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseDollarPerUnit\' in table \'ListLandValueSliceDetailsNew\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.BaseDollarPerUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseDollarPerUnit {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.UseBaseDollarPerUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseDollarPerUnit\' in table \'ListLandValueSliceDetailsNe" +
                                "w\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.UseBaseDollarPerUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GridFinalValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.GridFinalValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GridFinalValue\' in table \'ListLandValueSliceDetailsNew\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.GridFinalValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GridUnitsTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.GridUnitsTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GridUnitsTotal\' in table \'ListLandValueSliceDetailsNew\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.GridUnitsTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MrktMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.MrktMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MrktMultiplier\' in table \'ListLandValueSliceDetailsNew\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.MrktMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.UseMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseMultiplier\' in table \'ListLandValueSliceDetailsNew\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.UseMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte InfluenceType1Value {
                get {
                    try {
                        return ((byte)(this[this.tableListLandValueSliceDetailsNew.InfluenceType1ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceType1Value\' in table \'ListLandValueSliceDetailsNew" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceType1ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte InfluenceType2Value {
                get {
                    try {
                        return ((byte)(this[this.tableListLandValueSliceDetailsNew.InfluenceType2ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceType2Value\' in table \'ListLandValueSliceDetailsNew" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceType2ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte InfluenceType3Value {
                get {
                    try {
                        return ((byte)(this[this.tableListLandValueSliceDetailsNew.InfluenceType3ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceType3Value\' in table \'ListLandValueSliceDetailsNew" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.InfluenceType3ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SrAcres {
                get {
                    try {
                        return ((decimal)(this[this.tableListLandValueSliceDetailsNew.SrAcresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SrAcres\' in table \'ListLandValueSliceDetailsNew\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.SrAcresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandConfigured {
                get {
                    try {
                        return ((bool)(this[this.tableListLandValueSliceDetailsNew.IsLandConfiguredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsLandConfigured\' in table \'ListLandValueSliceDetailsNew\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandValueSliceDetailsNew.IsLandConfiguredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLUIDNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLUIDNull() {
                this[this.tableListLandValueSliceDetailsNew.LUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueSliceIDNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.ValueSliceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueSliceIDNull() {
                this[this.tableListLandValueSliceDetailsNew.ValueSliceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandValueSliceDetailsNew.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID1Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LandTypeID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID1Null() {
                this[this.tableListLandValueSliceDetailsNew.LandTypeID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType1Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LandType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType1Null() {
                this[this.tableListLandValueSliceDetailsNew.LandType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID2Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LandTypeID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID2Null() {
                this[this.tableListLandValueSliceDetailsNew.LandTypeID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType2Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LandType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType2Null() {
                this[this.tableListLandValueSliceDetailsNew.LandType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID3Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LandTypeID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID3Null() {
                this[this.tableListLandValueSliceDetailsNew.LandTypeID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType3Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LandType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType3Null() {
                this[this.tableListLandValueSliceDetailsNew.LandType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableListLandValueSliceDetailsNew.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportASNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.ReportASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportASNull() {
                this[this.tableListLandValueSliceDetailsNew.ReportASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.BaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseValueNull() {
                this[this.tableListLandValueSliceDetailsNew.BaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak1Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Break1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak1Null() {
                this[this.tableListLandValueSliceDetailsNew.Break1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue1Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Value1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue1Null() {
                this[this.tableListLandValueSliceDetailsNew.Value1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak2Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Break2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak2Null() {
                this[this.tableListLandValueSliceDetailsNew.Break2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue2Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Value2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue2Null() {
                this[this.tableListLandValueSliceDetailsNew.Value2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak3Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Break3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak3Null() {
                this[this.tableListLandValueSliceDetailsNew.Break3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue3Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Value3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue3Null() {
                this[this.tableListLandValueSliceDetailsNew.Value3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak4Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Break4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak4Null() {
                this[this.tableListLandValueSliceDetailsNew.Break4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue4Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Value4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue4Null() {
                this[this.tableListLandValueSliceDetailsNew.Value4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreak5Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Break5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreak5Null() {
                this[this.tableListLandValueSliceDetailsNew.Break5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValue5Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Value5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValue5Null() {
                this[this.tableListLandValueSliceDetailsNew.Value5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.AdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeNull() {
                this[this.tableListLandValueSliceDetailsNew.AdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjTypeDescriptionNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.AdjTypeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjTypeDescriptionNull() {
                this[this.tableListLandValueSliceDetailsNew.AdjTypeDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.AdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentNull() {
                this[this.tableListLandValueSliceDetailsNew.AdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjDescriptionNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.AdjDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjDescriptionNull() {
                this[this.tableListLandValueSliceDetailsNew.AdjDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitTypeNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.UnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitTypeNull() {
                this[this.tableListLandValueSliceDetailsNew.UnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableListLandValueSliceDetailsNew.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalMrktValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.FinalMrktValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalMrktValueNull() {
                this[this.tableListLandValueSliceDetailsNew.FinalMrktValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalUseValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.FinalUseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalUseValueNull() {
                this[this.tableListLandValueSliceDetailsNew.FinalUseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.UseBaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseValueNull() {
                this[this.tableListLandValueSliceDetailsNew.UseBaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentTypeNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.UseAdjustmentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentTypeNull() {
                this[this.tableListLandValueSliceDetailsNew.UseAdjustmentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjTypeDescriptionNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.UseAdjTypeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjTypeDescriptionNull() {
                this[this.tableListLandValueSliceDetailsNew.UseAdjTypeDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjustmentNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.UseAdjustmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjustmentNull() {
                this[this.tableListLandValueSliceDetailsNew.UseAdjustmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseAdjDescriptionNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.UseAdjDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseAdjDescriptionNull() {
                this[this.tableListLandValueSliceDetailsNew.UseAdjDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotWidthNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LotWidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotWidthNull() {
                this[this.tableListLandValueSliceDetailsNew.LotWidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotDepthNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LotDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotDepthNull() {
                this[this.tableListLandValueSliceDetailsNew.LotDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandShapeNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.LandShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandShapeNull() {
                this[this.tableListLandValueSliceDetailsNew.LandShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrontageNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.FrontageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrontageNull() {
                this[this.tableListLandValueSliceDetailsNew.FrontageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseMrktValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.BaseMrktValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseMrktValueNull() {
                this[this.tableListLandValueSliceDetailsNew.BaseMrktValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeID1Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceTypeID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeID1Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceTypeID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceType1Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceType1Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluence1Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Influence1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluence1Null() {
                this[this.tableListLandValueSliceDetailsNew.Influence1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceDesc1Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceDesc1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceDesc1Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceDesc1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceValue1Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceValue1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceValue1Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceValue1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeID2Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceTypeID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeID2Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceTypeID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceType2Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceType2Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluence2Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Influence2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluence2Null() {
                this[this.tableListLandValueSliceDetailsNew.Influence2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceDesc2Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceDesc2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceDesc2Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceDesc2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceValue2Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceValue2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceValue2Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceValue2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeID3Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceTypeID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeID3Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceTypeID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceType3Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceType3Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluence3Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.Influence3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluence3Null() {
                this[this.tableListLandValueSliceDetailsNew.Influence3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceDesc3Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceDesc3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceDesc3Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceDesc3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceValue3Null() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceValue3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceValue3Null() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceValue3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramIDNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.ProgramIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramIDNull() {
                this[this.tableListLandValueSliceDetailsNew.ProgramIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramAbvNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.ProgramAbvColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramAbvNull() {
                this[this.tableListLandValueSliceDetailsNew.ProgramAbvColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.ProgramColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramNull() {
                this[this.tableListLandValueSliceDetailsNew.ProgramColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVFormulaNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.VFormulaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVFormulaNull() {
                this[this.tableListLandValueSliceDetailsNew.VFormulaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseDollarPerUnitNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.BaseDollarPerUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseDollarPerUnitNull() {
                this[this.tableListLandValueSliceDetailsNew.BaseDollarPerUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseDollarPerUnitNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.UseBaseDollarPerUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseDollarPerUnitNull() {
                this[this.tableListLandValueSliceDetailsNew.UseBaseDollarPerUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGridFinalValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.GridFinalValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGridFinalValueNull() {
                this[this.tableListLandValueSliceDetailsNew.GridFinalValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGridUnitsTotalNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.GridUnitsTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGridUnitsTotalNull() {
                this[this.tableListLandValueSliceDetailsNew.GridUnitsTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMrktMultiplierNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.MrktMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMrktMultiplierNull() {
                this[this.tableListLandValueSliceDetailsNew.MrktMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseMultiplierNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.UseMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseMultiplierNull() {
                this[this.tableListLandValueSliceDetailsNew.UseMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceType1ValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceType1ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceType1ValueNull() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceType1ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceType2ValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceType2ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceType2ValueNull() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceType2ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceType3ValueNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.InfluenceType3ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceType3ValueNull() {
                this[this.tableListLandValueSliceDetailsNew.InfluenceType3ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSrAcresNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.SrAcresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSrAcresNull() {
                this[this.tableListLandValueSliceDetailsNew.SrAcresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsLandConfiguredNull() {
                return this.IsNull(this.tableListLandValueSliceDetailsNew.IsLandConfiguredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsLandConfiguredNull() {
                this[this.tableListLandValueSliceDetailsNew.IsLandConfiguredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListAdjustmentTypesRow : global::System.Data.DataRow {
            
            private ListAdjustmentTypesDataTable tableListAdjustmentTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListAdjustmentTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListAdjustmentTypes = ((ListAdjustmentTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte AdjustmentTypeID {
                get {
                    try {
                        return ((byte)(this[this.tableListAdjustmentTypes.AdjustmentTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjustmentTypeID\' in table \'ListAdjustmentTypes\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableListAdjustmentTypes.AdjustmentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdjustmentTypeDescription {
                get {
                    if (this.IsAdjustmentTypeDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListAdjustmentTypes.AdjustmentTypeDescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListAdjustmentTypes.AdjustmentTypeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeIDNull() {
                return this.IsNull(this.tableListAdjustmentTypes.AdjustmentTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeIDNull() {
                this[this.tableListAdjustmentTypes.AdjustmentTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjustmentTypeDescriptionNull() {
                return this.IsNull(this.tableListAdjustmentTypes.AdjustmentTypeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjustmentTypeDescriptionNull() {
                this[this.tableListAdjustmentTypes.AdjustmentTypeDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListShapesRow : global::System.Data.DataRow {
            
            private ListShapesDataTable tableListShapes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListShapesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListShapes = ((ListShapesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ShapeID {
                get {
                    try {
                        return ((short)(this[this.tableListShapes.ShapeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShapeID\' in table \'ListShapes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListShapes.ShapeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShapeDescription {
                get {
                    if (this.IsShapeDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListShapes.ShapeDescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListShapes.ShapeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeIDNull() {
                return this.IsNull(this.tableListShapes.ShapeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeIDNull() {
                this[this.tableListShapes.ShapeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeDescriptionNull() {
                return this.IsNull(this.tableListShapes.ShapeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeDescriptionNull() {
                this[this.tableListShapes.ShapeDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListInfluenceTypeRow : global::System.Data.DataRow {
            
            private ListInfluenceTypeDataTable tableListInfluenceType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListInfluenceTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListInfluenceType = ((ListInfluenceTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListInfluenceType.InfluenceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID\' in table \'ListInfluenceType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInfluenceType.InfluenceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType {
                get {
                    if (this.IsInfluenceTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListInfluenceType.InfluenceTypeColumn]));
                    }
                }
                set {
                    this[this.tableListInfluenceType.InfluenceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence {
                get {
                    try {
                        return ((decimal)(this[this.tableListInfluenceType.InfluenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence\' in table \'ListInfluenceType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInfluenceType.InfluenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Type {
                get {
                    try {
                        return ((byte)(this[this.tableListInfluenceType.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'ListInfluenceType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListInfluenceType.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    if (this.IsDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListInfluenceType.DescriptionColumn]));
                    }
                }
                set {
                    this[this.tableListInfluenceType.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeIDNull() {
                return this.IsNull(this.tableListInfluenceType.InfluenceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeIDNull() {
                this[this.tableListInfluenceType.InfluenceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeNull() {
                return this.IsNull(this.tableListInfluenceType.InfluenceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeNull() {
                this[this.tableListInfluenceType.InfluenceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceNull() {
                return this.IsNull(this.tableListInfluenceType.InfluenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceNull() {
                this[this.tableListInfluenceType.InfluenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableListInfluenceType.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableListInfluenceType.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListInfluenceType.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListInfluenceType.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandProgramRow : global::System.Data.DataRow {
            
            private ListLandProgramDataTable tableListLandProgram;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandProgramRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandProgram = ((ListLandProgramDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte ProgramID {
                get {
                    return ((byte)(this[this.tableListLandProgram.ProgramIDColumn]));
                }
                set {
                    this[this.tableListLandProgram.ProgramIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Program {
                get {
                    if (this.IsProgramNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandProgram.ProgramColumn]));
                    }
                }
                set {
                    this[this.tableListLandProgram.ProgramColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgramAbv {
                get {
                    if (this.IsProgramAbvNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableListLandProgram.ProgramAbvColumn]));
                    }
                }
                set {
                    this[this.tableListLandProgram.ProgramAbvColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramNull() {
                return this.IsNull(this.tableListLandProgram.ProgramColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramNull() {
                this[this.tableListLandProgram.ProgramColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramAbvNull() {
                return this.IsNull(this.tableListLandProgram.ProgramAbvColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramAbvNull() {
                this[this.tableListLandProgram.ProgramAbvColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetCfgLandTypeLabelRow : global::System.Data.DataRow {
            
            private GetCfgLandTypeLabelDataTable tableGetCfgLandTypeLabel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetCfgLandTypeLabelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetCfgLandTypeLabel = ((GetCfgLandTypeLabelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandTypeLabel1 {
                get {
                    if (this.IsLandTypeLabel1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetCfgLandTypeLabel.LandTypeLabel1Column]));
                    }
                }
                set {
                    this[this.tableGetCfgLandTypeLabel.LandTypeLabel1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandTypeLabel2 {
                get {
                    if (this.IsLandTypeLabel2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetCfgLandTypeLabel.LandTypeLabel2Column]));
                    }
                }
                set {
                    this[this.tableGetCfgLandTypeLabel.LandTypeLabel2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandTypeLabel3 {
                get {
                    if (this.IsLandTypeLabel3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableGetCfgLandTypeLabel.LandTypeLabel3Column]));
                    }
                }
                set {
                    this[this.tableGetCfgLandTypeLabel.LandTypeLabel3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportAsLabel {
                get {
                    try {
                        return ((string)(this[this.tableGetCfgLandTypeLabel.ReportAsLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportAsLabel\' in table \'GetCfgLandTypeLabel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCfgLandTypeLabel.ReportAsLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangeLabel {
                get {
                    try {
                        return ((bool)(this[this.tableGetCfgLandTypeLabel.IsChangeLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsChangeLabel\' in table \'GetCfgLandTypeLabel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCfgLandTypeLabel.IsChangeLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SegmentRoundTo {
                get {
                    try {
                        return ((int)(this[this.tableGetCfgLandTypeLabel.SegmentRoundToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SegmentRoundTo\' in table \'GetCfgLandTypeLabel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetCfgLandTypeLabel.SegmentRoundToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeLabel1Null() {
                return this.IsNull(this.tableGetCfgLandTypeLabel.LandTypeLabel1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeLabel1Null() {
                this[this.tableGetCfgLandTypeLabel.LandTypeLabel1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeLabel2Null() {
                return this.IsNull(this.tableGetCfgLandTypeLabel.LandTypeLabel2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeLabel2Null() {
                this[this.tableGetCfgLandTypeLabel.LandTypeLabel2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeLabel3Null() {
                return this.IsNull(this.tableGetCfgLandTypeLabel.LandTypeLabel3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeLabel3Null() {
                this[this.tableGetCfgLandTypeLabel.LandTypeLabel3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportAsLabelNull() {
                return this.IsNull(this.tableGetCfgLandTypeLabel.ReportAsLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportAsLabelNull() {
                this[this.tableGetCfgLandTypeLabel.ReportAsLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsChangeLabelNull() {
                return this.IsNull(this.tableGetCfgLandTypeLabel.IsChangeLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsChangeLabelNull() {
                this[this.tableGetCfgLandTypeLabel.IsChangeLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSegmentRoundToNull() {
                return this.IsNull(this.tableGetCfgLandTypeLabel.SegmentRoundToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSegmentRoundToNull() {
                this[this.tableGetCfgLandTypeLabel.SegmentRoundToColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetUseBaseDollarPerUnitRow : global::System.Data.DataRow {
            
            private GetUseBaseDollarPerUnitDataTable tableGetUseBaseDollarPerUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetUseBaseDollarPerUnitRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetUseBaseDollarPerUnit = ((GetUseBaseDollarPerUnitDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UseBaseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetUseBaseDollarPerUnit.UseBaseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseBaseValue\' in table \'GetUseBaseDollarPerUnit\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetUseBaseDollarPerUnit.UseBaseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FinalUseValue {
                get {
                    try {
                        return ((decimal)(this[this.tableGetUseBaseDollarPerUnit.FinalUseValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalUseValue\' in table \'GetUseBaseDollarPerUnit\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetUseBaseDollarPerUnit.FinalUseValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBaseValueNull() {
                return this.IsNull(this.tableGetUseBaseDollarPerUnit.UseBaseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBaseValueNull() {
                this[this.tableGetUseBaseDollarPerUnit.UseBaseValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalUseValueNull() {
                return this.IsNull(this.tableGetUseBaseDollarPerUnit.FinalUseValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalUseValueNull() {
                this[this.tableGetUseBaseDollarPerUnit.FinalUseValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListGridInfluencesRow : global::System.Data.DataRow {
            
            private ListGridInfluencesDataTable tableListGridInfluences;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListGridInfluencesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListGridInfluences = ((ListGridInfluencesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceItemID {
                get {
                    try {
                        return ((int)(this[this.tableListGridInfluences.InfluenceItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceItemID\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InfluenceTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListGridInfluences.InfluenceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceTypeID\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceType {
                get {
                    try {
                        return ((string)(this[this.tableListGridInfluences.InfluenceTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceType\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Influence {
                get {
                    try {
                        return ((decimal)(this[this.tableListGridInfluences.InfluenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Influence\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InfluenceDesc {
                get {
                    try {
                        return ((string)(this[this.tableListGridInfluences.InfluenceDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceDesc\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InfluenceValue {
                get {
                    try {
                        return ((decimal)(this[this.tableListGridInfluences.InfluenceValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InfluenceValue\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.InfluenceValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LUID {
                get {
                    try {
                        return ((int)(this[this.tableListGridInfluences.LUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LUID\' in table \'ListGridInfluences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListGridInfluences.LUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceItemIDNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceItemIDNull() {
                this[this.tableListGridInfluences.InfluenceItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeIDNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeIDNull() {
                this[this.tableListGridInfluences.InfluenceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceTypeNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceTypeNull() {
                this[this.tableListGridInfluences.InfluenceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceNull() {
                this[this.tableListGridInfluences.InfluenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceDescNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceDescNull() {
                this[this.tableListGridInfluences.InfluenceDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInfluenceValueNull() {
                return this.IsNull(this.tableListGridInfluences.InfluenceValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInfluenceValueNull() {
                this[this.tableListGridInfluences.InfluenceValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLUIDNull() {
                return this.IsNull(this.tableListGridInfluences.LUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLUIDNull() {
                this[this.tableListGridInfluences.LUIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandCodeLandTypeRow : global::System.Data.DataRow {
            
            private ListLandCodeLandTypeDataTable tableListLandCodeLandType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeLandTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandCodeLandType = ((ListLandCodeLandTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeLandType.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'ListLandCodeLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeLandType.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID1 {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeLandType.LandTypeID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID1\' in table \'ListLandCodeLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeLandType.LandTypeID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType1 {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeLandType.LandType1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType1\' in table \'ListLandCodeLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeLandType.LandType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID2 {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeLandType.LandTypeID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID2\' in table \'ListLandCodeLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeLandType.LandTypeID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType2 {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeLandType.LandType2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType2\' in table \'ListLandCodeLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeLandType.LandType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID3 {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeLandType.LandTypeID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID3\' in table \'ListLandCodeLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeLandType.LandTypeID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType3 {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeLandType.LandType3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType3\' in table \'ListLandCodeLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeLandType.LandType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeLandType.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandCodeLandType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeLandType.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableListLandCodeLandType.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableListLandCodeLandType.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID1Null() {
                return this.IsNull(this.tableListLandCodeLandType.LandTypeID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID1Null() {
                this[this.tableListLandCodeLandType.LandTypeID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType1Null() {
                return this.IsNull(this.tableListLandCodeLandType.LandType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType1Null() {
                this[this.tableListLandCodeLandType.LandType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID2Null() {
                return this.IsNull(this.tableListLandCodeLandType.LandTypeID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID2Null() {
                this[this.tableListLandCodeLandType.LandTypeID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType2Null() {
                return this.IsNull(this.tableListLandCodeLandType.LandType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType2Null() {
                this[this.tableListLandCodeLandType.LandType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID3Null() {
                return this.IsNull(this.tableListLandCodeLandType.LandTypeID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID3Null() {
                this[this.tableListLandCodeLandType.LandTypeID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType3Null() {
                return this.IsNull(this.tableListLandCodeLandType.LandType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType3Null() {
                this[this.tableListLandCodeLandType.LandType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandCodeLandType.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandCodeLandType.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LandShapesTableRow : global::System.Data.DataRow {
            
            private LandShapesTableDataTable tableLandShapesTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LandShapesTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLandShapesTable = ((LandShapesTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandShape {
                get {
                    try {
                        return ((string)(this[this.tableLandShapesTable.LandShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandShape\' in table \'LandShapesTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLandShapesTable.LandShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandShapeNull() {
                return this.IsNull(this.tableLandShapesTable.LandShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandShapeNull() {
                this[this.tableLandShapesTable.LandShapeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandType1RowChangeEvent : global::System.EventArgs {
            
            private ListLandType1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1RowChangeEvent(ListLandType1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandType2RowChangeEvent : global::System.EventArgs {
            
            private ListLandType2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2RowChangeEvent(ListLandType2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandType3RowChangeEvent : global::System.EventArgs {
            
            private ListLandType3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3RowChangeEvent(ListLandType3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandValueSliceDetailsRowChangeEvent : global::System.EventArgs {
            
            private ListLandValueSliceDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsRowChangeEvent(ListLandValueSliceDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandCodeRowChangeEvent : global::System.EventArgs {
            
            private ListLandCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRowChangeEvent(ListLandCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Get_LandCodeRowChangeEvent : global::System.EventArgs {
            
            private Get_LandCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRowChangeEvent(Get_LandCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Get_LandCodeBaseValueRowChangeEvent : global::System.EventArgs {
            
            private Get_LandCodeBaseValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRowChangeEvent(Get_LandCodeBaseValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Get_LandCodeBaseValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetValueSliceValidTableRowChangeEvent : global::System.EventArgs {
            
            private GetValueSliceValidTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidTableRowChangeEvent(GetValueSliceValidTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetValueSliceValidTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandValueSliceDetailsNewRowChangeEvent : global::System.EventArgs {
            
            private ListLandValueSliceDetailsNewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsNewRowChangeEvent(ListLandValueSliceDetailsNewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandValueSliceDetailsNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListAdjustmentTypesRowChangeEvent : global::System.EventArgs {
            
            private ListAdjustmentTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypesRowChangeEvent(ListAdjustmentTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListAdjustmentTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListShapesRowChangeEvent : global::System.EventArgs {
            
            private ListShapesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListShapesRowChangeEvent(ListShapesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListShapesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListInfluenceTypeRowChangeEvent : global::System.EventArgs {
            
            private ListInfluenceTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypeRowChangeEvent(ListInfluenceTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListInfluenceTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandProgramRowChangeEvent : global::System.EventArgs {
            
            private ListLandProgramRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandProgramRowChangeEvent(ListLandProgramRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandProgramRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetCfgLandTypeLabelRowChangeEvent : global::System.EventArgs {
            
            private GetCfgLandTypeLabelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCfgLandTypeLabelRowChangeEvent(GetCfgLandTypeLabelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetCfgLandTypeLabelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetUseBaseDollarPerUnitRowChangeEvent : global::System.EventArgs {
            
            private GetUseBaseDollarPerUnitRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUseBaseDollarPerUnitRowChangeEvent(GetUseBaseDollarPerUnitRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUseBaseDollarPerUnitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListGridInfluencesRowChangeEvent : global::System.EventArgs {
            
            private ListGridInfluencesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRowChangeEvent(ListGridInfluencesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListGridInfluencesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandCodeLandTypeRowChangeEvent : global::System.EventArgs {
            
            private ListLandCodeLandTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeLandTypeRowChangeEvent(ListLandCodeLandTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeLandTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LandShapesTableRowChangeEvent : global::System.EventArgs {
            
            private LandShapesTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandShapesTableRowChangeEvent(LandShapesTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LandShapesTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591