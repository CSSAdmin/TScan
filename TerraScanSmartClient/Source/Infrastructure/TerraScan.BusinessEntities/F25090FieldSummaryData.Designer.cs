//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F25090FieldSummaryData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F25090FieldSummaryData : global::System.Data.DataSet {
        
        private QuickValueSummaryDataDataTable tableQuickValueSummaryData;
        
        private BuildingPermitsDataDataTable tableBuildingPermitsData;
        
        private PhotosDataDataTable tablePhotosData;
        
        private CorrectionDataDataTable tableCorrectionData;
        
        private HistoryDataDataTable tableHistoryData;
        
        private ParcelAncestryDataDataTable tableParcelAncestryData;
        
        private ParcelOwnershipDataDataTable tableParcelOwnershipData;
        
        private ParcelSaleHistoryDataDataTable tableParcelSaleHistoryData;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F25090FieldSummaryData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F25090FieldSummaryData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["QuickValueSummaryData"] != null)) {
                    base.Tables.Add(new QuickValueSummaryDataDataTable(ds.Tables["QuickValueSummaryData"]));
                }
                if ((ds.Tables["BuildingPermitsData"] != null)) {
                    base.Tables.Add(new BuildingPermitsDataDataTable(ds.Tables["BuildingPermitsData"]));
                }
                if ((ds.Tables["PhotosData"] != null)) {
                    base.Tables.Add(new PhotosDataDataTable(ds.Tables["PhotosData"]));
                }
                if ((ds.Tables["CorrectionData"] != null)) {
                    base.Tables.Add(new CorrectionDataDataTable(ds.Tables["CorrectionData"]));
                }
                if ((ds.Tables["HistoryData"] != null)) {
                    base.Tables.Add(new HistoryDataDataTable(ds.Tables["HistoryData"]));
                }
                if ((ds.Tables["ParcelAncestryData"] != null)) {
                    base.Tables.Add(new ParcelAncestryDataDataTable(ds.Tables["ParcelAncestryData"]));
                }
                if ((ds.Tables["ParcelOwnershipData"] != null)) {
                    base.Tables.Add(new ParcelOwnershipDataDataTable(ds.Tables["ParcelOwnershipData"]));
                }
                if ((ds.Tables["ParcelSaleHistoryData"] != null)) {
                    base.Tables.Add(new ParcelSaleHistoryDataDataTable(ds.Tables["ParcelSaleHistoryData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuickValueSummaryDataDataTable QuickValueSummaryData {
            get {
                return this.tableQuickValueSummaryData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BuildingPermitsDataDataTable BuildingPermitsData {
            get {
                return this.tableBuildingPermitsData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PhotosDataDataTable PhotosData {
            get {
                return this.tablePhotosData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CorrectionDataDataTable CorrectionData {
            get {
                return this.tableCorrectionData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HistoryDataDataTable HistoryData {
            get {
                return this.tableHistoryData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParcelAncestryDataDataTable ParcelAncestryData {
            get {
                return this.tableParcelAncestryData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParcelOwnershipDataDataTable ParcelOwnershipData {
            get {
                return this.tableParcelOwnershipData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParcelSaleHistoryDataDataTable ParcelSaleHistoryData {
            get {
                return this.tableParcelSaleHistoryData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F25090FieldSummaryData cln = ((F25090FieldSummaryData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["QuickValueSummaryData"] != null)) {
                    base.Tables.Add(new QuickValueSummaryDataDataTable(ds.Tables["QuickValueSummaryData"]));
                }
                if ((ds.Tables["BuildingPermitsData"] != null)) {
                    base.Tables.Add(new BuildingPermitsDataDataTable(ds.Tables["BuildingPermitsData"]));
                }
                if ((ds.Tables["PhotosData"] != null)) {
                    base.Tables.Add(new PhotosDataDataTable(ds.Tables["PhotosData"]));
                }
                if ((ds.Tables["CorrectionData"] != null)) {
                    base.Tables.Add(new CorrectionDataDataTable(ds.Tables["CorrectionData"]));
                }
                if ((ds.Tables["HistoryData"] != null)) {
                    base.Tables.Add(new HistoryDataDataTable(ds.Tables["HistoryData"]));
                }
                if ((ds.Tables["ParcelAncestryData"] != null)) {
                    base.Tables.Add(new ParcelAncestryDataDataTable(ds.Tables["ParcelAncestryData"]));
                }
                if ((ds.Tables["ParcelOwnershipData"] != null)) {
                    base.Tables.Add(new ParcelOwnershipDataDataTable(ds.Tables["ParcelOwnershipData"]));
                }
                if ((ds.Tables["ParcelSaleHistoryData"] != null)) {
                    base.Tables.Add(new ParcelSaleHistoryDataDataTable(ds.Tables["ParcelSaleHistoryData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableQuickValueSummaryData = ((QuickValueSummaryDataDataTable)(base.Tables["QuickValueSummaryData"]));
            if ((initTable == true)) {
                if ((this.tableQuickValueSummaryData != null)) {
                    this.tableQuickValueSummaryData.InitVars();
                }
            }
            this.tableBuildingPermitsData = ((BuildingPermitsDataDataTable)(base.Tables["BuildingPermitsData"]));
            if ((initTable == true)) {
                if ((this.tableBuildingPermitsData != null)) {
                    this.tableBuildingPermitsData.InitVars();
                }
            }
            this.tablePhotosData = ((PhotosDataDataTable)(base.Tables["PhotosData"]));
            if ((initTable == true)) {
                if ((this.tablePhotosData != null)) {
                    this.tablePhotosData.InitVars();
                }
            }
            this.tableCorrectionData = ((CorrectionDataDataTable)(base.Tables["CorrectionData"]));
            if ((initTable == true)) {
                if ((this.tableCorrectionData != null)) {
                    this.tableCorrectionData.InitVars();
                }
            }
            this.tableHistoryData = ((HistoryDataDataTable)(base.Tables["HistoryData"]));
            if ((initTable == true)) {
                if ((this.tableHistoryData != null)) {
                    this.tableHistoryData.InitVars();
                }
            }
            this.tableParcelAncestryData = ((ParcelAncestryDataDataTable)(base.Tables["ParcelAncestryData"]));
            if ((initTable == true)) {
                if ((this.tableParcelAncestryData != null)) {
                    this.tableParcelAncestryData.InitVars();
                }
            }
            this.tableParcelOwnershipData = ((ParcelOwnershipDataDataTable)(base.Tables["ParcelOwnershipData"]));
            if ((initTable == true)) {
                if ((this.tableParcelOwnershipData != null)) {
                    this.tableParcelOwnershipData.InitVars();
                }
            }
            this.tableParcelSaleHistoryData = ((ParcelSaleHistoryDataDataTable)(base.Tables["ParcelSaleHistoryData"]));
            if ((initTable == true)) {
                if ((this.tableParcelSaleHistoryData != null)) {
                    this.tableParcelSaleHistoryData.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F25090FieldSummaryData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F25090FieldSummaryData.xsd";
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableQuickValueSummaryData = new QuickValueSummaryDataDataTable();
            base.Tables.Add(this.tableQuickValueSummaryData);
            this.tableBuildingPermitsData = new BuildingPermitsDataDataTable();
            base.Tables.Add(this.tableBuildingPermitsData);
            this.tablePhotosData = new PhotosDataDataTable();
            base.Tables.Add(this.tablePhotosData);
            this.tableCorrectionData = new CorrectionDataDataTable();
            base.Tables.Add(this.tableCorrectionData);
            this.tableHistoryData = new HistoryDataDataTable();
            base.Tables.Add(this.tableHistoryData);
            this.tableParcelAncestryData = new ParcelAncestryDataDataTable();
            base.Tables.Add(this.tableParcelAncestryData);
            this.tableParcelOwnershipData = new ParcelOwnershipDataDataTable();
            base.Tables.Add(this.tableParcelOwnershipData);
            this.tableParcelSaleHistoryData = new ParcelSaleHistoryDataDataTable();
            base.Tables.Add(this.tableParcelSaleHistoryData);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuickValueSummaryData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBuildingPermitsData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePhotosData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCorrectionData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHistoryData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParcelAncestryData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParcelOwnershipData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParcelSaleHistoryData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F25090FieldSummaryData ds = new F25090FieldSummaryData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void QuickValueSummaryDataRowChangeEventHandler(object sender, QuickValueSummaryDataRowChangeEvent e);
        
        public delegate void BuildingPermitsDataRowChangeEventHandler(object sender, BuildingPermitsDataRowChangeEvent e);
        
        public delegate void PhotosDataRowChangeEventHandler(object sender, PhotosDataRowChangeEvent e);
        
        public delegate void CorrectionDataRowChangeEventHandler(object sender, CorrectionDataRowChangeEvent e);
        
        public delegate void HistoryDataRowChangeEventHandler(object sender, HistoryDataRowChangeEvent e);
        
        public delegate void ParcelAncestryDataRowChangeEventHandler(object sender, ParcelAncestryDataRowChangeEvent e);
        
        public delegate void ParcelOwnershipDataRowChangeEventHandler(object sender, ParcelOwnershipDataRowChangeEvent e);
        
        public delegate void ParcelSaleHistoryDataRowChangeEventHandler(object sender, ParcelSaleHistoryDataRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuickValueSummaryDataDataTable : global::System.Data.TypedTableBase<QuickValueSummaryDataRow> {
            
            private global::System.Data.DataColumn columnTotalPM;
            
            private global::System.Data.DataColumn columnLandPM;
            
            private global::System.Data.DataColumn columnImprovementsPM;
            
            private global::System.Data.DataColumn columnPermanentCropsPM;
            
            private global::System.Data.DataColumn columnTimberPM;
            
            private global::System.Data.DataColumn columnLandPA;
            
            private global::System.Data.DataColumn columnLandA;
            
            private global::System.Data.DataColumn columnLandM;
            
            private global::System.Data.DataColumn columnImprovementsPA;
            
            private global::System.Data.DataColumn columnImprovementsA;
            
            private global::System.Data.DataColumn columnImprovementsM;
            
            private global::System.Data.DataColumn columnPermanentCropsPA;
            
            private global::System.Data.DataColumn columnPermanentCropsA;
            
            private global::System.Data.DataColumn columnPermanentCropsM;
            
            private global::System.Data.DataColumn columnTotalsPA;
            
            private global::System.Data.DataColumn columnTotalsA;
            
            private global::System.Data.DataColumn columnTotalsM;
            
            private global::System.Data.DataColumn columnPARollYear;
            
            private global::System.Data.DataColumn columnMRollYear;
            
            private global::System.Data.DataColumn columnAMarket;
            
            private global::System.Data.DataColumn columnPMRollYear;
            
            private global::System.Data.DataColumn columnnewConstYear;
            
            private global::System.Data.DataColumn columnTimberA;
            
            private global::System.Data.DataColumn columnTimberM;
            
            private global::System.Data.DataColumn columnTimberPA;
            
            private global::System.Data.DataColumn columnnewConstCrop;
            
            private global::System.Data.DataColumn columnnewConstImpr;
            
            private global::System.Data.DataColumn columnnewConstLand;
            
            private global::System.Data.DataColumn columnnewConstTot;
            
            private global::System.Data.DataColumn columnFrozenValue;
            
            private global::System.Data.DataColumn columnExemptions;
            
            private global::System.Data.DataColumn columnRegularLevyValue;
            
            private global::System.Data.DataColumn columnExcessLevyValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickValueSummaryDataDataTable() {
                this.TableName = "QuickValueSummaryData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuickValueSummaryDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuickValueSummaryDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPMColumn {
                get {
                    return this.columnTotalPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandPMColumn {
                get {
                    return this.columnLandPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementsPMColumn {
                get {
                    return this.columnImprovementsPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermanentCropsPMColumn {
                get {
                    return this.columnPermanentCropsPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberPMColumn {
                get {
                    return this.columnTimberPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandPAColumn {
                get {
                    return this.columnLandPA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandAColumn {
                get {
                    return this.columnLandA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandMColumn {
                get {
                    return this.columnLandM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementsPAColumn {
                get {
                    return this.columnImprovementsPA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementsAColumn {
                get {
                    return this.columnImprovementsA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImprovementsMColumn {
                get {
                    return this.columnImprovementsM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermanentCropsPAColumn {
                get {
                    return this.columnPermanentCropsPA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermanentCropsAColumn {
                get {
                    return this.columnPermanentCropsA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermanentCropsMColumn {
                get {
                    return this.columnPermanentCropsM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalsPAColumn {
                get {
                    return this.columnTotalsPA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalsAColumn {
                get {
                    return this.columnTotalsA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalsMColumn {
                get {
                    return this.columnTotalsM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARollYearColumn {
                get {
                    return this.columnPARollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MRollYearColumn {
                get {
                    return this.columnMRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMarketColumn {
                get {
                    return this.columnAMarket;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PMRollYearColumn {
                get {
                    return this.columnPMRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newConstYearColumn {
                get {
                    return this.columnnewConstYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberAColumn {
                get {
                    return this.columnTimberA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberMColumn {
                get {
                    return this.columnTimberM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimberPAColumn {
                get {
                    return this.columnTimberPA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newConstCropColumn {
                get {
                    return this.columnnewConstCrop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newConstImprColumn {
                get {
                    return this.columnnewConstImpr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newConstLandColumn {
                get {
                    return this.columnnewConstLand;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newConstTotColumn {
                get {
                    return this.columnnewConstTot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrozenValueColumn {
                get {
                    return this.columnFrozenValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExemptionsColumn {
                get {
                    return this.columnExemptions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegularLevyValueColumn {
                get {
                    return this.columnRegularLevyValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExcessLevyValueColumn {
                get {
                    return this.columnExcessLevyValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickValueSummaryDataRow this[int index] {
                get {
                    return ((QuickValueSummaryDataRow)(this.Rows[index]));
                }
            }
            
            public event QuickValueSummaryDataRowChangeEventHandler QuickValueSummaryDataRowChanging;
            
            public event QuickValueSummaryDataRowChangeEventHandler QuickValueSummaryDataRowChanged;
            
            public event QuickValueSummaryDataRowChangeEventHandler QuickValueSummaryDataRowDeleting;
            
            public event QuickValueSummaryDataRowChangeEventHandler QuickValueSummaryDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuickValueSummaryDataRow(QuickValueSummaryDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickValueSummaryDataRow AddQuickValueSummaryDataRow(
                        decimal TotalPM, 
                        decimal LandPM, 
                        decimal ImprovementsPM, 
                        decimal PermanentCropsPM, 
                        decimal TimberPM, 
                        decimal LandPA, 
                        decimal LandA, 
                        decimal LandM, 
                        decimal ImprovementsPA, 
                        decimal ImprovementsA, 
                        decimal ImprovementsM, 
                        decimal PermanentCropsPA, 
                        decimal PermanentCropsA, 
                        decimal PermanentCropsM, 
                        decimal TotalsPA, 
                        decimal TotalsA, 
                        decimal TotalsM, 
                        int PARollYear, 
                        int MRollYear, 
                        int AMarket, 
                        int PMRollYear, 
                        int newConstYear, 
                        int TimberA, 
                        int TimberM, 
                        int TimberPA, 
                        decimal newConstCrop, 
                        decimal newConstImpr, 
                        decimal newConstLand, 
                        decimal newConstTot, 
                        decimal FrozenValue, 
                        string Exemptions, 
                        decimal RegularLevyValue, 
                        decimal ExcessLevyValue) {
                QuickValueSummaryDataRow rowQuickValueSummaryDataRow = ((QuickValueSummaryDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TotalPM,
                        LandPM,
                        ImprovementsPM,
                        PermanentCropsPM,
                        TimberPM,
                        LandPA,
                        LandA,
                        LandM,
                        ImprovementsPA,
                        ImprovementsA,
                        ImprovementsM,
                        PermanentCropsPA,
                        PermanentCropsA,
                        PermanentCropsM,
                        TotalsPA,
                        TotalsA,
                        TotalsM,
                        PARollYear,
                        MRollYear,
                        AMarket,
                        PMRollYear,
                        newConstYear,
                        TimberA,
                        TimberM,
                        TimberPA,
                        newConstCrop,
                        newConstImpr,
                        newConstLand,
                        newConstTot,
                        FrozenValue,
                        Exemptions,
                        RegularLevyValue,
                        ExcessLevyValue};
                rowQuickValueSummaryDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQuickValueSummaryDataRow);
                return rowQuickValueSummaryDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QuickValueSummaryDataDataTable cln = ((QuickValueSummaryDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QuickValueSummaryDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTotalPM = base.Columns["TotalPM"];
                this.columnLandPM = base.Columns["LandPM"];
                this.columnImprovementsPM = base.Columns["ImprovementsPM"];
                this.columnPermanentCropsPM = base.Columns["PermanentCropsPM"];
                this.columnTimberPM = base.Columns["TimberPM"];
                this.columnLandPA = base.Columns["LandPA"];
                this.columnLandA = base.Columns["LandA"];
                this.columnLandM = base.Columns["LandM"];
                this.columnImprovementsPA = base.Columns["ImprovementsPA"];
                this.columnImprovementsA = base.Columns["ImprovementsA"];
                this.columnImprovementsM = base.Columns["ImprovementsM"];
                this.columnPermanentCropsPA = base.Columns["PermanentCropsPA"];
                this.columnPermanentCropsA = base.Columns["PermanentCropsA"];
                this.columnPermanentCropsM = base.Columns["PermanentCropsM"];
                this.columnTotalsPA = base.Columns["TotalsPA"];
                this.columnTotalsA = base.Columns["TotalsA"];
                this.columnTotalsM = base.Columns["TotalsM"];
                this.columnPARollYear = base.Columns["PARollYear"];
                this.columnMRollYear = base.Columns["MRollYear"];
                this.columnAMarket = base.Columns["AMarket"];
                this.columnPMRollYear = base.Columns["PMRollYear"];
                this.columnnewConstYear = base.Columns["newConstYear"];
                this.columnTimberA = base.Columns["TimberA"];
                this.columnTimberM = base.Columns["TimberM"];
                this.columnTimberPA = base.Columns["TimberPA"];
                this.columnnewConstCrop = base.Columns["newConstCrop"];
                this.columnnewConstImpr = base.Columns["newConstImpr"];
                this.columnnewConstLand = base.Columns["newConstLand"];
                this.columnnewConstTot = base.Columns["newConstTot"];
                this.columnFrozenValue = base.Columns["FrozenValue"];
                this.columnExemptions = base.Columns["Exemptions"];
                this.columnRegularLevyValue = base.Columns["RegularLevyValue"];
                this.columnExcessLevyValue = base.Columns["ExcessLevyValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTotalPM = new global::System.Data.DataColumn("TotalPM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPM);
                this.columnLandPM = new global::System.Data.DataColumn("LandPM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandPM);
                this.columnImprovementsPM = new global::System.Data.DataColumn("ImprovementsPM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementsPM);
                this.columnPermanentCropsPM = new global::System.Data.DataColumn("PermanentCropsPM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermanentCropsPM);
                this.columnTimberPM = new global::System.Data.DataColumn("TimberPM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberPM);
                this.columnLandPA = new global::System.Data.DataColumn("LandPA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandPA);
                this.columnLandA = new global::System.Data.DataColumn("LandA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandA);
                this.columnLandM = new global::System.Data.DataColumn("LandM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandM);
                this.columnImprovementsPA = new global::System.Data.DataColumn("ImprovementsPA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementsPA);
                this.columnImprovementsA = new global::System.Data.DataColumn("ImprovementsA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementsA);
                this.columnImprovementsM = new global::System.Data.DataColumn("ImprovementsM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImprovementsM);
                this.columnPermanentCropsPA = new global::System.Data.DataColumn("PermanentCropsPA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermanentCropsPA);
                this.columnPermanentCropsA = new global::System.Data.DataColumn("PermanentCropsA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermanentCropsA);
                this.columnPermanentCropsM = new global::System.Data.DataColumn("PermanentCropsM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermanentCropsM);
                this.columnTotalsPA = new global::System.Data.DataColumn("TotalsPA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalsPA);
                this.columnTotalsA = new global::System.Data.DataColumn("TotalsA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalsA);
                this.columnTotalsM = new global::System.Data.DataColumn("TotalsM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalsM);
                this.columnPARollYear = new global::System.Data.DataColumn("PARollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARollYear);
                this.columnMRollYear = new global::System.Data.DataColumn("MRollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRollYear);
                this.columnAMarket = new global::System.Data.DataColumn("AMarket", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMarket);
                this.columnPMRollYear = new global::System.Data.DataColumn("PMRollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMRollYear);
                this.columnnewConstYear = new global::System.Data.DataColumn("newConstYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewConstYear);
                this.columnTimberA = new global::System.Data.DataColumn("TimberA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberA);
                this.columnTimberM = new global::System.Data.DataColumn("TimberM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberM);
                this.columnTimberPA = new global::System.Data.DataColumn("TimberPA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimberPA);
                this.columnnewConstCrop = new global::System.Data.DataColumn("newConstCrop", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewConstCrop);
                this.columnnewConstImpr = new global::System.Data.DataColumn("newConstImpr", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewConstImpr);
                this.columnnewConstLand = new global::System.Data.DataColumn("newConstLand", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewConstLand);
                this.columnnewConstTot = new global::System.Data.DataColumn("newConstTot", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewConstTot);
                this.columnFrozenValue = new global::System.Data.DataColumn("FrozenValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrozenValue);
                this.columnExemptions = new global::System.Data.DataColumn("Exemptions", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExemptions);
                this.columnRegularLevyValue = new global::System.Data.DataColumn("RegularLevyValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegularLevyValue);
                this.columnExcessLevyValue = new global::System.Data.DataColumn("ExcessLevyValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExcessLevyValue);
                this.columnExemptions.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickValueSummaryDataRow NewQuickValueSummaryDataRow() {
                return ((QuickValueSummaryDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QuickValueSummaryDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QuickValueSummaryDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuickValueSummaryDataRowChanged != null)) {
                    this.QuickValueSummaryDataRowChanged(this, new QuickValueSummaryDataRowChangeEvent(((QuickValueSummaryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuickValueSummaryDataRowChanging != null)) {
                    this.QuickValueSummaryDataRowChanging(this, new QuickValueSummaryDataRowChangeEvent(((QuickValueSummaryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuickValueSummaryDataRowDeleted != null)) {
                    this.QuickValueSummaryDataRowDeleted(this, new QuickValueSummaryDataRowChangeEvent(((QuickValueSummaryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuickValueSummaryDataRowDeleting != null)) {
                    this.QuickValueSummaryDataRowDeleting(this, new QuickValueSummaryDataRowChangeEvent(((QuickValueSummaryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuickValueSummaryDataRow(QuickValueSummaryDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25090FieldSummaryData ds = new F25090FieldSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuickValueSummaryDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BuildingPermitsDataDataTable : global::System.Data.TypedTableBase<BuildingPermitsDataRow> {
            
            private global::System.Data.DataColumn columnParcelId;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnEventTypeId;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnEstValue;
            
            private global::System.Data.DataColumn columnDescr;
            
            private global::System.Data.DataColumn columnPermitNumber;
            
            private global::System.Data.DataColumn columnVisited;
            
            private global::System.Data.DataColumn columnClosed;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnEventId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingPermitsDataDataTable() {
                this.TableName = "BuildingPermitsData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BuildingPermitsDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BuildingPermitsDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIdColumn {
                get {
                    return this.columnParcelId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventTypeIdColumn {
                get {
                    return this.columnEventTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstValueColumn {
                get {
                    return this.columnEstValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescrColumn {
                get {
                    return this.columnDescr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitNumberColumn {
                get {
                    return this.columnPermitNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitedColumn {
                get {
                    return this.columnVisited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClosedColumn {
                get {
                    return this.columnClosed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIdColumn {
                get {
                    return this.columnEventId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingPermitsDataRow this[int index] {
                get {
                    return ((BuildingPermitsDataRow)(this.Rows[index]));
                }
            }
            
            public event BuildingPermitsDataRowChangeEventHandler BuildingPermitsDataRowChanging;
            
            public event BuildingPermitsDataRowChangeEventHandler BuildingPermitsDataRowChanged;
            
            public event BuildingPermitsDataRowChangeEventHandler BuildingPermitsDataRowDeleting;
            
            public event BuildingPermitsDataRowChangeEventHandler BuildingPermitsDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBuildingPermitsDataRow(BuildingPermitsDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingPermitsDataRow AddBuildingPermitsDataRow(string ParcelNumber, int EventTypeId, System.DateTime EventDate, decimal EstValue, string Descr, string PermitNumber, System.DateTime Visited, System.DateTime Closed, string Description, int EventId) {
                BuildingPermitsDataRow rowBuildingPermitsDataRow = ((BuildingPermitsDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelNumber,
                        EventTypeId,
                        EventDate,
                        EstValue,
                        Descr,
                        PermitNumber,
                        Visited,
                        Closed,
                        Description,
                        EventId};
                rowBuildingPermitsDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBuildingPermitsDataRow);
                return rowBuildingPermitsDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BuildingPermitsDataDataTable cln = ((BuildingPermitsDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BuildingPermitsDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParcelId = base.Columns["ParcelId"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnEventTypeId = base.Columns["EventTypeId"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnEstValue = base.Columns["EstValue"];
                this.columnDescr = base.Columns["Descr"];
                this.columnPermitNumber = base.Columns["PermitNumber"];
                this.columnVisited = base.Columns["Visited"];
                this.columnClosed = base.Columns["Closed"];
                this.columnDescription = base.Columns["Description"];
                this.columnEventId = base.Columns["EventId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParcelId = new global::System.Data.DataColumn("ParcelId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelId);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnEventTypeId = new global::System.Data.DataColumn("EventTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventTypeId);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnEstValue = new global::System.Data.DataColumn("EstValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstValue);
                this.columnDescr = new global::System.Data.DataColumn("Descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescr);
                this.columnPermitNumber = new global::System.Data.DataColumn("PermitNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitNumber);
                this.columnVisited = new global::System.Data.DataColumn("Visited", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisited);
                this.columnClosed = new global::System.Data.DataColumn("Closed", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClosed);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnEventId = new global::System.Data.DataColumn("EventId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventId);
                this.columnParcelId.AutoIncrement = true;
                this.columnParcelNumber.MaxLength = 50;
                this.columnDescr.MaxLength = 100;
                this.columnPermitNumber.MaxLength = 30;
                this.columnDescription.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingPermitsDataRow NewBuildingPermitsDataRow() {
                return ((BuildingPermitsDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BuildingPermitsDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BuildingPermitsDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BuildingPermitsDataRowChanged != null)) {
                    this.BuildingPermitsDataRowChanged(this, new BuildingPermitsDataRowChangeEvent(((BuildingPermitsDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BuildingPermitsDataRowChanging != null)) {
                    this.BuildingPermitsDataRowChanging(this, new BuildingPermitsDataRowChangeEvent(((BuildingPermitsDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BuildingPermitsDataRowDeleted != null)) {
                    this.BuildingPermitsDataRowDeleted(this, new BuildingPermitsDataRowChangeEvent(((BuildingPermitsDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BuildingPermitsDataRowDeleting != null)) {
                    this.BuildingPermitsDataRowDeleting(this, new BuildingPermitsDataRowChangeEvent(((BuildingPermitsDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBuildingPermitsDataRow(BuildingPermitsDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25090FieldSummaryData ds = new F25090FieldSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BuildingPermitsDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PhotosDataDataTable : global::System.Data.TypedTableBase<PhotosDataRow> {
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnFunctionName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnFileID;
            
            private global::System.Data.DataColumn columnExtension;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhotosDataDataTable() {
                this.TableName = "PhotosData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PhotosDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PhotosDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionNameColumn {
                get {
                    return this.columnFunctionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileIDColumn {
                get {
                    return this.columnFileID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhotosDataRow this[int index] {
                get {
                    return ((PhotosDataRow)(this.Rows[index]));
                }
            }
            
            public event PhotosDataRowChangeEventHandler PhotosDataRowChanging;
            
            public event PhotosDataRowChangeEventHandler PhotosDataRowChanged;
            
            public event PhotosDataRowChangeEventHandler PhotosDataRowDeleting;
            
            public event PhotosDataRowChangeEventHandler PhotosDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPhotosDataRow(PhotosDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhotosDataRow AddPhotosDataRow(System.DateTime EventDate, string FunctionName, string Description, int FileID, string Extension) {
                PhotosDataRow rowPhotosDataRow = ((PhotosDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EventDate,
                        FunctionName,
                        Description,
                        FileID,
                        Extension};
                rowPhotosDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPhotosDataRow);
                return rowPhotosDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PhotosDataDataTable cln = ((PhotosDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PhotosDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventDate = base.Columns["EventDate"];
                this.columnFunctionName = base.Columns["FunctionName"];
                this.columnDescription = base.Columns["Description"];
                this.columnFileID = base.Columns["FileID"];
                this.columnExtension = base.Columns["Extension"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnFunctionName = new global::System.Data.DataColumn("FunctionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunctionName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnFileID = new global::System.Data.DataColumn("FileID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileID);
                this.columnExtension = new global::System.Data.DataColumn("Extension", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtension);
                this.columnFunctionName.MaxLength = 50;
                this.columnDescription.MaxLength = 500;
                this.columnExtension.MaxLength = 6;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhotosDataRow NewPhotosDataRow() {
                return ((PhotosDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PhotosDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PhotosDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PhotosDataRowChanged != null)) {
                    this.PhotosDataRowChanged(this, new PhotosDataRowChangeEvent(((PhotosDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PhotosDataRowChanging != null)) {
                    this.PhotosDataRowChanging(this, new PhotosDataRowChangeEvent(((PhotosDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PhotosDataRowDeleted != null)) {
                    this.PhotosDataRowDeleted(this, new PhotosDataRowChangeEvent(((PhotosDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PhotosDataRowDeleting != null)) {
                    this.PhotosDataRowDeleting(this, new PhotosDataRowChangeEvent(((PhotosDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePhotosDataRow(PhotosDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25090FieldSummaryData ds = new F25090FieldSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PhotosDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CorrectionDataDataTable : global::System.Data.TypedTableBase<CorrectionDataRow> {
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnprvval;
            
            private global::System.Data.DataColumn columnnewval;
            
            private global::System.Data.DataColumn columnorigtax;
            
            private global::System.Data.DataColumn columnnewtax;
            
            private global::System.Data.DataColumn columnchange;
            
            private global::System.Data.DataColumn columnNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectionDataDataTable() {
                this.TableName = "CorrectionData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CorrectionDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CorrectionDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prvvalColumn {
                get {
                    return this.columnprvval;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newvalColumn {
                get {
                    return this.columnnewval;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn origtaxColumn {
                get {
                    return this.columnorigtax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newtaxColumn {
                get {
                    return this.columnnewtax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn changeColumn {
                get {
                    return this.columnchange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectionDataRow this[int index] {
                get {
                    return ((CorrectionDataRow)(this.Rows[index]));
                }
            }
            
            public event CorrectionDataRowChangeEventHandler CorrectionDataRowChanging;
            
            public event CorrectionDataRowChangeEventHandler CorrectionDataRowChanged;
            
            public event CorrectionDataRowChangeEventHandler CorrectionDataRowDeleting;
            
            public event CorrectionDataRowChangeEventHandler CorrectionDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCorrectionDataRow(CorrectionDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectionDataRow AddCorrectionDataRow(System.DateTime Date, string Type, int prvval, int newval, decimal origtax, decimal newtax, decimal change, string Note) {
                CorrectionDataRow rowCorrectionDataRow = ((CorrectionDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Date,
                        Type,
                        prvval,
                        newval,
                        origtax,
                        newtax,
                        change,
                        Note};
                rowCorrectionDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCorrectionDataRow);
                return rowCorrectionDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CorrectionDataDataTable cln = ((CorrectionDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CorrectionDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDate = base.Columns["Date"];
                this.columnType = base.Columns["Type"];
                this.columnprvval = base.Columns["prvval"];
                this.columnnewval = base.Columns["newval"];
                this.columnorigtax = base.Columns["origtax"];
                this.columnnewtax = base.Columns["newtax"];
                this.columnchange = base.Columns["change"];
                this.columnNote = base.Columns["Note"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnprvval = new global::System.Data.DataColumn("prvval", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprvval);
                this.columnnewval = new global::System.Data.DataColumn("newval", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewval);
                this.columnorigtax = new global::System.Data.DataColumn("origtax", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnorigtax);
                this.columnnewtax = new global::System.Data.DataColumn("newtax", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewtax);
                this.columnchange = new global::System.Data.DataColumn("change", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchange);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnType.MaxLength = 50;
                this.columnNote.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectionDataRow NewCorrectionDataRow() {
                return ((CorrectionDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CorrectionDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CorrectionDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CorrectionDataRowChanged != null)) {
                    this.CorrectionDataRowChanged(this, new CorrectionDataRowChangeEvent(((CorrectionDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CorrectionDataRowChanging != null)) {
                    this.CorrectionDataRowChanging(this, new CorrectionDataRowChangeEvent(((CorrectionDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CorrectionDataRowDeleted != null)) {
                    this.CorrectionDataRowDeleted(this, new CorrectionDataRowChangeEvent(((CorrectionDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CorrectionDataRowDeleting != null)) {
                    this.CorrectionDataRowDeleting(this, new CorrectionDataRowChangeEvent(((CorrectionDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCorrectionDataRow(CorrectionDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25090FieldSummaryData ds = new F25090FieldSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CorrectionDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HistoryDataDataTable : global::System.Data.TypedTableBase<HistoryDataRow> {
            
            private global::System.Data.DataColumn columnparNum;
            
            private global::System.Data.DataColumn columnrollyear;
            
            private global::System.Data.DataColumn columnposttype;
            
            private global::System.Data.DataColumn columnorigval;
            
            private global::System.Data.DataColumn columnorigtax;
            
            private global::System.Data.DataColumn columnstatementid;
            
            private global::System.Data.DataColumn columnbalanceD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryDataDataTable() {
                this.TableName = "HistoryData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HistoryDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HistoryDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parNumColumn {
                get {
                    return this.columnparNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rollyearColumn {
                get {
                    return this.columnrollyear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn posttypeColumn {
                get {
                    return this.columnposttype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn origvalColumn {
                get {
                    return this.columnorigval;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn origtaxColumn {
                get {
                    return this.columnorigtax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statementidColumn {
                get {
                    return this.columnstatementid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn balanceDColumn {
                get {
                    return this.columnbalanceD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryDataRow this[int index] {
                get {
                    return ((HistoryDataRow)(this.Rows[index]));
                }
            }
            
            public event HistoryDataRowChangeEventHandler HistoryDataRowChanging;
            
            public event HistoryDataRowChangeEventHandler HistoryDataRowChanged;
            
            public event HistoryDataRowChangeEventHandler HistoryDataRowDeleting;
            
            public event HistoryDataRowChangeEventHandler HistoryDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHistoryDataRow(HistoryDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryDataRow AddHistoryDataRow(string parNum, short rollyear, string posttype, int origval, decimal origtax, decimal balanceD) {
                HistoryDataRow rowHistoryDataRow = ((HistoryDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        parNum,
                        rollyear,
                        posttype,
                        origval,
                        origtax,
                        null,
                        balanceD};
                rowHistoryDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHistoryDataRow);
                return rowHistoryDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HistoryDataDataTable cln = ((HistoryDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HistoryDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnparNum = base.Columns["parNum"];
                this.columnrollyear = base.Columns["rollyear"];
                this.columnposttype = base.Columns["posttype"];
                this.columnorigval = base.Columns["origval"];
                this.columnorigtax = base.Columns["origtax"];
                this.columnstatementid = base.Columns["statementid"];
                this.columnbalanceD = base.Columns["balanceD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnparNum = new global::System.Data.DataColumn("parNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparNum);
                this.columnrollyear = new global::System.Data.DataColumn("rollyear", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrollyear);
                this.columnposttype = new global::System.Data.DataColumn("posttype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnposttype);
                this.columnorigval = new global::System.Data.DataColumn("origval", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnorigval);
                this.columnorigtax = new global::System.Data.DataColumn("origtax", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnorigtax);
                this.columnstatementid = new global::System.Data.DataColumn("statementid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatementid);
                this.columnbalanceD = new global::System.Data.DataColumn("balanceD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbalanceD);
                this.columnparNum.MaxLength = 50;
                this.columnposttype.MaxLength = 50;
                this.columnstatementid.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryDataRow NewHistoryDataRow() {
                return ((HistoryDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HistoryDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HistoryDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HistoryDataRowChanged != null)) {
                    this.HistoryDataRowChanged(this, new HistoryDataRowChangeEvent(((HistoryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HistoryDataRowChanging != null)) {
                    this.HistoryDataRowChanging(this, new HistoryDataRowChangeEvent(((HistoryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HistoryDataRowDeleted != null)) {
                    this.HistoryDataRowDeleted(this, new HistoryDataRowChangeEvent(((HistoryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HistoryDataRowDeleting != null)) {
                    this.HistoryDataRowDeleting(this, new HistoryDataRowChangeEvent(((HistoryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHistoryDataRow(HistoryDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25090FieldSummaryData ds = new F25090FieldSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HistoryDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParcelAncestryDataDataTable : global::System.Data.TypedTableBase<ParcelAncestryDataRow> {
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnEventType;
            
            private global::System.Data.DataColumn columnRelation;
            
            private global::System.Data.DataColumn columnParcelNumber;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnProcessedBy;
            
            private global::System.Data.DataColumn columnEventTypeID;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelAncestryDataDataTable() {
                this.TableName = "ParcelAncestryData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelAncestryDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParcelAncestryDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventTypeColumn {
                get {
                    return this.columnEventType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationColumn {
                get {
                    return this.columnRelation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelNumberColumn {
                get {
                    return this.columnParcelNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessedByColumn {
                get {
                    return this.columnProcessedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventTypeIDColumn {
                get {
                    return this.columnEventTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelAncestryDataRow this[int index] {
                get {
                    return ((ParcelAncestryDataRow)(this.Rows[index]));
                }
            }
            
            public event ParcelAncestryDataRowChangeEventHandler ParcelAncestryDataRowChanging;
            
            public event ParcelAncestryDataRowChangeEventHandler ParcelAncestryDataRowChanged;
            
            public event ParcelAncestryDataRowChangeEventHandler ParcelAncestryDataRowDeleting;
            
            public event ParcelAncestryDataRowChangeEventHandler ParcelAncestryDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParcelAncestryDataRow(ParcelAncestryDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelAncestryDataRow AddParcelAncestryDataRow(string EventDate, string EventType, string Relation, string ParcelNumber, string Status, string ProcessedBy, int EventTypeID, int EventID) {
                ParcelAncestryDataRow rowParcelAncestryDataRow = ((ParcelAncestryDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EventDate,
                        EventType,
                        Relation,
                        ParcelNumber,
                        Status,
                        ProcessedBy,
                        EventTypeID,
                        EventID,
                        null};
                rowParcelAncestryDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParcelAncestryDataRow);
                return rowParcelAncestryDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParcelAncestryDataDataTable cln = ((ParcelAncestryDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParcelAncestryDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventDate = base.Columns["EventDate"];
                this.columnEventType = base.Columns["EventType"];
                this.columnRelation = base.Columns["Relation"];
                this.columnParcelNumber = base.Columns["ParcelNumber"];
                this.columnStatus = base.Columns["Status"];
                this.columnProcessedBy = base.Columns["ProcessedBy"];
                this.columnEventTypeID = base.Columns["EventTypeID"];
                this.columnEventID = base.Columns["EventID"];
                this.columnParcelID = base.Columns["ParcelID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnEventType = new global::System.Data.DataColumn("EventType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventType);
                this.columnRelation = new global::System.Data.DataColumn("Relation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelation);
                this.columnParcelNumber = new global::System.Data.DataColumn("ParcelNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelNumber);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnProcessedBy = new global::System.Data.DataColumn("ProcessedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessedBy);
                this.columnEventTypeID = new global::System.Data.DataColumn("EventTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventTypeID);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnEventDate.ReadOnly = true;
                this.columnEventDate.MaxLength = 10;
                this.columnEventType.ReadOnly = true;
                this.columnEventType.MaxLength = 50;
                this.columnRelation.ReadOnly = true;
                this.columnRelation.MaxLength = 6;
                this.columnParcelNumber.ReadOnly = true;
                this.columnParcelNumber.MaxLength = 83;
                this.columnStatus.ReadOnly = true;
                this.columnStatus.MaxLength = 50;
                this.columnProcessedBy.ReadOnly = true;
                this.columnProcessedBy.MaxLength = 50;
                this.columnEventTypeID.ReadOnly = true;
                this.columnEventID.ReadOnly = true;
                this.columnParcelID.AutoIncrement = true;
                this.columnParcelID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelAncestryDataRow NewParcelAncestryDataRow() {
                return ((ParcelAncestryDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParcelAncestryDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParcelAncestryDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParcelAncestryDataRowChanged != null)) {
                    this.ParcelAncestryDataRowChanged(this, new ParcelAncestryDataRowChangeEvent(((ParcelAncestryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParcelAncestryDataRowChanging != null)) {
                    this.ParcelAncestryDataRowChanging(this, new ParcelAncestryDataRowChangeEvent(((ParcelAncestryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParcelAncestryDataRowDeleted != null)) {
                    this.ParcelAncestryDataRowDeleted(this, new ParcelAncestryDataRowChangeEvent(((ParcelAncestryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParcelAncestryDataRowDeleting != null)) {
                    this.ParcelAncestryDataRowDeleting(this, new ParcelAncestryDataRowChangeEvent(((ParcelAncestryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParcelAncestryDataRow(ParcelAncestryDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25090FieldSummaryData ds = new F25090FieldSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParcelAncestryDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParcelOwnershipDataDataTable : global::System.Data.TypedTableBase<ParcelOwnershipDataRow> {
            
            private global::System.Data.DataColumn columnLastFirst;
            
            private global::System.Data.DataColumn columnOwnerPercent;
            
            private global::System.Data.DataColumn columnOwnerType;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnIsPrimary;
            
            private global::System.Data.DataColumn columnIsTaxPayer;
            
            private global::System.Data.DataColumn columnBackgroundColor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelOwnershipDataDataTable() {
                this.TableName = "ParcelOwnershipData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelOwnershipDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParcelOwnershipDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastFirstColumn {
                get {
                    return this.columnLastFirst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerPercentColumn {
                get {
                    return this.columnOwnerPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerTypeColumn {
                get {
                    return this.columnOwnerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrimaryColumn {
                get {
                    return this.columnIsPrimary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTaxPayerColumn {
                get {
                    return this.columnIsTaxPayer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackgroundColorColumn {
                get {
                    return this.columnBackgroundColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelOwnershipDataRow this[int index] {
                get {
                    return ((ParcelOwnershipDataRow)(this.Rows[index]));
                }
            }
            
            public event ParcelOwnershipDataRowChangeEventHandler ParcelOwnershipDataRowChanging;
            
            public event ParcelOwnershipDataRowChangeEventHandler ParcelOwnershipDataRowChanged;
            
            public event ParcelOwnershipDataRowChangeEventHandler ParcelOwnershipDataRowDeleting;
            
            public event ParcelOwnershipDataRowChangeEventHandler ParcelOwnershipDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParcelOwnershipDataRow(ParcelOwnershipDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelOwnershipDataRow AddParcelOwnershipDataRow(string LastFirst, decimal OwnerPercent, string OwnerType, string IsPrimary, string IsTaxPayer, string BackgroundColor) {
                ParcelOwnershipDataRow rowParcelOwnershipDataRow = ((ParcelOwnershipDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LastFirst,
                        OwnerPercent,
                        OwnerType,
                        null,
                        null,
                        IsPrimary,
                        IsTaxPayer,
                        BackgroundColor};
                rowParcelOwnershipDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParcelOwnershipDataRow);
                return rowParcelOwnershipDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParcelOwnershipDataDataTable cln = ((ParcelOwnershipDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParcelOwnershipDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLastFirst = base.Columns["LastFirst"];
                this.columnOwnerPercent = base.Columns["OwnerPercent"];
                this.columnOwnerType = base.Columns["OwnerType"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnIsPrimary = base.Columns["IsPrimary"];
                this.columnIsTaxPayer = base.Columns["IsTaxPayer"];
                this.columnBackgroundColor = base.Columns["BackgroundColor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLastFirst = new global::System.Data.DataColumn("LastFirst", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastFirst);
                this.columnOwnerPercent = new global::System.Data.DataColumn("OwnerPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerPercent);
                this.columnOwnerType = new global::System.Data.DataColumn("OwnerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerType);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnIsPrimary = new global::System.Data.DataColumn("IsPrimary", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrimary);
                this.columnIsTaxPayer = new global::System.Data.DataColumn("IsTaxPayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTaxPayer);
                this.columnBackgroundColor = new global::System.Data.DataColumn("BackgroundColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackgroundColor);
                this.columnLastFirst.ReadOnly = true;
                this.columnLastFirst.MaxLength = 102;
                this.columnOwnerPercent.ReadOnly = true;
                this.columnOwnerType.ReadOnly = true;
                this.columnOwnerType.MaxLength = 50;
                this.columnOwnerID.AutoIncrement = true;
                this.columnOwnerID.ReadOnly = true;
                this.columnParcelID.AutoIncrement = true;
                this.columnParcelID.ReadOnly = true;
                this.columnIsPrimary.ReadOnly = true;
                this.columnIsPrimary.MaxLength = 3;
                this.columnIsTaxPayer.ReadOnly = true;
                this.columnIsTaxPayer.MaxLength = 3;
                this.columnBackgroundColor.ReadOnly = true;
                this.columnBackgroundColor.MaxLength = 11;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelOwnershipDataRow NewParcelOwnershipDataRow() {
                return ((ParcelOwnershipDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParcelOwnershipDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParcelOwnershipDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParcelOwnershipDataRowChanged != null)) {
                    this.ParcelOwnershipDataRowChanged(this, new ParcelOwnershipDataRowChangeEvent(((ParcelOwnershipDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParcelOwnershipDataRowChanging != null)) {
                    this.ParcelOwnershipDataRowChanging(this, new ParcelOwnershipDataRowChangeEvent(((ParcelOwnershipDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParcelOwnershipDataRowDeleted != null)) {
                    this.ParcelOwnershipDataRowDeleted(this, new ParcelOwnershipDataRowChangeEvent(((ParcelOwnershipDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParcelOwnershipDataRowDeleting != null)) {
                    this.ParcelOwnershipDataRowDeleting(this, new ParcelOwnershipDataRowChangeEvent(((ParcelOwnershipDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParcelOwnershipDataRow(ParcelOwnershipDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25090FieldSummaryData ds = new F25090FieldSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParcelOwnershipDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParcelSaleHistoryDataDataTable : global::System.Data.TypedTableBase<ParcelSaleHistoryDataRow> {
            
            private global::System.Data.DataColumn columnBookPage;
            
            private global::System.Data.DataColumn columnGrantor;
            
            private global::System.Data.DataColumn columnGrantee;
            
            private global::System.Data.DataColumn columnSaleDate;
            
            private global::System.Data.DataColumn columnSalePrice;
            
            private global::System.Data.DataColumn columnttlprcls;
            
            private global::System.Data.DataColumn columnSaleStudy;
            
            private global::System.Data.DataColumn columnoriginalsaleprice;
            
            private global::System.Data.DataColumn columnEventId;
            
            private global::System.Data.DataColumn columnthrowAway;
            
            private global::System.Data.DataColumn columnSaleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSaleHistoryDataDataTable() {
                this.TableName = "ParcelSaleHistoryData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelSaleHistoryDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParcelSaleHistoryDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BookPageColumn {
                get {
                    return this.columnBookPage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantorColumn {
                get {
                    return this.columnGrantor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GranteeColumn {
                get {
                    return this.columnGrantee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleDateColumn {
                get {
                    return this.columnSaleDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalePriceColumn {
                get {
                    return this.columnSalePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ttlprclsColumn {
                get {
                    return this.columnttlprcls;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleStudyColumn {
                get {
                    return this.columnSaleStudy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn originalsalepriceColumn {
                get {
                    return this.columnoriginalsaleprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIdColumn {
                get {
                    return this.columnEventId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn throwAwayColumn {
                get {
                    return this.columnthrowAway;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaleIDColumn {
                get {
                    return this.columnSaleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSaleHistoryDataRow this[int index] {
                get {
                    return ((ParcelSaleHistoryDataRow)(this.Rows[index]));
                }
            }
            
            public event ParcelSaleHistoryDataRowChangeEventHandler ParcelSaleHistoryDataRowChanging;
            
            public event ParcelSaleHistoryDataRowChangeEventHandler ParcelSaleHistoryDataRowChanged;
            
            public event ParcelSaleHistoryDataRowChangeEventHandler ParcelSaleHistoryDataRowDeleting;
            
            public event ParcelSaleHistoryDataRowChangeEventHandler ParcelSaleHistoryDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParcelSaleHistoryDataRow(ParcelSaleHistoryDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSaleHistoryDataRow AddParcelSaleHistoryDataRow(string BookPage, string Grantor, string Grantee, System.DateTime SaleDate, decimal SalePrice, int ttlprcls, string SaleStudy, decimal originalsaleprice, int EventId, byte throwAway) {
                ParcelSaleHistoryDataRow rowParcelSaleHistoryDataRow = ((ParcelSaleHistoryDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BookPage,
                        Grantor,
                        Grantee,
                        SaleDate,
                        SalePrice,
                        ttlprcls,
                        SaleStudy,
                        originalsaleprice,
                        EventId,
                        throwAway,
                        null};
                rowParcelSaleHistoryDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParcelSaleHistoryDataRow);
                return rowParcelSaleHistoryDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParcelSaleHistoryDataDataTable cln = ((ParcelSaleHistoryDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParcelSaleHistoryDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBookPage = base.Columns["BookPage"];
                this.columnGrantor = base.Columns["Grantor"];
                this.columnGrantee = base.Columns["Grantee"];
                this.columnSaleDate = base.Columns["SaleDate"];
                this.columnSalePrice = base.Columns["SalePrice"];
                this.columnttlprcls = base.Columns["ttlprcls"];
                this.columnSaleStudy = base.Columns["SaleStudy"];
                this.columnoriginalsaleprice = base.Columns["originalsaleprice"];
                this.columnEventId = base.Columns["EventId"];
                this.columnthrowAway = base.Columns["throwAway"];
                this.columnSaleID = base.Columns["SaleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBookPage = new global::System.Data.DataColumn("BookPage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookPage);
                this.columnGrantor = new global::System.Data.DataColumn("Grantor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantor);
                this.columnGrantee = new global::System.Data.DataColumn("Grantee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantee);
                this.columnSaleDate = new global::System.Data.DataColumn("SaleDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleDate);
                this.columnSalePrice = new global::System.Data.DataColumn("SalePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalePrice);
                this.columnttlprcls = new global::System.Data.DataColumn("ttlprcls", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnttlprcls);
                this.columnSaleStudy = new global::System.Data.DataColumn("SaleStudy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleStudy);
                this.columnoriginalsaleprice = new global::System.Data.DataColumn("originalsaleprice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoriginalsaleprice);
                this.columnEventId = new global::System.Data.DataColumn("EventId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventId);
                this.columnthrowAway = new global::System.Data.DataColumn("throwAway", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnthrowAway);
                this.columnSaleID = new global::System.Data.DataColumn("SaleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaleID);
                this.columnBookPage.MaxLength = 50;
                this.columnGrantor.MaxLength = 207;
                this.columnSaleStudy.MaxLength = 100;
                this.columnSaleID.AutoIncrement = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSaleHistoryDataRow NewParcelSaleHistoryDataRow() {
                return ((ParcelSaleHistoryDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParcelSaleHistoryDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParcelSaleHistoryDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParcelSaleHistoryDataRowChanged != null)) {
                    this.ParcelSaleHistoryDataRowChanged(this, new ParcelSaleHistoryDataRowChangeEvent(((ParcelSaleHistoryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParcelSaleHistoryDataRowChanging != null)) {
                    this.ParcelSaleHistoryDataRowChanging(this, new ParcelSaleHistoryDataRowChangeEvent(((ParcelSaleHistoryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParcelSaleHistoryDataRowDeleted != null)) {
                    this.ParcelSaleHistoryDataRowDeleted(this, new ParcelSaleHistoryDataRowChangeEvent(((ParcelSaleHistoryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParcelSaleHistoryDataRowDeleting != null)) {
                    this.ParcelSaleHistoryDataRowDeleting(this, new ParcelSaleHistoryDataRowChangeEvent(((ParcelSaleHistoryDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParcelSaleHistoryDataRow(ParcelSaleHistoryDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25090FieldSummaryData ds = new F25090FieldSummaryData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParcelSaleHistoryDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuickValueSummaryDataRow : global::System.Data.DataRow {
            
            private QuickValueSummaryDataDataTable tableQuickValueSummaryData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuickValueSummaryDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuickValueSummaryData = ((QuickValueSummaryDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalPM {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.TotalPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPM\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.TotalPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LandPM {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.LandPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandPM\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.LandPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImprovementsPM {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.ImprovementsPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementsPM\' in table \'QuickValueSummaryData\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.ImprovementsPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PermanentCropsPM {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.PermanentCropsPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermanentCropsPM\' in table \'QuickValueSummaryData\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.PermanentCropsPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TimberPM {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.TimberPMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberPM\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.TimberPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LandPA {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.LandPAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandPA\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.LandPAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LandA {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.LandAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandA\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.LandAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LandM {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.LandMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandM\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.LandMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImprovementsPA {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.ImprovementsPAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementsPA\' in table \'QuickValueSummaryData\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.ImprovementsPAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImprovementsA {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.ImprovementsAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementsA\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.ImprovementsAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImprovementsM {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.ImprovementsMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImprovementsM\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.ImprovementsMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PermanentCropsPA {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.PermanentCropsPAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermanentCropsPA\' in table \'QuickValueSummaryData\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.PermanentCropsPAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PermanentCropsA {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.PermanentCropsAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermanentCropsA\' in table \'QuickValueSummaryData\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.PermanentCropsAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PermanentCropsM {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.PermanentCropsMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermanentCropsM\' in table \'QuickValueSummaryData\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.PermanentCropsMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalsPA {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.TotalsPAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalsPA\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.TotalsPAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalsA {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.TotalsAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalsA\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.TotalsAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalsM {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.TotalsMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalsM\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.TotalsMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PARollYear {
                get {
                    try {
                        return ((int)(this[this.tableQuickValueSummaryData.PARollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARollYear\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.PARollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MRollYear {
                get {
                    try {
                        return ((int)(this[this.tableQuickValueSummaryData.MRollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MRollYear\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.MRollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AMarket {
                get {
                    try {
                        return ((int)(this[this.tableQuickValueSummaryData.AMarketColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AMarket\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.AMarketColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PMRollYear {
                get {
                    try {
                        return ((int)(this[this.tableQuickValueSummaryData.PMRollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PMRollYear\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.PMRollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int newConstYear {
                get {
                    try {
                        return ((int)(this[this.tableQuickValueSummaryData.newConstYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newConstYear\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.newConstYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimberA {
                get {
                    try {
                        return ((int)(this[this.tableQuickValueSummaryData.TimberAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberA\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.TimberAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimberM {
                get {
                    try {
                        return ((int)(this[this.tableQuickValueSummaryData.TimberMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberM\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.TimberMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TimberPA {
                get {
                    try {
                        return ((int)(this[this.tableQuickValueSummaryData.TimberPAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimberPA\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.TimberPAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal newConstCrop {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.newConstCropColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newConstCrop\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.newConstCropColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal newConstImpr {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.newConstImprColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newConstImpr\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.newConstImprColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal newConstLand {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.newConstLandColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newConstLand\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.newConstLandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal newConstTot {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.newConstTotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newConstTot\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.newConstTotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FrozenValue {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.FrozenValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrozenValue\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.FrozenValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exemptions {
                get {
                    try {
                        return ((string)(this[this.tableQuickValueSummaryData.ExemptionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exemptions\' in table \'QuickValueSummaryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.ExemptionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RegularLevyValue {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.RegularLevyValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegularLevyValue\' in table \'QuickValueSummaryData\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.RegularLevyValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExcessLevyValue {
                get {
                    try {
                        return ((decimal)(this[this.tableQuickValueSummaryData.ExcessLevyValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExcessLevyValue\' in table \'QuickValueSummaryData\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableQuickValueSummaryData.ExcessLevyValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.TotalPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPMNull() {
                this[this.tableQuickValueSummaryData.TotalPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandPMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.LandPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandPMNull() {
                this[this.tableQuickValueSummaryData.LandPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementsPMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.ImprovementsPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementsPMNull() {
                this[this.tableQuickValueSummaryData.ImprovementsPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermanentCropsPMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.PermanentCropsPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermanentCropsPMNull() {
                this[this.tableQuickValueSummaryData.PermanentCropsPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberPMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.TimberPMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberPMNull() {
                this[this.tableQuickValueSummaryData.TimberPMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandPANull() {
                return this.IsNull(this.tableQuickValueSummaryData.LandPAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandPANull() {
                this[this.tableQuickValueSummaryData.LandPAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandANull() {
                return this.IsNull(this.tableQuickValueSummaryData.LandAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandANull() {
                this[this.tableQuickValueSummaryData.LandAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.LandMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandMNull() {
                this[this.tableQuickValueSummaryData.LandMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementsPANull() {
                return this.IsNull(this.tableQuickValueSummaryData.ImprovementsPAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementsPANull() {
                this[this.tableQuickValueSummaryData.ImprovementsPAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementsANull() {
                return this.IsNull(this.tableQuickValueSummaryData.ImprovementsAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementsANull() {
                this[this.tableQuickValueSummaryData.ImprovementsAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImprovementsMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.ImprovementsMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImprovementsMNull() {
                this[this.tableQuickValueSummaryData.ImprovementsMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermanentCropsPANull() {
                return this.IsNull(this.tableQuickValueSummaryData.PermanentCropsPAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermanentCropsPANull() {
                this[this.tableQuickValueSummaryData.PermanentCropsPAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermanentCropsANull() {
                return this.IsNull(this.tableQuickValueSummaryData.PermanentCropsAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermanentCropsANull() {
                this[this.tableQuickValueSummaryData.PermanentCropsAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermanentCropsMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.PermanentCropsMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermanentCropsMNull() {
                this[this.tableQuickValueSummaryData.PermanentCropsMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalsPANull() {
                return this.IsNull(this.tableQuickValueSummaryData.TotalsPAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalsPANull() {
                this[this.tableQuickValueSummaryData.TotalsPAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalsANull() {
                return this.IsNull(this.tableQuickValueSummaryData.TotalsAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalsANull() {
                this[this.tableQuickValueSummaryData.TotalsAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalsMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.TotalsMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalsMNull() {
                this[this.tableQuickValueSummaryData.TotalsMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARollYearNull() {
                return this.IsNull(this.tableQuickValueSummaryData.PARollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARollYearNull() {
                this[this.tableQuickValueSummaryData.PARollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMRollYearNull() {
                return this.IsNull(this.tableQuickValueSummaryData.MRollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMRollYearNull() {
                this[this.tableQuickValueSummaryData.MRollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMarketNull() {
                return this.IsNull(this.tableQuickValueSummaryData.AMarketColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMarketNull() {
                this[this.tableQuickValueSummaryData.AMarketColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPMRollYearNull() {
                return this.IsNull(this.tableQuickValueSummaryData.PMRollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPMRollYearNull() {
                this[this.tableQuickValueSummaryData.PMRollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewConstYearNull() {
                return this.IsNull(this.tableQuickValueSummaryData.newConstYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewConstYearNull() {
                this[this.tableQuickValueSummaryData.newConstYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberANull() {
                return this.IsNull(this.tableQuickValueSummaryData.TimberAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberANull() {
                this[this.tableQuickValueSummaryData.TimberAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberMNull() {
                return this.IsNull(this.tableQuickValueSummaryData.TimberMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberMNull() {
                this[this.tableQuickValueSummaryData.TimberMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimberPANull() {
                return this.IsNull(this.tableQuickValueSummaryData.TimberPAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimberPANull() {
                this[this.tableQuickValueSummaryData.TimberPAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewConstCropNull() {
                return this.IsNull(this.tableQuickValueSummaryData.newConstCropColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewConstCropNull() {
                this[this.tableQuickValueSummaryData.newConstCropColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewConstImprNull() {
                return this.IsNull(this.tableQuickValueSummaryData.newConstImprColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewConstImprNull() {
                this[this.tableQuickValueSummaryData.newConstImprColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewConstLandNull() {
                return this.IsNull(this.tableQuickValueSummaryData.newConstLandColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewConstLandNull() {
                this[this.tableQuickValueSummaryData.newConstLandColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewConstTotNull() {
                return this.IsNull(this.tableQuickValueSummaryData.newConstTotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewConstTotNull() {
                this[this.tableQuickValueSummaryData.newConstTotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrozenValueNull() {
                return this.IsNull(this.tableQuickValueSummaryData.FrozenValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrozenValueNull() {
                this[this.tableQuickValueSummaryData.FrozenValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExemptionsNull() {
                return this.IsNull(this.tableQuickValueSummaryData.ExemptionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExemptionsNull() {
                this[this.tableQuickValueSummaryData.ExemptionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegularLevyValueNull() {
                return this.IsNull(this.tableQuickValueSummaryData.RegularLevyValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegularLevyValueNull() {
                this[this.tableQuickValueSummaryData.RegularLevyValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExcessLevyValueNull() {
                return this.IsNull(this.tableQuickValueSummaryData.ExcessLevyValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExcessLevyValueNull() {
                this[this.tableQuickValueSummaryData.ExcessLevyValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BuildingPermitsDataRow : global::System.Data.DataRow {
            
            private BuildingPermitsDataDataTable tableBuildingPermitsData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BuildingPermitsDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBuildingPermitsData = ((BuildingPermitsDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelId {
                get {
                    try {
                        return ((int)(this[this.tableBuildingPermitsData.ParcelIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelId\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.ParcelIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableBuildingPermitsData.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventTypeId {
                get {
                    try {
                        return ((int)(this[this.tableBuildingPermitsData.EventTypeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventTypeId\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.EventTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBuildingPermitsData.EventDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDate\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EstValue {
                get {
                    try {
                        return ((decimal)(this[this.tableBuildingPermitsData.EstValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstValue\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.EstValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Descr {
                get {
                    try {
                        return ((string)(this[this.tableBuildingPermitsData.DescrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Descr\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.DescrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PermitNumber {
                get {
                    try {
                        return ((string)(this[this.tableBuildingPermitsData.PermitNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitNumber\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.PermitNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Visited {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBuildingPermitsData.VisitedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Visited\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.VisitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Closed {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBuildingPermitsData.ClosedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Closed\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.ClosedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableBuildingPermitsData.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventId {
                get {
                    try {
                        return ((int)(this[this.tableBuildingPermitsData.EventIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventId\' in table \'BuildingPermitsData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuildingPermitsData.EventIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIdNull() {
                return this.IsNull(this.tableBuildingPermitsData.ParcelIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIdNull() {
                this[this.tableBuildingPermitsData.ParcelIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableBuildingPermitsData.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableBuildingPermitsData.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventTypeIdNull() {
                return this.IsNull(this.tableBuildingPermitsData.EventTypeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventTypeIdNull() {
                this[this.tableBuildingPermitsData.EventTypeIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDateNull() {
                return this.IsNull(this.tableBuildingPermitsData.EventDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDateNull() {
                this[this.tableBuildingPermitsData.EventDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstValueNull() {
                return this.IsNull(this.tableBuildingPermitsData.EstValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstValueNull() {
                this[this.tableBuildingPermitsData.EstValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescrNull() {
                return this.IsNull(this.tableBuildingPermitsData.DescrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescrNull() {
                this[this.tableBuildingPermitsData.DescrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitNumberNull() {
                return this.IsNull(this.tableBuildingPermitsData.PermitNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitNumberNull() {
                this[this.tableBuildingPermitsData.PermitNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisitedNull() {
                return this.IsNull(this.tableBuildingPermitsData.VisitedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisitedNull() {
                this[this.tableBuildingPermitsData.VisitedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClosedNull() {
                return this.IsNull(this.tableBuildingPermitsData.ClosedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClosedNull() {
                this[this.tableBuildingPermitsData.ClosedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableBuildingPermitsData.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableBuildingPermitsData.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIdNull() {
                return this.IsNull(this.tableBuildingPermitsData.EventIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIdNull() {
                this[this.tableBuildingPermitsData.EventIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PhotosDataRow : global::System.Data.DataRow {
            
            private PhotosDataDataTable tablePhotosData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PhotosDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePhotosData = ((PhotosDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePhotosData.EventDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDate\' in table \'PhotosData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhotosData.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FunctionName {
                get {
                    try {
                        return ((string)(this[this.tablePhotosData.FunctionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FunctionName\' in table \'PhotosData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhotosData.FunctionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablePhotosData.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'PhotosData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhotosData.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileID {
                get {
                    try {
                        return ((int)(this[this.tablePhotosData.FileIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileID\' in table \'PhotosData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhotosData.FileIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tablePhotosData.ExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Extension\' in table \'PhotosData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhotosData.ExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDateNull() {
                return this.IsNull(this.tablePhotosData.EventDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDateNull() {
                this[this.tablePhotosData.EventDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunctionNameNull() {
                return this.IsNull(this.tablePhotosData.FunctionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunctionNameNull() {
                this[this.tablePhotosData.FunctionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablePhotosData.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablePhotosData.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileIDNull() {
                return this.IsNull(this.tablePhotosData.FileIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileIDNull() {
                this[this.tablePhotosData.FileIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtensionNull() {
                return this.IsNull(this.tablePhotosData.ExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtensionNull() {
                this[this.tablePhotosData.ExtensionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CorrectionDataRow : global::System.Data.DataRow {
            
            private CorrectionDataDataTable tableCorrectionData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CorrectionDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCorrectionData = ((CorrectionDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCorrectionData.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'CorrectionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCorrectionData.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableCorrectionData.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'CorrectionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCorrectionData.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int prvval {
                get {
                    try {
                        return ((int)(this[this.tableCorrectionData.prvvalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prvval\' in table \'CorrectionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCorrectionData.prvvalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int newval {
                get {
                    try {
                        return ((int)(this[this.tableCorrectionData.newvalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newval\' in table \'CorrectionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCorrectionData.newvalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal origtax {
                get {
                    try {
                        return ((decimal)(this[this.tableCorrectionData.origtaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'origtax\' in table \'CorrectionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCorrectionData.origtaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal newtax {
                get {
                    try {
                        return ((decimal)(this[this.tableCorrectionData.newtaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newtax\' in table \'CorrectionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCorrectionData.newtaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal change {
                get {
                    try {
                        return ((decimal)(this[this.tableCorrectionData.changeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'change\' in table \'CorrectionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCorrectionData.changeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableCorrectionData.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'CorrectionData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCorrectionData.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableCorrectionData.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableCorrectionData.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableCorrectionData.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableCorrectionData.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprvvalNull() {
                return this.IsNull(this.tableCorrectionData.prvvalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprvvalNull() {
                this[this.tableCorrectionData.prvvalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewvalNull() {
                return this.IsNull(this.tableCorrectionData.newvalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewvalNull() {
                this[this.tableCorrectionData.newvalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsorigtaxNull() {
                return this.IsNull(this.tableCorrectionData.origtaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetorigtaxNull() {
                this[this.tableCorrectionData.origtaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewtaxNull() {
                return this.IsNull(this.tableCorrectionData.newtaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewtaxNull() {
                this[this.tableCorrectionData.newtaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IschangeNull() {
                return this.IsNull(this.tableCorrectionData.changeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetchangeNull() {
                this[this.tableCorrectionData.changeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableCorrectionData.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableCorrectionData.NoteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HistoryDataRow : global::System.Data.DataRow {
            
            private HistoryDataDataTable tableHistoryData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HistoryDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHistoryData = ((HistoryDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string parNum {
                get {
                    try {
                        return ((string)(this[this.tableHistoryData.parNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parNum\' in table \'HistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHistoryData.parNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short rollyear {
                get {
                    try {
                        return ((short)(this[this.tableHistoryData.rollyearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rollyear\' in table \'HistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHistoryData.rollyearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string posttype {
                get {
                    try {
                        return ((string)(this[this.tableHistoryData.posttypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'posttype\' in table \'HistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHistoryData.posttypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int origval {
                get {
                    try {
                        return ((int)(this[this.tableHistoryData.origvalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'origval\' in table \'HistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHistoryData.origvalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal origtax {
                get {
                    try {
                        return ((decimal)(this[this.tableHistoryData.origtaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'origtax\' in table \'HistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHistoryData.origtaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int statementid {
                get {
                    try {
                        return ((int)(this[this.tableHistoryData.statementidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'statementid\' in table \'HistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHistoryData.statementidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal balanceD {
                get {
                    try {
                        return ((decimal)(this[this.tableHistoryData.balanceDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'balanceD\' in table \'HistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHistoryData.balanceDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparNumNull() {
                return this.IsNull(this.tableHistoryData.parNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparNumNull() {
                this[this.tableHistoryData.parNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrollyearNull() {
                return this.IsNull(this.tableHistoryData.rollyearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrollyearNull() {
                this[this.tableHistoryData.rollyearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsposttypeNull() {
                return this.IsNull(this.tableHistoryData.posttypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetposttypeNull() {
                this[this.tableHistoryData.posttypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsorigvalNull() {
                return this.IsNull(this.tableHistoryData.origvalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetorigvalNull() {
                this[this.tableHistoryData.origvalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsorigtaxNull() {
                return this.IsNull(this.tableHistoryData.origtaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetorigtaxNull() {
                this[this.tableHistoryData.origtaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatementidNull() {
                return this.IsNull(this.tableHistoryData.statementidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatementidNull() {
                this[this.tableHistoryData.statementidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbalanceDNull() {
                return this.IsNull(this.tableHistoryData.balanceDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbalanceDNull() {
                this[this.tableHistoryData.balanceDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParcelAncestryDataRow : global::System.Data.DataRow {
            
            private ParcelAncestryDataDataTable tableParcelAncestryData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelAncestryDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParcelAncestryData = ((ParcelAncestryDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventDate {
                get {
                    try {
                        return ((string)(this[this.tableParcelAncestryData.EventDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDate\' in table \'ParcelAncestryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelAncestryData.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventType {
                get {
                    try {
                        return ((string)(this[this.tableParcelAncestryData.EventTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventType\' in table \'ParcelAncestryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelAncestryData.EventTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Relation {
                get {
                    try {
                        return ((string)(this[this.tableParcelAncestryData.RelationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Relation\' in table \'ParcelAncestryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelAncestryData.RelationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParcelNumber {
                get {
                    try {
                        return ((string)(this[this.tableParcelAncestryData.ParcelNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelNumber\' in table \'ParcelAncestryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelAncestryData.ParcelNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableParcelAncestryData.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'ParcelAncestryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelAncestryData.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessedBy {
                get {
                    try {
                        return ((string)(this[this.tableParcelAncestryData.ProcessedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProcessedBy\' in table \'ParcelAncestryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelAncestryData.ProcessedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventTypeID {
                get {
                    try {
                        return ((int)(this[this.tableParcelAncestryData.EventTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventTypeID\' in table \'ParcelAncestryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelAncestryData.EventTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tableParcelAncestryData.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'ParcelAncestryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelAncestryData.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableParcelAncestryData.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ParcelAncestryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelAncestryData.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDateNull() {
                return this.IsNull(this.tableParcelAncestryData.EventDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDateNull() {
                this[this.tableParcelAncestryData.EventDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventTypeNull() {
                return this.IsNull(this.tableParcelAncestryData.EventTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventTypeNull() {
                this[this.tableParcelAncestryData.EventTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelationNull() {
                return this.IsNull(this.tableParcelAncestryData.RelationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelationNull() {
                this[this.tableParcelAncestryData.RelationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelNumberNull() {
                return this.IsNull(this.tableParcelAncestryData.ParcelNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelNumberNull() {
                this[this.tableParcelAncestryData.ParcelNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableParcelAncestryData.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableParcelAncestryData.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessedByNull() {
                return this.IsNull(this.tableParcelAncestryData.ProcessedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessedByNull() {
                this[this.tableParcelAncestryData.ProcessedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventTypeIDNull() {
                return this.IsNull(this.tableParcelAncestryData.EventTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventTypeIDNull() {
                this[this.tableParcelAncestryData.EventTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tableParcelAncestryData.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tableParcelAncestryData.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableParcelAncestryData.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableParcelAncestryData.ParcelIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParcelOwnershipDataRow : global::System.Data.DataRow {
            
            private ParcelOwnershipDataDataTable tableParcelOwnershipData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelOwnershipDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParcelOwnershipData = ((ParcelOwnershipDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastFirst {
                get {
                    try {
                        return ((string)(this[this.tableParcelOwnershipData.LastFirstColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastFirst\' in table \'ParcelOwnershipData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelOwnershipData.LastFirstColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OwnerPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableParcelOwnershipData.OwnerPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerPercent\' in table \'ParcelOwnershipData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelOwnershipData.OwnerPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerType {
                get {
                    try {
                        return ((string)(this[this.tableParcelOwnershipData.OwnerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerType\' in table \'ParcelOwnershipData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelOwnershipData.OwnerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableParcelOwnershipData.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'ParcelOwnershipData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelOwnershipData.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableParcelOwnershipData.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'ParcelOwnershipData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelOwnershipData.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPrimary {
                get {
                    try {
                        return ((string)(this[this.tableParcelOwnershipData.IsPrimaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrimary\' in table \'ParcelOwnershipData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelOwnershipData.IsPrimaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsTaxPayer {
                get {
                    try {
                        return ((string)(this[this.tableParcelOwnershipData.IsTaxPayerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTaxPayer\' in table \'ParcelOwnershipData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelOwnershipData.IsTaxPayerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BackgroundColor {
                get {
                    try {
                        return ((string)(this[this.tableParcelOwnershipData.BackgroundColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackgroundColor\' in table \'ParcelOwnershipData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelOwnershipData.BackgroundColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastFirstNull() {
                return this.IsNull(this.tableParcelOwnershipData.LastFirstColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastFirstNull() {
                this[this.tableParcelOwnershipData.LastFirstColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerPercentNull() {
                return this.IsNull(this.tableParcelOwnershipData.OwnerPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerPercentNull() {
                this[this.tableParcelOwnershipData.OwnerPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerTypeNull() {
                return this.IsNull(this.tableParcelOwnershipData.OwnerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerTypeNull() {
                this[this.tableParcelOwnershipData.OwnerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableParcelOwnershipData.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableParcelOwnershipData.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableParcelOwnershipData.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableParcelOwnershipData.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrimaryNull() {
                return this.IsNull(this.tableParcelOwnershipData.IsPrimaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrimaryNull() {
                this[this.tableParcelOwnershipData.IsPrimaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTaxPayerNull() {
                return this.IsNull(this.tableParcelOwnershipData.IsTaxPayerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTaxPayerNull() {
                this[this.tableParcelOwnershipData.IsTaxPayerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackgroundColorNull() {
                return this.IsNull(this.tableParcelOwnershipData.BackgroundColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackgroundColorNull() {
                this[this.tableParcelOwnershipData.BackgroundColorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParcelSaleHistoryDataRow : global::System.Data.DataRow {
            
            private ParcelSaleHistoryDataDataTable tableParcelSaleHistoryData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParcelSaleHistoryDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParcelSaleHistoryData = ((ParcelSaleHistoryDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BookPage {
                get {
                    try {
                        return ((string)(this[this.tableParcelSaleHistoryData.BookPageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BookPage\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.BookPageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grantor {
                get {
                    try {
                        return ((string)(this[this.tableParcelSaleHistoryData.GrantorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grantor\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.GrantorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grantee {
                get {
                    try {
                        return ((string)(this[this.tableParcelSaleHistoryData.GranteeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grantee\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.GranteeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SaleDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableParcelSaleHistoryData.SaleDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleDate\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.SaleDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableParcelSaleHistoryData.SalePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalePrice\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.SalePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ttlprcls {
                get {
                    try {
                        return ((int)(this[this.tableParcelSaleHistoryData.ttlprclsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ttlprcls\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.ttlprclsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SaleStudy {
                get {
                    try {
                        return ((string)(this[this.tableParcelSaleHistoryData.SaleStudyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleStudy\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.SaleStudyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal originalsaleprice {
                get {
                    try {
                        return ((decimal)(this[this.tableParcelSaleHistoryData.originalsalepriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'originalsaleprice\' in table \'ParcelSaleHistoryData\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.originalsalepriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventId {
                get {
                    try {
                        return ((int)(this[this.tableParcelSaleHistoryData.EventIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventId\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.EventIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte throwAway {
                get {
                    try {
                        return ((byte)(this[this.tableParcelSaleHistoryData.throwAwayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'throwAway\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.throwAwayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SaleID {
                get {
                    try {
                        return ((int)(this[this.tableParcelSaleHistoryData.SaleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SaleID\' in table \'ParcelSaleHistoryData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParcelSaleHistoryData.SaleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBookPageNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.BookPageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBookPageNull() {
                this[this.tableParcelSaleHistoryData.BookPageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantorNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.GrantorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantorNull() {
                this[this.tableParcelSaleHistoryData.GrantorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGranteeNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.GranteeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGranteeNull() {
                this[this.tableParcelSaleHistoryData.GranteeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleDateNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.SaleDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleDateNull() {
                this[this.tableParcelSaleHistoryData.SaleDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalePriceNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.SalePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalePriceNull() {
                this[this.tableParcelSaleHistoryData.SalePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsttlprclsNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.ttlprclsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetttlprclsNull() {
                this[this.tableParcelSaleHistoryData.ttlprclsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleStudyNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.SaleStudyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleStudyNull() {
                this[this.tableParcelSaleHistoryData.SaleStudyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoriginalsalepriceNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.originalsalepriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoriginalsalepriceNull() {
                this[this.tableParcelSaleHistoryData.originalsalepriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIdNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.EventIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIdNull() {
                this[this.tableParcelSaleHistoryData.EventIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsthrowAwayNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.throwAwayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetthrowAwayNull() {
                this[this.tableParcelSaleHistoryData.throwAwayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaleIDNull() {
                return this.IsNull(this.tableParcelSaleHistoryData.SaleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaleIDNull() {
                this[this.tableParcelSaleHistoryData.SaleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuickValueSummaryDataRowChangeEvent : global::System.EventArgs {
            
            private QuickValueSummaryDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickValueSummaryDataRowChangeEvent(QuickValueSummaryDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuickValueSummaryDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BuildingPermitsDataRowChangeEvent : global::System.EventArgs {
            
            private BuildingPermitsDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingPermitsDataRowChangeEvent(BuildingPermitsDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BuildingPermitsDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PhotosDataRowChangeEvent : global::System.EventArgs {
            
            private PhotosDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhotosDataRowChangeEvent(PhotosDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhotosDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CorrectionDataRowChangeEvent : global::System.EventArgs {
            
            private CorrectionDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectionDataRowChangeEvent(CorrectionDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CorrectionDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HistoryDataRowChangeEvent : global::System.EventArgs {
            
            private HistoryDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryDataRowChangeEvent(HistoryDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HistoryDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParcelAncestryDataRowChangeEvent : global::System.EventArgs {
            
            private ParcelAncestryDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelAncestryDataRowChangeEvent(ParcelAncestryDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelAncestryDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParcelOwnershipDataRowChangeEvent : global::System.EventArgs {
            
            private ParcelOwnershipDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelOwnershipDataRowChangeEvent(ParcelOwnershipDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelOwnershipDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParcelSaleHistoryDataRowChangeEvent : global::System.EventArgs {
            
            private ParcelSaleHistoryDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSaleHistoryDataRowChangeEvent(ParcelSaleHistoryDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParcelSaleHistoryDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591