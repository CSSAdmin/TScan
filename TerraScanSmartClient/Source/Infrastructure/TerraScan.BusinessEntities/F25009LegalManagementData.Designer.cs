//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F25009LegalManagementData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F25009LegalManagementData : global::System.Data.DataSet {
        
        private ListSubdivisionDataTable tableListSubdivision;
        
        private GetLegalManagementDataTable tableGetLegalManagement;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F25009LegalManagementData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F25009LegalManagementData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListSubdivision"] != null)) {
                    base.Tables.Add(new ListSubdivisionDataTable(ds.Tables["ListSubdivision"]));
                }
                if ((ds.Tables["GetLegalManagement"] != null)) {
                    base.Tables.Add(new GetLegalManagementDataTable(ds.Tables["GetLegalManagement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListSubdivisionDataTable ListSubdivision {
            get {
                return this.tableListSubdivision;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetLegalManagementDataTable GetLegalManagement {
            get {
                return this.tableGetLegalManagement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F25009LegalManagementData cln = ((F25009LegalManagementData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListSubdivision"] != null)) {
                    base.Tables.Add(new ListSubdivisionDataTable(ds.Tables["ListSubdivision"]));
                }
                if ((ds.Tables["GetLegalManagement"] != null)) {
                    base.Tables.Add(new GetLegalManagementDataTable(ds.Tables["GetLegalManagement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListSubdivision = ((ListSubdivisionDataTable)(base.Tables["ListSubdivision"]));
            if ((initTable == true)) {
                if ((this.tableListSubdivision != null)) {
                    this.tableListSubdivision.InitVars();
                }
            }
            this.tableGetLegalManagement = ((GetLegalManagementDataTable)(base.Tables["GetLegalManagement"]));
            if ((initTable == true)) {
                if ((this.tableGetLegalManagement != null)) {
                    this.tableGetLegalManagement.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F25009LegalManagementData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F25009LegalManagementData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListSubdivision = new ListSubdivisionDataTable();
            base.Tables.Add(this.tableListSubdivision);
            this.tableGetLegalManagement = new GetLegalManagementDataTable();
            base.Tables.Add(this.tableGetLegalManagement);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListSubdivision() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetLegalManagement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F25009LegalManagementData ds = new F25009LegalManagementData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListSubdivisionRowChangeEventHandler(object sender, ListSubdivisionRowChangeEvent e);
        
        public delegate void GetLegalManagementRowChangeEventHandler(object sender, GetLegalManagementRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListSubdivisionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubdivisionID;
            
            private global::System.Data.DataColumn columnSubName;
            
            private global::System.Data.DataColumn columnSection;
            
            private global::System.Data.DataColumn columnTownship;
            
            private global::System.Data.DataColumn columnRange;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubdivisionDataTable() {
                this.TableName = "ListSubdivision";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSubdivisionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListSubdivisionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubdivisionIDColumn {
                get {
                    return this.columnSubdivisionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubNameColumn {
                get {
                    return this.columnSubName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionColumn {
                get {
                    return this.columnSection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TownshipColumn {
                get {
                    return this.columnTownship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RangeColumn {
                get {
                    return this.columnRange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubdivisionRow this[int index] {
                get {
                    return ((ListSubdivisionRow)(this.Rows[index]));
                }
            }
            
            public event ListSubdivisionRowChangeEventHandler ListSubdivisionRowChanging;
            
            public event ListSubdivisionRowChangeEventHandler ListSubdivisionRowChanged;
            
            public event ListSubdivisionRowChangeEventHandler ListSubdivisionRowDeleting;
            
            public event ListSubdivisionRowChangeEventHandler ListSubdivisionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListSubdivisionRow(ListSubdivisionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubdivisionRow AddListSubdivisionRow(string SubName, string Section, string Township, string Range) {
                ListSubdivisionRow rowListSubdivisionRow = ((ListSubdivisionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SubName,
                        Section,
                        Township,
                        Range};
                rowListSubdivisionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListSubdivisionRow);
                return rowListSubdivisionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubdivisionRow FindBySubdivisionID(int SubdivisionID) {
                return ((ListSubdivisionRow)(this.Rows.Find(new object[] {
                            SubdivisionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListSubdivisionDataTable cln = ((ListSubdivisionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListSubdivisionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubdivisionID = base.Columns["SubdivisionID"];
                this.columnSubName = base.Columns["SubName"];
                this.columnSection = base.Columns["Section"];
                this.columnTownship = base.Columns["Township"];
                this.columnRange = base.Columns["Range"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubdivisionID = new global::System.Data.DataColumn("SubdivisionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubdivisionID);
                this.columnSubName = new global::System.Data.DataColumn("SubName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubName);
                this.columnSection = new global::System.Data.DataColumn("Section", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSection);
                this.columnTownship = new global::System.Data.DataColumn("Township", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTownship);
                this.columnRange = new global::System.Data.DataColumn("Range", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRange);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSubdivisionID}, true));
                this.columnSubdivisionID.AutoIncrement = true;
                this.columnSubdivisionID.AllowDBNull = false;
                this.columnSubdivisionID.ReadOnly = true;
                this.columnSubdivisionID.Unique = true;
                this.columnSubName.AllowDBNull = false;
                this.columnSubName.MaxLength = 75;
                this.columnSection.MaxLength = 75;
                this.columnTownship.MaxLength = 75;
                this.columnRange.MaxLength = 75;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubdivisionRow NewListSubdivisionRow() {
                return ((ListSubdivisionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListSubdivisionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListSubdivisionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListSubdivisionRowChanged != null)) {
                    this.ListSubdivisionRowChanged(this, new ListSubdivisionRowChangeEvent(((ListSubdivisionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListSubdivisionRowChanging != null)) {
                    this.ListSubdivisionRowChanging(this, new ListSubdivisionRowChangeEvent(((ListSubdivisionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListSubdivisionRowDeleted != null)) {
                    this.ListSubdivisionRowDeleted(this, new ListSubdivisionRowChangeEvent(((ListSubdivisionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListSubdivisionRowDeleting != null)) {
                    this.ListSubdivisionRowDeleting(this, new ListSubdivisionRowChangeEvent(((ListSubdivisionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListSubdivisionRow(ListSubdivisionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25009LegalManagementData ds = new F25009LegalManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListSubdivisionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetLegalManagementDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLegalID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnSubdivisionID;
            
            private global::System.Data.DataColumn columnSubName;
            
            private global::System.Data.DataColumn columnLot;
            
            private global::System.Data.DataColumn columnIsPartialLot;
            
            private global::System.Data.DataColumn columnBlock;
            
            private global::System.Data.DataColumn columnIsPartialBlock;
            
            private global::System.Data.DataColumn columnAssembledLegal;
            
            private global::System.Data.DataColumn columnUserLegal;
            
            private global::System.Data.DataColumn columnNWNW;
            
            private global::System.Data.DataColumn columnNENW;
            
            private global::System.Data.DataColumn columnSWNW;
            
            private global::System.Data.DataColumn columnSENW;
            
            private global::System.Data.DataColumn columnNWNE;
            
            private global::System.Data.DataColumn columnNENE;
            
            private global::System.Data.DataColumn columnSWNE;
            
            private global::System.Data.DataColumn columnSENE;
            
            private global::System.Data.DataColumn columnNWSW;
            
            private global::System.Data.DataColumn columnNESW;
            
            private global::System.Data.DataColumn columnSWSW;
            
            private global::System.Data.DataColumn columnSESW;
            
            private global::System.Data.DataColumn columnNWSE;
            
            private global::System.Data.DataColumn columnNESE;
            
            private global::System.Data.DataColumn columnSWSE;
            
            private global::System.Data.DataColumn columnSESE;
            
            private global::System.Data.DataColumn columnTownShip;
            
            private global::System.Data.DataColumn columnRange;
            
            private global::System.Data.DataColumn columnSection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLegalManagementDataTable() {
                this.TableName = "GetLegalManagement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetLegalManagementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetLegalManagementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalIDColumn {
                get {
                    return this.columnLegalID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubdivisionIDColumn {
                get {
                    return this.columnSubdivisionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubNameColumn {
                get {
                    return this.columnSubName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotColumn {
                get {
                    return this.columnLot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPartialLotColumn {
                get {
                    return this.columnIsPartialLot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BlockColumn {
                get {
                    return this.columnBlock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPartialBlockColumn {
                get {
                    return this.columnIsPartialBlock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssembledLegalColumn {
                get {
                    return this.columnAssembledLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserLegalColumn {
                get {
                    return this.columnUserLegal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NWNWColumn {
                get {
                    return this.columnNWNW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NENWColumn {
                get {
                    return this.columnNENW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWNWColumn {
                get {
                    return this.columnSWNW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SENWColumn {
                get {
                    return this.columnSENW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NWNEColumn {
                get {
                    return this.columnNWNE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NENEColumn {
                get {
                    return this.columnNENE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWNEColumn {
                get {
                    return this.columnSWNE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SENEColumn {
                get {
                    return this.columnSENE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NWSWColumn {
                get {
                    return this.columnNWSW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NESWColumn {
                get {
                    return this.columnNESW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWSWColumn {
                get {
                    return this.columnSWSW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SESWColumn {
                get {
                    return this.columnSESW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NWSEColumn {
                get {
                    return this.columnNWSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NESEColumn {
                get {
                    return this.columnNESE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SWSEColumn {
                get {
                    return this.columnSWSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SESEColumn {
                get {
                    return this.columnSESE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TownShipColumn {
                get {
                    return this.columnTownShip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RangeColumn {
                get {
                    return this.columnRange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionColumn {
                get {
                    return this.columnSection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLegalManagementRow this[int index] {
                get {
                    return ((GetLegalManagementRow)(this.Rows[index]));
                }
            }
            
            public event GetLegalManagementRowChangeEventHandler GetLegalManagementRowChanging;
            
            public event GetLegalManagementRowChangeEventHandler GetLegalManagementRowChanged;
            
            public event GetLegalManagementRowChangeEventHandler GetLegalManagementRowDeleting;
            
            public event GetLegalManagementRowChangeEventHandler GetLegalManagementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetLegalManagementRow(GetLegalManagementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLegalManagementRow AddGetLegalManagementRow(
                        int ParcelID, 
                        int SubdivisionID, 
                        string SubName, 
                        string Lot, 
                        bool IsPartialLot, 
                        string Block, 
                        bool IsPartialBlock, 
                        string AssembledLegal, 
                        string UserLegal, 
                        short NWNW, 
                        short NENW, 
                        short SWNW, 
                        short SENW, 
                        short NWNE, 
                        short NENE, 
                        short SWNE, 
                        short SENE, 
                        short NWSW, 
                        short NESW, 
                        short SWSW, 
                        short SESW, 
                        short NWSE, 
                        short NESE, 
                        short SWSE, 
                        short SESE, 
                        string TownShip, 
                        string Range, 
                        string Section) {
                GetLegalManagementRow rowGetLegalManagementRow = ((GetLegalManagementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelID,
                        SubdivisionID,
                        SubName,
                        Lot,
                        IsPartialLot,
                        Block,
                        IsPartialBlock,
                        AssembledLegal,
                        UserLegal,
                        NWNW,
                        NENW,
                        SWNW,
                        SENW,
                        NWNE,
                        NENE,
                        SWNE,
                        SENE,
                        NWSW,
                        NESW,
                        SWSW,
                        SESW,
                        NWSE,
                        NESE,
                        SWSE,
                        SESE,
                        TownShip,
                        Range,
                        Section};
                rowGetLegalManagementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetLegalManagementRow);
                return rowGetLegalManagementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLegalManagementRow FindByLegalID(int LegalID) {
                return ((GetLegalManagementRow)(this.Rows.Find(new object[] {
                            LegalID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetLegalManagementDataTable cln = ((GetLegalManagementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetLegalManagementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLegalID = base.Columns["LegalID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnSubdivisionID = base.Columns["SubdivisionID"];
                this.columnSubName = base.Columns["SubName"];
                this.columnLot = base.Columns["Lot"];
                this.columnIsPartialLot = base.Columns["IsPartialLot"];
                this.columnBlock = base.Columns["Block"];
                this.columnIsPartialBlock = base.Columns["IsPartialBlock"];
                this.columnAssembledLegal = base.Columns["AssembledLegal"];
                this.columnUserLegal = base.Columns["UserLegal"];
                this.columnNWNW = base.Columns["NWNW"];
                this.columnNENW = base.Columns["NENW"];
                this.columnSWNW = base.Columns["SWNW"];
                this.columnSENW = base.Columns["SENW"];
                this.columnNWNE = base.Columns["NWNE"];
                this.columnNENE = base.Columns["NENE"];
                this.columnSWNE = base.Columns["SWNE"];
                this.columnSENE = base.Columns["SENE"];
                this.columnNWSW = base.Columns["NWSW"];
                this.columnNESW = base.Columns["NESW"];
                this.columnSWSW = base.Columns["SWSW"];
                this.columnSESW = base.Columns["SESW"];
                this.columnNWSE = base.Columns["NWSE"];
                this.columnNESE = base.Columns["NESE"];
                this.columnSWSE = base.Columns["SWSE"];
                this.columnSESE = base.Columns["SESE"];
                this.columnTownShip = base.Columns["TownShip"];
                this.columnRange = base.Columns["Range"];
                this.columnSection = base.Columns["Section"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLegalID = new global::System.Data.DataColumn("LegalID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegalID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnSubdivisionID = new global::System.Data.DataColumn("SubdivisionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubdivisionID);
                this.columnSubName = new global::System.Data.DataColumn("SubName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubName);
                this.columnLot = new global::System.Data.DataColumn("Lot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLot);
                this.columnIsPartialLot = new global::System.Data.DataColumn("IsPartialLot", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPartialLot);
                this.columnBlock = new global::System.Data.DataColumn("Block", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlock);
                this.columnIsPartialBlock = new global::System.Data.DataColumn("IsPartialBlock", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPartialBlock);
                this.columnAssembledLegal = new global::System.Data.DataColumn("AssembledLegal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssembledLegal);
                this.columnUserLegal = new global::System.Data.DataColumn("UserLegal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserLegal);
                this.columnNWNW = new global::System.Data.DataColumn("NWNW", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNWNW);
                this.columnNENW = new global::System.Data.DataColumn("NENW", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNENW);
                this.columnSWNW = new global::System.Data.DataColumn("SWNW", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWNW);
                this.columnSENW = new global::System.Data.DataColumn("SENW", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSENW);
                this.columnNWNE = new global::System.Data.DataColumn("NWNE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNWNE);
                this.columnNENE = new global::System.Data.DataColumn("NENE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNENE);
                this.columnSWNE = new global::System.Data.DataColumn("SWNE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWNE);
                this.columnSENE = new global::System.Data.DataColumn("SENE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSENE);
                this.columnNWSW = new global::System.Data.DataColumn("NWSW", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNWSW);
                this.columnNESW = new global::System.Data.DataColumn("NESW", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNESW);
                this.columnSWSW = new global::System.Data.DataColumn("SWSW", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWSW);
                this.columnSESW = new global::System.Data.DataColumn("SESW", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSESW);
                this.columnNWSE = new global::System.Data.DataColumn("NWSE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNWSE);
                this.columnNESE = new global::System.Data.DataColumn("NESE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNESE);
                this.columnSWSE = new global::System.Data.DataColumn("SWSE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWSE);
                this.columnSESE = new global::System.Data.DataColumn("SESE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSESE);
                this.columnTownShip = new global::System.Data.DataColumn("TownShip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTownShip);
                this.columnRange = new global::System.Data.DataColumn("Range", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRange);
                this.columnSection = new global::System.Data.DataColumn("Section", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSection);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLegalID}, true));
                this.columnLegalID.AutoIncrement = true;
                this.columnLegalID.AllowDBNull = false;
                this.columnLegalID.ReadOnly = true;
                this.columnLegalID.Unique = true;
                this.columnParcelID.AllowDBNull = false;
                this.columnSubName.MaxLength = 75;
                this.columnLot.MaxLength = 10;
                this.columnIsPartialLot.AllowDBNull = false;
                this.columnBlock.MaxLength = 10;
                this.columnIsPartialBlock.AllowDBNull = false;
                this.columnAssembledLegal.AllowDBNull = false;
                this.columnAssembledLegal.MaxLength = 250;
                this.columnUserLegal.MaxLength = 5000;
                this.columnTownShip.MaxLength = 75;
                this.columnRange.MaxLength = 75;
                this.columnSection.MaxLength = 75;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLegalManagementRow NewGetLegalManagementRow() {
                return ((GetLegalManagementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetLegalManagementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetLegalManagementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetLegalManagementRowChanged != null)) {
                    this.GetLegalManagementRowChanged(this, new GetLegalManagementRowChangeEvent(((GetLegalManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetLegalManagementRowChanging != null)) {
                    this.GetLegalManagementRowChanging(this, new GetLegalManagementRowChangeEvent(((GetLegalManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetLegalManagementRowDeleted != null)) {
                    this.GetLegalManagementRowDeleted(this, new GetLegalManagementRowChangeEvent(((GetLegalManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetLegalManagementRowDeleting != null)) {
                    this.GetLegalManagementRowDeleting(this, new GetLegalManagementRowChangeEvent(((GetLegalManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetLegalManagementRow(GetLegalManagementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F25009LegalManagementData ds = new F25009LegalManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetLegalManagementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListSubdivisionRow : global::System.Data.DataRow {
            
            private ListSubdivisionDataTable tableListSubdivision;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListSubdivisionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListSubdivision = ((ListSubdivisionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubdivisionID {
                get {
                    return ((int)(this[this.tableListSubdivision.SubdivisionIDColumn]));
                }
                set {
                    this[this.tableListSubdivision.SubdivisionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubName {
                get {
                    return ((string)(this[this.tableListSubdivision.SubNameColumn]));
                }
                set {
                    this[this.tableListSubdivision.SubNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Section {
                get {
                    try {
                        return ((string)(this[this.tableListSubdivision.SectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Section\' in table \'ListSubdivision\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSubdivision.SectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Township {
                get {
                    try {
                        return ((string)(this[this.tableListSubdivision.TownshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Township\' in table \'ListSubdivision\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSubdivision.TownshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Range {
                get {
                    try {
                        return ((string)(this[this.tableListSubdivision.RangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Range\' in table \'ListSubdivision\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListSubdivision.RangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNull() {
                return this.IsNull(this.tableListSubdivision.SectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNull() {
                this[this.tableListSubdivision.SectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTownshipNull() {
                return this.IsNull(this.tableListSubdivision.TownshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTownshipNull() {
                this[this.tableListSubdivision.TownshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRangeNull() {
                return this.IsNull(this.tableListSubdivision.RangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRangeNull() {
                this[this.tableListSubdivision.RangeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetLegalManagementRow : global::System.Data.DataRow {
            
            private GetLegalManagementDataTable tableGetLegalManagement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetLegalManagementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetLegalManagement = ((GetLegalManagementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LegalID {
                get {
                    return ((int)(this[this.tableGetLegalManagement.LegalIDColumn]));
                }
                set {
                    this[this.tableGetLegalManagement.LegalIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    return ((int)(this[this.tableGetLegalManagement.ParcelIDColumn]));
                }
                set {
                    this[this.tableGetLegalManagement.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubdivisionID {
                get {
                    try {
                        return ((int)(this[this.tableGetLegalManagement.SubdivisionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubdivisionID\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SubdivisionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubName {
                get {
                    try {
                        return ((string)(this[this.tableGetLegalManagement.SubNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubName\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SubNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lot {
                get {
                    try {
                        return ((string)(this[this.tableGetLegalManagement.LotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lot\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.LotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartialLot {
                get {
                    return ((bool)(this[this.tableGetLegalManagement.IsPartialLotColumn]));
                }
                set {
                    this[this.tableGetLegalManagement.IsPartialLotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Block {
                get {
                    try {
                        return ((string)(this[this.tableGetLegalManagement.BlockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Block\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.BlockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartialBlock {
                get {
                    return ((bool)(this[this.tableGetLegalManagement.IsPartialBlockColumn]));
                }
                set {
                    this[this.tableGetLegalManagement.IsPartialBlockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssembledLegal {
                get {
                    return ((string)(this[this.tableGetLegalManagement.AssembledLegalColumn]));
                }
                set {
                    this[this.tableGetLegalManagement.AssembledLegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserLegal {
                get {
                    try {
                        return ((string)(this[this.tableGetLegalManagement.UserLegalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserLegal\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.UserLegalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NWNW {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.NWNWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NWNW\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.NWNWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NENW {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.NENWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NENW\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.NENWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SWNW {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.SWNWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWNW\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SWNWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SENW {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.SENWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SENW\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SENWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NWNE {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.NWNEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NWNE\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.NWNEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NENE {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.NENEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NENE\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.NENEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SWNE {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.SWNEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWNE\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SWNEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SENE {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.SENEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SENE\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SENEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NWSW {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.NWSWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NWSW\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.NWSWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NESW {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.NESWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NESW\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.NESWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SWSW {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.SWSWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWSW\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SWSWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SESW {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.SESWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SESW\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SESWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NWSE {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.NWSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NWSE\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.NWSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short NESE {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.NESEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NESE\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.NESEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SWSE {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.SWSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SWSE\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SWSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SESE {
                get {
                    try {
                        return ((short)(this[this.tableGetLegalManagement.SESEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SESE\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SESEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TownShip {
                get {
                    try {
                        return ((string)(this[this.tableGetLegalManagement.TownShipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TownShip\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.TownShipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Range {
                get {
                    try {
                        return ((string)(this[this.tableGetLegalManagement.RangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Range\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.RangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Section {
                get {
                    try {
                        return ((string)(this[this.tableGetLegalManagement.SectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Section\' in table \'GetLegalManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetLegalManagement.SectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubdivisionIDNull() {
                return this.IsNull(this.tableGetLegalManagement.SubdivisionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubdivisionIDNull() {
                this[this.tableGetLegalManagement.SubdivisionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubNameNull() {
                return this.IsNull(this.tableGetLegalManagement.SubNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubNameNull() {
                this[this.tableGetLegalManagement.SubNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotNull() {
                return this.IsNull(this.tableGetLegalManagement.LotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotNull() {
                this[this.tableGetLegalManagement.LotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlockNull() {
                return this.IsNull(this.tableGetLegalManagement.BlockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlockNull() {
                this[this.tableGetLegalManagement.BlockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserLegalNull() {
                return this.IsNull(this.tableGetLegalManagement.UserLegalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserLegalNull() {
                this[this.tableGetLegalManagement.UserLegalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNWNWNull() {
                return this.IsNull(this.tableGetLegalManagement.NWNWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNWNWNull() {
                this[this.tableGetLegalManagement.NWNWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNENWNull() {
                return this.IsNull(this.tableGetLegalManagement.NENWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNENWNull() {
                this[this.tableGetLegalManagement.NENWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWNWNull() {
                return this.IsNull(this.tableGetLegalManagement.SWNWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWNWNull() {
                this[this.tableGetLegalManagement.SWNWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSENWNull() {
                return this.IsNull(this.tableGetLegalManagement.SENWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSENWNull() {
                this[this.tableGetLegalManagement.SENWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNWNENull() {
                return this.IsNull(this.tableGetLegalManagement.NWNEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNWNENull() {
                this[this.tableGetLegalManagement.NWNEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNENENull() {
                return this.IsNull(this.tableGetLegalManagement.NENEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNENENull() {
                this[this.tableGetLegalManagement.NENEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWNENull() {
                return this.IsNull(this.tableGetLegalManagement.SWNEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWNENull() {
                this[this.tableGetLegalManagement.SWNEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSENENull() {
                return this.IsNull(this.tableGetLegalManagement.SENEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSENENull() {
                this[this.tableGetLegalManagement.SENEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNWSWNull() {
                return this.IsNull(this.tableGetLegalManagement.NWSWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNWSWNull() {
                this[this.tableGetLegalManagement.NWSWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNESWNull() {
                return this.IsNull(this.tableGetLegalManagement.NESWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNESWNull() {
                this[this.tableGetLegalManagement.NESWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWSWNull() {
                return this.IsNull(this.tableGetLegalManagement.SWSWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWSWNull() {
                this[this.tableGetLegalManagement.SWSWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSESWNull() {
                return this.IsNull(this.tableGetLegalManagement.SESWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSESWNull() {
                this[this.tableGetLegalManagement.SESWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNWSENull() {
                return this.IsNull(this.tableGetLegalManagement.NWSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNWSENull() {
                this[this.tableGetLegalManagement.NWSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNESENull() {
                return this.IsNull(this.tableGetLegalManagement.NESEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNESENull() {
                this[this.tableGetLegalManagement.NESEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSWSENull() {
                return this.IsNull(this.tableGetLegalManagement.SWSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSWSENull() {
                this[this.tableGetLegalManagement.SWSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSESENull() {
                return this.IsNull(this.tableGetLegalManagement.SESEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSESENull() {
                this[this.tableGetLegalManagement.SESEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTownShipNull() {
                return this.IsNull(this.tableGetLegalManagement.TownShipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTownShipNull() {
                this[this.tableGetLegalManagement.TownShipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRangeNull() {
                return this.IsNull(this.tableGetLegalManagement.RangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRangeNull() {
                this[this.tableGetLegalManagement.RangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNull() {
                return this.IsNull(this.tableGetLegalManagement.SectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNull() {
                this[this.tableGetLegalManagement.SectionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListSubdivisionRowChangeEvent : global::System.EventArgs {
            
            private ListSubdivisionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubdivisionRowChangeEvent(ListSubdivisionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListSubdivisionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetLegalManagementRowChangeEvent : global::System.EventArgs {
            
            private GetLegalManagementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLegalManagementRowChangeEvent(GetLegalManagementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetLegalManagementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591