//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F82001BuildingPermitData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F82001BuildingPermitData : global::System.Data.DataSet {
        
        private F82001GetBuildingPermitDetailsDataTable tableF82001GetBuildingPermitDetails;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F82001BuildingPermitData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F82001BuildingPermitData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["F82001GetBuildingPermitDetails"] != null)) {
                    base.Tables.Add(new F82001GetBuildingPermitDetailsDataTable(ds.Tables["F82001GetBuildingPermitDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F82001GetBuildingPermitDetailsDataTable F82001GetBuildingPermitDetails {
            get {
                return this.tableF82001GetBuildingPermitDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F82001BuildingPermitData cln = ((F82001BuildingPermitData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["F82001GetBuildingPermitDetails"] != null)) {
                    base.Tables.Add(new F82001GetBuildingPermitDetailsDataTable(ds.Tables["F82001GetBuildingPermitDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableF82001GetBuildingPermitDetails = ((F82001GetBuildingPermitDetailsDataTable)(base.Tables["F82001GetBuildingPermitDetails"]));
            if ((initTable == true)) {
                if ((this.tableF82001GetBuildingPermitDetails != null)) {
                    this.tableF82001GetBuildingPermitDetails.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F82001BuildingPermitData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F82001BuildingPermitData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableF82001GetBuildingPermitDetails = new F82001GetBuildingPermitDetailsDataTable();
            base.Tables.Add(this.tableF82001GetBuildingPermitDetails);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF82001GetBuildingPermitDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F82001BuildingPermitData ds = new F82001BuildingPermitData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void F82001GetBuildingPermitDetailsRowChangeEventHandler(object sender, F82001GetBuildingPermitDetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F82001GetBuildingPermitDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPermitID;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnLegalDescription;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnOwnerPhone;
            
            private global::System.Data.DataColumn columnOwnerAddress;
            
            private global::System.Data.DataColumn columnOwnerCity;
            
            private global::System.Data.DataColumn columnOwnerState;
            
            private global::System.Data.DataColumn columnOwnerZip;
            
            private global::System.Data.DataColumn columnGeneralContractorID;
            
            private global::System.Data.DataColumn columnElectricalContractorID;
            
            private global::System.Data.DataColumn columnPlumbingContractorID;
            
            private global::System.Data.DataColumn columnMechanicalContractorID;
            
            private global::System.Data.DataColumn columnOtherContractorID;
            
            private global::System.Data.DataColumn columnGeneralContractor;
            
            private global::System.Data.DataColumn columnElectricalContractor;
            
            private global::System.Data.DataColumn columnPlumbingContractor;
            
            private global::System.Data.DataColumn columnMechanicalContractor;
            
            private global::System.Data.DataColumn columnOtherContractor;
            
            private global::System.Data.DataColumn columnOccInspDate;
            
            private global::System.Data.DataColumn columnApprovedByID;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnWorkDescription;
            
            private global::System.Data.DataColumn columnBuildingUse;
            
            private global::System.Data.DataColumn columnConstructionType;
            
            private global::System.Data.DataColumn columnOffStreetParking;
            
            private global::System.Data.DataColumn columnOccupancyGroup;
            
            private global::System.Data.DataColumn columnDwellingUnits;
            
            private global::System.Data.DataColumn columnZone;
            
            private global::System.Data.DataColumn columnSprinkler;
            
            private global::System.Data.DataColumn columnOccupancyLoad;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F82001GetBuildingPermitDetailsDataTable() {
                this.TableName = "F82001GetBuildingPermitDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F82001GetBuildingPermitDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F82001GetBuildingPermitDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitIDColumn {
                get {
                    return this.columnPermitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LegalDescriptionColumn {
                get {
                    return this.columnLegalDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerPhoneColumn {
                get {
                    return this.columnOwnerPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerAddressColumn {
                get {
                    return this.columnOwnerAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCityColumn {
                get {
                    return this.columnOwnerCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStateColumn {
                get {
                    return this.columnOwnerState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerZipColumn {
                get {
                    return this.columnOwnerZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GeneralContractorIDColumn {
                get {
                    return this.columnGeneralContractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElectricalContractorIDColumn {
                get {
                    return this.columnElectricalContractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlumbingContractorIDColumn {
                get {
                    return this.columnPlumbingContractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MechanicalContractorIDColumn {
                get {
                    return this.columnMechanicalContractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherContractorIDColumn {
                get {
                    return this.columnOtherContractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GeneralContractorColumn {
                get {
                    return this.columnGeneralContractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElectricalContractorColumn {
                get {
                    return this.columnElectricalContractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlumbingContractorColumn {
                get {
                    return this.columnPlumbingContractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MechanicalContractorColumn {
                get {
                    return this.columnMechanicalContractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherContractorColumn {
                get {
                    return this.columnOtherContractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccInspDateColumn {
                get {
                    return this.columnOccInspDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedByIDColumn {
                get {
                    return this.columnApprovedByID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkDescriptionColumn {
                get {
                    return this.columnWorkDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildingUseColumn {
                get {
                    return this.columnBuildingUse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructionTypeColumn {
                get {
                    return this.columnConstructionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OffStreetParkingColumn {
                get {
                    return this.columnOffStreetParking;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccupancyGroupColumn {
                get {
                    return this.columnOccupancyGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DwellingUnitsColumn {
                get {
                    return this.columnDwellingUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneColumn {
                get {
                    return this.columnZone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SprinklerColumn {
                get {
                    return this.columnSprinkler;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccupancyLoadColumn {
                get {
                    return this.columnOccupancyLoad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F82001GetBuildingPermitDetailsRow this[int index] {
                get {
                    return ((F82001GetBuildingPermitDetailsRow)(this.Rows[index]));
                }
            }
            
            public event F82001GetBuildingPermitDetailsRowChangeEventHandler F82001GetBuildingPermitDetailsRowChanging;
            
            public event F82001GetBuildingPermitDetailsRowChangeEventHandler F82001GetBuildingPermitDetailsRowChanged;
            
            public event F82001GetBuildingPermitDetailsRowChangeEventHandler F82001GetBuildingPermitDetailsRowDeleting;
            
            public event F82001GetBuildingPermitDetailsRowChangeEventHandler F82001GetBuildingPermitDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF82001GetBuildingPermitDetailsRow(F82001GetBuildingPermitDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F82001GetBuildingPermitDetailsRow AddF82001GetBuildingPermitDetailsRow(
                        int PermitID, 
                        int EventID, 
                        string LegalDescription, 
                        string OwnerName, 
                        string OwnerPhone, 
                        string OwnerAddress, 
                        string OwnerCity, 
                        string OwnerState, 
                        string OwnerZip, 
                        int GeneralContractorID, 
                        int ElectricalContractorID, 
                        int PlumbingContractorID, 
                        int MechanicalContractorID, 
                        int OtherContractorID, 
                        string GeneralContractor, 
                        string ElectricalContractor, 
                        string PlumbingContractor, 
                        string MechanicalContractor, 
                        string OtherContractor, 
                        string OccInspDate, 
                        int ApprovedByID, 
                        string UserName, 
                        string WorkDescription, 
                        string BuildingUse, 
                        string ConstructionType, 
                        string OffStreetParking, 
                        string OccupancyGroup, 
                        short DwellingUnits, 
                        string Zone, 
                        string Sprinkler, 
                        int OccupancyLoad) {
                F82001GetBuildingPermitDetailsRow rowF82001GetBuildingPermitDetailsRow = ((F82001GetBuildingPermitDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PermitID,
                        EventID,
                        LegalDescription,
                        OwnerName,
                        OwnerPhone,
                        OwnerAddress,
                        OwnerCity,
                        OwnerState,
                        OwnerZip,
                        GeneralContractorID,
                        ElectricalContractorID,
                        PlumbingContractorID,
                        MechanicalContractorID,
                        OtherContractorID,
                        GeneralContractor,
                        ElectricalContractor,
                        PlumbingContractor,
                        MechanicalContractor,
                        OtherContractor,
                        OccInspDate,
                        ApprovedByID,
                        UserName,
                        WorkDescription,
                        BuildingUse,
                        ConstructionType,
                        OffStreetParking,
                        OccupancyGroup,
                        DwellingUnits,
                        Zone,
                        Sprinkler,
                        OccupancyLoad};
                rowF82001GetBuildingPermitDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF82001GetBuildingPermitDetailsRow);
                return rowF82001GetBuildingPermitDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F82001GetBuildingPermitDetailsDataTable cln = ((F82001GetBuildingPermitDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F82001GetBuildingPermitDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPermitID = base.Columns["PermitID"];
                this.columnEventID = base.Columns["EventID"];
                this.columnLegalDescription = base.Columns["LegalDescription"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnOwnerPhone = base.Columns["OwnerPhone"];
                this.columnOwnerAddress = base.Columns["OwnerAddress"];
                this.columnOwnerCity = base.Columns["OwnerCity"];
                this.columnOwnerState = base.Columns["OwnerState"];
                this.columnOwnerZip = base.Columns["OwnerZip"];
                this.columnGeneralContractorID = base.Columns["GeneralContractorID"];
                this.columnElectricalContractorID = base.Columns["ElectricalContractorID"];
                this.columnPlumbingContractorID = base.Columns["PlumbingContractorID"];
                this.columnMechanicalContractorID = base.Columns["MechanicalContractorID"];
                this.columnOtherContractorID = base.Columns["OtherContractorID"];
                this.columnGeneralContractor = base.Columns["GeneralContractor"];
                this.columnElectricalContractor = base.Columns["ElectricalContractor"];
                this.columnPlumbingContractor = base.Columns["PlumbingContractor"];
                this.columnMechanicalContractor = base.Columns["MechanicalContractor"];
                this.columnOtherContractor = base.Columns["OtherContractor"];
                this.columnOccInspDate = base.Columns["OccInspDate"];
                this.columnApprovedByID = base.Columns["ApprovedByID"];
                this.columnUserName = base.Columns["UserName"];
                this.columnWorkDescription = base.Columns["WorkDescription"];
                this.columnBuildingUse = base.Columns["BuildingUse"];
                this.columnConstructionType = base.Columns["ConstructionType"];
                this.columnOffStreetParking = base.Columns["OffStreetParking"];
                this.columnOccupancyGroup = base.Columns["OccupancyGroup"];
                this.columnDwellingUnits = base.Columns["DwellingUnits"];
                this.columnZone = base.Columns["Zone"];
                this.columnSprinkler = base.Columns["Sprinkler"];
                this.columnOccupancyLoad = base.Columns["OccupancyLoad"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPermitID = new global::System.Data.DataColumn("PermitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitID);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnLegalDescription = new global::System.Data.DataColumn("LegalDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLegalDescription);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnOwnerPhone = new global::System.Data.DataColumn("OwnerPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerPhone);
                this.columnOwnerAddress = new global::System.Data.DataColumn("OwnerAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerAddress);
                this.columnOwnerCity = new global::System.Data.DataColumn("OwnerCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCity);
                this.columnOwnerState = new global::System.Data.DataColumn("OwnerState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerState);
                this.columnOwnerZip = new global::System.Data.DataColumn("OwnerZip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerZip);
                this.columnGeneralContractorID = new global::System.Data.DataColumn("GeneralContractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGeneralContractorID);
                this.columnElectricalContractorID = new global::System.Data.DataColumn("ElectricalContractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElectricalContractorID);
                this.columnPlumbingContractorID = new global::System.Data.DataColumn("PlumbingContractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlumbingContractorID);
                this.columnMechanicalContractorID = new global::System.Data.DataColumn("MechanicalContractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMechanicalContractorID);
                this.columnOtherContractorID = new global::System.Data.DataColumn("OtherContractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherContractorID);
                this.columnGeneralContractor = new global::System.Data.DataColumn("GeneralContractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGeneralContractor);
                this.columnElectricalContractor = new global::System.Data.DataColumn("ElectricalContractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElectricalContractor);
                this.columnPlumbingContractor = new global::System.Data.DataColumn("PlumbingContractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlumbingContractor);
                this.columnMechanicalContractor = new global::System.Data.DataColumn("MechanicalContractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMechanicalContractor);
                this.columnOtherContractor = new global::System.Data.DataColumn("OtherContractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherContractor);
                this.columnOccInspDate = new global::System.Data.DataColumn("OccInspDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccInspDate);
                this.columnApprovedByID = new global::System.Data.DataColumn("ApprovedByID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedByID);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnWorkDescription = new global::System.Data.DataColumn("WorkDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkDescription);
                this.columnBuildingUse = new global::System.Data.DataColumn("BuildingUse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingUse);
                this.columnConstructionType = new global::System.Data.DataColumn("ConstructionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructionType);
                this.columnOffStreetParking = new global::System.Data.DataColumn("OffStreetParking", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffStreetParking);
                this.columnOccupancyGroup = new global::System.Data.DataColumn("OccupancyGroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccupancyGroup);
                this.columnDwellingUnits = new global::System.Data.DataColumn("DwellingUnits", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDwellingUnits);
                this.columnZone = new global::System.Data.DataColumn("Zone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZone);
                this.columnSprinkler = new global::System.Data.DataColumn("Sprinkler", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSprinkler);
                this.columnOccupancyLoad = new global::System.Data.DataColumn("OccupancyLoad", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccupancyLoad);
                this.columnPermitID.ReadOnly = true;
                this.columnLegalDescription.MaxLength = 5000;
                this.columnOwnerName.MaxLength = 50;
                this.columnOwnerPhone.MaxLength = 50;
                this.columnOwnerAddress.MaxLength = 50;
                this.columnOwnerCity.MaxLength = 50;
                this.columnOwnerState.MaxLength = 10;
                this.columnOwnerZip.MaxLength = 50;
                this.columnGeneralContractor.ReadOnly = true;
                this.columnGeneralContractor.MaxLength = 50;
                this.columnElectricalContractor.ReadOnly = true;
                this.columnElectricalContractor.MaxLength = 50;
                this.columnPlumbingContractor.ReadOnly = true;
                this.columnPlumbingContractor.MaxLength = 50;
                this.columnMechanicalContractor.ReadOnly = true;
                this.columnMechanicalContractor.MaxLength = 50;
                this.columnOtherContractor.ReadOnly = true;
                this.columnOtherContractor.MaxLength = 50;
                this.columnOccInspDate.ReadOnly = true;
                this.columnOccInspDate.MaxLength = 10;
                this.columnUserName.ReadOnly = true;
                this.columnUserName.MaxLength = 50;
                this.columnWorkDescription.MaxLength = 5000;
                this.columnBuildingUse.MaxLength = 50;
                this.columnConstructionType.MaxLength = 50;
                this.columnOffStreetParking.MaxLength = 50;
                this.columnOccupancyGroup.MaxLength = 50;
                this.columnZone.MaxLength = 50;
                this.columnSprinkler.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F82001GetBuildingPermitDetailsRow NewF82001GetBuildingPermitDetailsRow() {
                return ((F82001GetBuildingPermitDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F82001GetBuildingPermitDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F82001GetBuildingPermitDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F82001GetBuildingPermitDetailsRowChanged != null)) {
                    this.F82001GetBuildingPermitDetailsRowChanged(this, new F82001GetBuildingPermitDetailsRowChangeEvent(((F82001GetBuildingPermitDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F82001GetBuildingPermitDetailsRowChanging != null)) {
                    this.F82001GetBuildingPermitDetailsRowChanging(this, new F82001GetBuildingPermitDetailsRowChangeEvent(((F82001GetBuildingPermitDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F82001GetBuildingPermitDetailsRowDeleted != null)) {
                    this.F82001GetBuildingPermitDetailsRowDeleted(this, new F82001GetBuildingPermitDetailsRowChangeEvent(((F82001GetBuildingPermitDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F82001GetBuildingPermitDetailsRowDeleting != null)) {
                    this.F82001GetBuildingPermitDetailsRowDeleting(this, new F82001GetBuildingPermitDetailsRowChangeEvent(((F82001GetBuildingPermitDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF82001GetBuildingPermitDetailsRow(F82001GetBuildingPermitDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F82001BuildingPermitData ds = new F82001BuildingPermitData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F82001GetBuildingPermitDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F82001GetBuildingPermitDetailsRow : global::System.Data.DataRow {
            
            private F82001GetBuildingPermitDetailsDataTable tableF82001GetBuildingPermitDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F82001GetBuildingPermitDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF82001GetBuildingPermitDetails = ((F82001GetBuildingPermitDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitID {
                get {
                    try {
                        return ((int)(this[this.tableF82001GetBuildingPermitDetails.PermitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitID\' in table \'F82001GetBuildingPermitDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.PermitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tableF82001GetBuildingPermitDetails.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'F82001GetBuildingPermitDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LegalDescription {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.LegalDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LegalDescription\' in table \'F82001GetBuildingPermitDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.LegalDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'F82001GetBuildingPermitDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerPhone {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OwnerPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerPhone\' in table \'F82001GetBuildingPermitDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OwnerPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerAddress {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OwnerAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerAddress\' in table \'F82001GetBuildingPermitDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OwnerAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerCity {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OwnerCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCity\' in table \'F82001GetBuildingPermitDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OwnerCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerState {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OwnerStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerState\' in table \'F82001GetBuildingPermitDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OwnerStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerZip {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OwnerZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerZip\' in table \'F82001GetBuildingPermitDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OwnerZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GeneralContractorID {
                get {
                    try {
                        return ((int)(this[this.tableF82001GetBuildingPermitDetails.GeneralContractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GeneralContractorID\' in table \'F82001GetBuildingPermitDetai" +
                                "ls\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.GeneralContractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ElectricalContractorID {
                get {
                    try {
                        return ((int)(this[this.tableF82001GetBuildingPermitDetails.ElectricalContractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ElectricalContractorID\' in table \'F82001GetBuildingPermitDe" +
                                "tails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.ElectricalContractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PlumbingContractorID {
                get {
                    try {
                        return ((int)(this[this.tableF82001GetBuildingPermitDetails.PlumbingContractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlumbingContractorID\' in table \'F82001GetBuildingPermitDeta" +
                                "ils\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.PlumbingContractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MechanicalContractorID {
                get {
                    try {
                        return ((int)(this[this.tableF82001GetBuildingPermitDetails.MechanicalContractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MechanicalContractorID\' in table \'F82001GetBuildingPermitDe" +
                                "tails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.MechanicalContractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OtherContractorID {
                get {
                    try {
                        return ((int)(this[this.tableF82001GetBuildingPermitDetails.OtherContractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherContractorID\' in table \'F82001GetBuildingPermitDetails" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OtherContractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GeneralContractor {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.GeneralContractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GeneralContractor\' in table \'F82001GetBuildingPermitDetails" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.GeneralContractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ElectricalContractor {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.ElectricalContractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ElectricalContractor\' in table \'F82001GetBuildingPermitDeta" +
                                "ils\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.ElectricalContractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlumbingContractor {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.PlumbingContractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlumbingContractor\' in table \'F82001GetBuildingPermitDetail" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.PlumbingContractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MechanicalContractor {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.MechanicalContractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MechanicalContractor\' in table \'F82001GetBuildingPermitDeta" +
                                "ils\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.MechanicalContractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherContractor {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OtherContractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherContractor\' in table \'F82001GetBuildingPermitDetails\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OtherContractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OccInspDate {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OccInspDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OccInspDate\' in table \'F82001GetBuildingPermitDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OccInspDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ApprovedByID {
                get {
                    try {
                        return ((int)(this[this.tableF82001GetBuildingPermitDetails.ApprovedByIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedByID\' in table \'F82001GetBuildingPermitDetails\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.ApprovedByIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserName\' in table \'F82001GetBuildingPermitDetails\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkDescription {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.WorkDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkDescription\' in table \'F82001GetBuildingPermitDetails\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.WorkDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuildingUse {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.BuildingUseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildingUse\' in table \'F82001GetBuildingPermitDetails\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.BuildingUseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConstructionType {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.ConstructionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConstructionType\' in table \'F82001GetBuildingPermitDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.ConstructionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OffStreetParking {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OffStreetParkingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OffStreetParking\' in table \'F82001GetBuildingPermitDetails\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OffStreetParkingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OccupancyGroup {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.OccupancyGroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OccupancyGroup\' in table \'F82001GetBuildingPermitDetails\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OccupancyGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DwellingUnits {
                get {
                    try {
                        return ((short)(this[this.tableF82001GetBuildingPermitDetails.DwellingUnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DwellingUnits\' in table \'F82001GetBuildingPermitDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.DwellingUnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zone {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.ZoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zone\' in table \'F82001GetBuildingPermitDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.ZoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sprinkler {
                get {
                    try {
                        return ((string)(this[this.tableF82001GetBuildingPermitDetails.SprinklerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sprinkler\' in table \'F82001GetBuildingPermitDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.SprinklerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OccupancyLoad {
                get {
                    try {
                        return ((int)(this[this.tableF82001GetBuildingPermitDetails.OccupancyLoadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OccupancyLoad\' in table \'F82001GetBuildingPermitDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableF82001GetBuildingPermitDetails.OccupancyLoadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitIDNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.PermitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitIDNull() {
                this[this.tableF82001GetBuildingPermitDetails.PermitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tableF82001GetBuildingPermitDetails.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLegalDescriptionNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.LegalDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLegalDescriptionNull() {
                this[this.tableF82001GetBuildingPermitDetails.LegalDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableF82001GetBuildingPermitDetails.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerPhoneNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OwnerPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerPhoneNull() {
                this[this.tableF82001GetBuildingPermitDetails.OwnerPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerAddressNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OwnerAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerAddressNull() {
                this[this.tableF82001GetBuildingPermitDetails.OwnerAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCityNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OwnerCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCityNull() {
                this[this.tableF82001GetBuildingPermitDetails.OwnerCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStateNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OwnerStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStateNull() {
                this[this.tableF82001GetBuildingPermitDetails.OwnerStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerZipNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OwnerZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerZipNull() {
                this[this.tableF82001GetBuildingPermitDetails.OwnerZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGeneralContractorIDNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.GeneralContractorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGeneralContractorIDNull() {
                this[this.tableF82001GetBuildingPermitDetails.GeneralContractorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsElectricalContractorIDNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.ElectricalContractorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetElectricalContractorIDNull() {
                this[this.tableF82001GetBuildingPermitDetails.ElectricalContractorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlumbingContractorIDNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.PlumbingContractorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlumbingContractorIDNull() {
                this[this.tableF82001GetBuildingPermitDetails.PlumbingContractorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMechanicalContractorIDNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.MechanicalContractorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMechanicalContractorIDNull() {
                this[this.tableF82001GetBuildingPermitDetails.MechanicalContractorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherContractorIDNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OtherContractorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherContractorIDNull() {
                this[this.tableF82001GetBuildingPermitDetails.OtherContractorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGeneralContractorNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.GeneralContractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGeneralContractorNull() {
                this[this.tableF82001GetBuildingPermitDetails.GeneralContractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsElectricalContractorNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.ElectricalContractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetElectricalContractorNull() {
                this[this.tableF82001GetBuildingPermitDetails.ElectricalContractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlumbingContractorNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.PlumbingContractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlumbingContractorNull() {
                this[this.tableF82001GetBuildingPermitDetails.PlumbingContractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMechanicalContractorNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.MechanicalContractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMechanicalContractorNull() {
                this[this.tableF82001GetBuildingPermitDetails.MechanicalContractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherContractorNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OtherContractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherContractorNull() {
                this[this.tableF82001GetBuildingPermitDetails.OtherContractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccInspDateNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OccInspDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccInspDateNull() {
                this[this.tableF82001GetBuildingPermitDetails.OccInspDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedByIDNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.ApprovedByIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedByIDNull() {
                this[this.tableF82001GetBuildingPermitDetails.ApprovedByIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableF82001GetBuildingPermitDetails.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkDescriptionNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.WorkDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkDescriptionNull() {
                this[this.tableF82001GetBuildingPermitDetails.WorkDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildingUseNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.BuildingUseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildingUseNull() {
                this[this.tableF82001GetBuildingPermitDetails.BuildingUseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructionTypeNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.ConstructionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructionTypeNull() {
                this[this.tableF82001GetBuildingPermitDetails.ConstructionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOffStreetParkingNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OffStreetParkingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOffStreetParkingNull() {
                this[this.tableF82001GetBuildingPermitDetails.OffStreetParkingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccupancyGroupNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OccupancyGroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccupancyGroupNull() {
                this[this.tableF82001GetBuildingPermitDetails.OccupancyGroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDwellingUnitsNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.DwellingUnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDwellingUnitsNull() {
                this[this.tableF82001GetBuildingPermitDetails.DwellingUnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.ZoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneNull() {
                this[this.tableF82001GetBuildingPermitDetails.ZoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSprinklerNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.SprinklerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSprinklerNull() {
                this[this.tableF82001GetBuildingPermitDetails.SprinklerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccupancyLoadNull() {
                return this.IsNull(this.tableF82001GetBuildingPermitDetails.OccupancyLoadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccupancyLoadNull() {
                this[this.tableF82001GetBuildingPermitDetails.OccupancyLoadColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F82001GetBuildingPermitDetailsRowChangeEvent : global::System.EventArgs {
            
            private F82001GetBuildingPermitDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F82001GetBuildingPermitDetailsRowChangeEvent(F82001GetBuildingPermitDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F82001GetBuildingPermitDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591