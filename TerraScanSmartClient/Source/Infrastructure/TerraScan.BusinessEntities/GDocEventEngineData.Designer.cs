//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GDocEventEngineData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GDocEventEngineData : global::System.Data.DataSet {
        
        private EventEngineHeaderTableDataTable tableEventEngineHeaderTable;
        
        private GDocEventEngineDataTableDataTable tableGDocEventEngineDataTable;
        
        private ListValidKeyIDDataTable tableListValidKeyID;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GDocEventEngineData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GDocEventEngineData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EventEngineHeaderTable"] != null)) {
                    base.Tables.Add(new EventEngineHeaderTableDataTable(ds.Tables["EventEngineHeaderTable"]));
                }
                if ((ds.Tables["GDocEventEngineDataTable"] != null)) {
                    base.Tables.Add(new GDocEventEngineDataTableDataTable(ds.Tables["GDocEventEngineDataTable"]));
                }
                if ((ds.Tables["ListValidKeyID"] != null)) {
                    base.Tables.Add(new ListValidKeyIDDataTable(ds.Tables["ListValidKeyID"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventEngineHeaderTableDataTable EventEngineHeaderTable {
            get {
                return this.tableEventEngineHeaderTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GDocEventEngineDataTableDataTable GDocEventEngineDataTable {
            get {
                return this.tableGDocEventEngineDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListValidKeyIDDataTable ListValidKeyID {
            get {
                return this.tableListValidKeyID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GDocEventEngineData cln = ((GDocEventEngineData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EventEngineHeaderTable"] != null)) {
                    base.Tables.Add(new EventEngineHeaderTableDataTable(ds.Tables["EventEngineHeaderTable"]));
                }
                if ((ds.Tables["GDocEventEngineDataTable"] != null)) {
                    base.Tables.Add(new GDocEventEngineDataTableDataTable(ds.Tables["GDocEventEngineDataTable"]));
                }
                if ((ds.Tables["ListValidKeyID"] != null)) {
                    base.Tables.Add(new ListValidKeyIDDataTable(ds.Tables["ListValidKeyID"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEventEngineHeaderTable = ((EventEngineHeaderTableDataTable)(base.Tables["EventEngineHeaderTable"]));
            if ((initTable == true)) {
                if ((this.tableEventEngineHeaderTable != null)) {
                    this.tableEventEngineHeaderTable.InitVars();
                }
            }
            this.tableGDocEventEngineDataTable = ((GDocEventEngineDataTableDataTable)(base.Tables["GDocEventEngineDataTable"]));
            if ((initTable == true)) {
                if ((this.tableGDocEventEngineDataTable != null)) {
                    this.tableGDocEventEngineDataTable.InitVars();
                }
            }
            this.tableListValidKeyID = ((ListValidKeyIDDataTable)(base.Tables["ListValidKeyID"]));
            if ((initTable == true)) {
                if ((this.tableListValidKeyID != null)) {
                    this.tableListValidKeyID.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GDocEventEngineData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GDocEventEngineData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEventEngineHeaderTable = new EventEngineHeaderTableDataTable();
            base.Tables.Add(this.tableEventEngineHeaderTable);
            this.tableGDocEventEngineDataTable = new GDocEventEngineDataTableDataTable();
            base.Tables.Add(this.tableGDocEventEngineDataTable);
            this.tableListValidKeyID = new ListValidKeyIDDataTable();
            base.Tables.Add(this.tableListValidKeyID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEventEngineHeaderTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGDocEventEngineDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListValidKeyID() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GDocEventEngineData ds = new GDocEventEngineData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EventEngineHeaderTableRowChangeEventHandler(object sender, EventEngineHeaderTableRowChangeEvent e);
        
        public delegate void GDocEventEngineDataTableRowChangeEventHandler(object sender, GDocEventEngineDataTableRowChangeEvent e);
        
        public delegate void ListValidKeyIDRowChangeEventHandler(object sender, ListValidKeyIDRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventEngineHeaderTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFeatureClassLabel;
            
            private global::System.Data.DataColumn columnFeatureClass;
            
            private global::System.Data.DataColumn columnSystemColor;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventEngineHeaderTableDataTable() {
                this.TableName = "EventEngineHeaderTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventEngineHeaderTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EventEngineHeaderTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassLabelColumn {
                get {
                    return this.columnFeatureClassLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassColumn {
                get {
                    return this.columnFeatureClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystemColorColumn {
                get {
                    return this.columnSystemColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventEngineHeaderTableRow this[int index] {
                get {
                    return ((EventEngineHeaderTableRow)(this.Rows[index]));
                }
            }
            
            public event EventEngineHeaderTableRowChangeEventHandler EventEngineHeaderTableRowChanging;
            
            public event EventEngineHeaderTableRowChangeEventHandler EventEngineHeaderTableRowChanged;
            
            public event EventEngineHeaderTableRowChangeEventHandler EventEngineHeaderTableRowDeleting;
            
            public event EventEngineHeaderTableRowChangeEventHandler EventEngineHeaderTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEventEngineHeaderTableRow(EventEngineHeaderTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventEngineHeaderTableRow AddEventEngineHeaderTableRow(string FeatureClassLabel, string FeatureClass, string SystemColor, int FeatureClassID) {
                EventEngineHeaderTableRow rowEventEngineHeaderTableRow = ((EventEngineHeaderTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FeatureClassLabel,
                        FeatureClass,
                        SystemColor,
                        FeatureClassID};
                rowEventEngineHeaderTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventEngineHeaderTableRow);
                return rowEventEngineHeaderTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EventEngineHeaderTableDataTable cln = ((EventEngineHeaderTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventEngineHeaderTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeatureClassLabel = base.Columns["FeatureClassLabel"];
                this.columnFeatureClass = base.Columns["FeatureClass"];
                this.columnSystemColor = base.Columns["SystemColor"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeatureClassLabel = new global::System.Data.DataColumn("FeatureClassLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassLabel);
                this.columnFeatureClass = new global::System.Data.DataColumn("FeatureClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClass);
                this.columnSystemColor = new global::System.Data.DataColumn("SystemColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemColor);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnFeatureClassLabel.ReadOnly = true;
                this.columnFeatureClassLabel.MaxLength = 12;
                this.columnFeatureClass.MaxLength = 50;
                this.columnSystemColor.MaxLength = 30;
                this.columnFeatureClassID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventEngineHeaderTableRow NewEventEngineHeaderTableRow() {
                return ((EventEngineHeaderTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventEngineHeaderTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EventEngineHeaderTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventEngineHeaderTableRowChanged != null)) {
                    this.EventEngineHeaderTableRowChanged(this, new EventEngineHeaderTableRowChangeEvent(((EventEngineHeaderTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventEngineHeaderTableRowChanging != null)) {
                    this.EventEngineHeaderTableRowChanging(this, new EventEngineHeaderTableRowChangeEvent(((EventEngineHeaderTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventEngineHeaderTableRowDeleted != null)) {
                    this.EventEngineHeaderTableRowDeleted(this, new EventEngineHeaderTableRowChangeEvent(((EventEngineHeaderTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventEngineHeaderTableRowDeleting != null)) {
                    this.EventEngineHeaderTableRowDeleting(this, new EventEngineHeaderTableRowChangeEvent(((EventEngineHeaderTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEventEngineHeaderTableRow(EventEngineHeaderTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GDocEventEngineData ds = new GDocEventEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventEngineHeaderTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GDocEventEngineDataTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAddRow;
            
            private global::System.Data.DataColumn columnEventType;
            
            private global::System.Data.DataColumn columnTempColor;
            
            private global::System.Data.DataColumn columnStatusColor;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnWOID;
            
            private global::System.Data.DataColumn columnIsComplete;
            
            private global::System.Data.DataColumn columnParent;
            
            private global::System.Data.DataColumn columnChild1;
            
            private global::System.Data.DataColumn columnChild2;
            
            private global::System.Data.DataColumn columnlevels;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnEventTypeID;
            
            private global::System.Data.DataColumn columnEventNumber;
            
            private global::System.Data.DataColumn columnIsWorkOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GDocEventEngineDataTableDataTable() {
                this.TableName = "GDocEventEngineDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GDocEventEngineDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GDocEventEngineDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddRowColumn {
                get {
                    return this.columnAddRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventTypeColumn {
                get {
                    return this.columnEventType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempColorColumn {
                get {
                    return this.columnTempColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColorColumn {
                get {
                    return this.columnStatusColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WOIDColumn {
                get {
                    return this.columnWOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCompleteColumn {
                get {
                    return this.columnIsComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentColumn {
                get {
                    return this.columnParent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Child1Column {
                get {
                    return this.columnChild1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Child2Column {
                get {
                    return this.columnChild2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn levelsColumn {
                get {
                    return this.columnlevels;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventTypeIDColumn {
                get {
                    return this.columnEventTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventNumberColumn {
                get {
                    return this.columnEventNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsWorkOrderColumn {
                get {
                    return this.columnIsWorkOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GDocEventEngineDataTableRow this[int index] {
                get {
                    return ((GDocEventEngineDataTableRow)(this.Rows[index]));
                }
            }
            
            public event GDocEventEngineDataTableRowChangeEventHandler GDocEventEngineDataTableRowChanging;
            
            public event GDocEventEngineDataTableRowChangeEventHandler GDocEventEngineDataTableRowChanged;
            
            public event GDocEventEngineDataTableRowChangeEventHandler GDocEventEngineDataTableRowDeleting;
            
            public event GDocEventEngineDataTableRowChangeEventHandler GDocEventEngineDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGDocEventEngineDataTableRow(GDocEventEngineDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GDocEventEngineDataTableRow AddGDocEventEngineDataTableRow(
                        string AddRow, 
                        string EventType, 
                        string TempColor, 
                        string StatusColor, 
                        string Status, 
                        System.DateTime EventDate, 
                        int WOID, 
                        bool IsComplete, 
                        int Parent, 
                        int Child1, 
                        int Child2, 
                        int levels, 
                        int EventID, 
                        int EventTypeID, 
                        string EventNumber, 
                        bool IsWorkOrder) {
                GDocEventEngineDataTableRow rowGDocEventEngineDataTableRow = ((GDocEventEngineDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AddRow,
                        EventType,
                        TempColor,
                        StatusColor,
                        Status,
                        EventDate,
                        WOID,
                        IsComplete,
                        Parent,
                        Child1,
                        Child2,
                        levels,
                        EventID,
                        EventTypeID,
                        EventNumber,
                        IsWorkOrder};
                rowGDocEventEngineDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGDocEventEngineDataTableRow);
                return rowGDocEventEngineDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GDocEventEngineDataTableDataTable cln = ((GDocEventEngineDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GDocEventEngineDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAddRow = base.Columns["AddRow"];
                this.columnEventType = base.Columns["EventType"];
                this.columnTempColor = base.Columns["TempColor"];
                this.columnStatusColor = base.Columns["StatusColor"];
                this.columnStatus = base.Columns["Status"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnWOID = base.Columns["WOID"];
                this.columnIsComplete = base.Columns["IsComplete"];
                this.columnParent = base.Columns["Parent"];
                this.columnChild1 = base.Columns["Child1"];
                this.columnChild2 = base.Columns["Child2"];
                this.columnlevels = base.Columns["levels"];
                this.columnEventID = base.Columns["EventID"];
                this.columnEventTypeID = base.Columns["EventTypeID"];
                this.columnEventNumber = base.Columns["EventNumber"];
                this.columnIsWorkOrder = base.Columns["IsWorkOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAddRow = new global::System.Data.DataColumn("AddRow", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddRow);
                this.columnEventType = new global::System.Data.DataColumn("EventType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventType);
                this.columnTempColor = new global::System.Data.DataColumn("TempColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempColor);
                this.columnStatusColor = new global::System.Data.DataColumn("StatusColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatusColor);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnWOID = new global::System.Data.DataColumn("WOID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWOID);
                this.columnIsComplete = new global::System.Data.DataColumn("IsComplete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsComplete);
                this.columnParent = new global::System.Data.DataColumn("Parent", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent);
                this.columnChild1 = new global::System.Data.DataColumn("Child1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChild1);
                this.columnChild2 = new global::System.Data.DataColumn("Child2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChild2);
                this.columnlevels = new global::System.Data.DataColumn("levels", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlevels);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnEventTypeID = new global::System.Data.DataColumn("EventTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventTypeID);
                this.columnEventNumber = new global::System.Data.DataColumn("EventNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventNumber);
                this.columnIsWorkOrder = new global::System.Data.DataColumn("IsWorkOrder", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsWorkOrder);
                this.columnAddRow.ReadOnly = true;
                this.columnAddRow.MaxLength = 1;
                this.columnEventType.ReadOnly = true;
                this.columnEventType.MaxLength = 150;
                this.columnTempColor.ReadOnly = true;
                this.columnTempColor.MaxLength = 1;
                this.columnStatusColor.ReadOnly = true;
                this.columnStatusColor.MaxLength = 50;
                this.columnStatus.ReadOnly = true;
                this.columnStatus.MaxLength = 50;
                this.columnEventDate.ReadOnly = true;
                this.columnWOID.ReadOnly = true;
                this.columnIsComplete.ReadOnly = true;
                this.columnParent.ReadOnly = true;
                this.columnChild1.ReadOnly = true;
                this.columnChild2.ReadOnly = true;
                this.columnlevels.ReadOnly = true;
                this.columnEventID.ReadOnly = true;
                this.columnEventTypeID.ReadOnly = true;
                this.columnEventNumber.ReadOnly = true;
                this.columnEventNumber.MaxLength = 50;
                this.columnIsWorkOrder.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GDocEventEngineDataTableRow NewGDocEventEngineDataTableRow() {
                return ((GDocEventEngineDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GDocEventEngineDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GDocEventEngineDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GDocEventEngineDataTableRowChanged != null)) {
                    this.GDocEventEngineDataTableRowChanged(this, new GDocEventEngineDataTableRowChangeEvent(((GDocEventEngineDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GDocEventEngineDataTableRowChanging != null)) {
                    this.GDocEventEngineDataTableRowChanging(this, new GDocEventEngineDataTableRowChangeEvent(((GDocEventEngineDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GDocEventEngineDataTableRowDeleted != null)) {
                    this.GDocEventEngineDataTableRowDeleted(this, new GDocEventEngineDataTableRowChangeEvent(((GDocEventEngineDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GDocEventEngineDataTableRowDeleting != null)) {
                    this.GDocEventEngineDataTableRowDeleting(this, new GDocEventEngineDataTableRowChangeEvent(((GDocEventEngineDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGDocEventEngineDataTableRow(GDocEventEngineDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GDocEventEngineData ds = new GDocEventEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GDocEventEngineDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListValidKeyIDDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKeyIDExists;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidKeyIDDataTable() {
                this.TableName = "ListValidKeyID";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListValidKeyIDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListValidKeyIDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDExistsColumn {
                get {
                    return this.columnKeyIDExists;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidKeyIDRow this[int index] {
                get {
                    return ((ListValidKeyIDRow)(this.Rows[index]));
                }
            }
            
            public event ListValidKeyIDRowChangeEventHandler ListValidKeyIDRowChanging;
            
            public event ListValidKeyIDRowChangeEventHandler ListValidKeyIDRowChanged;
            
            public event ListValidKeyIDRowChangeEventHandler ListValidKeyIDRowDeleting;
            
            public event ListValidKeyIDRowChangeEventHandler ListValidKeyIDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListValidKeyIDRow(ListValidKeyIDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidKeyIDRow AddListValidKeyIDRow(int KeyIDExists) {
                ListValidKeyIDRow rowListValidKeyIDRow = ((ListValidKeyIDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KeyIDExists};
                rowListValidKeyIDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListValidKeyIDRow);
                return rowListValidKeyIDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListValidKeyIDDataTable cln = ((ListValidKeyIDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListValidKeyIDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKeyIDExists = base.Columns["KeyIDExists"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKeyIDExists = new global::System.Data.DataColumn("KeyIDExists", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyIDExists);
                this.columnKeyIDExists.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidKeyIDRow NewListValidKeyIDRow() {
                return ((ListValidKeyIDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListValidKeyIDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListValidKeyIDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListValidKeyIDRowChanged != null)) {
                    this.ListValidKeyIDRowChanged(this, new ListValidKeyIDRowChangeEvent(((ListValidKeyIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListValidKeyIDRowChanging != null)) {
                    this.ListValidKeyIDRowChanging(this, new ListValidKeyIDRowChangeEvent(((ListValidKeyIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListValidKeyIDRowDeleted != null)) {
                    this.ListValidKeyIDRowDeleted(this, new ListValidKeyIDRowChangeEvent(((ListValidKeyIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListValidKeyIDRowDeleting != null)) {
                    this.ListValidKeyIDRowDeleting(this, new ListValidKeyIDRowChangeEvent(((ListValidKeyIDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListValidKeyIDRow(ListValidKeyIDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GDocEventEngineData ds = new GDocEventEngineData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListValidKeyIDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EventEngineHeaderTableRow : global::System.Data.DataRow {
            
            private EventEngineHeaderTableDataTable tableEventEngineHeaderTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventEngineHeaderTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEventEngineHeaderTable = ((EventEngineHeaderTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeatureClassLabel {
                get {
                    try {
                        return ((string)(this[this.tableEventEngineHeaderTable.FeatureClassLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassLabel\' in table \'EventEngineHeaderTable\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableEventEngineHeaderTable.FeatureClassLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeatureClass {
                get {
                    try {
                        return ((string)(this[this.tableEventEngineHeaderTable.FeatureClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClass\' in table \'EventEngineHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventEngineHeaderTable.FeatureClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemColor {
                get {
                    try {
                        return ((string)(this[this.tableEventEngineHeaderTable.SystemColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SystemColor\' in table \'EventEngineHeaderTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventEngineHeaderTable.SystemColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableEventEngineHeaderTable.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'EventEngineHeaderTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableEventEngineHeaderTable.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassLabelNull() {
                return this.IsNull(this.tableEventEngineHeaderTable.FeatureClassLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassLabelNull() {
                this[this.tableEventEngineHeaderTable.FeatureClassLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassNull() {
                return this.IsNull(this.tableEventEngineHeaderTable.FeatureClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassNull() {
                this[this.tableEventEngineHeaderTable.FeatureClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSystemColorNull() {
                return this.IsNull(this.tableEventEngineHeaderTable.SystemColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSystemColorNull() {
                this[this.tableEventEngineHeaderTable.SystemColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableEventEngineHeaderTable.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableEventEngineHeaderTable.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GDocEventEngineDataTableRow : global::System.Data.DataRow {
            
            private GDocEventEngineDataTableDataTable tableGDocEventEngineDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GDocEventEngineDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGDocEventEngineDataTable = ((GDocEventEngineDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddRow {
                get {
                    try {
                        return ((string)(this[this.tableGDocEventEngineDataTable.AddRowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddRow\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.AddRowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventType {
                get {
                    try {
                        return ((string)(this[this.tableGDocEventEngineDataTable.EventTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventType\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.EventTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TempColor {
                get {
                    try {
                        return ((string)(this[this.tableGDocEventEngineDataTable.TempColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TempColor\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.TempColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatusColor {
                get {
                    try {
                        return ((string)(this[this.tableGDocEventEngineDataTable.StatusColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StatusColor\' in table \'GDocEventEngineDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.StatusColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableGDocEventEngineDataTable.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGDocEventEngineDataTable.EventDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventDate\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WOID {
                get {
                    try {
                        return ((int)(this[this.tableGDocEventEngineDataTable.WOIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WOID\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.WOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComplete {
                get {
                    try {
                        return ((bool)(this[this.tableGDocEventEngineDataTable.IsCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsComplete\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.IsCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Parent {
                get {
                    try {
                        return ((int)(this[this.tableGDocEventEngineDataTable.ParentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parent\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.ParentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Child1 {
                get {
                    try {
                        return ((int)(this[this.tableGDocEventEngineDataTable.Child1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Child1\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.Child1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Child2 {
                get {
                    try {
                        return ((int)(this[this.tableGDocEventEngineDataTable.Child2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Child2\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.Child2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int levels {
                get {
                    try {
                        return ((int)(this[this.tableGDocEventEngineDataTable.levelsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'levels\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.levelsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tableGDocEventEngineDataTable.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'GDocEventEngineDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGDocEventEngineDataTable.EventTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventTypeID\' in table \'GDocEventEngineDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.EventTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventNumber {
                get {
                    try {
                        return ((string)(this[this.tableGDocEventEngineDataTable.EventNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventNumber\' in table \'GDocEventEngineDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.EventNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkOrder {
                get {
                    try {
                        return ((bool)(this[this.tableGDocEventEngineDataTable.IsWorkOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsWorkOrder\' in table \'GDocEventEngineDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGDocEventEngineDataTable.IsWorkOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddRowNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.AddRowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddRowNull() {
                this[this.tableGDocEventEngineDataTable.AddRowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventTypeNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.EventTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventTypeNull() {
                this[this.tableGDocEventEngineDataTable.EventTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempColorNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.TempColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempColorNull() {
                this[this.tableGDocEventEngineDataTable.TempColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusColorNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.StatusColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusColorNull() {
                this[this.tableGDocEventEngineDataTable.StatusColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableGDocEventEngineDataTable.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDateNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.EventDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDateNull() {
                this[this.tableGDocEventEngineDataTable.EventDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWOIDNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.WOIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWOIDNull() {
                this[this.tableGDocEventEngineDataTable.WOIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCompleteNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.IsCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCompleteNull() {
                this[this.tableGDocEventEngineDataTable.IsCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.ParentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentNull() {
                this[this.tableGDocEventEngineDataTable.ParentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChild1Null() {
                return this.IsNull(this.tableGDocEventEngineDataTable.Child1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChild1Null() {
                this[this.tableGDocEventEngineDataTable.Child1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChild2Null() {
                return this.IsNull(this.tableGDocEventEngineDataTable.Child2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChild2Null() {
                this[this.tableGDocEventEngineDataTable.Child2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslevelsNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.levelsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlevelsNull() {
                this[this.tableGDocEventEngineDataTable.levelsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tableGDocEventEngineDataTable.EventIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventTypeIDNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.EventTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventTypeIDNull() {
                this[this.tableGDocEventEngineDataTable.EventTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventNumberNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.EventNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventNumberNull() {
                this[this.tableGDocEventEngineDataTable.EventNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsWorkOrderNull() {
                return this.IsNull(this.tableGDocEventEngineDataTable.IsWorkOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsWorkOrderNull() {
                this[this.tableGDocEventEngineDataTable.IsWorkOrderColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListValidKeyIDRow : global::System.Data.DataRow {
            
            private ListValidKeyIDDataTable tableListValidKeyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListValidKeyIDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListValidKeyID = ((ListValidKeyIDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KeyIDExists {
                get {
                    try {
                        return ((int)(this[this.tableListValidKeyID.KeyIDExistsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyIDExists\' in table \'ListValidKeyID\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListValidKeyID.KeyIDExistsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDExistsNull() {
                return this.IsNull(this.tableListValidKeyID.KeyIDExistsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDExistsNull() {
                this[this.tableListValidKeyID.KeyIDExistsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EventEngineHeaderTableRowChangeEvent : global::System.EventArgs {
            
            private EventEngineHeaderTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventEngineHeaderTableRowChangeEvent(EventEngineHeaderTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventEngineHeaderTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GDocEventEngineDataTableRowChangeEvent : global::System.EventArgs {
            
            private GDocEventEngineDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GDocEventEngineDataTableRowChangeEvent(GDocEventEngineDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GDocEventEngineDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListValidKeyIDRowChangeEvent : global::System.EventArgs {
            
            private ListValidKeyIDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidKeyIDRowChangeEvent(ListValidKeyIDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListValidKeyIDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591