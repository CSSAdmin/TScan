//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F96000OwnerManagementData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F96000OwnerManagementData : global::System.Data.DataSet {
        
        private F96000GetOwnerDetailsDataTable tableF96000GetOwnerDetails;
        
        private F96000GetStatusListDataTable tableF96000GetStatusList;
        
        private F96000ListOwnerStatusTypeDataTable tableF96000ListOwnerStatusType;
        
        private f96000_pclst_CountryDataTable tablef96000_pclst_Country;
        
        private LoadDefaultCountryDataTable tableLoadDefaultCountry;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F96000OwnerManagementData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F96000OwnerManagementData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["F96000GetOwnerDetails"] != null)) {
                    base.Tables.Add(new F96000GetOwnerDetailsDataTable(ds.Tables["F96000GetOwnerDetails"]));
                }
                if ((ds.Tables["F96000GetStatusList"] != null)) {
                    base.Tables.Add(new F96000GetStatusListDataTable(ds.Tables["F96000GetStatusList"]));
                }
                if ((ds.Tables["F96000ListOwnerStatusType"] != null)) {
                    base.Tables.Add(new F96000ListOwnerStatusTypeDataTable(ds.Tables["F96000ListOwnerStatusType"]));
                }
                if ((ds.Tables["f96000_pclst_Country"] != null)) {
                    base.Tables.Add(new f96000_pclst_CountryDataTable(ds.Tables["f96000_pclst_Country"]));
                }
                if ((ds.Tables["LoadDefaultCountry"] != null)) {
                    base.Tables.Add(new LoadDefaultCountryDataTable(ds.Tables["LoadDefaultCountry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F96000GetOwnerDetailsDataTable F96000GetOwnerDetails {
            get {
                return this.tableF96000GetOwnerDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F96000GetStatusListDataTable F96000GetStatusList {
            get {
                return this.tableF96000GetStatusList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public F96000ListOwnerStatusTypeDataTable F96000ListOwnerStatusType {
            get {
                return this.tableF96000ListOwnerStatusType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public f96000_pclst_CountryDataTable f96000_pclst_Country {
            get {
                return this.tablef96000_pclst_Country;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LoadDefaultCountryDataTable LoadDefaultCountry {
            get {
                return this.tableLoadDefaultCountry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F96000OwnerManagementData cln = ((F96000OwnerManagementData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["F96000GetOwnerDetails"] != null)) {
                    base.Tables.Add(new F96000GetOwnerDetailsDataTable(ds.Tables["F96000GetOwnerDetails"]));
                }
                if ((ds.Tables["F96000GetStatusList"] != null)) {
                    base.Tables.Add(new F96000GetStatusListDataTable(ds.Tables["F96000GetStatusList"]));
                }
                if ((ds.Tables["F96000ListOwnerStatusType"] != null)) {
                    base.Tables.Add(new F96000ListOwnerStatusTypeDataTable(ds.Tables["F96000ListOwnerStatusType"]));
                }
                if ((ds.Tables["f96000_pclst_Country"] != null)) {
                    base.Tables.Add(new f96000_pclst_CountryDataTable(ds.Tables["f96000_pclst_Country"]));
                }
                if ((ds.Tables["LoadDefaultCountry"] != null)) {
                    base.Tables.Add(new LoadDefaultCountryDataTable(ds.Tables["LoadDefaultCountry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableF96000GetOwnerDetails = ((F96000GetOwnerDetailsDataTable)(base.Tables["F96000GetOwnerDetails"]));
            if ((initTable == true)) {
                if ((this.tableF96000GetOwnerDetails != null)) {
                    this.tableF96000GetOwnerDetails.InitVars();
                }
            }
            this.tableF96000GetStatusList = ((F96000GetStatusListDataTable)(base.Tables["F96000GetStatusList"]));
            if ((initTable == true)) {
                if ((this.tableF96000GetStatusList != null)) {
                    this.tableF96000GetStatusList.InitVars();
                }
            }
            this.tableF96000ListOwnerStatusType = ((F96000ListOwnerStatusTypeDataTable)(base.Tables["F96000ListOwnerStatusType"]));
            if ((initTable == true)) {
                if ((this.tableF96000ListOwnerStatusType != null)) {
                    this.tableF96000ListOwnerStatusType.InitVars();
                }
            }
            this.tablef96000_pclst_Country = ((f96000_pclst_CountryDataTable)(base.Tables["f96000_pclst_Country"]));
            if ((initTable == true)) {
                if ((this.tablef96000_pclst_Country != null)) {
                    this.tablef96000_pclst_Country.InitVars();
                }
            }
            this.tableLoadDefaultCountry = ((LoadDefaultCountryDataTable)(base.Tables["LoadDefaultCountry"]));
            if ((initTable == true)) {
                if ((this.tableLoadDefaultCountry != null)) {
                    this.tableLoadDefaultCountry.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F96000OwnerManagementData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F96000OwnerManagementData.xsd";
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableF96000GetOwnerDetails = new F96000GetOwnerDetailsDataTable();
            base.Tables.Add(this.tableF96000GetOwnerDetails);
            this.tableF96000GetStatusList = new F96000GetStatusListDataTable();
            base.Tables.Add(this.tableF96000GetStatusList);
            this.tableF96000ListOwnerStatusType = new F96000ListOwnerStatusTypeDataTable();
            base.Tables.Add(this.tableF96000ListOwnerStatusType);
            this.tablef96000_pclst_Country = new f96000_pclst_CountryDataTable();
            base.Tables.Add(this.tablef96000_pclst_Country);
            this.tableLoadDefaultCountry = new LoadDefaultCountryDataTable();
            base.Tables.Add(this.tableLoadDefaultCountry);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF96000GetOwnerDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF96000GetStatusList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeF96000ListOwnerStatusType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializef96000_pclst_Country() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLoadDefaultCountry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F96000OwnerManagementData ds = new F96000OwnerManagementData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void F96000GetOwnerDetailsRowChangeEventHandler(object sender, F96000GetOwnerDetailsRowChangeEvent e);
        
        public delegate void F96000GetStatusListRowChangeEventHandler(object sender, F96000GetStatusListRowChangeEvent e);
        
        public delegate void F96000ListOwnerStatusTypeRowChangeEventHandler(object sender, F96000ListOwnerStatusTypeRowChangeEvent e);
        
        public delegate void f96000_pclst_CountryRowChangeEventHandler(object sender, f96000_pclst_CountryRowChangeEvent e);
        
        public delegate void LoadDefaultCountryRowChangeEventHandler(object sender, LoadDefaultCountryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F96000GetOwnerDetailsDataTable : global::System.Data.TypedTableBase<F96000GetOwnerDetailsRow> {
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZip;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnIsPurchaser;
            
            private global::System.Data.DataColumn columnIsDeceased;
            
            private global::System.Data.DataColumn columnOwnerCode;
            
            private global::System.Data.DataColumn columnCountryID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetOwnerDetailsDataTable() {
                this.TableName = "F96000GetOwnerDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F96000GetOwnerDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F96000GetOwnerDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPurchaserColumn {
                get {
                    return this.columnIsPurchaser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeceasedColumn {
                get {
                    return this.columnIsDeceased;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCodeColumn {
                get {
                    return this.columnOwnerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetOwnerDetailsRow this[int index] {
                get {
                    return ((F96000GetOwnerDetailsRow)(this.Rows[index]));
                }
            }
            
            public event F96000GetOwnerDetailsRowChangeEventHandler F96000GetOwnerDetailsRowChanging;
            
            public event F96000GetOwnerDetailsRowChangeEventHandler F96000GetOwnerDetailsRowChanged;
            
            public event F96000GetOwnerDetailsRowChangeEventHandler F96000GetOwnerDetailsRowDeleting;
            
            public event F96000GetOwnerDetailsRowChangeEventHandler F96000GetOwnerDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF96000GetOwnerDetailsRow(F96000GetOwnerDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetOwnerDetailsRow AddF96000GetOwnerDetailsRow(int OwnerID, string LastName, string FirstName, string Address1, string Address2, string City, string State, string Zip, string Phone, string Email, bool IsActive, bool IsPurchaser, bool IsDeceased, string OwnerCode, int CountryID) {
                F96000GetOwnerDetailsRow rowF96000GetOwnerDetailsRow = ((F96000GetOwnerDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OwnerID,
                        LastName,
                        FirstName,
                        Address1,
                        Address2,
                        City,
                        State,
                        Zip,
                        Phone,
                        Email,
                        IsActive,
                        IsPurchaser,
                        IsDeceased,
                        OwnerCode,
                        CountryID};
                rowF96000GetOwnerDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF96000GetOwnerDetailsRow);
                return rowF96000GetOwnerDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F96000GetOwnerDetailsDataTable cln = ((F96000GetOwnerDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F96000GetOwnerDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZip = base.Columns["Zip"];
                this.columnPhone = base.Columns["Phone"];
                this.columnEmail = base.Columns["Email"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnIsPurchaser = base.Columns["IsPurchaser"];
                this.columnIsDeceased = base.Columns["IsDeceased"];
                this.columnOwnerCode = base.Columns["OwnerCode"];
                this.columnCountryID = base.Columns["CountryID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZip = new global::System.Data.DataColumn("Zip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnIsPurchaser = new global::System.Data.DataColumn("IsPurchaser", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPurchaser);
                this.columnIsDeceased = new global::System.Data.DataColumn("IsDeceased", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeceased);
                this.columnOwnerCode = new global::System.Data.DataColumn("OwnerCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCode);
                this.columnCountryID = new global::System.Data.DataColumn("CountryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnLastName.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnZip.MaxLength = 50;
                this.columnPhone.MaxLength = 50;
                this.columnEmail.MaxLength = 200;
                this.columnOwnerCode.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetOwnerDetailsRow NewF96000GetOwnerDetailsRow() {
                return ((F96000GetOwnerDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F96000GetOwnerDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F96000GetOwnerDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F96000GetOwnerDetailsRowChanged != null)) {
                    this.F96000GetOwnerDetailsRowChanged(this, new F96000GetOwnerDetailsRowChangeEvent(((F96000GetOwnerDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F96000GetOwnerDetailsRowChanging != null)) {
                    this.F96000GetOwnerDetailsRowChanging(this, new F96000GetOwnerDetailsRowChangeEvent(((F96000GetOwnerDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F96000GetOwnerDetailsRowDeleted != null)) {
                    this.F96000GetOwnerDetailsRowDeleted(this, new F96000GetOwnerDetailsRowChangeEvent(((F96000GetOwnerDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F96000GetOwnerDetailsRowDeleting != null)) {
                    this.F96000GetOwnerDetailsRowDeleting(this, new F96000GetOwnerDetailsRowChangeEvent(((F96000GetOwnerDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF96000GetOwnerDetailsRow(F96000GetOwnerDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F96000OwnerManagementData ds = new F96000OwnerManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F96000GetOwnerDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F96000GetStatusListDataTable : global::System.Data.TypedTableBase<F96000GetStatusListRow> {
            
            private global::System.Data.DataColumn columnOwnerStatusID;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnOwnerStatusTypeID;
            
            private global::System.Data.DataColumn columnOwnerStatusType;
            
            private global::System.Data.DataColumn columnBeginDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnNote;
            
            private global::System.Data.DataColumn columnIsPriority;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnKeyID;
            
            private global::System.Data.DataColumn columnPriorityID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetStatusListDataTable() {
                this.TableName = "F96000GetStatusList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F96000GetStatusListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F96000GetStatusListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStatusIDColumn {
                get {
                    return this.columnOwnerStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStatusTypeIDColumn {
                get {
                    return this.columnOwnerStatusTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStatusTypeColumn {
                get {
                    return this.columnOwnerStatusType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BeginDateColumn {
                get {
                    return this.columnBeginDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPriorityColumn {
                get {
                    return this.columnIsPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KeyIDColumn {
                get {
                    return this.columnKeyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityIDColumn {
                get {
                    return this.columnPriorityID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetStatusListRow this[int index] {
                get {
                    return ((F96000GetStatusListRow)(this.Rows[index]));
                }
            }
            
            public event F96000GetStatusListRowChangeEventHandler F96000GetStatusListRowChanging;
            
            public event F96000GetStatusListRowChangeEventHandler F96000GetStatusListRowChanged;
            
            public event F96000GetStatusListRowChangeEventHandler F96000GetStatusListRowDeleting;
            
            public event F96000GetStatusListRowChangeEventHandler F96000GetStatusListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF96000GetStatusListRow(F96000GetStatusListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetStatusListRow AddF96000GetStatusListRow(int OwnerStatusID, int OwnerID, int OwnerStatusTypeID, string OwnerStatusType, string BeginDate, string EndDate, string Note, int IsPriority, int IsActive, string KeyID, string PriorityID) {
                F96000GetStatusListRow rowF96000GetStatusListRow = ((F96000GetStatusListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OwnerStatusID,
                        OwnerID,
                        OwnerStatusTypeID,
                        OwnerStatusType,
                        BeginDate,
                        EndDate,
                        Note,
                        IsPriority,
                        IsActive,
                        KeyID,
                        PriorityID};
                rowF96000GetStatusListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF96000GetStatusListRow);
                return rowF96000GetStatusListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F96000GetStatusListDataTable cln = ((F96000GetStatusListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F96000GetStatusListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOwnerStatusID = base.Columns["OwnerStatusID"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnOwnerStatusTypeID = base.Columns["OwnerStatusTypeID"];
                this.columnOwnerStatusType = base.Columns["OwnerStatusType"];
                this.columnBeginDate = base.Columns["BeginDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnNote = base.Columns["Note"];
                this.columnIsPriority = base.Columns["IsPriority"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnKeyID = base.Columns["KeyID"];
                this.columnPriorityID = base.Columns["PriorityID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOwnerStatusID = new global::System.Data.DataColumn("OwnerStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerStatusID);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnOwnerStatusTypeID = new global::System.Data.DataColumn("OwnerStatusTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerStatusTypeID);
                this.columnOwnerStatusType = new global::System.Data.DataColumn("OwnerStatusType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerStatusType);
                this.columnBeginDate = new global::System.Data.DataColumn("BeginDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBeginDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnIsPriority = new global::System.Data.DataColumn("IsPriority", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPriority);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnKeyID = new global::System.Data.DataColumn("KeyID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyID);
                this.columnPriorityID = new global::System.Data.DataColumn("PriorityID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriorityID);
                this.columnOwnerStatusID.ReadOnly = true;
                this.columnOwnerStatusType.MaxLength = 50;
                this.columnBeginDate.MaxLength = 10;
                this.columnEndDate.MaxLength = 10;
                this.columnNote.MaxLength = 250;
                this.columnKeyID.MaxLength = 250;
                this.columnPriorityID.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetStatusListRow NewF96000GetStatusListRow() {
                return ((F96000GetStatusListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F96000GetStatusListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F96000GetStatusListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F96000GetStatusListRowChanged != null)) {
                    this.F96000GetStatusListRowChanged(this, new F96000GetStatusListRowChangeEvent(((F96000GetStatusListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F96000GetStatusListRowChanging != null)) {
                    this.F96000GetStatusListRowChanging(this, new F96000GetStatusListRowChangeEvent(((F96000GetStatusListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F96000GetStatusListRowDeleted != null)) {
                    this.F96000GetStatusListRowDeleted(this, new F96000GetStatusListRowChangeEvent(((F96000GetStatusListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F96000GetStatusListRowDeleting != null)) {
                    this.F96000GetStatusListRowDeleting(this, new F96000GetStatusListRowChangeEvent(((F96000GetStatusListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF96000GetStatusListRow(F96000GetStatusListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F96000OwnerManagementData ds = new F96000OwnerManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F96000GetStatusListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class F96000ListOwnerStatusTypeDataTable : global::System.Data.TypedTableBase<F96000ListOwnerStatusTypeRow> {
            
            private global::System.Data.DataColumn columnOwnerStatusTypeID;
            
            private global::System.Data.DataColumn columnOwnerStatusType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000ListOwnerStatusTypeDataTable() {
                this.TableName = "F96000ListOwnerStatusType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F96000ListOwnerStatusTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected F96000ListOwnerStatusTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStatusTypeIDColumn {
                get {
                    return this.columnOwnerStatusTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStatusTypeColumn {
                get {
                    return this.columnOwnerStatusType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000ListOwnerStatusTypeRow this[int index] {
                get {
                    return ((F96000ListOwnerStatusTypeRow)(this.Rows[index]));
                }
            }
            
            public event F96000ListOwnerStatusTypeRowChangeEventHandler F96000ListOwnerStatusTypeRowChanging;
            
            public event F96000ListOwnerStatusTypeRowChangeEventHandler F96000ListOwnerStatusTypeRowChanged;
            
            public event F96000ListOwnerStatusTypeRowChangeEventHandler F96000ListOwnerStatusTypeRowDeleting;
            
            public event F96000ListOwnerStatusTypeRowChangeEventHandler F96000ListOwnerStatusTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddF96000ListOwnerStatusTypeRow(F96000ListOwnerStatusTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000ListOwnerStatusTypeRow AddF96000ListOwnerStatusTypeRow(int OwnerStatusTypeID, string OwnerStatusType) {
                F96000ListOwnerStatusTypeRow rowF96000ListOwnerStatusTypeRow = ((F96000ListOwnerStatusTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OwnerStatusTypeID,
                        OwnerStatusType};
                rowF96000ListOwnerStatusTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowF96000ListOwnerStatusTypeRow);
                return rowF96000ListOwnerStatusTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                F96000ListOwnerStatusTypeDataTable cln = ((F96000ListOwnerStatusTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new F96000ListOwnerStatusTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOwnerStatusTypeID = base.Columns["OwnerStatusTypeID"];
                this.columnOwnerStatusType = base.Columns["OwnerStatusType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOwnerStatusTypeID = new global::System.Data.DataColumn("OwnerStatusTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerStatusTypeID);
                this.columnOwnerStatusType = new global::System.Data.DataColumn("OwnerStatusType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerStatusType);
                this.columnOwnerStatusTypeID.ReadOnly = true;
                this.columnOwnerStatusType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000ListOwnerStatusTypeRow NewF96000ListOwnerStatusTypeRow() {
                return ((F96000ListOwnerStatusTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new F96000ListOwnerStatusTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(F96000ListOwnerStatusTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.F96000ListOwnerStatusTypeRowChanged != null)) {
                    this.F96000ListOwnerStatusTypeRowChanged(this, new F96000ListOwnerStatusTypeRowChangeEvent(((F96000ListOwnerStatusTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.F96000ListOwnerStatusTypeRowChanging != null)) {
                    this.F96000ListOwnerStatusTypeRowChanging(this, new F96000ListOwnerStatusTypeRowChangeEvent(((F96000ListOwnerStatusTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.F96000ListOwnerStatusTypeRowDeleted != null)) {
                    this.F96000ListOwnerStatusTypeRowDeleted(this, new F96000ListOwnerStatusTypeRowChangeEvent(((F96000ListOwnerStatusTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.F96000ListOwnerStatusTypeRowDeleting != null)) {
                    this.F96000ListOwnerStatusTypeRowDeleting(this, new F96000ListOwnerStatusTypeRowChangeEvent(((F96000ListOwnerStatusTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveF96000ListOwnerStatusTypeRow(F96000ListOwnerStatusTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F96000OwnerManagementData ds = new F96000OwnerManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "F96000ListOwnerStatusTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class f96000_pclst_CountryDataTable : global::System.Data.TypedTableBase<f96000_pclst_CountryRow> {
            
            private global::System.Data.DataColumn columnCountryID;
            
            private global::System.Data.DataColumn columnCountryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f96000_pclst_CountryDataTable() {
                this.TableName = "f96000_pclst_Country";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f96000_pclst_CountryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected f96000_pclst_CountryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f96000_pclst_CountryRow this[int index] {
                get {
                    return ((f96000_pclst_CountryRow)(this.Rows[index]));
                }
            }
            
            public event f96000_pclst_CountryRowChangeEventHandler f96000_pclst_CountryRowChanging;
            
            public event f96000_pclst_CountryRowChangeEventHandler f96000_pclst_CountryRowChanged;
            
            public event f96000_pclst_CountryRowChangeEventHandler f96000_pclst_CountryRowDeleting;
            
            public event f96000_pclst_CountryRowChangeEventHandler f96000_pclst_CountryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addf96000_pclst_CountryRow(f96000_pclst_CountryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f96000_pclst_CountryRow Addf96000_pclst_CountryRow(int CountryID, string CountryName) {
                f96000_pclst_CountryRow rowf96000_pclst_CountryRow = ((f96000_pclst_CountryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CountryID,
                        CountryName};
                rowf96000_pclst_CountryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowf96000_pclst_CountryRow);
                return rowf96000_pclst_CountryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                f96000_pclst_CountryDataTable cln = ((f96000_pclst_CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new f96000_pclst_CountryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCountryID = base.Columns["CountryID"];
                this.columnCountryName = base.Columns["CountryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCountryID = new global::System.Data.DataColumn("CountryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnCountryName = new global::System.Data.DataColumn("CountryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnCountryID.ReadOnly = true;
                this.columnCountryName.AllowDBNull = false;
                this.columnCountryName.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f96000_pclst_CountryRow Newf96000_pclst_CountryRow() {
                return ((f96000_pclst_CountryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new f96000_pclst_CountryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(f96000_pclst_CountryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.f96000_pclst_CountryRowChanged != null)) {
                    this.f96000_pclst_CountryRowChanged(this, new f96000_pclst_CountryRowChangeEvent(((f96000_pclst_CountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.f96000_pclst_CountryRowChanging != null)) {
                    this.f96000_pclst_CountryRowChanging(this, new f96000_pclst_CountryRowChangeEvent(((f96000_pclst_CountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.f96000_pclst_CountryRowDeleted != null)) {
                    this.f96000_pclst_CountryRowDeleted(this, new f96000_pclst_CountryRowChangeEvent(((f96000_pclst_CountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.f96000_pclst_CountryRowDeleting != null)) {
                    this.f96000_pclst_CountryRowDeleting(this, new f96000_pclst_CountryRowChangeEvent(((f96000_pclst_CountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removef96000_pclst_CountryRow(f96000_pclst_CountryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F96000OwnerManagementData ds = new F96000OwnerManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "f96000_pclst_CountryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LoadDefaultCountryDataTable : global::System.Data.TypedTableBase<LoadDefaultCountryRow> {
            
            private global::System.Data.DataColumn columnCountryID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadDefaultCountryDataTable() {
                this.TableName = "LoadDefaultCountry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadDefaultCountryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LoadDefaultCountryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadDefaultCountryRow this[int index] {
                get {
                    return ((LoadDefaultCountryRow)(this.Rows[index]));
                }
            }
            
            public event LoadDefaultCountryRowChangeEventHandler LoadDefaultCountryRowChanging;
            
            public event LoadDefaultCountryRowChangeEventHandler LoadDefaultCountryRowChanged;
            
            public event LoadDefaultCountryRowChangeEventHandler LoadDefaultCountryRowDeleting;
            
            public event LoadDefaultCountryRowChangeEventHandler LoadDefaultCountryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLoadDefaultCountryRow(LoadDefaultCountryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadDefaultCountryRow AddLoadDefaultCountryRow(int CountryID) {
                LoadDefaultCountryRow rowLoadDefaultCountryRow = ((LoadDefaultCountryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CountryID};
                rowLoadDefaultCountryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLoadDefaultCountryRow);
                return rowLoadDefaultCountryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LoadDefaultCountryDataTable cln = ((LoadDefaultCountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LoadDefaultCountryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCountryID = base.Columns["CountryID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCountryID = new global::System.Data.DataColumn("CountryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadDefaultCountryRow NewLoadDefaultCountryRow() {
                return ((LoadDefaultCountryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LoadDefaultCountryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LoadDefaultCountryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LoadDefaultCountryRowChanged != null)) {
                    this.LoadDefaultCountryRowChanged(this, new LoadDefaultCountryRowChangeEvent(((LoadDefaultCountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LoadDefaultCountryRowChanging != null)) {
                    this.LoadDefaultCountryRowChanging(this, new LoadDefaultCountryRowChangeEvent(((LoadDefaultCountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LoadDefaultCountryRowDeleted != null)) {
                    this.LoadDefaultCountryRowDeleted(this, new LoadDefaultCountryRowChangeEvent(((LoadDefaultCountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LoadDefaultCountryRowDeleting != null)) {
                    this.LoadDefaultCountryRowDeleting(this, new LoadDefaultCountryRowChangeEvent(((LoadDefaultCountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLoadDefaultCountryRow(LoadDefaultCountryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F96000OwnerManagementData ds = new F96000OwnerManagementData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LoadDefaultCountryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F96000GetOwnerDetailsRow : global::System.Data.DataRow {
            
            private F96000GetOwnerDetailsDataTable tableF96000GetOwnerDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F96000GetOwnerDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF96000GetOwnerDetails = ((F96000GetOwnerDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableF96000GetOwnerDetails.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.ZipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.ZipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableF96000GetOwnerDetails.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchaser {
                get {
                    try {
                        return ((bool)(this[this.tableF96000GetOwnerDetails.IsPurchaserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPurchaser\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.IsPurchaserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeceased {
                get {
                    try {
                        return ((bool)(this[this.tableF96000GetOwnerDetails.IsDeceasedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeceased\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.IsDeceasedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerCode {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetOwnerDetails.OwnerCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCode\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.OwnerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableF96000GetOwnerDetails.CountryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryID\' in table \'F96000GetOwnerDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetOwnerDetails.CountryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableF96000GetOwnerDetails.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableF96000GetOwnerDetails.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableF96000GetOwnerDetails.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableF96000GetOwnerDetails.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableF96000GetOwnerDetails.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableF96000GetOwnerDetails.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableF96000GetOwnerDetails.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableF96000GetOwnerDetails.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableF96000GetOwnerDetails.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.ZipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableF96000GetOwnerDetails.ZipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tableF96000GetOwnerDetails.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableF96000GetOwnerDetails.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableF96000GetOwnerDetails.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPurchaserNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.IsPurchaserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPurchaserNull() {
                this[this.tableF96000GetOwnerDetails.IsPurchaserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeceasedNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.IsDeceasedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeceasedNull() {
                this[this.tableF96000GetOwnerDetails.IsDeceasedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCodeNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.OwnerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCodeNull() {
                this[this.tableF96000GetOwnerDetails.OwnerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableF96000GetOwnerDetails.CountryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryIDNull() {
                this[this.tableF96000GetOwnerDetails.CountryIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F96000GetStatusListRow : global::System.Data.DataRow {
            
            private F96000GetStatusListDataTable tableF96000GetStatusList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F96000GetStatusListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF96000GetStatusList = ((F96000GetStatusListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerStatusID {
                get {
                    try {
                        return ((int)(this[this.tableF96000GetStatusList.OwnerStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerStatusID\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.OwnerStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableF96000GetStatusList.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerStatusTypeID {
                get {
                    try {
                        return ((int)(this[this.tableF96000GetStatusList.OwnerStatusTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerStatusTypeID\' in table \'F96000GetStatusList\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.OwnerStatusTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerStatusType {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetStatusList.OwnerStatusTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerStatusType\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.OwnerStatusTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BeginDate {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetStatusList.BeginDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BeginDate\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.BeginDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndDate {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetStatusList.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetStatusList.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsPriority {
                get {
                    try {
                        return ((int)(this[this.tableF96000GetStatusList.IsPriorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPriority\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.IsPriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsActive {
                get {
                    try {
                        return ((int)(this[this.tableF96000GetStatusList.IsActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActive\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyID {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetStatusList.KeyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KeyID\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.KeyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PriorityID {
                get {
                    try {
                        return ((string)(this[this.tableF96000GetStatusList.PriorityIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PriorityID\' in table \'F96000GetStatusList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000GetStatusList.PriorityIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStatusIDNull() {
                return this.IsNull(this.tableF96000GetStatusList.OwnerStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStatusIDNull() {
                this[this.tableF96000GetStatusList.OwnerStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableF96000GetStatusList.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableF96000GetStatusList.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStatusTypeIDNull() {
                return this.IsNull(this.tableF96000GetStatusList.OwnerStatusTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStatusTypeIDNull() {
                this[this.tableF96000GetStatusList.OwnerStatusTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStatusTypeNull() {
                return this.IsNull(this.tableF96000GetStatusList.OwnerStatusTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStatusTypeNull() {
                this[this.tableF96000GetStatusList.OwnerStatusTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBeginDateNull() {
                return this.IsNull(this.tableF96000GetStatusList.BeginDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBeginDateNull() {
                this[this.tableF96000GetStatusList.BeginDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableF96000GetStatusList.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableF96000GetStatusList.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableF96000GetStatusList.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableF96000GetStatusList.NoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPriorityNull() {
                return this.IsNull(this.tableF96000GetStatusList.IsPriorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPriorityNull() {
                this[this.tableF96000GetStatusList.IsPriorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableF96000GetStatusList.IsActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiveNull() {
                this[this.tableF96000GetStatusList.IsActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKeyIDNull() {
                return this.IsNull(this.tableF96000GetStatusList.KeyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKeyIDNull() {
                this[this.tableF96000GetStatusList.KeyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityIDNull() {
                return this.IsNull(this.tableF96000GetStatusList.PriorityIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityIDNull() {
                this[this.tableF96000GetStatusList.PriorityIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class F96000ListOwnerStatusTypeRow : global::System.Data.DataRow {
            
            private F96000ListOwnerStatusTypeDataTable tableF96000ListOwnerStatusType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal F96000ListOwnerStatusTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableF96000ListOwnerStatusType = ((F96000ListOwnerStatusTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerStatusTypeID {
                get {
                    try {
                        return ((int)(this[this.tableF96000ListOwnerStatusType.OwnerStatusTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerStatusTypeID\' in table \'F96000ListOwnerStatusType\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableF96000ListOwnerStatusType.OwnerStatusTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerStatusType {
                get {
                    try {
                        return ((string)(this[this.tableF96000ListOwnerStatusType.OwnerStatusTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerStatusType\' in table \'F96000ListOwnerStatusType\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableF96000ListOwnerStatusType.OwnerStatusTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStatusTypeIDNull() {
                return this.IsNull(this.tableF96000ListOwnerStatusType.OwnerStatusTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStatusTypeIDNull() {
                this[this.tableF96000ListOwnerStatusType.OwnerStatusTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStatusTypeNull() {
                return this.IsNull(this.tableF96000ListOwnerStatusType.OwnerStatusTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStatusTypeNull() {
                this[this.tableF96000ListOwnerStatusType.OwnerStatusTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class f96000_pclst_CountryRow : global::System.Data.DataRow {
            
            private f96000_pclst_CountryDataTable tablef96000_pclst_Country;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal f96000_pclst_CountryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablef96000_pclst_Country = ((f96000_pclst_CountryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tablef96000_pclst_Country.CountryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryID\' in table \'f96000_pclst_Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablef96000_pclst_Country.CountryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    return ((string)(this[this.tablef96000_pclst_Country.CountryNameColumn]));
                }
                set {
                    this[this.tablef96000_pclst_Country.CountryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryIDNull() {
                return this.IsNull(this.tablef96000_pclst_Country.CountryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryIDNull() {
                this[this.tablef96000_pclst_Country.CountryIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LoadDefaultCountryRow : global::System.Data.DataRow {
            
            private LoadDefaultCountryDataTable tableLoadDefaultCountry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadDefaultCountryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLoadDefaultCountry = ((LoadDefaultCountryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableLoadDefaultCountry.CountryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryID\' in table \'LoadDefaultCountry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadDefaultCountry.CountryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableLoadDefaultCountry.CountryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryIDNull() {
                this[this.tableLoadDefaultCountry.CountryIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F96000GetOwnerDetailsRowChangeEvent : global::System.EventArgs {
            
            private F96000GetOwnerDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetOwnerDetailsRowChangeEvent(F96000GetOwnerDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetOwnerDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F96000GetStatusListRowChangeEvent : global::System.EventArgs {
            
            private F96000GetStatusListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetStatusListRowChangeEvent(F96000GetStatusListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000GetStatusListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class F96000ListOwnerStatusTypeRowChangeEvent : global::System.EventArgs {
            
            private F96000ListOwnerStatusTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000ListOwnerStatusTypeRowChangeEvent(F96000ListOwnerStatusTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public F96000ListOwnerStatusTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class f96000_pclst_CountryRowChangeEvent : global::System.EventArgs {
            
            private f96000_pclst_CountryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f96000_pclst_CountryRowChangeEvent(f96000_pclst_CountryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public f96000_pclst_CountryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LoadDefaultCountryRowChangeEvent : global::System.EventArgs {
            
            private LoadDefaultCountryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadDefaultCountryRowChangeEvent(LoadDefaultCountryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadDefaultCountryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591