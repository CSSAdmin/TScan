//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FormMasterData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FormMasterData : global::System.Data.DataSet {
        
        private FormSandwichDetailsDataTable tableFormSandwichDetails;
        
        private FormSliceInformationListDataTable tableFormSliceInformationList;
        
        private FormSubTitle1DataTable tableFormSubTitle1;
        
        private FormSubTitle2DataTable tableFormSubTitle2;
        
        private BackgroundColorDataTable tableBackgroundColor;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FormMasterData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FormMasterData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FormSandwichDetails"] != null)) {
                    base.Tables.Add(new FormSandwichDetailsDataTable(ds.Tables["FormSandwichDetails"]));
                }
                if ((ds.Tables["FormSliceInformationList"] != null)) {
                    base.Tables.Add(new FormSliceInformationListDataTable(ds.Tables["FormSliceInformationList"]));
                }
                if ((ds.Tables["FormSubTitle1"] != null)) {
                    base.Tables.Add(new FormSubTitle1DataTable(ds.Tables["FormSubTitle1"]));
                }
                if ((ds.Tables["FormSubTitle2"] != null)) {
                    base.Tables.Add(new FormSubTitle2DataTable(ds.Tables["FormSubTitle2"]));
                }
                if ((ds.Tables["BackgroundColor"] != null)) {
                    base.Tables.Add(new BackgroundColorDataTable(ds.Tables["BackgroundColor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormSandwichDetailsDataTable FormSandwichDetails {
            get {
                return this.tableFormSandwichDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormSliceInformationListDataTable FormSliceInformationList {
            get {
                return this.tableFormSliceInformationList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormSubTitle1DataTable FormSubTitle1 {
            get {
                return this.tableFormSubTitle1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormSubTitle2DataTable FormSubTitle2 {
            get {
                return this.tableFormSubTitle2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BackgroundColorDataTable BackgroundColor {
            get {
                return this.tableBackgroundColor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FormMasterData cln = ((FormMasterData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FormSandwichDetails"] != null)) {
                    base.Tables.Add(new FormSandwichDetailsDataTable(ds.Tables["FormSandwichDetails"]));
                }
                if ((ds.Tables["FormSliceInformationList"] != null)) {
                    base.Tables.Add(new FormSliceInformationListDataTable(ds.Tables["FormSliceInformationList"]));
                }
                if ((ds.Tables["FormSubTitle1"] != null)) {
                    base.Tables.Add(new FormSubTitle1DataTable(ds.Tables["FormSubTitle1"]));
                }
                if ((ds.Tables["FormSubTitle2"] != null)) {
                    base.Tables.Add(new FormSubTitle2DataTable(ds.Tables["FormSubTitle2"]));
                }
                if ((ds.Tables["BackgroundColor"] != null)) {
                    base.Tables.Add(new BackgroundColorDataTable(ds.Tables["BackgroundColor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFormSandwichDetails = ((FormSandwichDetailsDataTable)(base.Tables["FormSandwichDetails"]));
            if ((initTable == true)) {
                if ((this.tableFormSandwichDetails != null)) {
                    this.tableFormSandwichDetails.InitVars();
                }
            }
            this.tableFormSliceInformationList = ((FormSliceInformationListDataTable)(base.Tables["FormSliceInformationList"]));
            if ((initTable == true)) {
                if ((this.tableFormSliceInformationList != null)) {
                    this.tableFormSliceInformationList.InitVars();
                }
            }
            this.tableFormSubTitle1 = ((FormSubTitle1DataTable)(base.Tables["FormSubTitle1"]));
            if ((initTable == true)) {
                if ((this.tableFormSubTitle1 != null)) {
                    this.tableFormSubTitle1.InitVars();
                }
            }
            this.tableFormSubTitle2 = ((FormSubTitle2DataTable)(base.Tables["FormSubTitle2"]));
            if ((initTable == true)) {
                if ((this.tableFormSubTitle2 != null)) {
                    this.tableFormSubTitle2.InitVars();
                }
            }
            this.tableBackgroundColor = ((BackgroundColorDataTable)(base.Tables["BackgroundColor"]));
            if ((initTable == true)) {
                if ((this.tableBackgroundColor != null)) {
                    this.tableBackgroundColor.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FormMasterData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FormMasterData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFormSandwichDetails = new FormSandwichDetailsDataTable();
            base.Tables.Add(this.tableFormSandwichDetails);
            this.tableFormSliceInformationList = new FormSliceInformationListDataTable();
            base.Tables.Add(this.tableFormSliceInformationList);
            this.tableFormSubTitle1 = new FormSubTitle1DataTable();
            base.Tables.Add(this.tableFormSubTitle1);
            this.tableFormSubTitle2 = new FormSubTitle2DataTable();
            base.Tables.Add(this.tableFormSubTitle2);
            this.tableBackgroundColor = new BackgroundColorDataTable();
            base.Tables.Add(this.tableBackgroundColor);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormSandwichDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormSliceInformationList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormSubTitle1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormSubTitle2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBackgroundColor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FormMasterData ds = new FormMasterData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void FormSandwichDetailsRowChangeEventHandler(object sender, FormSandwichDetailsRowChangeEvent e);
        
        public delegate void FormSliceInformationListRowChangeEventHandler(object sender, FormSliceInformationListRowChangeEvent e);
        
        public delegate void FormSubTitle1RowChangeEventHandler(object sender, FormSubTitle1RowChangeEvent e);
        
        public delegate void FormSubTitle2RowChangeEventHandler(object sender, FormSubTitle2RowChangeEvent e);
        
        public delegate void BackgroundColorRowChangeEventHandler(object sender, BackgroundColorRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormSandwichDetailsDataTable : global::System.Data.TypedTableBase<FormSandwichDetailsRow> {
            
            private global::System.Data.DataColumn columnForm;
            
            private global::System.Data.DataColumn columnFormFile;
            
            private global::System.Data.DataColumn columnMenuName;
            
            private global::System.Data.DataColumn columnSubTitle1;
            
            private global::System.Data.DataColumn columnSubTitle2;
            
            private global::System.Data.DataColumn columnIsPrintVisible;
            
            private global::System.Data.DataColumn columnIsPreviewVisible;
            
            private global::System.Data.DataColumn columnIsEmailVisible;
            
            private global::System.Data.DataColumn columnIsNewVisible;
            
            private global::System.Data.DataColumn columnIsSaveVisible;
            
            private global::System.Data.DataColumn columnIsCancelVisible;
            
            private global::System.Data.DataColumn columnIsDeleteVisible;
            
            private global::System.Data.DataColumn columnIsAttachmentsVisible;
            
            private global::System.Data.DataColumn columnIsCommentsVisible;
            
            private global::System.Data.DataColumn columnIsAuditVisible;
            
            private global::System.Data.DataColumn columnReport;
            
            private global::System.Data.DataColumn columnAuditReport;
            
            private global::System.Data.DataColumn columnAttachmentAs;
            
            private global::System.Data.DataColumn columnCommentAs;
            
            private global::System.Data.DataColumn columnAuditLinkLabel;
            
            private global::System.Data.DataColumn columnIsQueryVisible;
            
            private global::System.Data.DataColumn columnIsNavVisible;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            private global::System.Data.DataColumn columnkeyfield;
            
            private global::System.Data.DataColumn columnUseExtraParameter;
            
            private global::System.Data.DataColumn columnIsQueryLoad;
            
            private global::System.Data.DataColumn columnIsFindOn;
            
            private global::System.Data.DataColumn columnIsAnalytics;
            
            private global::System.Data.DataColumn columnIsUpdate;
            
            private global::System.Data.DataColumn columnIsJerkFree;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSandwichDetailsDataTable() {
                this.TableName = "FormSandwichDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSandwichDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormSandwichDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormColumn {
                get {
                    return this.columnForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormFileColumn {
                get {
                    return this.columnFormFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuNameColumn {
                get {
                    return this.columnMenuName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubTitle1Column {
                get {
                    return this.columnSubTitle1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubTitle2Column {
                get {
                    return this.columnSubTitle2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrintVisibleColumn {
                get {
                    return this.columnIsPrintVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPreviewVisibleColumn {
                get {
                    return this.columnIsPreviewVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEmailVisibleColumn {
                get {
                    return this.columnIsEmailVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNewVisibleColumn {
                get {
                    return this.columnIsNewVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsSaveVisibleColumn {
                get {
                    return this.columnIsSaveVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCancelVisibleColumn {
                get {
                    return this.columnIsCancelVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeleteVisibleColumn {
                get {
                    return this.columnIsDeleteVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAttachmentsVisibleColumn {
                get {
                    return this.columnIsAttachmentsVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCommentsVisibleColumn {
                get {
                    return this.columnIsCommentsVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAuditVisibleColumn {
                get {
                    return this.columnIsAuditVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportColumn {
                get {
                    return this.columnReport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditReportColumn {
                get {
                    return this.columnAuditReport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttachmentAsColumn {
                get {
                    return this.columnAttachmentAs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentAsColumn {
                get {
                    return this.columnCommentAs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditLinkLabelColumn {
                get {
                    return this.columnAuditLinkLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsQueryVisibleColumn {
                get {
                    return this.columnIsQueryVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNavVisibleColumn {
                get {
                    return this.columnIsNavVisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn keyfieldColumn {
                get {
                    return this.columnkeyfield;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UseExtraParameterColumn {
                get {
                    return this.columnUseExtraParameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsQueryLoadColumn {
                get {
                    return this.columnIsQueryLoad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFindOnColumn {
                get {
                    return this.columnIsFindOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAnalyticsColumn {
                get {
                    return this.columnIsAnalytics;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsUpdateColumn {
                get {
                    return this.columnIsUpdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsJerkFreeColumn {
                get {
                    return this.columnIsJerkFree;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSandwichDetailsRow this[int index] {
                get {
                    return ((FormSandwichDetailsRow)(this.Rows[index]));
                }
            }
            
            public event FormSandwichDetailsRowChangeEventHandler FormSandwichDetailsRowChanging;
            
            public event FormSandwichDetailsRowChangeEventHandler FormSandwichDetailsRowChanged;
            
            public event FormSandwichDetailsRowChangeEventHandler FormSandwichDetailsRowDeleting;
            
            public event FormSandwichDetailsRowChangeEventHandler FormSandwichDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormSandwichDetailsRow(FormSandwichDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSandwichDetailsRow AddFormSandwichDetailsRow(
                        int Form, 
                        string FormFile, 
                        string MenuName, 
                        string SubTitle1, 
                        string SubTitle2, 
                        bool IsPrintVisible, 
                        bool IsPreviewVisible, 
                        bool IsEmailVisible, 
                        bool IsNewVisible, 
                        bool IsSaveVisible, 
                        bool IsCancelVisible, 
                        bool IsDeleteVisible, 
                        bool IsAttachmentsVisible, 
                        bool IsCommentsVisible, 
                        bool IsAuditVisible, 
                        int Report, 
                        int AuditReport, 
                        int AttachmentAs, 
                        int CommentAs, 
                        string AuditLinkLabel, 
                        bool IsQueryVisible, 
                        bool IsNavVisible, 
                        int FeatureClassID, 
                        string keyfield, 
                        short UseExtraParameter, 
                        bool IsQueryLoad, 
                        bool IsFindOn, 
                        bool IsAnalytics, 
                        bool IsUpdate, 
                        bool IsJerkFree) {
                FormSandwichDetailsRow rowFormSandwichDetailsRow = ((FormSandwichDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Form,
                        FormFile,
                        MenuName,
                        SubTitle1,
                        SubTitle2,
                        IsPrintVisible,
                        IsPreviewVisible,
                        IsEmailVisible,
                        IsNewVisible,
                        IsSaveVisible,
                        IsCancelVisible,
                        IsDeleteVisible,
                        IsAttachmentsVisible,
                        IsCommentsVisible,
                        IsAuditVisible,
                        Report,
                        AuditReport,
                        AttachmentAs,
                        CommentAs,
                        AuditLinkLabel,
                        IsQueryVisible,
                        IsNavVisible,
                        FeatureClassID,
                        keyfield,
                        UseExtraParameter,
                        IsQueryLoad,
                        IsFindOn,
                        IsAnalytics,
                        IsUpdate,
                        IsJerkFree};
                rowFormSandwichDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFormSandwichDetailsRow);
                return rowFormSandwichDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FormSandwichDetailsDataTable cln = ((FormSandwichDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FormSandwichDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnForm = base.Columns["Form"];
                this.columnFormFile = base.Columns["FormFile"];
                this.columnMenuName = base.Columns["MenuName"];
                this.columnSubTitle1 = base.Columns["SubTitle1"];
                this.columnSubTitle2 = base.Columns["SubTitle2"];
                this.columnIsPrintVisible = base.Columns["IsPrintVisible"];
                this.columnIsPreviewVisible = base.Columns["IsPreviewVisible"];
                this.columnIsEmailVisible = base.Columns["IsEmailVisible"];
                this.columnIsNewVisible = base.Columns["IsNewVisible"];
                this.columnIsSaveVisible = base.Columns["IsSaveVisible"];
                this.columnIsCancelVisible = base.Columns["IsCancelVisible"];
                this.columnIsDeleteVisible = base.Columns["IsDeleteVisible"];
                this.columnIsAttachmentsVisible = base.Columns["IsAttachmentsVisible"];
                this.columnIsCommentsVisible = base.Columns["IsCommentsVisible"];
                this.columnIsAuditVisible = base.Columns["IsAuditVisible"];
                this.columnReport = base.Columns["Report"];
                this.columnAuditReport = base.Columns["AuditReport"];
                this.columnAttachmentAs = base.Columns["AttachmentAs"];
                this.columnCommentAs = base.Columns["CommentAs"];
                this.columnAuditLinkLabel = base.Columns["AuditLinkLabel"];
                this.columnIsQueryVisible = base.Columns["IsQueryVisible"];
                this.columnIsNavVisible = base.Columns["IsNavVisible"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnkeyfield = base.Columns["keyfield"];
                this.columnUseExtraParameter = base.Columns["UseExtraParameter"];
                this.columnIsQueryLoad = base.Columns["IsQueryLoad"];
                this.columnIsFindOn = base.Columns["IsFindOn"];
                this.columnIsAnalytics = base.Columns["IsAnalytics"];
                this.columnIsUpdate = base.Columns["IsUpdate"];
                this.columnIsJerkFree = base.Columns["IsJerkFree"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnForm = new global::System.Data.DataColumn("Form", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForm);
                this.columnFormFile = new global::System.Data.DataColumn("FormFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormFile);
                this.columnMenuName = new global::System.Data.DataColumn("MenuName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuName);
                this.columnSubTitle1 = new global::System.Data.DataColumn("SubTitle1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubTitle1);
                this.columnSubTitle2 = new global::System.Data.DataColumn("SubTitle2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubTitle2);
                this.columnIsPrintVisible = new global::System.Data.DataColumn("IsPrintVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrintVisible);
                this.columnIsPreviewVisible = new global::System.Data.DataColumn("IsPreviewVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPreviewVisible);
                this.columnIsEmailVisible = new global::System.Data.DataColumn("IsEmailVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEmailVisible);
                this.columnIsNewVisible = new global::System.Data.DataColumn("IsNewVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNewVisible);
                this.columnIsSaveVisible = new global::System.Data.DataColumn("IsSaveVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSaveVisible);
                this.columnIsCancelVisible = new global::System.Data.DataColumn("IsCancelVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCancelVisible);
                this.columnIsDeleteVisible = new global::System.Data.DataColumn("IsDeleteVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleteVisible);
                this.columnIsAttachmentsVisible = new global::System.Data.DataColumn("IsAttachmentsVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAttachmentsVisible);
                this.columnIsCommentsVisible = new global::System.Data.DataColumn("IsCommentsVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCommentsVisible);
                this.columnIsAuditVisible = new global::System.Data.DataColumn("IsAuditVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAuditVisible);
                this.columnReport = new global::System.Data.DataColumn("Report", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReport);
                this.columnAuditReport = new global::System.Data.DataColumn("AuditReport", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditReport);
                this.columnAttachmentAs = new global::System.Data.DataColumn("AttachmentAs", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttachmentAs);
                this.columnCommentAs = new global::System.Data.DataColumn("CommentAs", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommentAs);
                this.columnAuditLinkLabel = new global::System.Data.DataColumn("AuditLinkLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditLinkLabel);
                this.columnIsQueryVisible = new global::System.Data.DataColumn("IsQueryVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsQueryVisible);
                this.columnIsNavVisible = new global::System.Data.DataColumn("IsNavVisible", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNavVisible);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnkeyfield = new global::System.Data.DataColumn("keyfield", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkeyfield);
                this.columnUseExtraParameter = new global::System.Data.DataColumn("UseExtraParameter", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseExtraParameter);
                this.columnIsQueryLoad = new global::System.Data.DataColumn("IsQueryLoad", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsQueryLoad);
                this.columnIsFindOn = new global::System.Data.DataColumn("IsFindOn", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFindOn);
                this.columnIsAnalytics = new global::System.Data.DataColumn("IsAnalytics", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAnalytics);
                this.columnIsUpdate = new global::System.Data.DataColumn("IsUpdate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsUpdate);
                this.columnIsJerkFree = new global::System.Data.DataColumn("IsJerkFree", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsJerkFree);
                this.columnForm.AllowDBNull = false;
                this.columnFormFile.MaxLength = 50;
                this.columnMenuName.AllowDBNull = false;
                this.columnMenuName.MaxLength = 50;
                this.columnSubTitle1.MaxLength = 1000;
                this.columnSubTitle2.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSandwichDetailsRow NewFormSandwichDetailsRow() {
                return ((FormSandwichDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FormSandwichDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FormSandwichDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormSandwichDetailsRowChanged != null)) {
                    this.FormSandwichDetailsRowChanged(this, new FormSandwichDetailsRowChangeEvent(((FormSandwichDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormSandwichDetailsRowChanging != null)) {
                    this.FormSandwichDetailsRowChanging(this, new FormSandwichDetailsRowChangeEvent(((FormSandwichDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormSandwichDetailsRowDeleted != null)) {
                    this.FormSandwichDetailsRowDeleted(this, new FormSandwichDetailsRowChangeEvent(((FormSandwichDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormSandwichDetailsRowDeleting != null)) {
                    this.FormSandwichDetailsRowDeleting(this, new FormSandwichDetailsRowChangeEvent(((FormSandwichDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormSandwichDetailsRow(FormSandwichDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FormMasterData ds = new FormMasterData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormSandwichDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormSliceInformationListDataTable : global::System.Data.TypedTableBase<FormSliceInformationListRow> {
            
            private global::System.Data.DataColumn columnSubForm;
            
            private global::System.Data.DataColumn columnFormFile;
            
            private global::System.Data.DataColumn columnMenuName;
            
            private global::System.Data.DataColumn columnMenuOrder;
            
            private global::System.Data.DataColumn columnFormOrder;
            
            private global::System.Data.DataColumn columnIsExpanded;
            
            private global::System.Data.DataColumn columnTabColor;
            
            private global::System.Data.DataColumn columnRed;
            
            private global::System.Data.DataColumn columnGreen;
            
            private global::System.Data.DataColumn columnBlue;
            
            private global::System.Data.DataColumn columnIsPermissionMenu;
            
            private global::System.Data.DataColumn columnIsPermissionOpen;
            
            private global::System.Data.DataColumn columnIsPermissionEdit;
            
            private global::System.Data.DataColumn columnIsPermissionAdd;
            
            private global::System.Data.DataColumn columnIsPermissionDelete;
            
            private global::System.Data.DataColumn columnWebHeight;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceInformationListDataTable() {
                this.TableName = "FormSliceInformationList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSliceInformationListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormSliceInformationListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubFormColumn {
                get {
                    return this.columnSubForm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormFileColumn {
                get {
                    return this.columnFormFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuNameColumn {
                get {
                    return this.columnMenuName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuOrderColumn {
                get {
                    return this.columnMenuOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormOrderColumn {
                get {
                    return this.columnFormOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsExpandedColumn {
                get {
                    return this.columnIsExpanded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TabColorColumn {
                get {
                    return this.columnTabColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RedColumn {
                get {
                    return this.columnRed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreenColumn {
                get {
                    return this.columnGreen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BlueColumn {
                get {
                    return this.columnBlue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionMenuColumn {
                get {
                    return this.columnIsPermissionMenu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionOpenColumn {
                get {
                    return this.columnIsPermissionOpen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionEditColumn {
                get {
                    return this.columnIsPermissionEdit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionAddColumn {
                get {
                    return this.columnIsPermissionAdd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermissionDeleteColumn {
                get {
                    return this.columnIsPermissionDelete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebHeightColumn {
                get {
                    return this.columnWebHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceInformationListRow this[int index] {
                get {
                    return ((FormSliceInformationListRow)(this.Rows[index]));
                }
            }
            
            public event FormSliceInformationListRowChangeEventHandler FormSliceInformationListRowChanging;
            
            public event FormSliceInformationListRowChangeEventHandler FormSliceInformationListRowChanged;
            
            public event FormSliceInformationListRowChangeEventHandler FormSliceInformationListRowDeleting;
            
            public event FormSliceInformationListRowChangeEventHandler FormSliceInformationListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormSliceInformationListRow(FormSliceInformationListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceInformationListRow AddFormSliceInformationListRow(
                        int SubForm, 
                        string FormFile, 
                        string MenuName, 
                        int MenuOrder, 
                        int FormOrder, 
                        bool IsExpanded, 
                        string TabColor, 
                        int Red, 
                        int Green, 
                        int Blue, 
                        bool IsPermissionMenu, 
                        bool IsPermissionOpen, 
                        bool IsPermissionEdit, 
                        bool IsPermissionAdd, 
                        bool IsPermissionDelete, 
                        long WebHeight) {
                FormSliceInformationListRow rowFormSliceInformationListRow = ((FormSliceInformationListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubForm,
                        FormFile,
                        MenuName,
                        MenuOrder,
                        FormOrder,
                        IsExpanded,
                        TabColor,
                        Red,
                        Green,
                        Blue,
                        IsPermissionMenu,
                        IsPermissionOpen,
                        IsPermissionEdit,
                        IsPermissionAdd,
                        IsPermissionDelete,
                        WebHeight};
                rowFormSliceInformationListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFormSliceInformationListRow);
                return rowFormSliceInformationListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FormSliceInformationListDataTable cln = ((FormSliceInformationListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FormSliceInformationListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubForm = base.Columns["SubForm"];
                this.columnFormFile = base.Columns["FormFile"];
                this.columnMenuName = base.Columns["MenuName"];
                this.columnMenuOrder = base.Columns["MenuOrder"];
                this.columnFormOrder = base.Columns["FormOrder"];
                this.columnIsExpanded = base.Columns["IsExpanded"];
                this.columnTabColor = base.Columns["TabColor"];
                this.columnRed = base.Columns["Red"];
                this.columnGreen = base.Columns["Green"];
                this.columnBlue = base.Columns["Blue"];
                this.columnIsPermissionMenu = base.Columns["IsPermissionMenu"];
                this.columnIsPermissionOpen = base.Columns["IsPermissionOpen"];
                this.columnIsPermissionEdit = base.Columns["IsPermissionEdit"];
                this.columnIsPermissionAdd = base.Columns["IsPermissionAdd"];
                this.columnIsPermissionDelete = base.Columns["IsPermissionDelete"];
                this.columnWebHeight = base.Columns["WebHeight"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubForm = new global::System.Data.DataColumn("SubForm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubForm);
                this.columnFormFile = new global::System.Data.DataColumn("FormFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormFile);
                this.columnMenuName = new global::System.Data.DataColumn("MenuName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuName);
                this.columnMenuOrder = new global::System.Data.DataColumn("MenuOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuOrder);
                this.columnFormOrder = new global::System.Data.DataColumn("FormOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormOrder);
                this.columnIsExpanded = new global::System.Data.DataColumn("IsExpanded", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsExpanded);
                this.columnTabColor = new global::System.Data.DataColumn("TabColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTabColor);
                this.columnRed = new global::System.Data.DataColumn("Red", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRed);
                this.columnGreen = new global::System.Data.DataColumn("Green", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreen);
                this.columnBlue = new global::System.Data.DataColumn("Blue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlue);
                this.columnIsPermissionMenu = new global::System.Data.DataColumn("IsPermissionMenu", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionMenu);
                this.columnIsPermissionOpen = new global::System.Data.DataColumn("IsPermissionOpen", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionOpen);
                this.columnIsPermissionEdit = new global::System.Data.DataColumn("IsPermissionEdit", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionEdit);
                this.columnIsPermissionAdd = new global::System.Data.DataColumn("IsPermissionAdd", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionAdd);
                this.columnIsPermissionDelete = new global::System.Data.DataColumn("IsPermissionDelete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermissionDelete);
                this.columnWebHeight = new global::System.Data.DataColumn("WebHeight", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebHeight);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceInformationListRow NewFormSliceInformationListRow() {
                return ((FormSliceInformationListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FormSliceInformationListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FormSliceInformationListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormSliceInformationListRowChanged != null)) {
                    this.FormSliceInformationListRowChanged(this, new FormSliceInformationListRowChangeEvent(((FormSliceInformationListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormSliceInformationListRowChanging != null)) {
                    this.FormSliceInformationListRowChanging(this, new FormSliceInformationListRowChangeEvent(((FormSliceInformationListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormSliceInformationListRowDeleted != null)) {
                    this.FormSliceInformationListRowDeleted(this, new FormSliceInformationListRowChangeEvent(((FormSliceInformationListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormSliceInformationListRowDeleting != null)) {
                    this.FormSliceInformationListRowDeleting(this, new FormSliceInformationListRowChangeEvent(((FormSliceInformationListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormSliceInformationListRow(FormSliceInformationListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FormMasterData ds = new FormMasterData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormSliceInformationListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormSubTitle1DataTable : global::System.Data.TypedTableBase<FormSubTitle1Row> {
            
            private global::System.Data.DataColumn columnSubTitle1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle1DataTable() {
                this.TableName = "FormSubTitle1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSubTitle1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormSubTitle1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubTitle1Column {
                get {
                    return this.columnSubTitle1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle1Row this[int index] {
                get {
                    return ((FormSubTitle1Row)(this.Rows[index]));
                }
            }
            
            public event FormSubTitle1RowChangeEventHandler FormSubTitle1RowChanging;
            
            public event FormSubTitle1RowChangeEventHandler FormSubTitle1RowChanged;
            
            public event FormSubTitle1RowChangeEventHandler FormSubTitle1RowDeleting;
            
            public event FormSubTitle1RowChangeEventHandler FormSubTitle1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormSubTitle1Row(FormSubTitle1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle1Row AddFormSubTitle1Row(string SubTitle1) {
                FormSubTitle1Row rowFormSubTitle1Row = ((FormSubTitle1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubTitle1};
                rowFormSubTitle1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowFormSubTitle1Row);
                return rowFormSubTitle1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FormSubTitle1DataTable cln = ((FormSubTitle1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FormSubTitle1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubTitle1 = base.Columns["SubTitle1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubTitle1 = new global::System.Data.DataColumn("SubTitle1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubTitle1);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle1Row NewFormSubTitle1Row() {
                return ((FormSubTitle1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FormSubTitle1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FormSubTitle1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormSubTitle1RowChanged != null)) {
                    this.FormSubTitle1RowChanged(this, new FormSubTitle1RowChangeEvent(((FormSubTitle1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormSubTitle1RowChanging != null)) {
                    this.FormSubTitle1RowChanging(this, new FormSubTitle1RowChangeEvent(((FormSubTitle1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormSubTitle1RowDeleted != null)) {
                    this.FormSubTitle1RowDeleted(this, new FormSubTitle1RowChangeEvent(((FormSubTitle1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormSubTitle1RowDeleting != null)) {
                    this.FormSubTitle1RowDeleting(this, new FormSubTitle1RowChangeEvent(((FormSubTitle1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormSubTitle1Row(FormSubTitle1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FormMasterData ds = new FormMasterData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormSubTitle1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormSubTitle2DataTable : global::System.Data.TypedTableBase<FormSubTitle2Row> {
            
            private global::System.Data.DataColumn columnSubTitle2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle2DataTable() {
                this.TableName = "FormSubTitle2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSubTitle2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormSubTitle2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubTitle2Column {
                get {
                    return this.columnSubTitle2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle2Row this[int index] {
                get {
                    return ((FormSubTitle2Row)(this.Rows[index]));
                }
            }
            
            public event FormSubTitle2RowChangeEventHandler FormSubTitle2RowChanging;
            
            public event FormSubTitle2RowChangeEventHandler FormSubTitle2RowChanged;
            
            public event FormSubTitle2RowChangeEventHandler FormSubTitle2RowDeleting;
            
            public event FormSubTitle2RowChangeEventHandler FormSubTitle2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormSubTitle2Row(FormSubTitle2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle2Row AddFormSubTitle2Row(string SubTitle2) {
                FormSubTitle2Row rowFormSubTitle2Row = ((FormSubTitle2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubTitle2};
                rowFormSubTitle2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowFormSubTitle2Row);
                return rowFormSubTitle2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FormSubTitle2DataTable cln = ((FormSubTitle2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FormSubTitle2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubTitle2 = base.Columns["SubTitle2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubTitle2 = new global::System.Data.DataColumn("SubTitle2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubTitle2);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle2Row NewFormSubTitle2Row() {
                return ((FormSubTitle2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FormSubTitle2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FormSubTitle2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormSubTitle2RowChanged != null)) {
                    this.FormSubTitle2RowChanged(this, new FormSubTitle2RowChangeEvent(((FormSubTitle2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormSubTitle2RowChanging != null)) {
                    this.FormSubTitle2RowChanging(this, new FormSubTitle2RowChangeEvent(((FormSubTitle2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormSubTitle2RowDeleted != null)) {
                    this.FormSubTitle2RowDeleted(this, new FormSubTitle2RowChangeEvent(((FormSubTitle2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormSubTitle2RowDeleting != null)) {
                    this.FormSubTitle2RowDeleting(this, new FormSubTitle2RowChangeEvent(((FormSubTitle2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormSubTitle2Row(FormSubTitle2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FormMasterData ds = new FormMasterData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormSubTitle2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BackgroundColorDataTable : global::System.Data.TypedTableBase<BackgroundColorRow> {
            
            private global::System.Data.DataColumn columnBackgroundColor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackgroundColorDataTable() {
                this.TableName = "BackgroundColor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BackgroundColorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BackgroundColorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackgroundColorColumn {
                get {
                    return this.columnBackgroundColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackgroundColorRow this[int index] {
                get {
                    return ((BackgroundColorRow)(this.Rows[index]));
                }
            }
            
            public event BackgroundColorRowChangeEventHandler BackgroundColorRowChanging;
            
            public event BackgroundColorRowChangeEventHandler BackgroundColorRowChanged;
            
            public event BackgroundColorRowChangeEventHandler BackgroundColorRowDeleting;
            
            public event BackgroundColorRowChangeEventHandler BackgroundColorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBackgroundColorRow(BackgroundColorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackgroundColorRow AddBackgroundColorRow(string BackgroundColor) {
                BackgroundColorRow rowBackgroundColorRow = ((BackgroundColorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BackgroundColor};
                rowBackgroundColorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBackgroundColorRow);
                return rowBackgroundColorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BackgroundColorDataTable cln = ((BackgroundColorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BackgroundColorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBackgroundColor = base.Columns["BackgroundColor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBackgroundColor = new global::System.Data.DataColumn("BackgroundColor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackgroundColor);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackgroundColorRow NewBackgroundColorRow() {
                return ((BackgroundColorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BackgroundColorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BackgroundColorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BackgroundColorRowChanged != null)) {
                    this.BackgroundColorRowChanged(this, new BackgroundColorRowChangeEvent(((BackgroundColorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BackgroundColorRowChanging != null)) {
                    this.BackgroundColorRowChanging(this, new BackgroundColorRowChangeEvent(((BackgroundColorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BackgroundColorRowDeleted != null)) {
                    this.BackgroundColorRowDeleted(this, new BackgroundColorRowChangeEvent(((BackgroundColorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BackgroundColorRowDeleting != null)) {
                    this.BackgroundColorRowDeleting(this, new BackgroundColorRowChangeEvent(((BackgroundColorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBackgroundColorRow(BackgroundColorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FormMasterData ds = new FormMasterData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BackgroundColorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormSandwichDetailsRow : global::System.Data.DataRow {
            
            private FormSandwichDetailsDataTable tableFormSandwichDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSandwichDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormSandwichDetails = ((FormSandwichDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Form {
                get {
                    return ((int)(this[this.tableFormSandwichDetails.FormColumn]));
                }
                set {
                    this[this.tableFormSandwichDetails.FormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormFile {
                get {
                    try {
                        return ((string)(this[this.tableFormSandwichDetails.FormFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormFile\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.FormFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MenuName {
                get {
                    return ((string)(this[this.tableFormSandwichDetails.MenuNameColumn]));
                }
                set {
                    this[this.tableFormSandwichDetails.MenuNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubTitle1 {
                get {
                    try {
                        return ((string)(this[this.tableFormSandwichDetails.SubTitle1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubTitle1\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.SubTitle1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubTitle2 {
                get {
                    try {
                        return ((string)(this[this.tableFormSandwichDetails.SubTitle2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubTitle2\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.SubTitle2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsPrintVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrintVisible\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsPrintVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreviewVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsPreviewVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPreviewVisible\' in table \'FormSandwichDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsPreviewVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsEmailVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEmailVisible\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsEmailVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsNewVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsNewVisible\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsNewVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaveVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsSaveVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsSaveVisible\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsSaveVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCancelVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsCancelVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCancelVisible\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsCancelVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleteVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsDeleteVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleteVisible\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsDeleteVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttachmentsVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsAttachmentsVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAttachmentsVisible\' in table \'FormSandwichDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsAttachmentsVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsCommentsVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCommentsVisible\' in table \'FormSandwichDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsCommentsVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsAuditVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAuditVisible\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsAuditVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Report {
                get {
                    try {
                        return ((int)(this[this.tableFormSandwichDetails.ReportColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Report\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.ReportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AuditReport {
                get {
                    try {
                        return ((int)(this[this.tableFormSandwichDetails.AuditReportColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuditReport\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.AuditReportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AttachmentAs {
                get {
                    try {
                        return ((int)(this[this.tableFormSandwichDetails.AttachmentAsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AttachmentAs\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.AttachmentAsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CommentAs {
                get {
                    try {
                        return ((int)(this[this.tableFormSandwichDetails.CommentAsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommentAs\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.CommentAsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuditLinkLabel {
                get {
                    try {
                        return ((string)(this[this.tableFormSandwichDetails.AuditLinkLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuditLinkLabel\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.AuditLinkLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQueryVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsQueryVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsQueryVisible\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsQueryVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNavVisible {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsNavVisibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsNavVisible\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsNavVisibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableFormSandwichDetails.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string keyfield {
                get {
                    try {
                        return ((string)(this[this.tableFormSandwichDetails.keyfieldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'keyfield\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.keyfieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short UseExtraParameter {
                get {
                    try {
                        return ((short)(this[this.tableFormSandwichDetails.UseExtraParameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UseExtraParameter\' in table \'FormSandwichDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.UseExtraParameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQueryLoad {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsQueryLoadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsQueryLoad\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsQueryLoadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFindOn {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsFindOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFindOn\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsFindOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnalytics {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsAnalyticsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAnalytics\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsAnalyticsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdate {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsUpdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsUpdate\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsUpdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJerkFree {
                get {
                    try {
                        return ((bool)(this[this.tableFormSandwichDetails.IsJerkFreeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsJerkFree\' in table \'FormSandwichDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSandwichDetails.IsJerkFreeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormFileNull() {
                return this.IsNull(this.tableFormSandwichDetails.FormFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormFileNull() {
                this[this.tableFormSandwichDetails.FormFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubTitle1Null() {
                return this.IsNull(this.tableFormSandwichDetails.SubTitle1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubTitle1Null() {
                this[this.tableFormSandwichDetails.SubTitle1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubTitle2Null() {
                return this.IsNull(this.tableFormSandwichDetails.SubTitle2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubTitle2Null() {
                this[this.tableFormSandwichDetails.SubTitle2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrintVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsPrintVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrintVisibleNull() {
                this[this.tableFormSandwichDetails.IsPrintVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPreviewVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsPreviewVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPreviewVisibleNull() {
                this[this.tableFormSandwichDetails.IsPreviewVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEmailVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsEmailVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEmailVisibleNull() {
                this[this.tableFormSandwichDetails.IsEmailVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNewVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsNewVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNewVisibleNull() {
                this[this.tableFormSandwichDetails.IsNewVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsSaveVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsSaveVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsSaveVisibleNull() {
                this[this.tableFormSandwichDetails.IsSaveVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCancelVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsCancelVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCancelVisibleNull() {
                this[this.tableFormSandwichDetails.IsCancelVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeleteVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsDeleteVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeleteVisibleNull() {
                this[this.tableFormSandwichDetails.IsDeleteVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAttachmentsVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsAttachmentsVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAttachmentsVisibleNull() {
                this[this.tableFormSandwichDetails.IsAttachmentsVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCommentsVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsCommentsVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCommentsVisibleNull() {
                this[this.tableFormSandwichDetails.IsCommentsVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAuditVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsAuditVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAuditVisibleNull() {
                this[this.tableFormSandwichDetails.IsAuditVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportNull() {
                return this.IsNull(this.tableFormSandwichDetails.ReportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportNull() {
                this[this.tableFormSandwichDetails.ReportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditReportNull() {
                return this.IsNull(this.tableFormSandwichDetails.AuditReportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditReportNull() {
                this[this.tableFormSandwichDetails.AuditReportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttachmentAsNull() {
                return this.IsNull(this.tableFormSandwichDetails.AttachmentAsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttachmentAsNull() {
                this[this.tableFormSandwichDetails.AttachmentAsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentAsNull() {
                return this.IsNull(this.tableFormSandwichDetails.CommentAsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentAsNull() {
                this[this.tableFormSandwichDetails.CommentAsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditLinkLabelNull() {
                return this.IsNull(this.tableFormSandwichDetails.AuditLinkLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditLinkLabelNull() {
                this[this.tableFormSandwichDetails.AuditLinkLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsQueryVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsQueryVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsQueryVisibleNull() {
                this[this.tableFormSandwichDetails.IsQueryVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNavVisibleNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsNavVisibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNavVisibleNull() {
                this[this.tableFormSandwichDetails.IsNavVisibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableFormSandwichDetails.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableFormSandwichDetails.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskeyfieldNull() {
                return this.IsNull(this.tableFormSandwichDetails.keyfieldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkeyfieldNull() {
                this[this.tableFormSandwichDetails.keyfieldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseExtraParameterNull() {
                return this.IsNull(this.tableFormSandwichDetails.UseExtraParameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseExtraParameterNull() {
                this[this.tableFormSandwichDetails.UseExtraParameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsQueryLoadNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsQueryLoadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsQueryLoadNull() {
                this[this.tableFormSandwichDetails.IsQueryLoadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFindOnNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsFindOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFindOnNull() {
                this[this.tableFormSandwichDetails.IsFindOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAnalyticsNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsAnalyticsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAnalyticsNull() {
                this[this.tableFormSandwichDetails.IsAnalyticsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsUpdateNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsUpdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsUpdateNull() {
                this[this.tableFormSandwichDetails.IsUpdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsJerkFreeNull() {
                return this.IsNull(this.tableFormSandwichDetails.IsJerkFreeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsJerkFreeNull() {
                this[this.tableFormSandwichDetails.IsJerkFreeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormSliceInformationListRow : global::System.Data.DataRow {
            
            private FormSliceInformationListDataTable tableFormSliceInformationList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSliceInformationListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormSliceInformationList = ((FormSliceInformationListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubForm {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceInformationList.SubFormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubForm\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.SubFormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormFile {
                get {
                    try {
                        return ((string)(this[this.tableFormSliceInformationList.FormFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormFile\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.FormFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MenuName {
                get {
                    try {
                        return ((string)(this[this.tableFormSliceInformationList.MenuNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MenuName\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.MenuNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MenuOrder {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceInformationList.MenuOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MenuOrder\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.MenuOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FormOrder {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceInformationList.FormOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormOrder\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.FormOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpanded {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceInformationList.IsExpandedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsExpanded\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.IsExpandedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TabColor {
                get {
                    try {
                        return ((string)(this[this.tableFormSliceInformationList.TabColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TabColor\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.TabColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Red {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceInformationList.RedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Red\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.RedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Green {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceInformationList.GreenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Green\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.GreenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Blue {
                get {
                    try {
                        return ((int)(this[this.tableFormSliceInformationList.BlueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Blue\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.BlueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionMenu {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceInformationList.IsPermissionMenuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionMenu\' in table \'FormSliceInformationList\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.IsPermissionMenuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionOpen {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceInformationList.IsPermissionOpenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionOpen\' in table \'FormSliceInformationList\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.IsPermissionOpenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionEdit {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceInformationList.IsPermissionEditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionEdit\' in table \'FormSliceInformationList\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.IsPermissionEditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionAdd {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceInformationList.IsPermissionAddColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionAdd\' in table \'FormSliceInformationList\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.IsPermissionAddColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermissionDelete {
                get {
                    try {
                        return ((bool)(this[this.tableFormSliceInformationList.IsPermissionDeleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermissionDelete\' in table \'FormSliceInformationList\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.IsPermissionDeleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long WebHeight {
                get {
                    try {
                        return ((long)(this[this.tableFormSliceInformationList.WebHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WebHeight\' in table \'FormSliceInformationList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSliceInformationList.WebHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubFormNull() {
                return this.IsNull(this.tableFormSliceInformationList.SubFormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubFormNull() {
                this[this.tableFormSliceInformationList.SubFormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormFileNull() {
                return this.IsNull(this.tableFormSliceInformationList.FormFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormFileNull() {
                this[this.tableFormSliceInformationList.FormFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMenuNameNull() {
                return this.IsNull(this.tableFormSliceInformationList.MenuNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMenuNameNull() {
                this[this.tableFormSliceInformationList.MenuNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMenuOrderNull() {
                return this.IsNull(this.tableFormSliceInformationList.MenuOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMenuOrderNull() {
                this[this.tableFormSliceInformationList.MenuOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormOrderNull() {
                return this.IsNull(this.tableFormSliceInformationList.FormOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormOrderNull() {
                this[this.tableFormSliceInformationList.FormOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsExpandedNull() {
                return this.IsNull(this.tableFormSliceInformationList.IsExpandedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsExpandedNull() {
                this[this.tableFormSliceInformationList.IsExpandedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTabColorNull() {
                return this.IsNull(this.tableFormSliceInformationList.TabColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTabColorNull() {
                this[this.tableFormSliceInformationList.TabColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRedNull() {
                return this.IsNull(this.tableFormSliceInformationList.RedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRedNull() {
                this[this.tableFormSliceInformationList.RedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreenNull() {
                return this.IsNull(this.tableFormSliceInformationList.GreenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreenNull() {
                this[this.tableFormSliceInformationList.GreenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlueNull() {
                return this.IsNull(this.tableFormSliceInformationList.BlueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlueNull() {
                this[this.tableFormSliceInformationList.BlueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionMenuNull() {
                return this.IsNull(this.tableFormSliceInformationList.IsPermissionMenuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionMenuNull() {
                this[this.tableFormSliceInformationList.IsPermissionMenuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionOpenNull() {
                return this.IsNull(this.tableFormSliceInformationList.IsPermissionOpenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionOpenNull() {
                this[this.tableFormSliceInformationList.IsPermissionOpenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionEditNull() {
                return this.IsNull(this.tableFormSliceInformationList.IsPermissionEditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionEditNull() {
                this[this.tableFormSliceInformationList.IsPermissionEditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionAddNull() {
                return this.IsNull(this.tableFormSliceInformationList.IsPermissionAddColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionAddNull() {
                this[this.tableFormSliceInformationList.IsPermissionAddColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermissionDeleteNull() {
                return this.IsNull(this.tableFormSliceInformationList.IsPermissionDeleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermissionDeleteNull() {
                this[this.tableFormSliceInformationList.IsPermissionDeleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWebHeightNull() {
                return this.IsNull(this.tableFormSliceInformationList.WebHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWebHeightNull() {
                this[this.tableFormSliceInformationList.WebHeightColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormSubTitle1Row : global::System.Data.DataRow {
            
            private FormSubTitle1DataTable tableFormSubTitle1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSubTitle1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormSubTitle1 = ((FormSubTitle1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubTitle1 {
                get {
                    try {
                        return ((string)(this[this.tableFormSubTitle1.SubTitle1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubTitle1\' in table \'FormSubTitle1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSubTitle1.SubTitle1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubTitle1Null() {
                return this.IsNull(this.tableFormSubTitle1.SubTitle1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubTitle1Null() {
                this[this.tableFormSubTitle1.SubTitle1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormSubTitle2Row : global::System.Data.DataRow {
            
            private FormSubTitle2DataTable tableFormSubTitle2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormSubTitle2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormSubTitle2 = ((FormSubTitle2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubTitle2 {
                get {
                    try {
                        return ((string)(this[this.tableFormSubTitle2.SubTitle2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubTitle2\' in table \'FormSubTitle2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormSubTitle2.SubTitle2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubTitle2Null() {
                return this.IsNull(this.tableFormSubTitle2.SubTitle2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubTitle2Null() {
                this[this.tableFormSubTitle2.SubTitle2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BackgroundColorRow : global::System.Data.DataRow {
            
            private BackgroundColorDataTable tableBackgroundColor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BackgroundColorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBackgroundColor = ((BackgroundColorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BackgroundColor {
                get {
                    try {
                        return ((string)(this[this.tableBackgroundColor.BackgroundColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackgroundColor\' in table \'BackgroundColor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBackgroundColor.BackgroundColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackgroundColorNull() {
                return this.IsNull(this.tableBackgroundColor.BackgroundColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackgroundColorNull() {
                this[this.tableBackgroundColor.BackgroundColorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormSandwichDetailsRowChangeEvent : global::System.EventArgs {
            
            private FormSandwichDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSandwichDetailsRowChangeEvent(FormSandwichDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSandwichDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormSliceInformationListRowChangeEvent : global::System.EventArgs {
            
            private FormSliceInformationListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceInformationListRowChangeEvent(FormSliceInformationListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSliceInformationListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormSubTitle1RowChangeEvent : global::System.EventArgs {
            
            private FormSubTitle1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle1RowChangeEvent(FormSubTitle1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormSubTitle2RowChangeEvent : global::System.EventArgs {
            
            private FormSubTitle2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle2RowChangeEvent(FormSubTitle2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormSubTitle2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BackgroundColorRowChangeEvent : global::System.EventArgs {
            
            private BackgroundColorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackgroundColorRowChangeEvent(BackgroundColorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BackgroundColorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591