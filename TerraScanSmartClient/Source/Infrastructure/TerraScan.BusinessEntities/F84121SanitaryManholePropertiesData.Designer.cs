//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F84121SanitaryManholePropertiesData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F84121SanitaryManholePropertiesData : global::System.Data.DataSet {
        
        private GetSanitaryManholePropertiesDataTable tableGetSanitaryManholeProperties;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F84121SanitaryManholePropertiesData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F84121SanitaryManholePropertiesData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetSanitaryManholeProperties"] != null)) {
                    base.Tables.Add(new GetSanitaryManholePropertiesDataTable(ds.Tables["GetSanitaryManholeProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSanitaryManholePropertiesDataTable GetSanitaryManholeProperties {
            get {
                return this.tableGetSanitaryManholeProperties;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F84121SanitaryManholePropertiesData cln = ((F84121SanitaryManholePropertiesData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetSanitaryManholeProperties"] != null)) {
                    base.Tables.Add(new GetSanitaryManholePropertiesDataTable(ds.Tables["GetSanitaryManholeProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetSanitaryManholeProperties = ((GetSanitaryManholePropertiesDataTable)(base.Tables["GetSanitaryManholeProperties"]));
            if ((initTable == true)) {
                if ((this.tableGetSanitaryManholeProperties != null)) {
                    this.tableGetSanitaryManholeProperties.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F84121SanitaryManholePropertiesData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F84121SanitaryManholePropertiesData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetSanitaryManholeProperties = new GetSanitaryManholePropertiesDataTable();
            base.Tables.Add(this.tableGetSanitaryManholeProperties);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSanitaryManholeProperties() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F84121SanitaryManholePropertiesData ds = new F84121SanitaryManholePropertiesData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetSanitaryManholePropertiesRowChangeEventHandler(object sender, GetSanitaryManholePropertiesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSanitaryManholePropertiesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFeatureID;
            
            private global::System.Data.DataColumn columnCID;
            
            private global::System.Data.DataColumn columnFeatureClassID;
            
            private global::System.Data.DataColumn columnIsEnabled;
            
            private global::System.Data.DataColumn columnIsPrivate;
            
            private global::System.Data.DataColumn columnBarrelDiameter;
            
            private global::System.Data.DataColumn columnCoverDiameter;
            
            private global::System.Data.DataColumn columnRingElevation;
            
            private global::System.Data.DataColumn columnFlowElevation;
            
            private global::System.Data.DataColumn columnDepth;
            
            private global::System.Data.DataColumn columnLifecycleStatusID;
            
            private global::System.Data.DataColumn columnManholeTypeID;
            
            private global::System.Data.DataColumn columnCoverTypeID;
            
            private global::System.Data.DataColumn columnFrameTypeID;
            
            private global::System.Data.DataColumn columnBaseMaterialID;
            
            private global::System.Data.DataColumn columnBenchMaterialID;
            
            private global::System.Data.DataColumn columnChannelMaterialID;
            
            private global::System.Data.DataColumn columnConeMaterialID;
            
            private global::System.Data.DataColumn columnRingMaterialID;
            
            private global::System.Data.DataColumn columnStepMaterialID;
            
            private global::System.Data.DataColumn columnWallMaterialID;
            
            private global::System.Data.DataColumn columnAccessTypeID;
            
            private global::System.Data.DataColumn columnSurfaceCoverID;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholePropertiesDataTable() {
                this.TableName = "GetSanitaryManholeProperties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSanitaryManholePropertiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSanitaryManholePropertiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIDColumn {
                get {
                    return this.columnCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsEnabledColumn {
                get {
                    return this.columnIsEnabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrivateColumn {
                get {
                    return this.columnIsPrivate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarrelDiameterColumn {
                get {
                    return this.columnBarrelDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoverDiameterColumn {
                get {
                    return this.columnCoverDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RingElevationColumn {
                get {
                    return this.columnRingElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowElevationColumn {
                get {
                    return this.columnFlowElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepthColumn {
                get {
                    return this.columnDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LifecycleStatusIDColumn {
                get {
                    return this.columnLifecycleStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManholeTypeIDColumn {
                get {
                    return this.columnManholeTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoverTypeIDColumn {
                get {
                    return this.columnCoverTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrameTypeIDColumn {
                get {
                    return this.columnFrameTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseMaterialIDColumn {
                get {
                    return this.columnBaseMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BenchMaterialIDColumn {
                get {
                    return this.columnBenchMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChannelMaterialIDColumn {
                get {
                    return this.columnChannelMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConeMaterialIDColumn {
                get {
                    return this.columnConeMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RingMaterialIDColumn {
                get {
                    return this.columnRingMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StepMaterialIDColumn {
                get {
                    return this.columnStepMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WallMaterialIDColumn {
                get {
                    return this.columnWallMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeIDColumn {
                get {
                    return this.columnAccessTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurfaceCoverIDColumn {
                get {
                    return this.columnSurfaceCoverID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholePropertiesRow this[int index] {
                get {
                    return ((GetSanitaryManholePropertiesRow)(this.Rows[index]));
                }
            }
            
            public event GetSanitaryManholePropertiesRowChangeEventHandler GetSanitaryManholePropertiesRowChanging;
            
            public event GetSanitaryManholePropertiesRowChangeEventHandler GetSanitaryManholePropertiesRowChanged;
            
            public event GetSanitaryManholePropertiesRowChangeEventHandler GetSanitaryManholePropertiesRowDeleting;
            
            public event GetSanitaryManholePropertiesRowChangeEventHandler GetSanitaryManholePropertiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSanitaryManholePropertiesRow(GetSanitaryManholePropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholePropertiesRow AddGetSanitaryManholePropertiesRow(
                        string CID, 
                        int FeatureClassID, 
                        bool IsEnabled, 
                        bool IsPrivate, 
                        decimal BarrelDiameter, 
                        decimal CoverDiameter, 
                        decimal RingElevation, 
                        decimal FlowElevation, 
                        decimal Depth, 
                        int LifecycleStatusID, 
                        int ManholeTypeID, 
                        int CoverTypeID, 
                        int FrameTypeID, 
                        int BaseMaterialID, 
                        int BenchMaterialID, 
                        int ChannelMaterialID, 
                        int ConeMaterialID, 
                        int RingMaterialID, 
                        int StepMaterialID, 
                        int WallMaterialID, 
                        int AccessTypeID, 
                        int SurfaceCoverID, 
                        string Comment) {
                GetSanitaryManholePropertiesRow rowGetSanitaryManholePropertiesRow = ((GetSanitaryManholePropertiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CID,
                        FeatureClassID,
                        IsEnabled,
                        IsPrivate,
                        BarrelDiameter,
                        CoverDiameter,
                        RingElevation,
                        FlowElevation,
                        Depth,
                        LifecycleStatusID,
                        ManholeTypeID,
                        CoverTypeID,
                        FrameTypeID,
                        BaseMaterialID,
                        BenchMaterialID,
                        ChannelMaterialID,
                        ConeMaterialID,
                        RingMaterialID,
                        StepMaterialID,
                        WallMaterialID,
                        AccessTypeID,
                        SurfaceCoverID,
                        Comment};
                rowGetSanitaryManholePropertiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetSanitaryManholePropertiesRow);
                return rowGetSanitaryManholePropertiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholePropertiesRow FindByFeatureID(int FeatureID) {
                return ((GetSanitaryManholePropertiesRow)(this.Rows.Find(new object[] {
                            FeatureID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetSanitaryManholePropertiesDataTable cln = ((GetSanitaryManholePropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetSanitaryManholePropertiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeatureID = base.Columns["FeatureID"];
                this.columnCID = base.Columns["CID"];
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnIsEnabled = base.Columns["IsEnabled"];
                this.columnIsPrivate = base.Columns["IsPrivate"];
                this.columnBarrelDiameter = base.Columns["BarrelDiameter"];
                this.columnCoverDiameter = base.Columns["CoverDiameter"];
                this.columnRingElevation = base.Columns["RingElevation"];
                this.columnFlowElevation = base.Columns["FlowElevation"];
                this.columnDepth = base.Columns["Depth"];
                this.columnLifecycleStatusID = base.Columns["LifecycleStatusID"];
                this.columnManholeTypeID = base.Columns["ManholeTypeID"];
                this.columnCoverTypeID = base.Columns["CoverTypeID"];
                this.columnFrameTypeID = base.Columns["FrameTypeID"];
                this.columnBaseMaterialID = base.Columns["BaseMaterialID"];
                this.columnBenchMaterialID = base.Columns["BenchMaterialID"];
                this.columnChannelMaterialID = base.Columns["ChannelMaterialID"];
                this.columnConeMaterialID = base.Columns["ConeMaterialID"];
                this.columnRingMaterialID = base.Columns["RingMaterialID"];
                this.columnStepMaterialID = base.Columns["StepMaterialID"];
                this.columnWallMaterialID = base.Columns["WallMaterialID"];
                this.columnAccessTypeID = base.Columns["AccessTypeID"];
                this.columnSurfaceCoverID = base.Columns["SurfaceCoverID"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeatureID = new global::System.Data.DataColumn("FeatureID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureID);
                this.columnCID = new global::System.Data.DataColumn("CID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCID);
                this.columnFeatureClassID = new global::System.Data.DataColumn("FeatureClassID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnIsEnabled = new global::System.Data.DataColumn("IsEnabled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsEnabled);
                this.columnIsPrivate = new global::System.Data.DataColumn("IsPrivate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrivate);
                this.columnBarrelDiameter = new global::System.Data.DataColumn("BarrelDiameter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarrelDiameter);
                this.columnCoverDiameter = new global::System.Data.DataColumn("CoverDiameter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoverDiameter);
                this.columnRingElevation = new global::System.Data.DataColumn("RingElevation", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRingElevation);
                this.columnFlowElevation = new global::System.Data.DataColumn("FlowElevation", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowElevation);
                this.columnDepth = new global::System.Data.DataColumn("Depth", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepth);
                this.columnLifecycleStatusID = new global::System.Data.DataColumn("LifecycleStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLifecycleStatusID);
                this.columnManholeTypeID = new global::System.Data.DataColumn("ManholeTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManholeTypeID);
                this.columnCoverTypeID = new global::System.Data.DataColumn("CoverTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoverTypeID);
                this.columnFrameTypeID = new global::System.Data.DataColumn("FrameTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrameTypeID);
                this.columnBaseMaterialID = new global::System.Data.DataColumn("BaseMaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseMaterialID);
                this.columnBenchMaterialID = new global::System.Data.DataColumn("BenchMaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBenchMaterialID);
                this.columnChannelMaterialID = new global::System.Data.DataColumn("ChannelMaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChannelMaterialID);
                this.columnConeMaterialID = new global::System.Data.DataColumn("ConeMaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConeMaterialID);
                this.columnRingMaterialID = new global::System.Data.DataColumn("RingMaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRingMaterialID);
                this.columnStepMaterialID = new global::System.Data.DataColumn("StepMaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStepMaterialID);
                this.columnWallMaterialID = new global::System.Data.DataColumn("WallMaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWallMaterialID);
                this.columnAccessTypeID = new global::System.Data.DataColumn("AccessTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessTypeID);
                this.columnSurfaceCoverID = new global::System.Data.DataColumn("SurfaceCoverID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurfaceCoverID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFeatureID}, true));
                this.columnFeatureID.AutoIncrement = true;
                this.columnFeatureID.AllowDBNull = false;
                this.columnFeatureID.ReadOnly = true;
                this.columnFeatureID.Unique = true;
                this.columnCID.ReadOnly = true;
                this.columnCID.MaxLength = 15;
                this.columnFeatureClassID.ReadOnly = true;
                this.columnLifecycleStatusID.ReadOnly = true;
                this.columnManholeTypeID.ReadOnly = true;
                this.columnCoverTypeID.ReadOnly = true;
                this.columnFrameTypeID.ReadOnly = true;
                this.columnBaseMaterialID.ReadOnly = true;
                this.columnBenchMaterialID.ReadOnly = true;
                this.columnChannelMaterialID.ReadOnly = true;
                this.columnConeMaterialID.ReadOnly = true;
                this.columnRingMaterialID.ReadOnly = true;
                this.columnStepMaterialID.ReadOnly = true;
                this.columnWallMaterialID.ReadOnly = true;
                this.columnAccessTypeID.ReadOnly = true;
                this.columnSurfaceCoverID.ReadOnly = true;
                this.columnComment.ReadOnly = true;
                this.columnComment.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholePropertiesRow NewGetSanitaryManholePropertiesRow() {
                return ((GetSanitaryManholePropertiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetSanitaryManholePropertiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetSanitaryManholePropertiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSanitaryManholePropertiesRowChanged != null)) {
                    this.GetSanitaryManholePropertiesRowChanged(this, new GetSanitaryManholePropertiesRowChangeEvent(((GetSanitaryManholePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSanitaryManholePropertiesRowChanging != null)) {
                    this.GetSanitaryManholePropertiesRowChanging(this, new GetSanitaryManholePropertiesRowChangeEvent(((GetSanitaryManholePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSanitaryManholePropertiesRowDeleted != null)) {
                    this.GetSanitaryManholePropertiesRowDeleted(this, new GetSanitaryManholePropertiesRowChangeEvent(((GetSanitaryManholePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSanitaryManholePropertiesRowDeleting != null)) {
                    this.GetSanitaryManholePropertiesRowDeleting(this, new GetSanitaryManholePropertiesRowChangeEvent(((GetSanitaryManholePropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSanitaryManholePropertiesRow(GetSanitaryManholePropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F84121SanitaryManholePropertiesData ds = new F84121SanitaryManholePropertiesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSanitaryManholePropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSanitaryManholePropertiesRow : global::System.Data.DataRow {
            
            private GetSanitaryManholePropertiesDataTable tableGetSanitaryManholeProperties;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSanitaryManholePropertiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSanitaryManholeProperties = ((GetSanitaryManholePropertiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureID {
                get {
                    return ((int)(this[this.tableGetSanitaryManholeProperties.FeatureIDColumn]));
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.FeatureIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CID {
                get {
                    try {
                        return ((string)(this[this.tableGetSanitaryManholeProperties.CIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CID\' in table \'GetSanitaryManholeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.CIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.FeatureClassIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeatureClassID\' in table \'GetSanitaryManholeProperties\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.FeatureClassIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnabled {
                get {
                    try {
                        return ((bool)(this[this.tableGetSanitaryManholeProperties.IsEnabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsEnabled\' in table \'GetSanitaryManholeProperties\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.IsEnabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrivate {
                get {
                    try {
                        return ((bool)(this[this.tableGetSanitaryManholeProperties.IsPrivateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrivate\' in table \'GetSanitaryManholeProperties\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.IsPrivateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BarrelDiameter {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryManholeProperties.BarrelDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarrelDiameter\' in table \'GetSanitaryManholeProperties\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.BarrelDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CoverDiameter {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryManholeProperties.CoverDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoverDiameter\' in table \'GetSanitaryManholeProperties\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.CoverDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RingElevation {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryManholeProperties.RingElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RingElevation\' in table \'GetSanitaryManholeProperties\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.RingElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FlowElevation {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryManholeProperties.FlowElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowElevation\' in table \'GetSanitaryManholeProperties\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.FlowElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Depth {
                get {
                    try {
                        return ((decimal)(this[this.tableGetSanitaryManholeProperties.DepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depth\' in table \'GetSanitaryManholeProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.DepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LifecycleStatusID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.LifecycleStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LifecycleStatusID\' in table \'GetSanitaryManholeProperties\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.LifecycleStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManholeTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.ManholeTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManholeTypeID\' in table \'GetSanitaryManholeProperties\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.ManholeTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CoverTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.CoverTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoverTypeID\' in table \'GetSanitaryManholeProperties\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.CoverTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FrameTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.FrameTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FrameTypeID\' in table \'GetSanitaryManholeProperties\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.FrameTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseMaterialID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.BaseMaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseMaterialID\' in table \'GetSanitaryManholeProperties\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.BaseMaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BenchMaterialID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.BenchMaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BenchMaterialID\' in table \'GetSanitaryManholeProperties\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.BenchMaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChannelMaterialID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.ChannelMaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChannelMaterialID\' in table \'GetSanitaryManholeProperties\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.ChannelMaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConeMaterialID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.ConeMaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConeMaterialID\' in table \'GetSanitaryManholeProperties\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.ConeMaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RingMaterialID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.RingMaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RingMaterialID\' in table \'GetSanitaryManholeProperties\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.RingMaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StepMaterialID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.StepMaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StepMaterialID\' in table \'GetSanitaryManholeProperties\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.StepMaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WallMaterialID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.WallMaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WallMaterialID\' in table \'GetSanitaryManholeProperties\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.WallMaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AccessTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.AccessTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessTypeID\' in table \'GetSanitaryManholeProperties\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.AccessTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurfaceCoverID {
                get {
                    try {
                        return ((int)(this[this.tableGetSanitaryManholeProperties.SurfaceCoverIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurfaceCoverID\' in table \'GetSanitaryManholeProperties\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.SurfaceCoverIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableGetSanitaryManholeProperties.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'GetSanitaryManholeProperties\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetSanitaryManholeProperties.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.CIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIDNull() {
                this[this.tableGetSanitaryManholeProperties.CIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureClassIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.FeatureClassIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureClassIDNull() {
                this[this.tableGetSanitaryManholeProperties.FeatureClassIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsEnabledNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.IsEnabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsEnabledNull() {
                this[this.tableGetSanitaryManholeProperties.IsEnabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrivateNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.IsPrivateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrivateNull() {
                this[this.tableGetSanitaryManholeProperties.IsPrivateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarrelDiameterNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.BarrelDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarrelDiameterNull() {
                this[this.tableGetSanitaryManholeProperties.BarrelDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoverDiameterNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.CoverDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoverDiameterNull() {
                this[this.tableGetSanitaryManholeProperties.CoverDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRingElevationNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.RingElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRingElevationNull() {
                this[this.tableGetSanitaryManholeProperties.RingElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowElevationNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.FlowElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowElevationNull() {
                this[this.tableGetSanitaryManholeProperties.FlowElevationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepthNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.DepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepthNull() {
                this[this.tableGetSanitaryManholeProperties.DepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLifecycleStatusIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.LifecycleStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLifecycleStatusIDNull() {
                this[this.tableGetSanitaryManholeProperties.LifecycleStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManholeTypeIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.ManholeTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManholeTypeIDNull() {
                this[this.tableGetSanitaryManholeProperties.ManholeTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoverTypeIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.CoverTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoverTypeIDNull() {
                this[this.tableGetSanitaryManholeProperties.CoverTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrameTypeIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.FrameTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrameTypeIDNull() {
                this[this.tableGetSanitaryManholeProperties.FrameTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseMaterialIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.BaseMaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseMaterialIDNull() {
                this[this.tableGetSanitaryManholeProperties.BaseMaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBenchMaterialIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.BenchMaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBenchMaterialIDNull() {
                this[this.tableGetSanitaryManholeProperties.BenchMaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChannelMaterialIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.ChannelMaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChannelMaterialIDNull() {
                this[this.tableGetSanitaryManholeProperties.ChannelMaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConeMaterialIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.ConeMaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConeMaterialIDNull() {
                this[this.tableGetSanitaryManholeProperties.ConeMaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRingMaterialIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.RingMaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRingMaterialIDNull() {
                this[this.tableGetSanitaryManholeProperties.RingMaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStepMaterialIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.StepMaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStepMaterialIDNull() {
                this[this.tableGetSanitaryManholeProperties.StepMaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWallMaterialIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.WallMaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWallMaterialIDNull() {
                this[this.tableGetSanitaryManholeProperties.WallMaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.AccessTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeIDNull() {
                this[this.tableGetSanitaryManholeProperties.AccessTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurfaceCoverIDNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.SurfaceCoverIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurfaceCoverIDNull() {
                this[this.tableGetSanitaryManholeProperties.SurfaceCoverIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableGetSanitaryManholeProperties.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableGetSanitaryManholeProperties.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSanitaryManholePropertiesRowChangeEvent : global::System.EventArgs {
            
            private GetSanitaryManholePropertiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholePropertiesRowChangeEvent(GetSanitaryManholePropertiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSanitaryManholePropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591