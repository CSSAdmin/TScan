//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TerraScan.BusinessEntities {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("F36032LandCodesData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class F36032LandCodesData : global::System.Data.DataSet {
        
        private ListLandCodeDetailsDataTable tableListLandCodeDetails;
        
        private ListLandType1DataTable tableListLandType1;
        
        private ListLandCodeDataTable tableListLandCode;
        
        private ListLandType2DataTable tableListLandType2;
        
        private ListLandType3DataTable tableListLandType3;
        
        private GetConfigRollYearDataTable tableGetConfigRollYear;
        
        private SaveLandCodeDetailsDataTable tableSaveLandCodeDetails;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public F36032LandCodesData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected F36032LandCodesData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ListLandCodeDetails"] != null)) {
                    base.Tables.Add(new ListLandCodeDetailsDataTable(ds.Tables["ListLandCodeDetails"]));
                }
                if ((ds.Tables["ListLandType1"] != null)) {
                    base.Tables.Add(new ListLandType1DataTable(ds.Tables["ListLandType1"]));
                }
                if ((ds.Tables["ListLandCode"] != null)) {
                    base.Tables.Add(new ListLandCodeDataTable(ds.Tables["ListLandCode"]));
                }
                if ((ds.Tables["ListLandType2"] != null)) {
                    base.Tables.Add(new ListLandType2DataTable(ds.Tables["ListLandType2"]));
                }
                if ((ds.Tables["ListLandType3"] != null)) {
                    base.Tables.Add(new ListLandType3DataTable(ds.Tables["ListLandType3"]));
                }
                if ((ds.Tables["GetConfigRollYear"] != null)) {
                    base.Tables.Add(new GetConfigRollYearDataTable(ds.Tables["GetConfigRollYear"]));
                }
                if ((ds.Tables["SaveLandCodeDetails"] != null)) {
                    base.Tables.Add(new SaveLandCodeDetailsDataTable(ds.Tables["SaveLandCodeDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandCodeDetailsDataTable ListLandCodeDetails {
            get {
                return this.tableListLandCodeDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandType1DataTable ListLandType1 {
            get {
                return this.tableListLandType1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandCodeDataTable ListLandCode {
            get {
                return this.tableListLandCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandType2DataTable ListLandType2 {
            get {
                return this.tableListLandType2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListLandType3DataTable ListLandType3 {
            get {
                return this.tableListLandType3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetConfigRollYearDataTable GetConfigRollYear {
            get {
                return this.tableGetConfigRollYear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SaveLandCodeDetailsDataTable SaveLandCodeDetails {
            get {
                return this.tableSaveLandCodeDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            F36032LandCodesData cln = ((F36032LandCodesData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ListLandCodeDetails"] != null)) {
                    base.Tables.Add(new ListLandCodeDetailsDataTable(ds.Tables["ListLandCodeDetails"]));
                }
                if ((ds.Tables["ListLandType1"] != null)) {
                    base.Tables.Add(new ListLandType1DataTable(ds.Tables["ListLandType1"]));
                }
                if ((ds.Tables["ListLandCode"] != null)) {
                    base.Tables.Add(new ListLandCodeDataTable(ds.Tables["ListLandCode"]));
                }
                if ((ds.Tables["ListLandType2"] != null)) {
                    base.Tables.Add(new ListLandType2DataTable(ds.Tables["ListLandType2"]));
                }
                if ((ds.Tables["ListLandType3"] != null)) {
                    base.Tables.Add(new ListLandType3DataTable(ds.Tables["ListLandType3"]));
                }
                if ((ds.Tables["GetConfigRollYear"] != null)) {
                    base.Tables.Add(new GetConfigRollYearDataTable(ds.Tables["GetConfigRollYear"]));
                }
                if ((ds.Tables["SaveLandCodeDetails"] != null)) {
                    base.Tables.Add(new SaveLandCodeDetailsDataTable(ds.Tables["SaveLandCodeDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableListLandCodeDetails = ((ListLandCodeDetailsDataTable)(base.Tables["ListLandCodeDetails"]));
            if ((initTable == true)) {
                if ((this.tableListLandCodeDetails != null)) {
                    this.tableListLandCodeDetails.InitVars();
                }
            }
            this.tableListLandType1 = ((ListLandType1DataTable)(base.Tables["ListLandType1"]));
            if ((initTable == true)) {
                if ((this.tableListLandType1 != null)) {
                    this.tableListLandType1.InitVars();
                }
            }
            this.tableListLandCode = ((ListLandCodeDataTable)(base.Tables["ListLandCode"]));
            if ((initTable == true)) {
                if ((this.tableListLandCode != null)) {
                    this.tableListLandCode.InitVars();
                }
            }
            this.tableListLandType2 = ((ListLandType2DataTable)(base.Tables["ListLandType2"]));
            if ((initTable == true)) {
                if ((this.tableListLandType2 != null)) {
                    this.tableListLandType2.InitVars();
                }
            }
            this.tableListLandType3 = ((ListLandType3DataTable)(base.Tables["ListLandType3"]));
            if ((initTable == true)) {
                if ((this.tableListLandType3 != null)) {
                    this.tableListLandType3.InitVars();
                }
            }
            this.tableGetConfigRollYear = ((GetConfigRollYearDataTable)(base.Tables["GetConfigRollYear"]));
            if ((initTable == true)) {
                if ((this.tableGetConfigRollYear != null)) {
                    this.tableGetConfigRollYear.InitVars();
                }
            }
            this.tableSaveLandCodeDetails = ((SaveLandCodeDetailsDataTable)(base.Tables["SaveLandCodeDetails"]));
            if ((initTable == true)) {
                if ((this.tableSaveLandCodeDetails != null)) {
                    this.tableSaveLandCodeDetails.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "F36032LandCodesData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/F36032LandCodesData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableListLandCodeDetails = new ListLandCodeDetailsDataTable();
            base.Tables.Add(this.tableListLandCodeDetails);
            this.tableListLandType1 = new ListLandType1DataTable();
            base.Tables.Add(this.tableListLandType1);
            this.tableListLandCode = new ListLandCodeDataTable();
            base.Tables.Add(this.tableListLandCode);
            this.tableListLandType2 = new ListLandType2DataTable();
            base.Tables.Add(this.tableListLandType2);
            this.tableListLandType3 = new ListLandType3DataTable();
            base.Tables.Add(this.tableListLandType3);
            this.tableGetConfigRollYear = new GetConfigRollYearDataTable();
            base.Tables.Add(this.tableGetConfigRollYear);
            this.tableSaveLandCodeDetails = new SaveLandCodeDetailsDataTable();
            base.Tables.Add(this.tableSaveLandCodeDetails);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandCodeDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandType1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandCode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandType2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListLandType3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetConfigRollYear() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSaveLandCodeDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            F36032LandCodesData ds = new F36032LandCodesData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ListLandCodeDetailsRowChangeEventHandler(object sender, ListLandCodeDetailsRowChangeEvent e);
        
        public delegate void ListLandType1RowChangeEventHandler(object sender, ListLandType1RowChangeEvent e);
        
        public delegate void ListLandCodeRowChangeEventHandler(object sender, ListLandCodeRowChangeEvent e);
        
        public delegate void ListLandType2RowChangeEventHandler(object sender, ListLandType2RowChangeEvent e);
        
        public delegate void ListLandType3RowChangeEventHandler(object sender, ListLandType3RowChangeEvent e);
        
        public delegate void GetConfigRollYearRowChangeEventHandler(object sender, GetConfigRollYearRowChangeEvent e);
        
        public delegate void SaveLandCodeDetailsRowChangeEventHandler(object sender, SaveLandCodeDetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandCodeDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLandCodeID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnLandTypeID1;
            
            private global::System.Data.DataColumn columnLandType1;
            
            private global::System.Data.DataColumn columnLandTypeID2;
            
            private global::System.Data.DataColumn columnLandType2;
            
            private global::System.Data.DataColumn columnLandTypeID3;
            
            private global::System.Data.DataColumn columnLandType3;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnReportAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDetailsDataTable() {
                this.TableName = "ListLandCodeDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandCodeDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeIDColumn {
                get {
                    return this.columnLandCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID1Column {
                get {
                    return this.columnLandTypeID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType1Column {
                get {
                    return this.columnLandType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID2Column {
                get {
                    return this.columnLandTypeID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType2Column {
                get {
                    return this.columnLandType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID3Column {
                get {
                    return this.columnLandTypeID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType3Column {
                get {
                    return this.columnLandType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportASColumn {
                get {
                    return this.columnReportAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDetailsRow this[int index] {
                get {
                    return ((ListLandCodeDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ListLandCodeDetailsRowChangeEventHandler ListLandCodeDetailsRowChanging;
            
            public event ListLandCodeDetailsRowChangeEventHandler ListLandCodeDetailsRowChanged;
            
            public event ListLandCodeDetailsRowChangeEventHandler ListLandCodeDetailsRowDeleting;
            
            public event ListLandCodeDetailsRowChangeEventHandler ListLandCodeDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandCodeDetailsRow(ListLandCodeDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDetailsRow AddListLandCodeDetailsRow(int LandCodeID, int RollYear, int LandTypeID1, string LandType1, int LandTypeID2, string LandType2, int LandTypeID3, string LandType3, string LandCode, string Description, string ReportAS) {
                ListLandCodeDetailsRow rowListLandCodeDetailsRow = ((ListLandCodeDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandCodeID,
                        RollYear,
                        LandTypeID1,
                        LandType1,
                        LandTypeID2,
                        LandType2,
                        LandTypeID3,
                        LandType3,
                        LandCode,
                        Description,
                        ReportAS};
                rowListLandCodeDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandCodeDetailsRow);
                return rowListLandCodeDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandCodeDetailsDataTable cln = ((ListLandCodeDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandCodeDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandCodeID = base.Columns["LandCodeID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnLandTypeID1 = base.Columns["LandTypeID1"];
                this.columnLandType1 = base.Columns["LandType1"];
                this.columnLandTypeID2 = base.Columns["LandTypeID2"];
                this.columnLandType2 = base.Columns["LandType2"];
                this.columnLandTypeID3 = base.Columns["LandTypeID3"];
                this.columnLandType3 = base.Columns["LandType3"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnReportAS = base.Columns["ReportAS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandCodeID = new global::System.Data.DataColumn("LandCodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCodeID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandTypeID1 = new global::System.Data.DataColumn("LandTypeID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID1);
                this.columnLandType1 = new global::System.Data.DataColumn("LandType1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType1);
                this.columnLandTypeID2 = new global::System.Data.DataColumn("LandTypeID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID2);
                this.columnLandType2 = new global::System.Data.DataColumn("LandType2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType2);
                this.columnLandTypeID3 = new global::System.Data.DataColumn("LandTypeID3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID3);
                this.columnLandType3 = new global::System.Data.DataColumn("LandType3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType3);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnReportAS = new global::System.Data.DataColumn("ReportAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportAS);
                this.columnLandType1.MaxLength = 20;
                this.columnLandType2.MaxLength = 20;
                this.columnLandType3.MaxLength = 20;
                this.columnLandCode.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
                this.columnReportAS.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDetailsRow NewListLandCodeDetailsRow() {
                return ((ListLandCodeDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandCodeDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandCodeDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandCodeDetailsRowChanged != null)) {
                    this.ListLandCodeDetailsRowChanged(this, new ListLandCodeDetailsRowChangeEvent(((ListLandCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandCodeDetailsRowChanging != null)) {
                    this.ListLandCodeDetailsRowChanging(this, new ListLandCodeDetailsRowChangeEvent(((ListLandCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandCodeDetailsRowDeleted != null)) {
                    this.ListLandCodeDetailsRowDeleted(this, new ListLandCodeDetailsRowChangeEvent(((ListLandCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandCodeDetailsRowDeleting != null)) {
                    this.ListLandCodeDetailsRowDeleting(this, new ListLandCodeDetailsRowChangeEvent(((ListLandCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandCodeDetailsRow(ListLandCodeDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36032LandCodesData ds = new F36032LandCodesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandCodeDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandType1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1DataTable() {
                this.TableName = "ListLandType1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandType1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1Row this[int index] {
                get {
                    return ((ListLandType1Row)(this.Rows[index]));
                }
            }
            
            public event ListLandType1RowChangeEventHandler ListLandType1RowChanging;
            
            public event ListLandType1RowChangeEventHandler ListLandType1RowChanged;
            
            public event ListLandType1RowChangeEventHandler ListLandType1RowDeleting;
            
            public event ListLandType1RowChangeEventHandler ListLandType1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandType1Row(ListLandType1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1Row AddListLandType1Row(int LandTypeID, string LandType, int RollYear, string Description) {
                ListLandType1Row rowListLandType1Row = ((ListLandType1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        RollYear,
                        Description};
                rowListLandType1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandType1Row);
                return rowListLandType1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandType1DataTable cln = ((ListLandType1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandType1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLandTypeID.ReadOnly = true;
                this.columnLandType.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1Row NewListLandType1Row() {
                return ((ListLandType1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandType1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandType1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandType1RowChanged != null)) {
                    this.ListLandType1RowChanged(this, new ListLandType1RowChangeEvent(((ListLandType1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandType1RowChanging != null)) {
                    this.ListLandType1RowChanging(this, new ListLandType1RowChangeEvent(((ListLandType1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandType1RowDeleted != null)) {
                    this.ListLandType1RowDeleted(this, new ListLandType1RowChangeEvent(((ListLandType1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandType1RowDeleting != null)) {
                    this.ListLandType1RowDeleting(this, new ListLandType1RowChangeEvent(((ListLandType1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandType1Row(ListLandType1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36032LandCodesData ds = new F36032LandCodesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandType1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandCodeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDataTable() {
                this.TableName = "ListLandCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandCodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow this[int index] {
                get {
                    return ((ListLandCodeRow)(this.Rows[index]));
                }
            }
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowChanging;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowChanged;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowDeleting;
            
            public event ListLandCodeRowChangeEventHandler ListLandCodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandCodeRow(ListLandCodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow AddListLandCodeRow(string LandCode, int RollYear) {
                ListLandCodeRow rowListLandCodeRow = ((ListLandCodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandCode,
                        RollYear};
                rowListLandCodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandCodeRow);
                return rowListLandCodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandCodeDataTable cln = ((ListLandCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandCodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandCode = base.Columns["LandCode"];
                this.columnRollYear = base.Columns["RollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandCode.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow NewListLandCodeRow() {
                return ((ListLandCodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandCodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandCodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandCodeRowChanged != null)) {
                    this.ListLandCodeRowChanged(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandCodeRowChanging != null)) {
                    this.ListLandCodeRowChanging(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandCodeRowDeleted != null)) {
                    this.ListLandCodeRowDeleted(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandCodeRowDeleting != null)) {
                    this.ListLandCodeRowDeleting(this, new ListLandCodeRowChangeEvent(((ListLandCodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandCodeRow(ListLandCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36032LandCodesData ds = new F36032LandCodesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandType2DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2DataTable() {
                this.TableName = "ListLandType2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandType2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2Row this[int index] {
                get {
                    return ((ListLandType2Row)(this.Rows[index]));
                }
            }
            
            public event ListLandType2RowChangeEventHandler ListLandType2RowChanging;
            
            public event ListLandType2RowChangeEventHandler ListLandType2RowChanged;
            
            public event ListLandType2RowChangeEventHandler ListLandType2RowDeleting;
            
            public event ListLandType2RowChangeEventHandler ListLandType2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandType2Row(ListLandType2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2Row AddListLandType2Row(int LandTypeID, string LandType, int RollYear, string Description) {
                ListLandType2Row rowListLandType2Row = ((ListLandType2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        RollYear,
                        Description};
                rowListLandType2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandType2Row);
                return rowListLandType2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandType2DataTable cln = ((ListLandType2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandType2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLandTypeID.ReadOnly = true;
                this.columnLandType.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2Row NewListLandType2Row() {
                return ((ListLandType2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandType2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandType2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandType2RowChanged != null)) {
                    this.ListLandType2RowChanged(this, new ListLandType2RowChangeEvent(((ListLandType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandType2RowChanging != null)) {
                    this.ListLandType2RowChanging(this, new ListLandType2RowChangeEvent(((ListLandType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandType2RowDeleted != null)) {
                    this.ListLandType2RowDeleted(this, new ListLandType2RowChangeEvent(((ListLandType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandType2RowDeleting != null)) {
                    this.ListLandType2RowDeleting(this, new ListLandType2RowChangeEvent(((ListLandType2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandType2Row(ListLandType2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36032LandCodesData ds = new F36032LandCodesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandType2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListLandType3DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLandTypeID;
            
            private global::System.Data.DataColumn columnLandType;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3DataTable() {
                this.TableName = "ListLandType3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListLandType3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeIDColumn {
                get {
                    return this.columnLandTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeColumn {
                get {
                    return this.columnLandType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3Row this[int index] {
                get {
                    return ((ListLandType3Row)(this.Rows[index]));
                }
            }
            
            public event ListLandType3RowChangeEventHandler ListLandType3RowChanging;
            
            public event ListLandType3RowChangeEventHandler ListLandType3RowChanged;
            
            public event ListLandType3RowChangeEventHandler ListLandType3RowDeleting;
            
            public event ListLandType3RowChangeEventHandler ListLandType3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListLandType3Row(ListLandType3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3Row AddListLandType3Row(int LandTypeID, string LandType, int RollYear, string Description) {
                ListLandType3Row rowListLandType3Row = ((ListLandType3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandTypeID,
                        LandType,
                        RollYear,
                        Description};
                rowListLandType3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowListLandType3Row);
                return rowListLandType3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListLandType3DataTable cln = ((ListLandType3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListLandType3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandTypeID = base.Columns["LandTypeID"];
                this.columnLandType = base.Columns["LandType"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandTypeID = new global::System.Data.DataColumn("LandTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID);
                this.columnLandType = new global::System.Data.DataColumn("LandType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnLandTypeID.ReadOnly = true;
                this.columnLandType.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3Row NewListLandType3Row() {
                return ((ListLandType3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListLandType3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListLandType3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListLandType3RowChanged != null)) {
                    this.ListLandType3RowChanged(this, new ListLandType3RowChangeEvent(((ListLandType3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListLandType3RowChanging != null)) {
                    this.ListLandType3RowChanging(this, new ListLandType3RowChangeEvent(((ListLandType3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListLandType3RowDeleted != null)) {
                    this.ListLandType3RowDeleted(this, new ListLandType3RowChangeEvent(((ListLandType3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListLandType3RowDeleting != null)) {
                    this.ListLandType3RowDeleting(this, new ListLandType3RowChangeEvent(((ListLandType3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListLandType3Row(ListLandType3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36032LandCodesData ds = new F36032LandCodesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListLandType3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetConfigRollYearDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssessmentRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigRollYearDataTable() {
                this.TableName = "GetConfigRollYear";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetConfigRollYearDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetConfigRollYearDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssessmentRollYearColumn {
                get {
                    return this.columnAssessmentRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigRollYearRow this[int index] {
                get {
                    return ((GetConfigRollYearRow)(this.Rows[index]));
                }
            }
            
            public event GetConfigRollYearRowChangeEventHandler GetConfigRollYearRowChanging;
            
            public event GetConfigRollYearRowChangeEventHandler GetConfigRollYearRowChanged;
            
            public event GetConfigRollYearRowChangeEventHandler GetConfigRollYearRowDeleting;
            
            public event GetConfigRollYearRowChangeEventHandler GetConfigRollYearRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetConfigRollYearRow(GetConfigRollYearRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigRollYearRow AddGetConfigRollYearRow(int AssessmentRollYear) {
                GetConfigRollYearRow rowGetConfigRollYearRow = ((GetConfigRollYearRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssessmentRollYear};
                rowGetConfigRollYearRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetConfigRollYearRow);
                return rowGetConfigRollYearRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetConfigRollYearDataTable cln = ((GetConfigRollYearDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetConfigRollYearDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssessmentRollYear = base.Columns["AssessmentRollYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssessmentRollYear = new global::System.Data.DataColumn("AssessmentRollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssessmentRollYear);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigRollYearRow NewGetConfigRollYearRow() {
                return ((GetConfigRollYearRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetConfigRollYearRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetConfigRollYearRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetConfigRollYearRowChanged != null)) {
                    this.GetConfigRollYearRowChanged(this, new GetConfigRollYearRowChangeEvent(((GetConfigRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetConfigRollYearRowChanging != null)) {
                    this.GetConfigRollYearRowChanging(this, new GetConfigRollYearRowChangeEvent(((GetConfigRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetConfigRollYearRowDeleted != null)) {
                    this.GetConfigRollYearRowDeleted(this, new GetConfigRollYearRowChangeEvent(((GetConfigRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetConfigRollYearRowDeleting != null)) {
                    this.GetConfigRollYearRowDeleting(this, new GetConfigRollYearRowChangeEvent(((GetConfigRollYearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetConfigRollYearRow(GetConfigRollYearRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36032LandCodesData ds = new F36032LandCodesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetConfigRollYearDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SaveLandCodeDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLandCodeID;
            
            private global::System.Data.DataColumn columnRollYear;
            
            private global::System.Data.DataColumn columnLandTypeID1;
            
            private global::System.Data.DataColumn columnLandType1;
            
            private global::System.Data.DataColumn columnLandTypeID2;
            
            private global::System.Data.DataColumn columnLandType2;
            
            private global::System.Data.DataColumn columnLandTypeID3;
            
            private global::System.Data.DataColumn columnLandType3;
            
            private global::System.Data.DataColumn columnLandCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnReportAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeDetailsDataTable() {
                this.TableName = "SaveLandCodeDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveLandCodeDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SaveLandCodeDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeIDColumn {
                get {
                    return this.columnLandCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollYearColumn {
                get {
                    return this.columnRollYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID1Column {
                get {
                    return this.columnLandTypeID1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType1Column {
                get {
                    return this.columnLandType1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID2Column {
                get {
                    return this.columnLandTypeID2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType2Column {
                get {
                    return this.columnLandType2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandTypeID3Column {
                get {
                    return this.columnLandTypeID3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandType3Column {
                get {
                    return this.columnLandType3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LandCodeColumn {
                get {
                    return this.columnLandCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportASColumn {
                get {
                    return this.columnReportAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeDetailsRow this[int index] {
                get {
                    return ((SaveLandCodeDetailsRow)(this.Rows[index]));
                }
            }
            
            public event SaveLandCodeDetailsRowChangeEventHandler SaveLandCodeDetailsRowChanging;
            
            public event SaveLandCodeDetailsRowChangeEventHandler SaveLandCodeDetailsRowChanged;
            
            public event SaveLandCodeDetailsRowChangeEventHandler SaveLandCodeDetailsRowDeleting;
            
            public event SaveLandCodeDetailsRowChangeEventHandler SaveLandCodeDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSaveLandCodeDetailsRow(SaveLandCodeDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeDetailsRow AddSaveLandCodeDetailsRow(int LandCodeID, int RollYear, int LandTypeID1, string LandType1, int LandTypeID2, string LandType2, int LandTypeID3, string LandType3, string LandCode, string Description, string ReportAS) {
                SaveLandCodeDetailsRow rowSaveLandCodeDetailsRow = ((SaveLandCodeDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LandCodeID,
                        RollYear,
                        LandTypeID1,
                        LandType1,
                        LandTypeID2,
                        LandType2,
                        LandTypeID3,
                        LandType3,
                        LandCode,
                        Description,
                        ReportAS};
                rowSaveLandCodeDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSaveLandCodeDetailsRow);
                return rowSaveLandCodeDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SaveLandCodeDetailsDataTable cln = ((SaveLandCodeDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SaveLandCodeDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLandCodeID = base.Columns["LandCodeID"];
                this.columnRollYear = base.Columns["RollYear"];
                this.columnLandTypeID1 = base.Columns["LandTypeID1"];
                this.columnLandType1 = base.Columns["LandType1"];
                this.columnLandTypeID2 = base.Columns["LandTypeID2"];
                this.columnLandType2 = base.Columns["LandType2"];
                this.columnLandTypeID3 = base.Columns["LandTypeID3"];
                this.columnLandType3 = base.Columns["LandType3"];
                this.columnLandCode = base.Columns["LandCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnReportAS = base.Columns["ReportAS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLandCodeID = new global::System.Data.DataColumn("LandCodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCodeID);
                this.columnRollYear = new global::System.Data.DataColumn("RollYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollYear);
                this.columnLandTypeID1 = new global::System.Data.DataColumn("LandTypeID1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID1);
                this.columnLandType1 = new global::System.Data.DataColumn("LandType1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType1);
                this.columnLandTypeID2 = new global::System.Data.DataColumn("LandTypeID2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID2);
                this.columnLandType2 = new global::System.Data.DataColumn("LandType2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType2);
                this.columnLandTypeID3 = new global::System.Data.DataColumn("LandTypeID3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandTypeID3);
                this.columnLandType3 = new global::System.Data.DataColumn("LandType3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandType3);
                this.columnLandCode = new global::System.Data.DataColumn("LandCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLandCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnReportAS = new global::System.Data.DataColumn("ReportAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportAS);
                this.columnLandType1.MaxLength = 20;
                this.columnLandType2.MaxLength = 20;
                this.columnLandType3.MaxLength = 20;
                this.columnLandCode.MaxLength = 20;
                this.columnDescription.MaxLength = 50;
                this.columnReportAS.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeDetailsRow NewSaveLandCodeDetailsRow() {
                return ((SaveLandCodeDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SaveLandCodeDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SaveLandCodeDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SaveLandCodeDetailsRowChanged != null)) {
                    this.SaveLandCodeDetailsRowChanged(this, new SaveLandCodeDetailsRowChangeEvent(((SaveLandCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SaveLandCodeDetailsRowChanging != null)) {
                    this.SaveLandCodeDetailsRowChanging(this, new SaveLandCodeDetailsRowChangeEvent(((SaveLandCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SaveLandCodeDetailsRowDeleted != null)) {
                    this.SaveLandCodeDetailsRowDeleted(this, new SaveLandCodeDetailsRowChangeEvent(((SaveLandCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SaveLandCodeDetailsRowDeleting != null)) {
                    this.SaveLandCodeDetailsRowDeleting(this, new SaveLandCodeDetailsRowChangeEvent(((SaveLandCodeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSaveLandCodeDetailsRow(SaveLandCodeDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                F36032LandCodesData ds = new F36032LandCodesData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SaveLandCodeDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandCodeDetailsRow : global::System.Data.DataRow {
            
            private ListLandCodeDetailsDataTable tableListLandCodeDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandCodeDetails = ((ListLandCodeDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandCodeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeDetails.LandCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCodeID\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.LandCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID1 {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeDetails.LandTypeID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID1\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.LandTypeID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType1 {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeDetails.LandType1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType1\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.LandType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID2 {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeDetails.LandTypeID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID2\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.LandTypeID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType2 {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeDetails.LandType2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType2\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.LandType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID3 {
                get {
                    try {
                        return ((int)(this[this.tableListLandCodeDetails.LandTypeID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID3\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.LandTypeID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType3 {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeDetails.LandType3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType3\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.LandType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeDetails.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeDetails.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportAS {
                get {
                    try {
                        return ((string)(this[this.tableListLandCodeDetails.ReportASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportAS\' in table \'ListLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCodeDetails.ReportASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeIDNull() {
                return this.IsNull(this.tableListLandCodeDetails.LandCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeIDNull() {
                this[this.tableListLandCodeDetails.LandCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandCodeDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandCodeDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID1Null() {
                return this.IsNull(this.tableListLandCodeDetails.LandTypeID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID1Null() {
                this[this.tableListLandCodeDetails.LandTypeID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType1Null() {
                return this.IsNull(this.tableListLandCodeDetails.LandType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType1Null() {
                this[this.tableListLandCodeDetails.LandType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID2Null() {
                return this.IsNull(this.tableListLandCodeDetails.LandTypeID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID2Null() {
                this[this.tableListLandCodeDetails.LandTypeID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType2Null() {
                return this.IsNull(this.tableListLandCodeDetails.LandType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType2Null() {
                this[this.tableListLandCodeDetails.LandType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID3Null() {
                return this.IsNull(this.tableListLandCodeDetails.LandTypeID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID3Null() {
                this[this.tableListLandCodeDetails.LandTypeID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType3Null() {
                return this.IsNull(this.tableListLandCodeDetails.LandType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType3Null() {
                this[this.tableListLandCodeDetails.LandType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableListLandCodeDetails.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableListLandCodeDetails.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandCodeDetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandCodeDetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportASNull() {
                return this.IsNull(this.tableListLandCodeDetails.ReportASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportASNull() {
                this[this.tableListLandCodeDetails.ReportASColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandType1Row : global::System.Data.DataRow {
            
            private ListLandType1DataTable tableListLandType1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandType1 = ((ListLandType1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandType1.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'ListLandType1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType1.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tableListLandType1.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'ListLandType1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType1.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListLandType1.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandType1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType1.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListLandType1.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListLandType1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType1.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableListLandType1.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableListLandType1.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableListLandType1.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableListLandType1.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandType1.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandType1.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandType1.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandType1.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandCodeRow : global::System.Data.DataRow {
            
            private ListLandCodeDataTable tableListLandCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandCodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandCode = ((ListLandCodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableListLandCode.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'ListLandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCode.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListLandCode.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandCode.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableListLandCode.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableListLandCode.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandCode.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandCode.RollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandType2Row : global::System.Data.DataRow {
            
            private ListLandType2DataTable tableListLandType2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandType2 = ((ListLandType2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandType2.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'ListLandType2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType2.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tableListLandType2.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'ListLandType2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType2.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListLandType2.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandType2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType2.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListLandType2.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListLandType2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType2.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableListLandType2.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableListLandType2.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableListLandType2.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableListLandType2.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandType2.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandType2.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandType2.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandType2.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListLandType3Row : global::System.Data.DataRow {
            
            private ListLandType3DataTable tableListLandType3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListLandType3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListLandType3 = ((ListLandType3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID {
                get {
                    try {
                        return ((int)(this[this.tableListLandType3.LandTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID\' in table \'ListLandType3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType3.LandTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType {
                get {
                    try {
                        return ((string)(this[this.tableListLandType3.LandTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType\' in table \'ListLandType3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType3.LandTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableListLandType3.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'ListLandType3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType3.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableListLandType3.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ListLandType3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListLandType3.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeIDNull() {
                return this.IsNull(this.tableListLandType3.LandTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeIDNull() {
                this[this.tableListLandType3.LandTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeNull() {
                return this.IsNull(this.tableListLandType3.LandTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeNull() {
                this[this.tableListLandType3.LandTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableListLandType3.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableListLandType3.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableListLandType3.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableListLandType3.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetConfigRollYearRow : global::System.Data.DataRow {
            
            private GetConfigRollYearDataTable tableGetConfigRollYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetConfigRollYearRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetConfigRollYear = ((GetConfigRollYearDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssessmentRollYear {
                get {
                    try {
                        return ((int)(this[this.tableGetConfigRollYear.AssessmentRollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssessmentRollYear\' in table \'GetConfigRollYear\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetConfigRollYear.AssessmentRollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssessmentRollYearNull() {
                return this.IsNull(this.tableGetConfigRollYear.AssessmentRollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssessmentRollYearNull() {
                this[this.tableGetConfigRollYear.AssessmentRollYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SaveLandCodeDetailsRow : global::System.Data.DataRow {
            
            private SaveLandCodeDetailsDataTable tableSaveLandCodeDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SaveLandCodeDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSaveLandCodeDetails = ((SaveLandCodeDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandCodeID {
                get {
                    try {
                        return ((int)(this[this.tableSaveLandCodeDetails.LandCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCodeID\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.LandCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RollYear {
                get {
                    try {
                        return ((int)(this[this.tableSaveLandCodeDetails.RollYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollYear\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.RollYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID1 {
                get {
                    try {
                        return ((int)(this[this.tableSaveLandCodeDetails.LandTypeID1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID1\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.LandTypeID1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType1 {
                get {
                    try {
                        return ((string)(this[this.tableSaveLandCodeDetails.LandType1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType1\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.LandType1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID2 {
                get {
                    try {
                        return ((int)(this[this.tableSaveLandCodeDetails.LandTypeID2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID2\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.LandTypeID2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType2 {
                get {
                    try {
                        return ((string)(this[this.tableSaveLandCodeDetails.LandType2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType2\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.LandType2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LandTypeID3 {
                get {
                    try {
                        return ((int)(this[this.tableSaveLandCodeDetails.LandTypeID3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandTypeID3\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.LandTypeID3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandType3 {
                get {
                    try {
                        return ((string)(this[this.tableSaveLandCodeDetails.LandType3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandType3\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.LandType3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LandCode {
                get {
                    try {
                        return ((string)(this[this.tableSaveLandCodeDetails.LandCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LandCode\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.LandCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSaveLandCodeDetails.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportAS {
                get {
                    try {
                        return ((string)(this[this.tableSaveLandCodeDetails.ReportASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportAS\' in table \'SaveLandCodeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSaveLandCodeDetails.ReportASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeIDNull() {
                return this.IsNull(this.tableSaveLandCodeDetails.LandCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeIDNull() {
                this[this.tableSaveLandCodeDetails.LandCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollYearNull() {
                return this.IsNull(this.tableSaveLandCodeDetails.RollYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollYearNull() {
                this[this.tableSaveLandCodeDetails.RollYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID1Null() {
                return this.IsNull(this.tableSaveLandCodeDetails.LandTypeID1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID1Null() {
                this[this.tableSaveLandCodeDetails.LandTypeID1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType1Null() {
                return this.IsNull(this.tableSaveLandCodeDetails.LandType1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType1Null() {
                this[this.tableSaveLandCodeDetails.LandType1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID2Null() {
                return this.IsNull(this.tableSaveLandCodeDetails.LandTypeID2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID2Null() {
                this[this.tableSaveLandCodeDetails.LandTypeID2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType2Null() {
                return this.IsNull(this.tableSaveLandCodeDetails.LandType2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType2Null() {
                this[this.tableSaveLandCodeDetails.LandType2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandTypeID3Null() {
                return this.IsNull(this.tableSaveLandCodeDetails.LandTypeID3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandTypeID3Null() {
                this[this.tableSaveLandCodeDetails.LandTypeID3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandType3Null() {
                return this.IsNull(this.tableSaveLandCodeDetails.LandType3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandType3Null() {
                this[this.tableSaveLandCodeDetails.LandType3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLandCodeNull() {
                return this.IsNull(this.tableSaveLandCodeDetails.LandCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLandCodeNull() {
                this[this.tableSaveLandCodeDetails.LandCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSaveLandCodeDetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSaveLandCodeDetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportASNull() {
                return this.IsNull(this.tableSaveLandCodeDetails.ReportASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportASNull() {
                this[this.tableSaveLandCodeDetails.ReportASColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandCodeDetailsRowChangeEvent : global::System.EventArgs {
            
            private ListLandCodeDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDetailsRowChangeEvent(ListLandCodeDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandType1RowChangeEvent : global::System.EventArgs {
            
            private ListLandType1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1RowChangeEvent(ListLandType1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandCodeRowChangeEvent : global::System.EventArgs {
            
            private ListLandCodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRowChangeEvent(ListLandCodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandType2RowChangeEvent : global::System.EventArgs {
            
            private ListLandType2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2RowChangeEvent(ListLandType2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListLandType3RowChangeEvent : global::System.EventArgs {
            
            private ListLandType3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3RowChangeEvent(ListLandType3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListLandType3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetConfigRollYearRowChangeEvent : global::System.EventArgs {
            
            private GetConfigRollYearRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigRollYearRowChangeEvent(GetConfigRollYearRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetConfigRollYearRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SaveLandCodeDetailsRowChangeEvent : global::System.EventArgs {
            
            private SaveLandCodeDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeDetailsRowChangeEvent(SaveLandCodeDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SaveLandCodeDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591